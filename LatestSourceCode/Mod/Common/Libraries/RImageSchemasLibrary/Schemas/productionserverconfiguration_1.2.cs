//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace RImageSchemas.Schemas {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ProductionServerConfiguration : DataSet {
        
        private ServerInfoDataTable tableServerInfo;
        
        private TransporterDataTable tableTransporter;
        
        private TransporterCapabilitiesDataTable tableTransporterCapabilities;
        
        private BinDataTable tableBin;
        
        private MailslotDataTable tableMailslot;
        
        private RecorderDataTable tableRecorder;
        
        private RecorderCapabilitiesDataTable tableRecorderCapabilities;
        
        private CacheDataTable tableCache;
        
        private ReaderDataTable tableReader;
        
        private ReaderCapabilitiesDataTable tableReaderCapabilities;
        
        private PrinterDataTable tablePrinter;
        
        private BarcodeScannerDataTable tableBarcodeScanner;
        
        private DataRelation relationRecorder_RecorderCapabilities;
        
        private DataRelation relationRecorder_Cache;
        
        private DataRelation relationReader_ReaderCapabilities;
        
        private DataRelation relationTransporter_TransporterCapabilities;
        
        private DataRelation relationTransporter_Bin;
        
        private DataRelation relationTransporter_Mailslot;
        
        private DataRelation relationTransporter_Recorder;
        
        private DataRelation relationTransporter_Reader;
        
        private DataRelation relationTransporter_Printer;
        
        private DataRelation relationTransporter_BarcodeScanner;
        
        public ProductionServerConfiguration() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ProductionServerConfiguration(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ServerInfo"] != null)) {
                    this.Tables.Add(new ServerInfoDataTable(ds.Tables["ServerInfo"]));
                }
                if ((ds.Tables["Transporter"] != null)) {
                    this.Tables.Add(new TransporterDataTable(ds.Tables["Transporter"]));
                }
                if ((ds.Tables["TransporterCapabilities"] != null)) {
                    this.Tables.Add(new TransporterCapabilitiesDataTable(ds.Tables["TransporterCapabilities"]));
                }
                if ((ds.Tables["Bin"] != null)) {
                    this.Tables.Add(new BinDataTable(ds.Tables["Bin"]));
                }
                if ((ds.Tables["Mailslot"] != null)) {
                    this.Tables.Add(new MailslotDataTable(ds.Tables["Mailslot"]));
                }
                if ((ds.Tables["Recorder"] != null)) {
                    this.Tables.Add(new RecorderDataTable(ds.Tables["Recorder"]));
                }
                if ((ds.Tables["RecorderCapabilities"] != null)) {
                    this.Tables.Add(new RecorderCapabilitiesDataTable(ds.Tables["RecorderCapabilities"]));
                }
                if ((ds.Tables["Cache"] != null)) {
                    this.Tables.Add(new CacheDataTable(ds.Tables["Cache"]));
                }
                if ((ds.Tables["Reader"] != null)) {
                    this.Tables.Add(new ReaderDataTable(ds.Tables["Reader"]));
                }
                if ((ds.Tables["ReaderCapabilities"] != null)) {
                    this.Tables.Add(new ReaderCapabilitiesDataTable(ds.Tables["ReaderCapabilities"]));
                }
                if ((ds.Tables["Printer"] != null)) {
                    this.Tables.Add(new PrinterDataTable(ds.Tables["Printer"]));
                }
                if ((ds.Tables["BarcodeScanner"] != null)) {
                    this.Tables.Add(new BarcodeScannerDataTable(ds.Tables["BarcodeScanner"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerInfoDataTable ServerInfo {
            get {
                return this.tableServerInfo;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TransporterDataTable Transporter {
            get {
                return this.tableTransporter;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TransporterCapabilitiesDataTable TransporterCapabilities {
            get {
                return this.tableTransporterCapabilities;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BinDataTable Bin {
            get {
                return this.tableBin;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MailslotDataTable Mailslot {
            get {
                return this.tableMailslot;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RecorderDataTable Recorder {
            get {
                return this.tableRecorder;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RecorderCapabilitiesDataTable RecorderCapabilities {
            get {
                return this.tableRecorderCapabilities;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CacheDataTable Cache {
            get {
                return this.tableCache;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReaderDataTable Reader {
            get {
                return this.tableReader;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReaderCapabilitiesDataTable ReaderCapabilities {
            get {
                return this.tableReaderCapabilities;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrinterDataTable Printer {
            get {
                return this.tablePrinter;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BarcodeScannerDataTable BarcodeScanner {
            get {
                return this.tableBarcodeScanner;
            }
        }
        
        public override DataSet Clone() {
            ProductionServerConfiguration cln = ((ProductionServerConfiguration)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["ServerInfo"] != null)) {
                this.Tables.Add(new ServerInfoDataTable(ds.Tables["ServerInfo"]));
            }
            if ((ds.Tables["Transporter"] != null)) {
                this.Tables.Add(new TransporterDataTable(ds.Tables["Transporter"]));
            }
            if ((ds.Tables["TransporterCapabilities"] != null)) {
                this.Tables.Add(new TransporterCapabilitiesDataTable(ds.Tables["TransporterCapabilities"]));
            }
            if ((ds.Tables["Bin"] != null)) {
                this.Tables.Add(new BinDataTable(ds.Tables["Bin"]));
            }
            if ((ds.Tables["Mailslot"] != null)) {
                this.Tables.Add(new MailslotDataTable(ds.Tables["Mailslot"]));
            }
            if ((ds.Tables["Recorder"] != null)) {
                this.Tables.Add(new RecorderDataTable(ds.Tables["Recorder"]));
            }
            if ((ds.Tables["RecorderCapabilities"] != null)) {
                this.Tables.Add(new RecorderCapabilitiesDataTable(ds.Tables["RecorderCapabilities"]));
            }
            if ((ds.Tables["Cache"] != null)) {
                this.Tables.Add(new CacheDataTable(ds.Tables["Cache"]));
            }
            if ((ds.Tables["Reader"] != null)) {
                this.Tables.Add(new ReaderDataTable(ds.Tables["Reader"]));
            }
            if ((ds.Tables["ReaderCapabilities"] != null)) {
                this.Tables.Add(new ReaderCapabilitiesDataTable(ds.Tables["ReaderCapabilities"]));
            }
            if ((ds.Tables["Printer"] != null)) {
                this.Tables.Add(new PrinterDataTable(ds.Tables["Printer"]));
            }
            if ((ds.Tables["BarcodeScanner"] != null)) {
                this.Tables.Add(new BarcodeScannerDataTable(ds.Tables["BarcodeScanner"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableServerInfo = ((ServerInfoDataTable)(this.Tables["ServerInfo"]));
            if ((this.tableServerInfo != null)) {
                this.tableServerInfo.InitVars();
            }
            this.tableTransporter = ((TransporterDataTable)(this.Tables["Transporter"]));
            if ((this.tableTransporter != null)) {
                this.tableTransporter.InitVars();
            }
            this.tableTransporterCapabilities = ((TransporterCapabilitiesDataTable)(this.Tables["TransporterCapabilities"]));
            if ((this.tableTransporterCapabilities != null)) {
                this.tableTransporterCapabilities.InitVars();
            }
            this.tableBin = ((BinDataTable)(this.Tables["Bin"]));
            if ((this.tableBin != null)) {
                this.tableBin.InitVars();
            }
            this.tableMailslot = ((MailslotDataTable)(this.Tables["Mailslot"]));
            if ((this.tableMailslot != null)) {
                this.tableMailslot.InitVars();
            }
            this.tableRecorder = ((RecorderDataTable)(this.Tables["Recorder"]));
            if ((this.tableRecorder != null)) {
                this.tableRecorder.InitVars();
            }
            this.tableRecorderCapabilities = ((RecorderCapabilitiesDataTable)(this.Tables["RecorderCapabilities"]));
            if ((this.tableRecorderCapabilities != null)) {
                this.tableRecorderCapabilities.InitVars();
            }
            this.tableCache = ((CacheDataTable)(this.Tables["Cache"]));
            if ((this.tableCache != null)) {
                this.tableCache.InitVars();
            }
            this.tableReader = ((ReaderDataTable)(this.Tables["Reader"]));
            if ((this.tableReader != null)) {
                this.tableReader.InitVars();
            }
            this.tableReaderCapabilities = ((ReaderCapabilitiesDataTable)(this.Tables["ReaderCapabilities"]));
            if ((this.tableReaderCapabilities != null)) {
                this.tableReaderCapabilities.InitVars();
            }
            this.tablePrinter = ((PrinterDataTable)(this.Tables["Printer"]));
            if ((this.tablePrinter != null)) {
                this.tablePrinter.InitVars();
            }
            this.tableBarcodeScanner = ((BarcodeScannerDataTable)(this.Tables["BarcodeScanner"]));
            if ((this.tableBarcodeScanner != null)) {
                this.tableBarcodeScanner.InitVars();
            }
            this.relationRecorder_RecorderCapabilities = this.Relations["Recorder_RecorderCapabilities"];
            this.relationRecorder_Cache = this.Relations["Recorder_Cache"];
            this.relationReader_ReaderCapabilities = this.Relations["Reader_ReaderCapabilities"];
            this.relationTransporter_TransporterCapabilities = this.Relations["Transporter_TransporterCapabilities"];
            this.relationTransporter_Bin = this.Relations["Transporter_Bin"];
            this.relationTransporter_Mailslot = this.Relations["Transporter_Mailslot"];
            this.relationTransporter_Recorder = this.Relations["Transporter_Recorder"];
            this.relationTransporter_Reader = this.Relations["Transporter_Reader"];
            this.relationTransporter_Printer = this.Relations["Transporter_Printer"];
            this.relationTransporter_BarcodeScanner = this.Relations["Transporter_BarcodeScanner"];
        }
        
        private void InitClass() {
            this.DataSetName = "ProductionServerConfiguration";
            this.Prefix = "";
            this.Namespace = "urn:ConvertedDTDs";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableServerInfo = new ServerInfoDataTable();
            this.Tables.Add(this.tableServerInfo);
            this.tableTransporter = new TransporterDataTable();
            this.Tables.Add(this.tableTransporter);
            this.tableTransporterCapabilities = new TransporterCapabilitiesDataTable();
            this.Tables.Add(this.tableTransporterCapabilities);
            this.tableBin = new BinDataTable();
            this.Tables.Add(this.tableBin);
            this.tableMailslot = new MailslotDataTable();
            this.Tables.Add(this.tableMailslot);
            this.tableRecorder = new RecorderDataTable();
            this.Tables.Add(this.tableRecorder);
            this.tableRecorderCapabilities = new RecorderCapabilitiesDataTable();
            this.Tables.Add(this.tableRecorderCapabilities);
            this.tableCache = new CacheDataTable();
            this.Tables.Add(this.tableCache);
            this.tableReader = new ReaderDataTable();
            this.Tables.Add(this.tableReader);
            this.tableReaderCapabilities = new ReaderCapabilitiesDataTable();
            this.Tables.Add(this.tableReaderCapabilities);
            this.tablePrinter = new PrinterDataTable();
            this.Tables.Add(this.tablePrinter);
            this.tableBarcodeScanner = new BarcodeScannerDataTable();
            this.Tables.Add(this.tableBarcodeScanner);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("Transporter_TransporterCapabilities", new DataColumn[] {
                        this.tableTransporter.Transporter_IdColumn}, new DataColumn[] {
                        this.tableTransporterCapabilities.Transporter_IdColumn});
            this.tableTransporterCapabilities.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Transporter_Bin", new DataColumn[] {
                        this.tableTransporter.Transporter_IdColumn}, new DataColumn[] {
                        this.tableBin.Transporter_IdColumn});
            this.tableBin.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Transporter_Mailslot", new DataColumn[] {
                        this.tableTransporter.Transporter_IdColumn}, new DataColumn[] {
                        this.tableMailslot.Transporter_IdColumn});
            this.tableMailslot.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Transporter_Recorder", new DataColumn[] {
                        this.tableTransporter.Transporter_IdColumn}, new DataColumn[] {
                        this.tableRecorder.Transporter_IdColumn});
            this.tableRecorder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Recorder_RecorderCapabilities", new DataColumn[] {
                        this.tableRecorder.Recorder_IdColumn}, new DataColumn[] {
                        this.tableRecorderCapabilities.Recorder_IdColumn});
            this.tableRecorderCapabilities.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Recorder_Cache", new DataColumn[] {
                        this.tableRecorder.Recorder_IdColumn}, new DataColumn[] {
                        this.tableCache.Recorder_IdColumn});
            this.tableCache.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Transporter_Reader", new DataColumn[] {
                        this.tableTransporter.Transporter_IdColumn}, new DataColumn[] {
                        this.tableReader.Transporter_IdColumn});
            this.tableReader.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Reader_ReaderCapabilities", new DataColumn[] {
                        this.tableReader.Reader_IdColumn}, new DataColumn[] {
                        this.tableReaderCapabilities.Reader_IdColumn});
            this.tableReaderCapabilities.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Transporter_Printer", new DataColumn[] {
                        this.tableTransporter.Transporter_IdColumn}, new DataColumn[] {
                        this.tablePrinter.Transporter_IdColumn});
            this.tablePrinter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Transporter_BarcodeScanner", new DataColumn[] {
                        this.tableTransporter.Transporter_IdColumn}, new DataColumn[] {
                        this.tableBarcodeScanner.Transporter_IdColumn});
            this.tableBarcodeScanner.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationRecorder_RecorderCapabilities = new DataRelation("Recorder_RecorderCapabilities", new DataColumn[] {
                        this.tableRecorder.Recorder_IdColumn}, new DataColumn[] {
                        this.tableRecorderCapabilities.Recorder_IdColumn}, false);
            this.relationRecorder_RecorderCapabilities.Nested = true;
            this.Relations.Add(this.relationRecorder_RecorderCapabilities);
            this.relationRecorder_Cache = new DataRelation("Recorder_Cache", new DataColumn[] {
                        this.tableRecorder.Recorder_IdColumn}, new DataColumn[] {
                        this.tableCache.Recorder_IdColumn}, false);
            this.relationRecorder_Cache.Nested = true;
            this.Relations.Add(this.relationRecorder_Cache);
            this.relationReader_ReaderCapabilities = new DataRelation("Reader_ReaderCapabilities", new DataColumn[] {
                        this.tableReader.Reader_IdColumn}, new DataColumn[] {
                        this.tableReaderCapabilities.Reader_IdColumn}, false);
            this.relationReader_ReaderCapabilities.Nested = true;
            this.Relations.Add(this.relationReader_ReaderCapabilities);
            this.relationTransporter_TransporterCapabilities = new DataRelation("Transporter_TransporterCapabilities", new DataColumn[] {
                        this.tableTransporter.Transporter_IdColumn}, new DataColumn[] {
                        this.tableTransporterCapabilities.Transporter_IdColumn}, false);
            this.relationTransporter_TransporterCapabilities.Nested = true;
            this.Relations.Add(this.relationTransporter_TransporterCapabilities);
            this.relationTransporter_Bin = new DataRelation("Transporter_Bin", new DataColumn[] {
                        this.tableTransporter.Transporter_IdColumn}, new DataColumn[] {
                        this.tableBin.Transporter_IdColumn}, false);
            this.relationTransporter_Bin.Nested = true;
            this.Relations.Add(this.relationTransporter_Bin);
            this.relationTransporter_Mailslot = new DataRelation("Transporter_Mailslot", new DataColumn[] {
                        this.tableTransporter.Transporter_IdColumn}, new DataColumn[] {
                        this.tableMailslot.Transporter_IdColumn}, false);
            this.relationTransporter_Mailslot.Nested = true;
            this.Relations.Add(this.relationTransporter_Mailslot);
            this.relationTransporter_Recorder = new DataRelation("Transporter_Recorder", new DataColumn[] {
                        this.tableTransporter.Transporter_IdColumn}, new DataColumn[] {
                        this.tableRecorder.Transporter_IdColumn}, false);
            this.relationTransporter_Recorder.Nested = true;
            this.Relations.Add(this.relationTransporter_Recorder);
            this.relationTransporter_Reader = new DataRelation("Transporter_Reader", new DataColumn[] {
                        this.tableTransporter.Transporter_IdColumn}, new DataColumn[] {
                        this.tableReader.Transporter_IdColumn}, false);
            this.relationTransporter_Reader.Nested = true;
            this.Relations.Add(this.relationTransporter_Reader);
            this.relationTransporter_Printer = new DataRelation("Transporter_Printer", new DataColumn[] {
                        this.tableTransporter.Transporter_IdColumn}, new DataColumn[] {
                        this.tablePrinter.Transporter_IdColumn}, false);
            this.relationTransporter_Printer.Nested = true;
            this.Relations.Add(this.relationTransporter_Printer);
            this.relationTransporter_BarcodeScanner = new DataRelation("Transporter_BarcodeScanner", new DataColumn[] {
                        this.tableTransporter.Transporter_IdColumn}, new DataColumn[] {
                        this.tableBarcodeScanner.Transporter_IdColumn}, false);
            this.relationTransporter_BarcodeScanner.Nested = true;
            this.Relations.Add(this.relationTransporter_BarcodeScanner);
        }
        
        private bool ShouldSerializeServerInfo() {
            return false;
        }
        
        private bool ShouldSerializeTransporter() {
            return false;
        }
        
        private bool ShouldSerializeTransporterCapabilities() {
            return false;
        }
        
        private bool ShouldSerializeBin() {
            return false;
        }
        
        private bool ShouldSerializeMailslot() {
            return false;
        }
        
        private bool ShouldSerializeRecorder() {
            return false;
        }
        
        private bool ShouldSerializeRecorderCapabilities() {
            return false;
        }
        
        private bool ShouldSerializeCache() {
            return false;
        }
        
        private bool ShouldSerializeReader() {
            return false;
        }
        
        private bool ShouldSerializeReaderCapabilities() {
            return false;
        }
        
        private bool ShouldSerializePrinter() {
            return false;
        }
        
        private bool ShouldSerializeBarcodeScanner() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ServerInfoRowChangeEventHandler(object sender, ServerInfoRowChangeEvent e);
        
        public delegate void TransporterRowChangeEventHandler(object sender, TransporterRowChangeEvent e);
        
        public delegate void TransporterCapabilitiesRowChangeEventHandler(object sender, TransporterCapabilitiesRowChangeEvent e);
        
        public delegate void BinRowChangeEventHandler(object sender, BinRowChangeEvent e);
        
        public delegate void MailslotRowChangeEventHandler(object sender, MailslotRowChangeEvent e);
        
        public delegate void RecorderRowChangeEventHandler(object sender, RecorderRowChangeEvent e);
        
        public delegate void RecorderCapabilitiesRowChangeEventHandler(object sender, RecorderCapabilitiesRowChangeEvent e);
        
        public delegate void CacheRowChangeEventHandler(object sender, CacheRowChangeEvent e);
        
        public delegate void ReaderRowChangeEventHandler(object sender, ReaderRowChangeEvent e);
        
        public delegate void ReaderCapabilitiesRowChangeEventHandler(object sender, ReaderCapabilitiesRowChangeEvent e);
        
        public delegate void PrinterRowChangeEventHandler(object sender, PrinterRowChangeEvent e);
        
        public delegate void BarcodeScannerRowChangeEventHandler(object sender, BarcodeScannerRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerInfoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnSoftwareVersion;
            
            private DataColumn columnDescription;
            
            private DataColumn columnHostname;
            
            private DataColumn columnCluster;
            
            private DataColumn columnIsService;
            
            private DataColumn columnIsPasswordSet;
            
            private DataColumn columnSystemFolder;
            
            private DataColumn columnOSVersion;
            
            private DataColumn columnSupportsSCP;
            
            private DataColumn columnSoftwareSuiteVersion;
            
            internal ServerInfoDataTable() : 
                    base("ServerInfo") {
                this.InitClass();
            }
            
            internal ServerInfoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn SoftwareVersionColumn {
                get {
                    return this.columnSoftwareVersion;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn HostnameColumn {
                get {
                    return this.columnHostname;
                }
            }
            
            internal DataColumn ClusterColumn {
                get {
                    return this.columnCluster;
                }
            }
            
            internal DataColumn IsServiceColumn {
                get {
                    return this.columnIsService;
                }
            }
            
            internal DataColumn IsPasswordSetColumn {
                get {
                    return this.columnIsPasswordSet;
                }
            }
            
            internal DataColumn SystemFolderColumn {
                get {
                    return this.columnSystemFolder;
                }
            }
            
            internal DataColumn OSVersionColumn {
                get {
                    return this.columnOSVersion;
                }
            }
            
            internal DataColumn SupportsSCPColumn {
                get {
                    return this.columnSupportsSCP;
                }
            }
            
            internal DataColumn SoftwareSuiteVersionColumn {
                get {
                    return this.columnSoftwareSuiteVersion;
                }
            }
            
            public ServerInfoRow this[int index] {
                get {
                    return ((ServerInfoRow)(this.Rows[index]));
                }
            }
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowChanged;
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowChanging;
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowDeleted;
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowDeleting;
            
            public void AddServerInfoRow(ServerInfoRow row) {
                this.Rows.Add(row);
            }
            
            public ServerInfoRow AddServerInfoRow(string ID, string SoftwareVersion, string Description, string Hostname, string Cluster, string IsService, string IsPasswordSet, string SystemFolder, string OSVersion, string SupportsSCP, string SoftwareSuiteVersion) {
                ServerInfoRow rowServerInfoRow = ((ServerInfoRow)(this.NewRow()));
                rowServerInfoRow.ItemArray = new object[] {
                        ID,
                        SoftwareVersion,
                        Description,
                        Hostname,
                        Cluster,
                        IsService,
                        IsPasswordSet,
                        SystemFolder,
                        OSVersion,
                        SupportsSCP,
                        SoftwareSuiteVersion};
                this.Rows.Add(rowServerInfoRow);
                return rowServerInfoRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ServerInfoDataTable cln = ((ServerInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ServerInfoDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnSoftwareVersion = this.Columns["SoftwareVersion"];
                this.columnDescription = this.Columns["Description"];
                this.columnHostname = this.Columns["Hostname"];
                this.columnCluster = this.Columns["Cluster"];
                this.columnIsService = this.Columns["IsService"];
                this.columnIsPasswordSet = this.Columns["IsPasswordSet"];
                this.columnSystemFolder = this.Columns["SystemFolder"];
                this.columnOSVersion = this.Columns["OSVersion"];
                this.columnSupportsSCP = this.Columns["SupportsSCP"];
                this.columnSoftwareSuiteVersion = this.Columns["SoftwareSuiteVersion"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnID);
                this.columnSoftwareVersion = new DataColumn("SoftwareVersion", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSoftwareVersion);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDescription);
                this.columnHostname = new DataColumn("Hostname", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnHostname);
                this.columnCluster = new DataColumn("Cluster", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCluster);
                this.columnIsService = new DataColumn("IsService", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnIsService);
                this.columnIsPasswordSet = new DataColumn("IsPasswordSet", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnIsPasswordSet);
                this.columnSystemFolder = new DataColumn("SystemFolder", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSystemFolder);
                this.columnOSVersion = new DataColumn("OSVersion", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOSVersion);
                this.columnSupportsSCP = new DataColumn("SupportsSCP", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSupportsSCP);
                this.columnSoftwareSuiteVersion = new DataColumn("SoftwareSuiteVersion", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSoftwareSuiteVersion);
                this.columnID.AllowDBNull = false;
                this.columnID.Namespace = "";
                this.columnSoftwareVersion.AllowDBNull = false;
                this.columnSoftwareVersion.Namespace = "";
                this.columnDescription.Namespace = "";
                this.columnHostname.AllowDBNull = false;
                this.columnHostname.Namespace = "";
                this.columnCluster.AllowDBNull = false;
                this.columnCluster.Namespace = "";
                this.columnIsService.Namespace = "";
                this.columnIsService.DefaultValue = "false";
                this.columnIsPasswordSet.Namespace = "";
                this.columnIsPasswordSet.DefaultValue = "false";
                this.columnSystemFolder.AllowDBNull = false;
                this.columnSystemFolder.Namespace = "";
                this.columnOSVersion.AllowDBNull = false;
                this.columnOSVersion.Namespace = "";
                this.columnSupportsSCP.Namespace = "";
                this.columnSupportsSCP.DefaultValue = "false";
                this.columnSoftwareSuiteVersion.AllowDBNull = false;
                this.columnSoftwareSuiteVersion.Namespace = "";
            }
            
            public ServerInfoRow NewServerInfoRow() {
                return ((ServerInfoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ServerInfoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ServerInfoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerInfoRowChanged != null)) {
                    this.ServerInfoRowChanged(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerInfoRowChanging != null)) {
                    this.ServerInfoRowChanging(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerInfoRowDeleted != null)) {
                    this.ServerInfoRowDeleted(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerInfoRowDeleting != null)) {
                    this.ServerInfoRowDeleting(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveServerInfoRow(ServerInfoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerInfoRow : DataRow {
            
            private ServerInfoDataTable tableServerInfo;
            
            internal ServerInfoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerInfo = ((ServerInfoDataTable)(this.Table));
            }
            
            public string ID {
                get {
                    return ((string)(this[this.tableServerInfo.IDColumn]));
                }
                set {
                    this[this.tableServerInfo.IDColumn] = value;
                }
            }
            
            public string SoftwareVersion {
                get {
                    return ((string)(this[this.tableServerInfo.SoftwareVersionColumn]));
                }
                set {
                    this[this.tableServerInfo.SoftwareVersionColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableServerInfo.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.DescriptionColumn] = value;
                }
            }
            
            public string Hostname {
                get {
                    return ((string)(this[this.tableServerInfo.HostnameColumn]));
                }
                set {
                    this[this.tableServerInfo.HostnameColumn] = value;
                }
            }
            
            public string Cluster {
                get {
                    return ((string)(this[this.tableServerInfo.ClusterColumn]));
                }
                set {
                    this[this.tableServerInfo.ClusterColumn] = value;
                }
            }
            
            public string IsService {
                get {
                    try {
                        return ((string)(this[this.tableServerInfo.IsServiceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.IsServiceColumn] = value;
                }
            }
            
            public string IsPasswordSet {
                get {
                    try {
                        return ((string)(this[this.tableServerInfo.IsPasswordSetColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.IsPasswordSetColumn] = value;
                }
            }
            
            public string SystemFolder {
                get {
                    return ((string)(this[this.tableServerInfo.SystemFolderColumn]));
                }
                set {
                    this[this.tableServerInfo.SystemFolderColumn] = value;
                }
            }
            
            public string OSVersion {
                get {
                    return ((string)(this[this.tableServerInfo.OSVersionColumn]));
                }
                set {
                    this[this.tableServerInfo.OSVersionColumn] = value;
                }
            }
            
            public string SupportsSCP {
                get {
                    try {
                        return ((string)(this[this.tableServerInfo.SupportsSCPColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.SupportsSCPColumn] = value;
                }
            }
            
            public string SoftwareSuiteVersion {
                get {
                    return ((string)(this[this.tableServerInfo.SoftwareSuiteVersionColumn]));
                }
                set {
                    this[this.tableServerInfo.SoftwareSuiteVersionColumn] = value;
                }
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableServerInfo.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableServerInfo.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsServiceNull() {
                return this.IsNull(this.tableServerInfo.IsServiceColumn);
            }
            
            public void SetIsServiceNull() {
                this[this.tableServerInfo.IsServiceColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsPasswordSetNull() {
                return this.IsNull(this.tableServerInfo.IsPasswordSetColumn);
            }
            
            public void SetIsPasswordSetNull() {
                this[this.tableServerInfo.IsPasswordSetColumn] = System.Convert.DBNull;
            }
            
            public bool IsSupportsSCPNull() {
                return this.IsNull(this.tableServerInfo.SupportsSCPColumn);
            }
            
            public void SetSupportsSCPNull() {
                this[this.tableServerInfo.SupportsSCPColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerInfoRowChangeEvent : EventArgs {
            
            private ServerInfoRow eventRow;
            
            private DataRowAction eventAction;
            
            public ServerInfoRowChangeEvent(ServerInfoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ServerInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TransporterDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnType;
            
            private DataColumn columnInquiryString;
            
            private DataColumn columnOffline;
            
            private DataColumn columnTransporter_Id;
            
            internal TransporterDataTable() : 
                    base("Transporter") {
                this.InitClass();
            }
            
            internal TransporterDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            internal DataColumn InquiryStringColumn {
                get {
                    return this.columnInquiryString;
                }
            }
            
            internal DataColumn OfflineColumn {
                get {
                    return this.columnOffline;
                }
            }
            
            internal DataColumn Transporter_IdColumn {
                get {
                    return this.columnTransporter_Id;
                }
            }
            
            public TransporterRow this[int index] {
                get {
                    return ((TransporterRow)(this.Rows[index]));
                }
            }
            
            public event TransporterRowChangeEventHandler TransporterRowChanged;
            
            public event TransporterRowChangeEventHandler TransporterRowChanging;
            
            public event TransporterRowChangeEventHandler TransporterRowDeleted;
            
            public event TransporterRowChangeEventHandler TransporterRowDeleting;
            
            public void AddTransporterRow(TransporterRow row) {
                this.Rows.Add(row);
            }
            
            public TransporterRow AddTransporterRow(string Type, string InquiryString, string Offline) {
                TransporterRow rowTransporterRow = ((TransporterRow)(this.NewRow()));
                rowTransporterRow.ItemArray = new object[] {
                        Type,
                        InquiryString,
                        Offline,
                        null};
                this.Rows.Add(rowTransporterRow);
                return rowTransporterRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TransporterDataTable cln = ((TransporterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TransporterDataTable();
            }
            
            internal void InitVars() {
                this.columnType = this.Columns["Type"];
                this.columnInquiryString = this.Columns["InquiryString"];
                this.columnOffline = this.Columns["Offline"];
                this.columnTransporter_Id = this.Columns["Transporter_Id"];
            }
            
            private void InitClass() {
                this.columnType = new DataColumn("Type", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnType);
                this.columnInquiryString = new DataColumn("InquiryString", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnInquiryString);
                this.columnOffline = new DataColumn("Offline", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOffline);
                this.columnTransporter_Id = new DataColumn("Transporter_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTransporter_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnTransporter_Id}, true));
                this.columnType.AllowDBNull = false;
                this.columnType.Namespace = "";
                this.columnInquiryString.AllowDBNull = false;
                this.columnInquiryString.Namespace = "";
                this.columnOffline.Namespace = "";
                this.columnOffline.DefaultValue = "false";
                this.columnTransporter_Id.AutoIncrement = true;
                this.columnTransporter_Id.AllowDBNull = false;
                this.columnTransporter_Id.Unique = true;
            }
            
            public TransporterRow NewTransporterRow() {
                return ((TransporterRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TransporterRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TransporterRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TransporterRowChanged != null)) {
                    this.TransporterRowChanged(this, new TransporterRowChangeEvent(((TransporterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TransporterRowChanging != null)) {
                    this.TransporterRowChanging(this, new TransporterRowChangeEvent(((TransporterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TransporterRowDeleted != null)) {
                    this.TransporterRowDeleted(this, new TransporterRowChangeEvent(((TransporterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TransporterRowDeleting != null)) {
                    this.TransporterRowDeleting(this, new TransporterRowChangeEvent(((TransporterRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTransporterRow(TransporterRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TransporterRow : DataRow {
            
            private TransporterDataTable tableTransporter;
            
            internal TransporterRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTransporter = ((TransporterDataTable)(this.Table));
            }
            
            public string Type {
                get {
                    return ((string)(this[this.tableTransporter.TypeColumn]));
                }
                set {
                    this[this.tableTransporter.TypeColumn] = value;
                }
            }
            
            public string InquiryString {
                get {
                    return ((string)(this[this.tableTransporter.InquiryStringColumn]));
                }
                set {
                    this[this.tableTransporter.InquiryStringColumn] = value;
                }
            }
            
            public string Offline {
                get {
                    try {
                        return ((string)(this[this.tableTransporter.OfflineColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransporter.OfflineColumn] = value;
                }
            }
            
            public bool IsOfflineNull() {
                return this.IsNull(this.tableTransporter.OfflineColumn);
            }
            
            public void SetOfflineNull() {
                this[this.tableTransporter.OfflineColumn] = System.Convert.DBNull;
            }
            
            public TransporterCapabilitiesRow[] GetTransporterCapabilitiesRows() {
                return ((TransporterCapabilitiesRow[])(this.GetChildRows(this.Table.ChildRelations["Transporter_TransporterCapabilities"])));
            }
            
            public BinRow[] GetBinRows() {
                return ((BinRow[])(this.GetChildRows(this.Table.ChildRelations["Transporter_Bin"])));
            }
            
            public MailslotRow[] GetMailslotRows() {
                return ((MailslotRow[])(this.GetChildRows(this.Table.ChildRelations["Transporter_Mailslot"])));
            }
            
            public RecorderRow[] GetRecorderRows() {
                return ((RecorderRow[])(this.GetChildRows(this.Table.ChildRelations["Transporter_Recorder"])));
            }
            
            public ReaderRow[] GetReaderRows() {
                return ((ReaderRow[])(this.GetChildRows(this.Table.ChildRelations["Transporter_Reader"])));
            }
            
            public PrinterRow[] GetPrinterRows() {
                return ((PrinterRow[])(this.GetChildRows(this.Table.ChildRelations["Transporter_Printer"])));
            }
            
            public BarcodeScannerRow[] GetBarcodeScannerRows() {
                return ((BarcodeScannerRow[])(this.GetChildRows(this.Table.ChildRelations["Transporter_BarcodeScanner"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TransporterRowChangeEvent : EventArgs {
            
            private TransporterRow eventRow;
            
            private DataRowAction eventAction;
            
            public TransporterRowChangeEvent(TransporterRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TransporterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TransporterCapabilitiesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPerfectPrint;
            
            private DataColumn columnMediaType;
            
            private DataColumn columnMediaSize;
            
            private DataColumn columnTransporter_Id;
            
            internal TransporterCapabilitiesDataTable() : 
                    base("TransporterCapabilities") {
                this.InitClass();
            }
            
            internal TransporterCapabilitiesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PerfectPrintColumn {
                get {
                    return this.columnPerfectPrint;
                }
            }
            
            internal DataColumn MediaTypeColumn {
                get {
                    return this.columnMediaType;
                }
            }
            
            internal DataColumn MediaSizeColumn {
                get {
                    return this.columnMediaSize;
                }
            }
            
            internal DataColumn Transporter_IdColumn {
                get {
                    return this.columnTransporter_Id;
                }
            }
            
            public TransporterCapabilitiesRow this[int index] {
                get {
                    return ((TransporterCapabilitiesRow)(this.Rows[index]));
                }
            }
            
            public event TransporterCapabilitiesRowChangeEventHandler TransporterCapabilitiesRowChanged;
            
            public event TransporterCapabilitiesRowChangeEventHandler TransporterCapabilitiesRowChanging;
            
            public event TransporterCapabilitiesRowChangeEventHandler TransporterCapabilitiesRowDeleted;
            
            public event TransporterCapabilitiesRowChangeEventHandler TransporterCapabilitiesRowDeleting;
            
            public void AddTransporterCapabilitiesRow(TransporterCapabilitiesRow row) {
                this.Rows.Add(row);
            }
            
            public TransporterCapabilitiesRow AddTransporterCapabilitiesRow(string PerfectPrint, string MediaType, string MediaSize, TransporterRow parentTransporterRowByTransporter_TransporterCapabilities) {
                TransporterCapabilitiesRow rowTransporterCapabilitiesRow = ((TransporterCapabilitiesRow)(this.NewRow()));
                rowTransporterCapabilitiesRow.ItemArray = new object[] {
                        PerfectPrint,
                        MediaType,
                        MediaSize,
                        parentTransporterRowByTransporter_TransporterCapabilities[3]};
                this.Rows.Add(rowTransporterCapabilitiesRow);
                return rowTransporterCapabilitiesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TransporterCapabilitiesDataTable cln = ((TransporterCapabilitiesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TransporterCapabilitiesDataTable();
            }
            
            internal void InitVars() {
                this.columnPerfectPrint = this.Columns["PerfectPrint"];
                this.columnMediaType = this.Columns["MediaType"];
                this.columnMediaSize = this.Columns["MediaSize"];
                this.columnTransporter_Id = this.Columns["Transporter_Id"];
            }
            
            private void InitClass() {
                this.columnPerfectPrint = new DataColumn("PerfectPrint", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPerfectPrint);
                this.columnMediaType = new DataColumn("MediaType", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnMediaType);
                this.columnMediaSize = new DataColumn("MediaSize", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnMediaSize);
                this.columnTransporter_Id = new DataColumn("Transporter_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTransporter_Id);
                this.columnPerfectPrint.Namespace = "";
                this.columnPerfectPrint.DefaultValue = "false";
                this.columnMediaType.Namespace = "";
                this.columnMediaType.DefaultValue = "CDR";
                this.columnMediaSize.Namespace = "";
                this.columnMediaSize.DefaultValue = "120mm";
            }
            
            public TransporterCapabilitiesRow NewTransporterCapabilitiesRow() {
                return ((TransporterCapabilitiesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TransporterCapabilitiesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TransporterCapabilitiesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TransporterCapabilitiesRowChanged != null)) {
                    this.TransporterCapabilitiesRowChanged(this, new TransporterCapabilitiesRowChangeEvent(((TransporterCapabilitiesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TransporterCapabilitiesRowChanging != null)) {
                    this.TransporterCapabilitiesRowChanging(this, new TransporterCapabilitiesRowChangeEvent(((TransporterCapabilitiesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TransporterCapabilitiesRowDeleted != null)) {
                    this.TransporterCapabilitiesRowDeleted(this, new TransporterCapabilitiesRowChangeEvent(((TransporterCapabilitiesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TransporterCapabilitiesRowDeleting != null)) {
                    this.TransporterCapabilitiesRowDeleting(this, new TransporterCapabilitiesRowChangeEvent(((TransporterCapabilitiesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTransporterCapabilitiesRow(TransporterCapabilitiesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TransporterCapabilitiesRow : DataRow {
            
            private TransporterCapabilitiesDataTable tableTransporterCapabilities;
            
            internal TransporterCapabilitiesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTransporterCapabilities = ((TransporterCapabilitiesDataTable)(this.Table));
            }
            
            public string PerfectPrint {
                get {
                    try {
                        return ((string)(this[this.tableTransporterCapabilities.PerfectPrintColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransporterCapabilities.PerfectPrintColumn] = value;
                }
            }
            
            public string MediaType {
                get {
                    try {
                        return ((string)(this[this.tableTransporterCapabilities.MediaTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransporterCapabilities.MediaTypeColumn] = value;
                }
            }
            
            public string MediaSize {
                get {
                    try {
                        return ((string)(this[this.tableTransporterCapabilities.MediaSizeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTransporterCapabilities.MediaSizeColumn] = value;
                }
            }
            
            public TransporterRow TransporterRow {
                get {
                    return ((TransporterRow)(this.GetParentRow(this.Table.ParentRelations["Transporter_TransporterCapabilities"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Transporter_TransporterCapabilities"]);
                }
            }
            
            public bool IsPerfectPrintNull() {
                return this.IsNull(this.tableTransporterCapabilities.PerfectPrintColumn);
            }
            
            public void SetPerfectPrintNull() {
                this[this.tableTransporterCapabilities.PerfectPrintColumn] = System.Convert.DBNull;
            }
            
            public bool IsMediaTypeNull() {
                return this.IsNull(this.tableTransporterCapabilities.MediaTypeColumn);
            }
            
            public void SetMediaTypeNull() {
                this[this.tableTransporterCapabilities.MediaTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsMediaSizeNull() {
                return this.IsNull(this.tableTransporterCapabilities.MediaSizeColumn);
            }
            
            public void SetMediaSizeNull() {
                this[this.tableTransporterCapabilities.MediaSizeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TransporterCapabilitiesRowChangeEvent : EventArgs {
            
            private TransporterCapabilitiesRow eventRow;
            
            private DataRowAction eventAction;
            
            public TransporterCapabilitiesRowChangeEvent(TransporterCapabilitiesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TransporterCapabilitiesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BinDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnUsage;
            
            private DataColumn columnLevel;
            
            private DataColumn columnTransporter_Id;
            
            internal BinDataTable() : 
                    base("Bin") {
                this.InitClass();
            }
            
            internal BinDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn UsageColumn {
                get {
                    return this.columnUsage;
                }
            }
            
            internal DataColumn LevelColumn {
                get {
                    return this.columnLevel;
                }
            }
            
            internal DataColumn Transporter_IdColumn {
                get {
                    return this.columnTransporter_Id;
                }
            }
            
            public BinRow this[int index] {
                get {
                    return ((BinRow)(this.Rows[index]));
                }
            }
            
            public event BinRowChangeEventHandler BinRowChanged;
            
            public event BinRowChangeEventHandler BinRowChanging;
            
            public event BinRowChangeEventHandler BinRowDeleted;
            
            public event BinRowChangeEventHandler BinRowDeleting;
            
            public void AddBinRow(BinRow row) {
                this.Rows.Add(row);
            }
            
            public BinRow AddBinRow(string Usage, string Level, TransporterRow parentTransporterRowByTransporter_Bin) {
                BinRow rowBinRow = ((BinRow)(this.NewRow()));
                rowBinRow.ItemArray = new object[] {
                        Usage,
                        Level,
                        parentTransporterRowByTransporter_Bin[3]};
                this.Rows.Add(rowBinRow);
                return rowBinRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                BinDataTable cln = ((BinDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new BinDataTable();
            }
            
            internal void InitVars() {
                this.columnUsage = this.Columns["Usage"];
                this.columnLevel = this.Columns["Level"];
                this.columnTransporter_Id = this.Columns["Transporter_Id"];
            }
            
            private void InitClass() {
                this.columnUsage = new DataColumn("Usage", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUsage);
                this.columnLevel = new DataColumn("Level", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnLevel);
                this.columnTransporter_Id = new DataColumn("Transporter_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTransporter_Id);
                this.columnUsage.Namespace = "";
                this.columnUsage.DefaultValue = "Input";
                this.columnLevel.Namespace = "";
            }
            
            public BinRow NewBinRow() {
                return ((BinRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new BinRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(BinRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BinRowChanged != null)) {
                    this.BinRowChanged(this, new BinRowChangeEvent(((BinRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BinRowChanging != null)) {
                    this.BinRowChanging(this, new BinRowChangeEvent(((BinRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BinRowDeleted != null)) {
                    this.BinRowDeleted(this, new BinRowChangeEvent(((BinRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BinRowDeleting != null)) {
                    this.BinRowDeleting(this, new BinRowChangeEvent(((BinRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBinRow(BinRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BinRow : DataRow {
            
            private BinDataTable tableBin;
            
            internal BinRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableBin = ((BinDataTable)(this.Table));
            }
            
            public string Usage {
                get {
                    try {
                        return ((string)(this[this.tableBin.UsageColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBin.UsageColumn] = value;
                }
            }
            
            public string Level {
                get {
                    try {
                        return ((string)(this[this.tableBin.LevelColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBin.LevelColumn] = value;
                }
            }
            
            public TransporterRow TransporterRow {
                get {
                    return ((TransporterRow)(this.GetParentRow(this.Table.ParentRelations["Transporter_Bin"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Transporter_Bin"]);
                }
            }
            
            public bool IsUsageNull() {
                return this.IsNull(this.tableBin.UsageColumn);
            }
            
            public void SetUsageNull() {
                this[this.tableBin.UsageColumn] = System.Convert.DBNull;
            }
            
            public bool IsLevelNull() {
                return this.IsNull(this.tableBin.LevelColumn);
            }
            
            public void SetLevelNull() {
                this[this.tableBin.LevelColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BinRowChangeEvent : EventArgs {
            
            private BinRow eventRow;
            
            private DataRowAction eventAction;
            
            public BinRowChangeEvent(BinRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BinRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MailslotDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnUsage;
            
            private DataColumn columnLevel;
            
            private DataColumn columnNumberOfSlots;
            
            private DataColumn columnTransporter_Id;
            
            internal MailslotDataTable() : 
                    base("Mailslot") {
                this.InitClass();
            }
            
            internal MailslotDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn UsageColumn {
                get {
                    return this.columnUsage;
                }
            }
            
            internal DataColumn LevelColumn {
                get {
                    return this.columnLevel;
                }
            }
            
            internal DataColumn NumberOfSlotsColumn {
                get {
                    return this.columnNumberOfSlots;
                }
            }
            
            internal DataColumn Transporter_IdColumn {
                get {
                    return this.columnTransporter_Id;
                }
            }
            
            public MailslotRow this[int index] {
                get {
                    return ((MailslotRow)(this.Rows[index]));
                }
            }
            
            public event MailslotRowChangeEventHandler MailslotRowChanged;
            
            public event MailslotRowChangeEventHandler MailslotRowChanging;
            
            public event MailslotRowChangeEventHandler MailslotRowDeleted;
            
            public event MailslotRowChangeEventHandler MailslotRowDeleting;
            
            public void AddMailslotRow(MailslotRow row) {
                this.Rows.Add(row);
            }
            
            public MailslotRow AddMailslotRow(string Usage, string Level, string NumberOfSlots, TransporterRow parentTransporterRowByTransporter_Mailslot) {
                MailslotRow rowMailslotRow = ((MailslotRow)(this.NewRow()));
                rowMailslotRow.ItemArray = new object[] {
                        Usage,
                        Level,
                        NumberOfSlots,
                        parentTransporterRowByTransporter_Mailslot[3]};
                this.Rows.Add(rowMailslotRow);
                return rowMailslotRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MailslotDataTable cln = ((MailslotDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MailslotDataTable();
            }
            
            internal void InitVars() {
                this.columnUsage = this.Columns["Usage"];
                this.columnLevel = this.Columns["Level"];
                this.columnNumberOfSlots = this.Columns["NumberOfSlots"];
                this.columnTransporter_Id = this.Columns["Transporter_Id"];
            }
            
            private void InitClass() {
                this.columnUsage = new DataColumn("Usage", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUsage);
                this.columnLevel = new DataColumn("Level", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnLevel);
                this.columnNumberOfSlots = new DataColumn("NumberOfSlots", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnNumberOfSlots);
                this.columnTransporter_Id = new DataColumn("Transporter_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTransporter_Id);
                this.columnUsage.Namespace = "";
                this.columnUsage.DefaultValue = "Unused";
                this.columnLevel.Namespace = "";
                this.columnNumberOfSlots.Namespace = "";
            }
            
            public MailslotRow NewMailslotRow() {
                return ((MailslotRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MailslotRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MailslotRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MailslotRowChanged != null)) {
                    this.MailslotRowChanged(this, new MailslotRowChangeEvent(((MailslotRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MailslotRowChanging != null)) {
                    this.MailslotRowChanging(this, new MailslotRowChangeEvent(((MailslotRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MailslotRowDeleted != null)) {
                    this.MailslotRowDeleted(this, new MailslotRowChangeEvent(((MailslotRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MailslotRowDeleting != null)) {
                    this.MailslotRowDeleting(this, new MailslotRowChangeEvent(((MailslotRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMailslotRow(MailslotRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MailslotRow : DataRow {
            
            private MailslotDataTable tableMailslot;
            
            internal MailslotRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMailslot = ((MailslotDataTable)(this.Table));
            }
            
            public string Usage {
                get {
                    try {
                        return ((string)(this[this.tableMailslot.UsageColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailslot.UsageColumn] = value;
                }
            }
            
            public string Level {
                get {
                    try {
                        return ((string)(this[this.tableMailslot.LevelColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailslot.LevelColumn] = value;
                }
            }
            
            public string NumberOfSlots {
                get {
                    try {
                        return ((string)(this[this.tableMailslot.NumberOfSlotsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMailslot.NumberOfSlotsColumn] = value;
                }
            }
            
            public TransporterRow TransporterRow {
                get {
                    return ((TransporterRow)(this.GetParentRow(this.Table.ParentRelations["Transporter_Mailslot"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Transporter_Mailslot"]);
                }
            }
            
            public bool IsUsageNull() {
                return this.IsNull(this.tableMailslot.UsageColumn);
            }
            
            public void SetUsageNull() {
                this[this.tableMailslot.UsageColumn] = System.Convert.DBNull;
            }
            
            public bool IsLevelNull() {
                return this.IsNull(this.tableMailslot.LevelColumn);
            }
            
            public void SetLevelNull() {
                this[this.tableMailslot.LevelColumn] = System.Convert.DBNull;
            }
            
            public bool IsNumberOfSlotsNull() {
                return this.IsNull(this.tableMailslot.NumberOfSlotsColumn);
            }
            
            public void SetNumberOfSlotsNull() {
                this[this.tableMailslot.NumberOfSlotsColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MailslotRowChangeEvent : EventArgs {
            
            private MailslotRow eventRow;
            
            private DataRowAction eventAction;
            
            public MailslotRowChangeEvent(MailslotRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MailslotRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RecorderDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnInquiryString;
            
            private DataColumn columnOffline;
            
            private DataColumn columnDiscCount;
            
            private DataColumn columnRecorder_Id;
            
            private DataColumn columnTransporter_Id;
            
            internal RecorderDataTable() : 
                    base("Recorder") {
                this.InitClass();
            }
            
            internal RecorderDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn InquiryStringColumn {
                get {
                    return this.columnInquiryString;
                }
            }
            
            internal DataColumn OfflineColumn {
                get {
                    return this.columnOffline;
                }
            }
            
            internal DataColumn DiscCountColumn {
                get {
                    return this.columnDiscCount;
                }
            }
            
            internal DataColumn Recorder_IdColumn {
                get {
                    return this.columnRecorder_Id;
                }
            }
            
            internal DataColumn Transporter_IdColumn {
                get {
                    return this.columnTransporter_Id;
                }
            }
            
            public RecorderRow this[int index] {
                get {
                    return ((RecorderRow)(this.Rows[index]));
                }
            }
            
            public event RecorderRowChangeEventHandler RecorderRowChanged;
            
            public event RecorderRowChangeEventHandler RecorderRowChanging;
            
            public event RecorderRowChangeEventHandler RecorderRowDeleted;
            
            public event RecorderRowChangeEventHandler RecorderRowDeleting;
            
            public void AddRecorderRow(RecorderRow row) {
                this.Rows.Add(row);
            }
            
            public RecorderRow AddRecorderRow(string InquiryString, string Offline, string DiscCount, TransporterRow parentTransporterRowByTransporter_Recorder) {
                RecorderRow rowRecorderRow = ((RecorderRow)(this.NewRow()));
                rowRecorderRow.ItemArray = new object[] {
                        InquiryString,
                        Offline,
                        DiscCount,
                        null,
                        parentTransporterRowByTransporter_Recorder[3]};
                this.Rows.Add(rowRecorderRow);
                return rowRecorderRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                RecorderDataTable cln = ((RecorderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new RecorderDataTable();
            }
            
            internal void InitVars() {
                this.columnInquiryString = this.Columns["InquiryString"];
                this.columnOffline = this.Columns["Offline"];
                this.columnDiscCount = this.Columns["DiscCount"];
                this.columnRecorder_Id = this.Columns["Recorder_Id"];
                this.columnTransporter_Id = this.Columns["Transporter_Id"];
            }
            
            private void InitClass() {
                this.columnInquiryString = new DataColumn("InquiryString", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnInquiryString);
                this.columnOffline = new DataColumn("Offline", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOffline);
                this.columnDiscCount = new DataColumn("DiscCount", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDiscCount);
                this.columnRecorder_Id = new DataColumn("Recorder_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnRecorder_Id);
                this.columnTransporter_Id = new DataColumn("Transporter_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTransporter_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnRecorder_Id}, true));
                this.columnInquiryString.AllowDBNull = false;
                this.columnInquiryString.Namespace = "";
                this.columnOffline.Namespace = "";
                this.columnOffline.DefaultValue = "false";
                this.columnDiscCount.Namespace = "";
                this.columnRecorder_Id.AutoIncrement = true;
                this.columnRecorder_Id.AllowDBNull = false;
                this.columnRecorder_Id.Unique = true;
            }
            
            public RecorderRow NewRecorderRow() {
                return ((RecorderRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new RecorderRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(RecorderRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RecorderRowChanged != null)) {
                    this.RecorderRowChanged(this, new RecorderRowChangeEvent(((RecorderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RecorderRowChanging != null)) {
                    this.RecorderRowChanging(this, new RecorderRowChangeEvent(((RecorderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RecorderRowDeleted != null)) {
                    this.RecorderRowDeleted(this, new RecorderRowChangeEvent(((RecorderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RecorderRowDeleting != null)) {
                    this.RecorderRowDeleting(this, new RecorderRowChangeEvent(((RecorderRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveRecorderRow(RecorderRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RecorderRow : DataRow {
            
            private RecorderDataTable tableRecorder;
            
            internal RecorderRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableRecorder = ((RecorderDataTable)(this.Table));
            }
            
            public string InquiryString {
                get {
                    return ((string)(this[this.tableRecorder.InquiryStringColumn]));
                }
                set {
                    this[this.tableRecorder.InquiryStringColumn] = value;
                }
            }
            
            public string Offline {
                get {
                    try {
                        return ((string)(this[this.tableRecorder.OfflineColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecorder.OfflineColumn] = value;
                }
            }
            
            public string DiscCount {
                get {
                    try {
                        return ((string)(this[this.tableRecorder.DiscCountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecorder.DiscCountColumn] = value;
                }
            }
            
            public TransporterRow TransporterRow {
                get {
                    return ((TransporterRow)(this.GetParentRow(this.Table.ParentRelations["Transporter_Recorder"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Transporter_Recorder"]);
                }
            }
            
            public bool IsOfflineNull() {
                return this.IsNull(this.tableRecorder.OfflineColumn);
            }
            
            public void SetOfflineNull() {
                this[this.tableRecorder.OfflineColumn] = System.Convert.DBNull;
            }
            
            public bool IsDiscCountNull() {
                return this.IsNull(this.tableRecorder.DiscCountColumn);
            }
            
            public void SetDiscCountNull() {
                this[this.tableRecorder.DiscCountColumn] = System.Convert.DBNull;
            }
            
            public RecorderCapabilitiesRow[] GetRecorderCapabilitiesRows() {
                return ((RecorderCapabilitiesRow[])(this.GetChildRows(this.Table.ChildRelations["Recorder_RecorderCapabilities"])));
            }
            
            public CacheRow[] GetCacheRows() {
                return ((CacheRow[])(this.GetChildRows(this.Table.ChildRelations["Recorder_Cache"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RecorderRowChangeEvent : EventArgs {
            
            private RecorderRow eventRow;
            
            private DataRowAction eventAction;
            
            public RecorderRowChangeEvent(RecorderRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public RecorderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RecorderCapabilitiesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn column_CanRecordCD_R;
            
            private DataColumn column_CanRecordDVD_R;
            
            private DataColumn column_CanRecordDVDR_DL;
            
            private DataColumn column_CanRecordPocketCD_R;
            
            private DataColumn column_CanDestroyCD_R;
            
            private DataColumn column_CanDestroyDVD_R;
            
            private DataColumn column_CanDestroyDVDR_DL;
            
            private DataColumn column_CanDestroyPocketCD_R;
            
            private DataColumn columnCanRecordSOQ_CDR;
            
            private DataColumn columnCanRecordSOQ_DVDR;
            
            private DataColumn column_CanRecordSOQ_DVDR_DL;
            
            private DataColumn column_CanRecordDVDR_HD;
            
            private DataColumn column_CanRecordDVDR_BD;
            
            private DataColumn columnCanDestroySOQ_CDR;
            
            private DataColumn columnMaxCDRecordingSpeed;
            
            private DataColumn columnMaxDVDRecordingSpeed;
            
            private DataColumn columnRecorder_Id;
            
            internal RecorderCapabilitiesDataTable() : 
                    base("RecorderCapabilities") {
                this.InitClass();
            }
            
            internal RecorderCapabilitiesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn _CanRecordCD_RColumn {
                get {
                    return this.column_CanRecordCD_R;
                }
            }
            
            internal DataColumn _CanRecordDVD_RColumn {
                get {
                    return this.column_CanRecordDVD_R;
                }
            }
            
            internal DataColumn _CanRecordDVDR_DLColumn {
                get {
                    return this.column_CanRecordDVDR_DL;
                }
            }
            
            internal DataColumn _CanRecordPocketCD_RColumn {
                get {
                    return this.column_CanRecordPocketCD_R;
                }
            }
            
            internal DataColumn _CanDestroyCD_RColumn {
                get {
                    return this.column_CanDestroyCD_R;
                }
            }
            
            internal DataColumn _CanDestroyDVD_RColumn {
                get {
                    return this.column_CanDestroyDVD_R;
                }
            }
            
            internal DataColumn _CanDestroyDVDR_DLColumn {
                get {
                    return this.column_CanDestroyDVDR_DL;
                }
            }
            
            internal DataColumn _CanDestroyPocketCD_RColumn {
                get {
                    return this.column_CanDestroyPocketCD_R;
                }
            }
            
            internal DataColumn CanRecordSOQ_CDRColumn {
                get {
                    return this.columnCanRecordSOQ_CDR;
                }
            }
            
            internal DataColumn CanRecordSOQ_DVDRColumn {
                get {
                    return this.columnCanRecordSOQ_DVDR;
                }
            }
            
            internal DataColumn _CanRecordSOQ_DVDR_DLColumn {
                get {
                    return this.column_CanRecordSOQ_DVDR_DL;
                }
            }
            
            internal DataColumn _CanRecordDVDR_HDColumn {
                get {
                    return this.column_CanRecordDVDR_HD;
                }
            }
            
            internal DataColumn _CanRecordDVDR_BDColumn {
                get {
                    return this.column_CanRecordDVDR_BD;
                }
            }
            
            internal DataColumn CanDestroySOQ_CDRColumn {
                get {
                    return this.columnCanDestroySOQ_CDR;
                }
            }
            
            internal DataColumn MaxCDRecordingSpeedColumn {
                get {
                    return this.columnMaxCDRecordingSpeed;
                }
            }
            
            internal DataColumn MaxDVDRecordingSpeedColumn {
                get {
                    return this.columnMaxDVDRecordingSpeed;
                }
            }
            
            internal DataColumn Recorder_IdColumn {
                get {
                    return this.columnRecorder_Id;
                }
            }
            
            public RecorderCapabilitiesRow this[int index] {
                get {
                    return ((RecorderCapabilitiesRow)(this.Rows[index]));
                }
            }
            
            public event RecorderCapabilitiesRowChangeEventHandler RecorderCapabilitiesRowChanged;
            
            public event RecorderCapabilitiesRowChangeEventHandler RecorderCapabilitiesRowChanging;
            
            public event RecorderCapabilitiesRowChangeEventHandler RecorderCapabilitiesRowDeleted;
            
            public event RecorderCapabilitiesRowChangeEventHandler RecorderCapabilitiesRowDeleting;
            
            public void AddRecorderCapabilitiesRow(RecorderCapabilitiesRow row) {
                this.Rows.Add(row);
            }
            
            public RecorderCapabilitiesRow AddRecorderCapabilitiesRow(
                        string _CanRecordCD_R, 
                        string _CanRecordDVD_R, 
                        string _CanRecordDVDR_DL, 
                        string _CanRecordPocketCD_R, 
                        string _CanDestroyCD_R, 
                        string _CanDestroyDVD_R, 
                        string _CanDestroyDVDR_DL, 
                        string _CanDestroyPocketCD_R, 
                        string CanRecordSOQ_CDR, 
                        string CanRecordSOQ_DVDR, 
                        string _CanRecordSOQ_DVDR_DL, 
                        string _CanRecordDVDR_HD, 
                        string _CanRecordDVDR_BD, 
                        string CanDestroySOQ_CDR, 
                        string MaxCDRecordingSpeed, 
                        string MaxDVDRecordingSpeed, 
                        RecorderRow parentRecorderRowByRecorder_RecorderCapabilities) {
                RecorderCapabilitiesRow rowRecorderCapabilitiesRow = ((RecorderCapabilitiesRow)(this.NewRow()));
                rowRecorderCapabilitiesRow.ItemArray = new object[] {
                        _CanRecordCD_R,
                        _CanRecordDVD_R,
                        _CanRecordDVDR_DL,
                        _CanRecordPocketCD_R,
                        _CanDestroyCD_R,
                        _CanDestroyDVD_R,
                        _CanDestroyDVDR_DL,
                        _CanDestroyPocketCD_R,
                        CanRecordSOQ_CDR,
                        CanRecordSOQ_DVDR,
                        _CanRecordSOQ_DVDR_DL,
                        _CanRecordDVDR_HD,
                        _CanRecordDVDR_BD,
                        CanDestroySOQ_CDR,
                        MaxCDRecordingSpeed,
                        MaxDVDRecordingSpeed,
                        parentRecorderRowByRecorder_RecorderCapabilities[3]};
                this.Rows.Add(rowRecorderCapabilitiesRow);
                return rowRecorderCapabilitiesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                RecorderCapabilitiesDataTable cln = ((RecorderCapabilitiesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new RecorderCapabilitiesDataTable();
            }
            
            internal void InitVars() {
                this.column_CanRecordCD_R = this.Columns["CanRecordCD-R"];
                this.column_CanRecordDVD_R = this.Columns["CanRecordDVD-R"];
                this.column_CanRecordDVDR_DL = this.Columns["CanRecordDVDR-DL"];
                this.column_CanRecordPocketCD_R = this.Columns["CanRecordPocketCD-R"];
                this.column_CanDestroyCD_R = this.Columns["CanDestroyCD-R"];
                this.column_CanDestroyDVD_R = this.Columns["CanDestroyDVD-R"];
                this.column_CanDestroyDVDR_DL = this.Columns["CanDestroyDVDR-DL"];
                this.column_CanDestroyPocketCD_R = this.Columns["CanDestroyPocketCD-R"];
                this.columnCanRecordSOQ_CDR = this.Columns["CanRecordSOQ_CDR"];
                this.columnCanRecordSOQ_DVDR = this.Columns["CanRecordSOQ_DVDR"];
                this.column_CanRecordSOQ_DVDR_DL = this.Columns["CanRecordSOQ_DVDR-DL"];
                this.column_CanRecordDVDR_HD = this.Columns["CanRecordDVDR-HD"];
                this.column_CanRecordDVDR_BD = this.Columns["CanRecordDVDR-BD"];
                this.columnCanDestroySOQ_CDR = this.Columns["CanDestroySOQ_CDR"];
                this.columnMaxCDRecordingSpeed = this.Columns["MaxCDRecordingSpeed"];
                this.columnMaxDVDRecordingSpeed = this.Columns["MaxDVDRecordingSpeed"];
                this.columnRecorder_Id = this.Columns["Recorder_Id"];
            }
            
            private void InitClass() {
                this.column_CanRecordCD_R = new DataColumn("CanRecordCD-R", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.column_CanRecordCD_R);
                this.column_CanRecordDVD_R = new DataColumn("CanRecordDVD-R", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.column_CanRecordDVD_R);
                this.column_CanRecordDVDR_DL = new DataColumn("CanRecordDVDR-DL", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.column_CanRecordDVDR_DL);
                this.column_CanRecordPocketCD_R = new DataColumn("CanRecordPocketCD-R", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.column_CanRecordPocketCD_R);
                this.column_CanDestroyCD_R = new DataColumn("CanDestroyCD-R", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.column_CanDestroyCD_R);
                this.column_CanDestroyDVD_R = new DataColumn("CanDestroyDVD-R", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.column_CanDestroyDVD_R);
                this.column_CanDestroyDVDR_DL = new DataColumn("CanDestroyDVDR-DL", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.column_CanDestroyDVDR_DL);
                this.column_CanDestroyPocketCD_R = new DataColumn("CanDestroyPocketCD-R", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.column_CanDestroyPocketCD_R);
                this.columnCanRecordSOQ_CDR = new DataColumn("CanRecordSOQ_CDR", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCanRecordSOQ_CDR);
                this.columnCanRecordSOQ_DVDR = new DataColumn("CanRecordSOQ_DVDR", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCanRecordSOQ_DVDR);
                this.column_CanRecordSOQ_DVDR_DL = new DataColumn("CanRecordSOQ_DVDR-DL", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.column_CanRecordSOQ_DVDR_DL);
                this.column_CanRecordDVDR_HD = new DataColumn("CanRecordDVDR-HD", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.column_CanRecordDVDR_HD);
                this.column_CanRecordDVDR_BD = new DataColumn("CanRecordDVDR-BD", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.column_CanRecordDVDR_BD);
                this.columnCanDestroySOQ_CDR = new DataColumn("CanDestroySOQ_CDR", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCanDestroySOQ_CDR);
                this.columnMaxCDRecordingSpeed = new DataColumn("MaxCDRecordingSpeed", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnMaxCDRecordingSpeed);
                this.columnMaxDVDRecordingSpeed = new DataColumn("MaxDVDRecordingSpeed", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnMaxDVDRecordingSpeed);
                this.columnRecorder_Id = new DataColumn("Recorder_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnRecorder_Id);
                this.column_CanRecordCD_R.Namespace = "";
                this.column_CanRecordCD_R.DefaultValue = "true";
                this.column_CanRecordDVD_R.Namespace = "";
                this.column_CanRecordDVD_R.DefaultValue = "false";
                this.column_CanRecordDVDR_DL.Namespace = "";
                this.column_CanRecordDVDR_DL.DefaultValue = "false";
                this.column_CanRecordPocketCD_R.Namespace = "";
                this.column_CanRecordPocketCD_R.DefaultValue = "true";
                this.column_CanDestroyCD_R.Namespace = "";
                this.column_CanDestroyCD_R.DefaultValue = "true";
                this.column_CanDestroyDVD_R.Namespace = "";
                this.column_CanDestroyDVD_R.DefaultValue = "false";
                this.column_CanDestroyDVDR_DL.Namespace = "";
                this.column_CanDestroyDVDR_DL.DefaultValue = "false";
                this.column_CanDestroyPocketCD_R.Namespace = "";
                this.column_CanDestroyPocketCD_R.DefaultValue = "true";
                this.columnCanRecordSOQ_CDR.Namespace = "";
                this.columnCanRecordSOQ_CDR.DefaultValue = "false";
                this.columnCanRecordSOQ_DVDR.Namespace = "";
                this.columnCanRecordSOQ_DVDR.DefaultValue = "false";
                this.column_CanRecordSOQ_DVDR_DL.Namespace = "";
                this.column_CanRecordSOQ_DVDR_DL.DefaultValue = "false";
                this.column_CanRecordDVDR_HD.Namespace = "";
                this.column_CanRecordDVDR_HD.DefaultValue = "false";
                this.column_CanRecordDVDR_BD.Namespace = "";
                this.column_CanRecordDVDR_BD.DefaultValue = "false";
                this.columnCanDestroySOQ_CDR.Namespace = "";
                this.columnCanDestroySOQ_CDR.DefaultValue = "false";
                this.columnMaxCDRecordingSpeed.Namespace = "";
                this.columnMaxDVDRecordingSpeed.Namespace = "";
            }
            
            public RecorderCapabilitiesRow NewRecorderCapabilitiesRow() {
                return ((RecorderCapabilitiesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new RecorderCapabilitiesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(RecorderCapabilitiesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RecorderCapabilitiesRowChanged != null)) {
                    this.RecorderCapabilitiesRowChanged(this, new RecorderCapabilitiesRowChangeEvent(((RecorderCapabilitiesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RecorderCapabilitiesRowChanging != null)) {
                    this.RecorderCapabilitiesRowChanging(this, new RecorderCapabilitiesRowChangeEvent(((RecorderCapabilitiesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RecorderCapabilitiesRowDeleted != null)) {
                    this.RecorderCapabilitiesRowDeleted(this, new RecorderCapabilitiesRowChangeEvent(((RecorderCapabilitiesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RecorderCapabilitiesRowDeleting != null)) {
                    this.RecorderCapabilitiesRowDeleting(this, new RecorderCapabilitiesRowChangeEvent(((RecorderCapabilitiesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveRecorderCapabilitiesRow(RecorderCapabilitiesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RecorderCapabilitiesRow : DataRow {
            
            private RecorderCapabilitiesDataTable tableRecorderCapabilities;
            
            internal RecorderCapabilitiesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableRecorderCapabilities = ((RecorderCapabilitiesDataTable)(this.Table));
            }
            
            public string _CanRecordCD_R {
                get {
                    try {
                        return ((string)(this[this.tableRecorderCapabilities._CanRecordCD_RColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecorderCapabilities._CanRecordCD_RColumn] = value;
                }
            }
            
            public string _CanRecordDVD_R {
                get {
                    try {
                        return ((string)(this[this.tableRecorderCapabilities._CanRecordDVD_RColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecorderCapabilities._CanRecordDVD_RColumn] = value;
                }
            }
            
            public string _CanRecordDVDR_DL {
                get {
                    try {
                        return ((string)(this[this.tableRecorderCapabilities._CanRecordDVDR_DLColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecorderCapabilities._CanRecordDVDR_DLColumn] = value;
                }
            }
            
            public string _CanRecordPocketCD_R {
                get {
                    try {
                        return ((string)(this[this.tableRecorderCapabilities._CanRecordPocketCD_RColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecorderCapabilities._CanRecordPocketCD_RColumn] = value;
                }
            }
            
            public string _CanDestroyCD_R {
                get {
                    try {
                        return ((string)(this[this.tableRecorderCapabilities._CanDestroyCD_RColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecorderCapabilities._CanDestroyCD_RColumn] = value;
                }
            }
            
            public string _CanDestroyDVD_R {
                get {
                    try {
                        return ((string)(this[this.tableRecorderCapabilities._CanDestroyDVD_RColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecorderCapabilities._CanDestroyDVD_RColumn] = value;
                }
            }
            
            public string _CanDestroyDVDR_DL {
                get {
                    try {
                        return ((string)(this[this.tableRecorderCapabilities._CanDestroyDVDR_DLColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecorderCapabilities._CanDestroyDVDR_DLColumn] = value;
                }
            }
            
            public string _CanDestroyPocketCD_R {
                get {
                    try {
                        return ((string)(this[this.tableRecorderCapabilities._CanDestroyPocketCD_RColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecorderCapabilities._CanDestroyPocketCD_RColumn] = value;
                }
            }
            
            public string CanRecordSOQ_CDR {
                get {
                    try {
                        return ((string)(this[this.tableRecorderCapabilities.CanRecordSOQ_CDRColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecorderCapabilities.CanRecordSOQ_CDRColumn] = value;
                }
            }
            
            public string CanRecordSOQ_DVDR {
                get {
                    try {
                        return ((string)(this[this.tableRecorderCapabilities.CanRecordSOQ_DVDRColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecorderCapabilities.CanRecordSOQ_DVDRColumn] = value;
                }
            }
            
            public string _CanRecordSOQ_DVDR_DL {
                get {
                    try {
                        return ((string)(this[this.tableRecorderCapabilities._CanRecordSOQ_DVDR_DLColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecorderCapabilities._CanRecordSOQ_DVDR_DLColumn] = value;
                }
            }
            
            public string _CanRecordDVDR_HD {
                get {
                    try {
                        return ((string)(this[this.tableRecorderCapabilities._CanRecordDVDR_HDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecorderCapabilities._CanRecordDVDR_HDColumn] = value;
                }
            }
            
            public string _CanRecordDVDR_BD {
                get {
                    try {
                        return ((string)(this[this.tableRecorderCapabilities._CanRecordDVDR_BDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecorderCapabilities._CanRecordDVDR_BDColumn] = value;
                }
            }
            
            public string CanDestroySOQ_CDR {
                get {
                    try {
                        return ((string)(this[this.tableRecorderCapabilities.CanDestroySOQ_CDRColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecorderCapabilities.CanDestroySOQ_CDRColumn] = value;
                }
            }
            
            public string MaxCDRecordingSpeed {
                get {
                    try {
                        return ((string)(this[this.tableRecorderCapabilities.MaxCDRecordingSpeedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecorderCapabilities.MaxCDRecordingSpeedColumn] = value;
                }
            }
            
            public string MaxDVDRecordingSpeed {
                get {
                    try {
                        return ((string)(this[this.tableRecorderCapabilities.MaxDVDRecordingSpeedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecorderCapabilities.MaxDVDRecordingSpeedColumn] = value;
                }
            }
            
            public RecorderRow RecorderRow {
                get {
                    return ((RecorderRow)(this.GetParentRow(this.Table.ParentRelations["Recorder_RecorderCapabilities"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Recorder_RecorderCapabilities"]);
                }
            }
            
            public bool Is_CanRecordCD_RNull() {
                return this.IsNull(this.tableRecorderCapabilities._CanRecordCD_RColumn);
            }
            
            public void Set_CanRecordCD_RNull() {
                this[this.tableRecorderCapabilities._CanRecordCD_RColumn] = System.Convert.DBNull;
            }
            
            public bool Is_CanRecordDVD_RNull() {
                return this.IsNull(this.tableRecorderCapabilities._CanRecordDVD_RColumn);
            }
            
            public void Set_CanRecordDVD_RNull() {
                this[this.tableRecorderCapabilities._CanRecordDVD_RColumn] = System.Convert.DBNull;
            }
            
            public bool Is_CanRecordDVDR_DLNull() {
                return this.IsNull(this.tableRecorderCapabilities._CanRecordDVDR_DLColumn);
            }
            
            public void Set_CanRecordDVDR_DLNull() {
                this[this.tableRecorderCapabilities._CanRecordDVDR_DLColumn] = System.Convert.DBNull;
            }
            
            public bool Is_CanRecordPocketCD_RNull() {
                return this.IsNull(this.tableRecorderCapabilities._CanRecordPocketCD_RColumn);
            }
            
            public void Set_CanRecordPocketCD_RNull() {
                this[this.tableRecorderCapabilities._CanRecordPocketCD_RColumn] = System.Convert.DBNull;
            }
            
            public bool Is_CanDestroyCD_RNull() {
                return this.IsNull(this.tableRecorderCapabilities._CanDestroyCD_RColumn);
            }
            
            public void Set_CanDestroyCD_RNull() {
                this[this.tableRecorderCapabilities._CanDestroyCD_RColumn] = System.Convert.DBNull;
            }
            
            public bool Is_CanDestroyDVD_RNull() {
                return this.IsNull(this.tableRecorderCapabilities._CanDestroyDVD_RColumn);
            }
            
            public void Set_CanDestroyDVD_RNull() {
                this[this.tableRecorderCapabilities._CanDestroyDVD_RColumn] = System.Convert.DBNull;
            }
            
            public bool Is_CanDestroyDVDR_DLNull() {
                return this.IsNull(this.tableRecorderCapabilities._CanDestroyDVDR_DLColumn);
            }
            
            public void Set_CanDestroyDVDR_DLNull() {
                this[this.tableRecorderCapabilities._CanDestroyDVDR_DLColumn] = System.Convert.DBNull;
            }
            
            public bool Is_CanDestroyPocketCD_RNull() {
                return this.IsNull(this.tableRecorderCapabilities._CanDestroyPocketCD_RColumn);
            }
            
            public void Set_CanDestroyPocketCD_RNull() {
                this[this.tableRecorderCapabilities._CanDestroyPocketCD_RColumn] = System.Convert.DBNull;
            }
            
            public bool IsCanRecordSOQ_CDRNull() {
                return this.IsNull(this.tableRecorderCapabilities.CanRecordSOQ_CDRColumn);
            }
            
            public void SetCanRecordSOQ_CDRNull() {
                this[this.tableRecorderCapabilities.CanRecordSOQ_CDRColumn] = System.Convert.DBNull;
            }
            
            public bool IsCanRecordSOQ_DVDRNull() {
                return this.IsNull(this.tableRecorderCapabilities.CanRecordSOQ_DVDRColumn);
            }
            
            public void SetCanRecordSOQ_DVDRNull() {
                this[this.tableRecorderCapabilities.CanRecordSOQ_DVDRColumn] = System.Convert.DBNull;
            }
            
            public bool Is_CanRecordSOQ_DVDR_DLNull() {
                return this.IsNull(this.tableRecorderCapabilities._CanRecordSOQ_DVDR_DLColumn);
            }
            
            public void Set_CanRecordSOQ_DVDR_DLNull() {
                this[this.tableRecorderCapabilities._CanRecordSOQ_DVDR_DLColumn] = System.Convert.DBNull;
            }
            
            public bool Is_CanRecordDVDR_HDNull() {
                return this.IsNull(this.tableRecorderCapabilities._CanRecordDVDR_HDColumn);
            }
            
            public void Set_CanRecordDVDR_HDNull() {
                this[this.tableRecorderCapabilities._CanRecordDVDR_HDColumn] = System.Convert.DBNull;
            }
            
            public bool Is_CanRecordDVDR_BDNull() {
                return this.IsNull(this.tableRecorderCapabilities._CanRecordDVDR_BDColumn);
            }
            
            public void Set_CanRecordDVDR_BDNull() {
                this[this.tableRecorderCapabilities._CanRecordDVDR_BDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCanDestroySOQ_CDRNull() {
                return this.IsNull(this.tableRecorderCapabilities.CanDestroySOQ_CDRColumn);
            }
            
            public void SetCanDestroySOQ_CDRNull() {
                this[this.tableRecorderCapabilities.CanDestroySOQ_CDRColumn] = System.Convert.DBNull;
            }
            
            public bool IsMaxCDRecordingSpeedNull() {
                return this.IsNull(this.tableRecorderCapabilities.MaxCDRecordingSpeedColumn);
            }
            
            public void SetMaxCDRecordingSpeedNull() {
                this[this.tableRecorderCapabilities.MaxCDRecordingSpeedColumn] = System.Convert.DBNull;
            }
            
            public bool IsMaxDVDRecordingSpeedNull() {
                return this.IsNull(this.tableRecorderCapabilities.MaxDVDRecordingSpeedColumn);
            }
            
            public void SetMaxDVDRecordingSpeedNull() {
                this[this.tableRecorderCapabilities.MaxDVDRecordingSpeedColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RecorderCapabilitiesRowChangeEvent : EventArgs {
            
            private RecorderCapabilitiesRow eventRow;
            
            private DataRowAction eventAction;
            
            public RecorderCapabilitiesRowChangeEvent(RecorderCapabilitiesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public RecorderCapabilitiesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CacheDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnInquiryString;
            
            private DataColumn columnRecorder_Id;
            
            internal CacheDataTable() : 
                    base("Cache") {
                this.InitClass();
            }
            
            internal CacheDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn InquiryStringColumn {
                get {
                    return this.columnInquiryString;
                }
            }
            
            internal DataColumn Recorder_IdColumn {
                get {
                    return this.columnRecorder_Id;
                }
            }
            
            public CacheRow this[int index] {
                get {
                    return ((CacheRow)(this.Rows[index]));
                }
            }
            
            public event CacheRowChangeEventHandler CacheRowChanged;
            
            public event CacheRowChangeEventHandler CacheRowChanging;
            
            public event CacheRowChangeEventHandler CacheRowDeleted;
            
            public event CacheRowChangeEventHandler CacheRowDeleting;
            
            public void AddCacheRow(CacheRow row) {
                this.Rows.Add(row);
            }
            
            public CacheRow AddCacheRow(string InquiryString, RecorderRow parentRecorderRowByRecorder_Cache) {
                CacheRow rowCacheRow = ((CacheRow)(this.NewRow()));
                rowCacheRow.ItemArray = new object[] {
                        InquiryString,
                        parentRecorderRowByRecorder_Cache[3]};
                this.Rows.Add(rowCacheRow);
                return rowCacheRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CacheDataTable cln = ((CacheDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CacheDataTable();
            }
            
            internal void InitVars() {
                this.columnInquiryString = this.Columns["InquiryString"];
                this.columnRecorder_Id = this.Columns["Recorder_Id"];
            }
            
            private void InitClass() {
                this.columnInquiryString = new DataColumn("InquiryString", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnInquiryString);
                this.columnRecorder_Id = new DataColumn("Recorder_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnRecorder_Id);
                this.columnInquiryString.AllowDBNull = false;
                this.columnInquiryString.Namespace = "";
            }
            
            public CacheRow NewCacheRow() {
                return ((CacheRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CacheRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CacheRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CacheRowChanged != null)) {
                    this.CacheRowChanged(this, new CacheRowChangeEvent(((CacheRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CacheRowChanging != null)) {
                    this.CacheRowChanging(this, new CacheRowChangeEvent(((CacheRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CacheRowDeleted != null)) {
                    this.CacheRowDeleted(this, new CacheRowChangeEvent(((CacheRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CacheRowDeleting != null)) {
                    this.CacheRowDeleting(this, new CacheRowChangeEvent(((CacheRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCacheRow(CacheRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CacheRow : DataRow {
            
            private CacheDataTable tableCache;
            
            internal CacheRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCache = ((CacheDataTable)(this.Table));
            }
            
            public string InquiryString {
                get {
                    return ((string)(this[this.tableCache.InquiryStringColumn]));
                }
                set {
                    this[this.tableCache.InquiryStringColumn] = value;
                }
            }
            
            public RecorderRow RecorderRow {
                get {
                    return ((RecorderRow)(this.GetParentRow(this.Table.ParentRelations["Recorder_Cache"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Recorder_Cache"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CacheRowChangeEvent : EventArgs {
            
            private CacheRow eventRow;
            
            private DataRowAction eventAction;
            
            public CacheRowChangeEvent(CacheRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CacheRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ReaderDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnInquiryString;
            
            private DataColumn columnReader_Id;
            
            private DataColumn columnTransporter_Id;
            
            internal ReaderDataTable() : 
                    base("Reader") {
                this.InitClass();
            }
            
            internal ReaderDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn InquiryStringColumn {
                get {
                    return this.columnInquiryString;
                }
            }
            
            internal DataColumn Reader_IdColumn {
                get {
                    return this.columnReader_Id;
                }
            }
            
            internal DataColumn Transporter_IdColumn {
                get {
                    return this.columnTransporter_Id;
                }
            }
            
            public ReaderRow this[int index] {
                get {
                    return ((ReaderRow)(this.Rows[index]));
                }
            }
            
            public event ReaderRowChangeEventHandler ReaderRowChanged;
            
            public event ReaderRowChangeEventHandler ReaderRowChanging;
            
            public event ReaderRowChangeEventHandler ReaderRowDeleted;
            
            public event ReaderRowChangeEventHandler ReaderRowDeleting;
            
            public void AddReaderRow(ReaderRow row) {
                this.Rows.Add(row);
            }
            
            public ReaderRow AddReaderRow(string InquiryString, TransporterRow parentTransporterRowByTransporter_Reader) {
                ReaderRow rowReaderRow = ((ReaderRow)(this.NewRow()));
                rowReaderRow.ItemArray = new object[] {
                        InquiryString,
                        null,
                        parentTransporterRowByTransporter_Reader[3]};
                this.Rows.Add(rowReaderRow);
                return rowReaderRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ReaderDataTable cln = ((ReaderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ReaderDataTable();
            }
            
            internal void InitVars() {
                this.columnInquiryString = this.Columns["InquiryString"];
                this.columnReader_Id = this.Columns["Reader_Id"];
                this.columnTransporter_Id = this.Columns["Transporter_Id"];
            }
            
            private void InitClass() {
                this.columnInquiryString = new DataColumn("InquiryString", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnInquiryString);
                this.columnReader_Id = new DataColumn("Reader_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnReader_Id);
                this.columnTransporter_Id = new DataColumn("Transporter_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTransporter_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnReader_Id}, true));
                this.columnInquiryString.AllowDBNull = false;
                this.columnInquiryString.Namespace = "";
                this.columnReader_Id.AutoIncrement = true;
                this.columnReader_Id.AllowDBNull = false;
                this.columnReader_Id.Unique = true;
            }
            
            public ReaderRow NewReaderRow() {
                return ((ReaderRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ReaderRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ReaderRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReaderRowChanged != null)) {
                    this.ReaderRowChanged(this, new ReaderRowChangeEvent(((ReaderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReaderRowChanging != null)) {
                    this.ReaderRowChanging(this, new ReaderRowChangeEvent(((ReaderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReaderRowDeleted != null)) {
                    this.ReaderRowDeleted(this, new ReaderRowChangeEvent(((ReaderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReaderRowDeleting != null)) {
                    this.ReaderRowDeleting(this, new ReaderRowChangeEvent(((ReaderRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveReaderRow(ReaderRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ReaderRow : DataRow {
            
            private ReaderDataTable tableReader;
            
            internal ReaderRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableReader = ((ReaderDataTable)(this.Table));
            }
            
            public string InquiryString {
                get {
                    return ((string)(this[this.tableReader.InquiryStringColumn]));
                }
                set {
                    this[this.tableReader.InquiryStringColumn] = value;
                }
            }
            
            public TransporterRow TransporterRow {
                get {
                    return ((TransporterRow)(this.GetParentRow(this.Table.ParentRelations["Transporter_Reader"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Transporter_Reader"]);
                }
            }
            
            public ReaderCapabilitiesRow[] GetReaderCapabilitiesRows() {
                return ((ReaderCapabilitiesRow[])(this.GetChildRows(this.Table.ChildRelations["Reader_ReaderCapabilities"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ReaderRowChangeEvent : EventArgs {
            
            private ReaderRow eventRow;
            
            private DataRowAction eventAction;
            
            public ReaderRowChangeEvent(ReaderRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ReaderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ReaderCapabilitiesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCanReadDVD;
            
            private DataColumn column_CanReadDVD_HD;
            
            private DataColumn column_CanReadDVD_BD;
            
            private DataColumn columnReader_Id;
            
            internal ReaderCapabilitiesDataTable() : 
                    base("ReaderCapabilities") {
                this.InitClass();
            }
            
            internal ReaderCapabilitiesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CanReadDVDColumn {
                get {
                    return this.columnCanReadDVD;
                }
            }
            
            internal DataColumn _CanReadDVD_HDColumn {
                get {
                    return this.column_CanReadDVD_HD;
                }
            }
            
            internal DataColumn _CanReadDVD_BDColumn {
                get {
                    return this.column_CanReadDVD_BD;
                }
            }
            
            internal DataColumn Reader_IdColumn {
                get {
                    return this.columnReader_Id;
                }
            }
            
            public ReaderCapabilitiesRow this[int index] {
                get {
                    return ((ReaderCapabilitiesRow)(this.Rows[index]));
                }
            }
            
            public event ReaderCapabilitiesRowChangeEventHandler ReaderCapabilitiesRowChanged;
            
            public event ReaderCapabilitiesRowChangeEventHandler ReaderCapabilitiesRowChanging;
            
            public event ReaderCapabilitiesRowChangeEventHandler ReaderCapabilitiesRowDeleted;
            
            public event ReaderCapabilitiesRowChangeEventHandler ReaderCapabilitiesRowDeleting;
            
            public void AddReaderCapabilitiesRow(ReaderCapabilitiesRow row) {
                this.Rows.Add(row);
            }
            
            public ReaderCapabilitiesRow AddReaderCapabilitiesRow(string CanReadDVD, string _CanReadDVD_HD, string _CanReadDVD_BD, ReaderRow parentReaderRowByReader_ReaderCapabilities) {
                ReaderCapabilitiesRow rowReaderCapabilitiesRow = ((ReaderCapabilitiesRow)(this.NewRow()));
                rowReaderCapabilitiesRow.ItemArray = new object[] {
                        CanReadDVD,
                        _CanReadDVD_HD,
                        _CanReadDVD_BD,
                        parentReaderRowByReader_ReaderCapabilities[1]};
                this.Rows.Add(rowReaderCapabilitiesRow);
                return rowReaderCapabilitiesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ReaderCapabilitiesDataTable cln = ((ReaderCapabilitiesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ReaderCapabilitiesDataTable();
            }
            
            internal void InitVars() {
                this.columnCanReadDVD = this.Columns["CanReadDVD"];
                this.column_CanReadDVD_HD = this.Columns["CanReadDVD-HD"];
                this.column_CanReadDVD_BD = this.Columns["CanReadDVD-BD"];
                this.columnReader_Id = this.Columns["Reader_Id"];
            }
            
            private void InitClass() {
                this.columnCanReadDVD = new DataColumn("CanReadDVD", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCanReadDVD);
                this.column_CanReadDVD_HD = new DataColumn("CanReadDVD-HD", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.column_CanReadDVD_HD);
                this.column_CanReadDVD_BD = new DataColumn("CanReadDVD-BD", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.column_CanReadDVD_BD);
                this.columnReader_Id = new DataColumn("Reader_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnReader_Id);
                this.columnCanReadDVD.Namespace = "";
                this.columnCanReadDVD.DefaultValue = "false";
                this.column_CanReadDVD_HD.Namespace = "";
                this.column_CanReadDVD_HD.DefaultValue = "false";
                this.column_CanReadDVD_BD.Namespace = "";
                this.column_CanReadDVD_BD.DefaultValue = "false";
            }
            
            public ReaderCapabilitiesRow NewReaderCapabilitiesRow() {
                return ((ReaderCapabilitiesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ReaderCapabilitiesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ReaderCapabilitiesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReaderCapabilitiesRowChanged != null)) {
                    this.ReaderCapabilitiesRowChanged(this, new ReaderCapabilitiesRowChangeEvent(((ReaderCapabilitiesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReaderCapabilitiesRowChanging != null)) {
                    this.ReaderCapabilitiesRowChanging(this, new ReaderCapabilitiesRowChangeEvent(((ReaderCapabilitiesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReaderCapabilitiesRowDeleted != null)) {
                    this.ReaderCapabilitiesRowDeleted(this, new ReaderCapabilitiesRowChangeEvent(((ReaderCapabilitiesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReaderCapabilitiesRowDeleting != null)) {
                    this.ReaderCapabilitiesRowDeleting(this, new ReaderCapabilitiesRowChangeEvent(((ReaderCapabilitiesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveReaderCapabilitiesRow(ReaderCapabilitiesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ReaderCapabilitiesRow : DataRow {
            
            private ReaderCapabilitiesDataTable tableReaderCapabilities;
            
            internal ReaderCapabilitiesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableReaderCapabilities = ((ReaderCapabilitiesDataTable)(this.Table));
            }
            
            public string CanReadDVD {
                get {
                    try {
                        return ((string)(this[this.tableReaderCapabilities.CanReadDVDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReaderCapabilities.CanReadDVDColumn] = value;
                }
            }
            
            public string _CanReadDVD_HD {
                get {
                    try {
                        return ((string)(this[this.tableReaderCapabilities._CanReadDVD_HDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReaderCapabilities._CanReadDVD_HDColumn] = value;
                }
            }
            
            public string _CanReadDVD_BD {
                get {
                    try {
                        return ((string)(this[this.tableReaderCapabilities._CanReadDVD_BDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReaderCapabilities._CanReadDVD_BDColumn] = value;
                }
            }
            
            public ReaderRow ReaderRow {
                get {
                    return ((ReaderRow)(this.GetParentRow(this.Table.ParentRelations["Reader_ReaderCapabilities"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Reader_ReaderCapabilities"]);
                }
            }
            
            public bool IsCanReadDVDNull() {
                return this.IsNull(this.tableReaderCapabilities.CanReadDVDColumn);
            }
            
            public void SetCanReadDVDNull() {
                this[this.tableReaderCapabilities.CanReadDVDColumn] = System.Convert.DBNull;
            }
            
            public bool Is_CanReadDVD_HDNull() {
                return this.IsNull(this.tableReaderCapabilities._CanReadDVD_HDColumn);
            }
            
            public void Set_CanReadDVD_HDNull() {
                this[this.tableReaderCapabilities._CanReadDVD_HDColumn] = System.Convert.DBNull;
            }
            
            public bool Is_CanReadDVD_BDNull() {
                return this.IsNull(this.tableReaderCapabilities._CanReadDVD_BDColumn);
            }
            
            public void Set_CanReadDVD_BDNull() {
                this[this.tableReaderCapabilities._CanReadDVD_BDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ReaderCapabilitiesRowChangeEvent : EventArgs {
            
            private ReaderCapabilitiesRow eventRow;
            
            private DataRowAction eventAction;
            
            public ReaderCapabilitiesRowChangeEvent(ReaderCapabilitiesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ReaderCapabilitiesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PrinterDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnType;
            
            private DataColumn columnRibbon;
            
            private DataColumn columnInquiryString;
            
            private DataColumn columnOffline;
            
            private DataColumn columnLabelsRemaining;
            
            private DataColumn columnDiscCount;
            
            private DataColumn columnTransporter_Id;
            
            internal PrinterDataTable() : 
                    base("Printer") {
                this.InitClass();
            }
            
            internal PrinterDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            internal DataColumn RibbonColumn {
                get {
                    return this.columnRibbon;
                }
            }
            
            internal DataColumn InquiryStringColumn {
                get {
                    return this.columnInquiryString;
                }
            }
            
            internal DataColumn OfflineColumn {
                get {
                    return this.columnOffline;
                }
            }
            
            internal DataColumn LabelsRemainingColumn {
                get {
                    return this.columnLabelsRemaining;
                }
            }
            
            internal DataColumn DiscCountColumn {
                get {
                    return this.columnDiscCount;
                }
            }
            
            internal DataColumn Transporter_IdColumn {
                get {
                    return this.columnTransporter_Id;
                }
            }
            
            public PrinterRow this[int index] {
                get {
                    return ((PrinterRow)(this.Rows[index]));
                }
            }
            
            public event PrinterRowChangeEventHandler PrinterRowChanged;
            
            public event PrinterRowChangeEventHandler PrinterRowChanging;
            
            public event PrinterRowChangeEventHandler PrinterRowDeleted;
            
            public event PrinterRowChangeEventHandler PrinterRowDeleting;
            
            public void AddPrinterRow(PrinterRow row) {
                this.Rows.Add(row);
            }
            
            public PrinterRow AddPrinterRow(string Type, string Ribbon, string InquiryString, string Offline, string LabelsRemaining, string DiscCount, TransporterRow parentTransporterRowByTransporter_Printer) {
                PrinterRow rowPrinterRow = ((PrinterRow)(this.NewRow()));
                rowPrinterRow.ItemArray = new object[] {
                        Type,
                        Ribbon,
                        InquiryString,
                        Offline,
                        LabelsRemaining,
                        DiscCount,
                        parentTransporterRowByTransporter_Printer[3]};
                this.Rows.Add(rowPrinterRow);
                return rowPrinterRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PrinterDataTable cln = ((PrinterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PrinterDataTable();
            }
            
            internal void InitVars() {
                this.columnType = this.Columns["Type"];
                this.columnRibbon = this.Columns["Ribbon"];
                this.columnInquiryString = this.Columns["InquiryString"];
                this.columnOffline = this.Columns["Offline"];
                this.columnLabelsRemaining = this.Columns["LabelsRemaining"];
                this.columnDiscCount = this.Columns["DiscCount"];
                this.columnTransporter_Id = this.Columns["Transporter_Id"];
            }
            
            private void InitClass() {
                this.columnType = new DataColumn("Type", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnType);
                this.columnRibbon = new DataColumn("Ribbon", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRibbon);
                this.columnInquiryString = new DataColumn("InquiryString", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnInquiryString);
                this.columnOffline = new DataColumn("Offline", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOffline);
                this.columnLabelsRemaining = new DataColumn("LabelsRemaining", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnLabelsRemaining);
                this.columnDiscCount = new DataColumn("DiscCount", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDiscCount);
                this.columnTransporter_Id = new DataColumn("Transporter_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTransporter_Id);
                this.columnType.AllowDBNull = false;
                this.columnType.Namespace = "";
                this.columnRibbon.Namespace = "";
                this.columnRibbon.DefaultValue = "Color";
                this.columnInquiryString.AllowDBNull = false;
                this.columnInquiryString.Namespace = "";
                this.columnOffline.Namespace = "";
                this.columnOffline.DefaultValue = "false";
                this.columnLabelsRemaining.Namespace = "";
                this.columnDiscCount.Namespace = "";
            }
            
            public PrinterRow NewPrinterRow() {
                return ((PrinterRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PrinterRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PrinterRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrinterRowChanged != null)) {
                    this.PrinterRowChanged(this, new PrinterRowChangeEvent(((PrinterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrinterRowChanging != null)) {
                    this.PrinterRowChanging(this, new PrinterRowChangeEvent(((PrinterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrinterRowDeleted != null)) {
                    this.PrinterRowDeleted(this, new PrinterRowChangeEvent(((PrinterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrinterRowDeleting != null)) {
                    this.PrinterRowDeleting(this, new PrinterRowChangeEvent(((PrinterRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePrinterRow(PrinterRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PrinterRow : DataRow {
            
            private PrinterDataTable tablePrinter;
            
            internal PrinterRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrinter = ((PrinterDataTable)(this.Table));
            }
            
            public string Type {
                get {
                    return ((string)(this[this.tablePrinter.TypeColumn]));
                }
                set {
                    this[this.tablePrinter.TypeColumn] = value;
                }
            }
            
            public string Ribbon {
                get {
                    try {
                        return ((string)(this[this.tablePrinter.RibbonColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrinter.RibbonColumn] = value;
                }
            }
            
            public string InquiryString {
                get {
                    return ((string)(this[this.tablePrinter.InquiryStringColumn]));
                }
                set {
                    this[this.tablePrinter.InquiryStringColumn] = value;
                }
            }
            
            public string Offline {
                get {
                    try {
                        return ((string)(this[this.tablePrinter.OfflineColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrinter.OfflineColumn] = value;
                }
            }
            
            public string LabelsRemaining {
                get {
                    try {
                        return ((string)(this[this.tablePrinter.LabelsRemainingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrinter.LabelsRemainingColumn] = value;
                }
            }
            
            public string DiscCount {
                get {
                    try {
                        return ((string)(this[this.tablePrinter.DiscCountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrinter.DiscCountColumn] = value;
                }
            }
            
            public TransporterRow TransporterRow {
                get {
                    return ((TransporterRow)(this.GetParentRow(this.Table.ParentRelations["Transporter_Printer"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Transporter_Printer"]);
                }
            }
            
            public bool IsRibbonNull() {
                return this.IsNull(this.tablePrinter.RibbonColumn);
            }
            
            public void SetRibbonNull() {
                this[this.tablePrinter.RibbonColumn] = System.Convert.DBNull;
            }
            
            public bool IsOfflineNull() {
                return this.IsNull(this.tablePrinter.OfflineColumn);
            }
            
            public void SetOfflineNull() {
                this[this.tablePrinter.OfflineColumn] = System.Convert.DBNull;
            }
            
            public bool IsLabelsRemainingNull() {
                return this.IsNull(this.tablePrinter.LabelsRemainingColumn);
            }
            
            public void SetLabelsRemainingNull() {
                this[this.tablePrinter.LabelsRemainingColumn] = System.Convert.DBNull;
            }
            
            public bool IsDiscCountNull() {
                return this.IsNull(this.tablePrinter.DiscCountColumn);
            }
            
            public void SetDiscCountNull() {
                this[this.tablePrinter.DiscCountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PrinterRowChangeEvent : EventArgs {
            
            private PrinterRow eventRow;
            
            private DataRowAction eventAction;
            
            public PrinterRowChangeEvent(PrinterRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PrinterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BarcodeScannerDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnInquiryString;
            
            private DataColumn columnTransporter_Id;
            
            internal BarcodeScannerDataTable() : 
                    base("BarcodeScanner") {
                this.InitClass();
            }
            
            internal BarcodeScannerDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn InquiryStringColumn {
                get {
                    return this.columnInquiryString;
                }
            }
            
            internal DataColumn Transporter_IdColumn {
                get {
                    return this.columnTransporter_Id;
                }
            }
            
            public BarcodeScannerRow this[int index] {
                get {
                    return ((BarcodeScannerRow)(this.Rows[index]));
                }
            }
            
            public event BarcodeScannerRowChangeEventHandler BarcodeScannerRowChanged;
            
            public event BarcodeScannerRowChangeEventHandler BarcodeScannerRowChanging;
            
            public event BarcodeScannerRowChangeEventHandler BarcodeScannerRowDeleted;
            
            public event BarcodeScannerRowChangeEventHandler BarcodeScannerRowDeleting;
            
            public void AddBarcodeScannerRow(BarcodeScannerRow row) {
                this.Rows.Add(row);
            }
            
            public BarcodeScannerRow AddBarcodeScannerRow(string InquiryString, TransporterRow parentTransporterRowByTransporter_BarcodeScanner) {
                BarcodeScannerRow rowBarcodeScannerRow = ((BarcodeScannerRow)(this.NewRow()));
                rowBarcodeScannerRow.ItemArray = new object[] {
                        InquiryString,
                        parentTransporterRowByTransporter_BarcodeScanner[3]};
                this.Rows.Add(rowBarcodeScannerRow);
                return rowBarcodeScannerRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                BarcodeScannerDataTable cln = ((BarcodeScannerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new BarcodeScannerDataTable();
            }
            
            internal void InitVars() {
                this.columnInquiryString = this.Columns["InquiryString"];
                this.columnTransporter_Id = this.Columns["Transporter_Id"];
            }
            
            private void InitClass() {
                this.columnInquiryString = new DataColumn("InquiryString", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnInquiryString);
                this.columnTransporter_Id = new DataColumn("Transporter_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTransporter_Id);
                this.columnInquiryString.AllowDBNull = false;
                this.columnInquiryString.Namespace = "";
            }
            
            public BarcodeScannerRow NewBarcodeScannerRow() {
                return ((BarcodeScannerRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new BarcodeScannerRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(BarcodeScannerRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BarcodeScannerRowChanged != null)) {
                    this.BarcodeScannerRowChanged(this, new BarcodeScannerRowChangeEvent(((BarcodeScannerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BarcodeScannerRowChanging != null)) {
                    this.BarcodeScannerRowChanging(this, new BarcodeScannerRowChangeEvent(((BarcodeScannerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BarcodeScannerRowDeleted != null)) {
                    this.BarcodeScannerRowDeleted(this, new BarcodeScannerRowChangeEvent(((BarcodeScannerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BarcodeScannerRowDeleting != null)) {
                    this.BarcodeScannerRowDeleting(this, new BarcodeScannerRowChangeEvent(((BarcodeScannerRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBarcodeScannerRow(BarcodeScannerRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BarcodeScannerRow : DataRow {
            
            private BarcodeScannerDataTable tableBarcodeScanner;
            
            internal BarcodeScannerRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableBarcodeScanner = ((BarcodeScannerDataTable)(this.Table));
            }
            
            public string InquiryString {
                get {
                    return ((string)(this[this.tableBarcodeScanner.InquiryStringColumn]));
                }
                set {
                    this[this.tableBarcodeScanner.InquiryStringColumn] = value;
                }
            }
            
            public TransporterRow TransporterRow {
                get {
                    return ((TransporterRow)(this.GetParentRow(this.Table.ParentRelations["Transporter_BarcodeScanner"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Transporter_BarcodeScanner"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BarcodeScannerRowChangeEvent : EventArgs {
            
            private BarcodeScannerRow eventRow;
            
            private DataRowAction eventAction;
            
            public BarcodeScannerRowChangeEvent(BarcodeScannerRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BarcodeScannerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
