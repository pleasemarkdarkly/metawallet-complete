//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=1.1.4322.2032.
// 
namespace RImageSchemas.Serialization.Server.Replies.Image {
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ImageServerReply {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("SessionLog", typeof(SessionLog))]
        [System.Xml.Serialization.XmlElementAttribute("ImagingParameterSettings", typeof(Server))]
        [System.Xml.Serialization.XmlElementAttribute("OrderList", typeof(OrderList))]
        [System.Xml.Serialization.XmlElementAttribute("ServerStatus", typeof(ServerStatus))]
        [System.Xml.Serialization.XmlElementAttribute("AckOnly", typeof(AckOnly))]
        public object Item;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ServerId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ClientId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ImageServerReplyCommandState CommandState;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CommandErrorCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CommandErrorMessage;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ReplyTimestamp;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ImageServerReplyAutomation Automation;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class SessionLog {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Entry")]
        public Entry[] Entry;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string NumberOfEntries;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Entry {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Text;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Timestamp;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string MessageId;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Server")]
    [System.Xml.Serialization.XmlRootAttribute("Server", Namespace="", IsNullable=false)]
    public class Server1 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Description;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string OrderStatusUpdateInterval;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute("ImagingParameterSettings", Namespace="", IsNullable=false)]
    public class Server {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Server")]
        public Server1 Server1;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ImagingOrder {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string OrderId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ClientId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ImagingOrderOrderState.ACTIVE)]
        public ImagingOrderOrderState OrderState = ImagingOrderOrderState.ACTIVE;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string PercentCompleted;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string OriginalOrder;
    }
    
    /// <remarks/>
    public enum ImagingOrderOrderState {
        
        /// <remarks/>
        ACTIVE,
        
        /// <remarks/>
        CANCELING,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class OrderList {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ImagingOrder")]
        public ImagingOrder[] ImagingOrder;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Cluster;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string NumberOfOrders;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ImageServerInfo {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ImagesWritten;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ImagesRejected;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ServerInfo {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string SoftwareVersion;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Description;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Hostname;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Cluster;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string MessagingPort;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string SystemFolder;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ServerInfoIsService.@false)]
        public ServerInfoIsService IsService = ServerInfoIsService.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ServerInfoPasswordSet PasswordSet;
    }
    
    /// <remarks/>
    public enum ServerInfoIsService {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum ServerInfoPasswordSet {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ServerStatus {
        
        /// <remarks/>
        public ServerInfo ServerInfo;
        
        /// <remarks/>
        public ImageServerInfo ImageServerInfo;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class AckOnly {
    }
    
    /// <remarks/>
    public enum ImageServerReplyCommandState {
        
        /// <remarks/>
        IN_PROCESS,
        
        /// <remarks/>
        COMPLETED,
        
        /// <remarks/>
        FAILED,
    }
    
    /// <remarks/>
    public enum ImageServerReplyAutomation {
        
        /// <remarks/>
        StartPending,
        
        /// <remarks/>
        Running,
        
        /// <remarks/>
        Paused,
        
        /// <remarks/>
        PausePending,
        
        /// <remarks/>
        StopPending,
    }
}
