//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=1.1.4322.2032.
// 
namespace RImageSchemas.Serialization.Server.Configuration.Production {
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="urn:ConvertedDTDs", IsNullable=false)]
    public class ProductionServerConfiguration {
        
        /// <remarks/>
        public ServerInfo ServerInfo;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Transporter")]
        public Transporter[] Transporter;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="urn:ConvertedDTDs", IsNullable=false)]
    public class ServerInfo {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ID;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string SoftwareVersion;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Description;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Hostname;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Cluster;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ServerInfoIsService.@false)]
        public ServerInfoIsService IsService = ServerInfoIsService.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ServerInfoIsPasswordSet.@false)]
        public ServerInfoIsPasswordSet IsPasswordSet = ServerInfoIsPasswordSet.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string SystemFolder;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string OSVersion;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ServerInfoSupportsSCP.@false)]
        public ServerInfoSupportsSCP SupportsSCP = ServerInfoSupportsSCP.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string SoftwareSuiteVersion;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    public enum ServerInfoIsService {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    public enum ServerInfoIsPasswordSet {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    public enum ServerInfoSupportsSCP {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="urn:ConvertedDTDs", IsNullable=false)]
    public class BarcodeScanner {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string InquiryString;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="urn:ConvertedDTDs", IsNullable=false)]
    public class Printer {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Type;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(PrinterRibbon.Color)]
        public PrinterRibbon Ribbon = PrinterRibbon.Color;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string InquiryString;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(PrinterOffline.@false)]
        public PrinterOffline Offline = PrinterOffline.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string LabelsRemaining;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DiscCount;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    public enum PrinterRibbon {
        
        /// <remarks/>
        Mono,
        
        /// <remarks/>
        Color,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("CMY-White")]
        CMYWhite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Bi-color")]
        Bicolor,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    public enum PrinterOffline {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ReaderCapabilities", Namespace="urn:ConvertedDTDs")]
    [System.Xml.Serialization.XmlRootAttribute("ReaderCapabilities", Namespace="urn:ConvertedDTDs", IsNullable=false)]
    public class ReaderCapabilities1 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ReaderCapabilitiesCanReadDVD.@false)]
        public ReaderCapabilitiesCanReadDVD CanReadDVD = ReaderCapabilitiesCanReadDVD.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute("CanReadDVD-HD")]
        [System.ComponentModel.DefaultValueAttribute(ReaderCapabilitiesCanReadDVDHD.@false)]
        public ReaderCapabilitiesCanReadDVDHD CanReadDVDHD = ReaderCapabilitiesCanReadDVDHD.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute("CanReadDVD-BD")]
        [System.ComponentModel.DefaultValueAttribute(ReaderCapabilitiesCanReadDVDBD.@false)]
        public ReaderCapabilitiesCanReadDVDBD CanReadDVDBD = ReaderCapabilitiesCanReadDVDBD.@false;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    public enum ReaderCapabilitiesCanReadDVD {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    public enum ReaderCapabilitiesCanReadDVDHD {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    public enum ReaderCapabilitiesCanReadDVDBD {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Reader))]
    public class ReaderCapabilities {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ReaderCapabilities")]
        public ReaderCapabilities1 ReaderCapabilities1;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="urn:ConvertedDTDs", IsNullable=false)]
    public class Reader : ReaderCapabilities {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string InquiryString;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="urn:ConvertedDTDs", IsNullable=false)]
    public class Cache {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string InquiryString;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="urn:ConvertedDTDs", IsNullable=false)]
    public class RecorderCapabilities {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute("CanRecordCD-R")]
        [System.ComponentModel.DefaultValueAttribute(RecorderCapabilitiesCanRecordCDR.@true)]
        public RecorderCapabilitiesCanRecordCDR CanRecordCDR = RecorderCapabilitiesCanRecordCDR.@true;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute("CanRecordDVD-R")]
        [System.ComponentModel.DefaultValueAttribute(RecorderCapabilitiesCanRecordDVDR.@false)]
        public RecorderCapabilitiesCanRecordDVDR CanRecordDVDR = RecorderCapabilitiesCanRecordDVDR.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute("CanRecordDVDR-DL")]
        [System.ComponentModel.DefaultValueAttribute(RecorderCapabilitiesCanRecordDVDRDL.@false)]
        public RecorderCapabilitiesCanRecordDVDRDL CanRecordDVDRDL = RecorderCapabilitiesCanRecordDVDRDL.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute("CanRecordPocketCD-R")]
        [System.ComponentModel.DefaultValueAttribute(RecorderCapabilitiesCanRecordPocketCDR.@true)]
        public RecorderCapabilitiesCanRecordPocketCDR CanRecordPocketCDR = RecorderCapabilitiesCanRecordPocketCDR.@true;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute("CanDestroyCD-R")]
        [System.ComponentModel.DefaultValueAttribute(RecorderCapabilitiesCanDestroyCDR.@true)]
        public RecorderCapabilitiesCanDestroyCDR CanDestroyCDR = RecorderCapabilitiesCanDestroyCDR.@true;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute("CanDestroyDVD-R")]
        [System.ComponentModel.DefaultValueAttribute(RecorderCapabilitiesCanDestroyDVDR.@false)]
        public RecorderCapabilitiesCanDestroyDVDR CanDestroyDVDR = RecorderCapabilitiesCanDestroyDVDR.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute("CanDestroyDVDR-DL")]
        [System.ComponentModel.DefaultValueAttribute(RecorderCapabilitiesCanDestroyDVDRDL.@false)]
        public RecorderCapabilitiesCanDestroyDVDRDL CanDestroyDVDRDL = RecorderCapabilitiesCanDestroyDVDRDL.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute("CanDestroyPocketCD-R")]
        [System.ComponentModel.DefaultValueAttribute(RecorderCapabilitiesCanDestroyPocketCDR.@true)]
        public RecorderCapabilitiesCanDestroyPocketCDR CanDestroyPocketCDR = RecorderCapabilitiesCanDestroyPocketCDR.@true;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(RecorderCapabilitiesCanRecordSOQ_CDR.@false)]
        public RecorderCapabilitiesCanRecordSOQ_CDR CanRecordSOQ_CDR = RecorderCapabilitiesCanRecordSOQ_CDR.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(RecorderCapabilitiesCanRecordSOQ_DVDR.@false)]
        public RecorderCapabilitiesCanRecordSOQ_DVDR CanRecordSOQ_DVDR = RecorderCapabilitiesCanRecordSOQ_DVDR.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute("CanRecordSOQ_DVDR-DL")]
        [System.ComponentModel.DefaultValueAttribute(RecorderCapabilitiesCanRecordSOQ_DVDRDL.@false)]
        public RecorderCapabilitiesCanRecordSOQ_DVDRDL CanRecordSOQ_DVDRDL = RecorderCapabilitiesCanRecordSOQ_DVDRDL.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute("CanRecordDVDR-HD")]
        [System.ComponentModel.DefaultValueAttribute(RecorderCapabilitiesCanRecordDVDRHD.@false)]
        public RecorderCapabilitiesCanRecordDVDRHD CanRecordDVDRHD = RecorderCapabilitiesCanRecordDVDRHD.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute("CanRecordDVDR-BD")]
        [System.ComponentModel.DefaultValueAttribute(RecorderCapabilitiesCanRecordDVDRBD.@false)]
        public RecorderCapabilitiesCanRecordDVDRBD CanRecordDVDRBD = RecorderCapabilitiesCanRecordDVDRBD.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(RecorderCapabilitiesCanDestroySOQ_CDR.@false)]
        public RecorderCapabilitiesCanDestroySOQ_CDR CanDestroySOQ_CDR = RecorderCapabilitiesCanDestroySOQ_CDR.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string MaxCDRecordingSpeed;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string MaxDVDRecordingSpeed;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    public enum RecorderCapabilitiesCanRecordCDR {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    public enum RecorderCapabilitiesCanRecordDVDR {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    public enum RecorderCapabilitiesCanRecordDVDRDL {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    public enum RecorderCapabilitiesCanRecordPocketCDR {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    public enum RecorderCapabilitiesCanDestroyCDR {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    public enum RecorderCapabilitiesCanDestroyDVDR {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    public enum RecorderCapabilitiesCanDestroyDVDRDL {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    public enum RecorderCapabilitiesCanDestroyPocketCDR {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    public enum RecorderCapabilitiesCanRecordSOQ_CDR {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    public enum RecorderCapabilitiesCanRecordSOQ_DVDR {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    public enum RecorderCapabilitiesCanRecordSOQ_DVDRDL {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    public enum RecorderCapabilitiesCanRecordDVDRHD {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    public enum RecorderCapabilitiesCanRecordDVDRBD {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    public enum RecorderCapabilitiesCanDestroySOQ_CDR {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="urn:ConvertedDTDs", IsNullable=false)]
    public class Recorder {
        
        /// <remarks/>
        public RecorderCapabilities RecorderCapabilities;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Cache")]
        public Cache[] Cache;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string InquiryString;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(RecorderOffline.@false)]
        public RecorderOffline Offline = RecorderOffline.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DiscCount;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    public enum RecorderOffline {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="urn:ConvertedDTDs", IsNullable=false)]
    public class Mailslot {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(MailslotUsage.Unused)]
        public MailslotUsage Usage = MailslotUsage.Unused;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Level;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string NumberOfSlots;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    public enum MailslotUsage {
        
        /// <remarks/>
        Unused,
        
        /// <remarks/>
        Output,
        
        /// <remarks/>
        Reject,
        
        /// <remarks/>
        Output_Reject,
        
        /// <remarks/>
        ReservedOutput,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="urn:ConvertedDTDs", IsNullable=false)]
    public class Bin {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(BinUsage.Input)]
        public BinUsage Usage = BinUsage.Input;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Level;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    public enum BinUsage {
        
        /// <remarks/>
        Input,
        
        /// <remarks/>
        Output,
        
        /// <remarks/>
        Reject,
        
        /// <remarks/>
        Output_Reject,
        
        /// <remarks/>
        Collate,
        
        /// <remarks/>
        ReservedInput,
        
        /// <remarks/>
        CD_Input,
        
        /// <remarks/>
        DVD_Input,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DVDR-DL_Input")]
        DVDRDL_Input,
        
        /// <remarks/>
        SOQ_CDR_Input,
        
        /// <remarks/>
        SOQ_DVDR_Input,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SOQ_DVDR-DL_Input")]
        SOQ_DVDRDL_Input,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DVDR-HD_Input")]
        DVDRHD_Input,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DVDR-BD_Input")]
        DVDRBD_Input,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="urn:ConvertedDTDs", IsNullable=false)]
    public class TransporterCapabilities {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(TransporterCapabilitiesPerfectPrint.@false)]
        public TransporterCapabilitiesPerfectPrint PerfectPrint = TransporterCapabilitiesPerfectPrint.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(TransporterCapabilitiesMediaType.CDR)]
        public TransporterCapabilitiesMediaType MediaType = TransporterCapabilitiesMediaType.CDR;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(TransporterCapabilitiesMediaSize.Item120mm)]
        public TransporterCapabilitiesMediaSize MediaSize = TransporterCapabilitiesMediaSize.Item120mm;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    public enum TransporterCapabilitiesPerfectPrint {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    public enum TransporterCapabilitiesMediaType {
        
        /// <remarks/>
        CDR,
        
        /// <remarks/>
        DVDR,
        
        /// <remarks/>
        BOTH,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DVDR-DL")]
        DVDRDL,
        
        /// <remarks/>
        COMBO,
        
        /// <remarks/>
        SOQ_CDR,
        
        /// <remarks/>
        SOQ_DVDR,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SOQ_DVDR-DL")]
        SOQ_DVDRDL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DVDR-HD")]
        DVDRHD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DVDR-BD")]
        DVDRBD,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    public enum TransporterCapabilitiesMediaSize {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120mm")]
        Item120mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("80mm")]
        Item80mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("63mm")]
        Item63mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("61mm")]
        Item61mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("58mm")]
        Item58mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("59x85mm")]
        Item59x85mm,
        
        /// <remarks/>
        ANY,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="urn:ConvertedDTDs", IsNullable=false)]
    public class Transporter {
        
        /// <remarks/>
        public TransporterCapabilities TransporterCapabilities;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Bin")]
        public Bin[] Bin;
        
        /// <remarks/>
        public Mailslot Mailslot;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Recorder")]
        public Recorder[] Recorder;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Reader")]
        public Reader[] Reader;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Printer")]
        public Printer[] Printer;
        
        /// <remarks/>
        public BarcodeScanner BarcodeScanner;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Type;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string InquiryString;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(TransporterOffline.@false)]
        public TransporterOffline Offline = TransporterOffline.@false;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:ConvertedDTDs")]
    public enum TransporterOffline {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
}
