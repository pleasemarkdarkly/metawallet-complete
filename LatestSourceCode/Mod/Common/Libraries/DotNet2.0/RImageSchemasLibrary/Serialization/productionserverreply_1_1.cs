//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=1.1.4322.2032.
// 
namespace RImageSchemas.Serialization.Server.Replies.Production {
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ProductionServerReply {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("SessionLog", typeof(SessionLog))]
        [System.Xml.Serialization.XmlElementAttribute("ProductionParameterSettings", typeof(ProductionParameterSettings))]
        [System.Xml.Serialization.XmlElementAttribute("OrderList", typeof(OrderList))]
        [System.Xml.Serialization.XmlElementAttribute("ServerStatus", typeof(ServerStatus))]
        [System.Xml.Serialization.XmlElementAttribute("UnlockingCodes", typeof(UnlockingCodes))]
        [System.Xml.Serialization.XmlElementAttribute("AckOnly", typeof(AckOnly))]
        [System.Xml.Serialization.XmlElementAttribute("DialogAction", typeof(DialogAction))]
        public object Item;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ServerId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ClientId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ProductionServerReplyCommandState CommandState;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CommandErrorCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CommandErrorMessage;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ReplyTimestamp;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ProductionServerReplyAutomation Automation;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class SessionLog {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Entry")]
        public Entry[] Entry;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string NumberOfEntries;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Entry {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Text;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Timestamp;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string MessageId;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class UnlockingCodes {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(UnlockingCodesFeature.Base)]
        public UnlockingCodesFeature Feature = UnlockingCodesFeature.Base;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string SessionCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ComputerCode;
    }
    
    /// <remarks/>
    public enum UnlockingCodesFeature {
        
        /// <remarks/>
        Base,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Smarte-CD")]
        SmarteCD,
        
        /// <remarks/>
        RawMode,
        
        /// <remarks/>
        EciVCD,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class KioskMode {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(KioskModeRecoverOrders.@true)]
        public KioskModeRecoverOrders RecoverOrders = KioskModeRecoverOrders.@true;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(KioskModeRunNoPrinter.@false)]
        public KioskModeRunNoPrinter RunNoPrinter = KioskModeRunNoPrinter.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(KioskModeAutoloaderRecovery.Retry)]
        public KioskModeAutoloaderRecovery AutoloaderRecovery = KioskModeAutoloaderRecovery.Retry;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(KioskModePrinterRecovery.Retry)]
        public KioskModePrinterRecovery PrinterRecovery = KioskModePrinterRecovery.Retry;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(KioskModeAutoRespondOnStartup.@false)]
        public KioskModeAutoRespondOnStartup AutoRespondOnStartup = KioskModeAutoRespondOnStartup.@false;
    }
    
    /// <remarks/>
    public enum KioskModeRecoverOrders {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum KioskModeRunNoPrinter {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum KioskModeAutoloaderRecovery {
        
        /// <remarks/>
        Retry,
        
        /// <remarks/>
        Exit,
        
        /// <remarks/>
        Disable,
    }
    
    /// <remarks/>
    public enum KioskModePrinterRecovery {
        
        /// <remarks/>
        Retry,
        
        /// <remarks/>
        Exit,
        
        /// <remarks/>
        Disable,
    }
    
    /// <remarks/>
    public enum KioskModeAutoRespondOnStartup {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class MediaCode {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class MediaCodes {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("MediaCode")]
        public MediaCode[] MediaCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(MediaCodesUseMediaCodes.@false)]
        public MediaCodesUseMediaCodes UseMediaCodes = MediaCodesUseMediaCodes.@false;
    }
    
    /// <remarks/>
    public enum MediaCodesUseMediaCodes {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class AutoBulkRead {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string BaseFolderForImages;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(AutoBulkReadUseVolumeIDAsFolderName.@false)]
        public AutoBulkReadUseVolumeIDAsFolderName UseVolumeIDAsFolderName = AutoBulkReadUseVolumeIDAsFolderName.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(AutoBulkReadUseBarcodeAsFolderName.@false)]
        public AutoBulkReadUseBarcodeAsFolderName UseBarcodeAsFolderName = AutoBulkReadUseBarcodeAsFolderName.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(AutoBulkReadExtractISOImagesToFoldersAndFiles.@false)]
        public AutoBulkReadExtractISOImagesToFoldersAndFiles ExtractISOImagesToFoldersAndFiles = AutoBulkReadExtractISOImagesToFoldersAndFiles.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(AutoBulkReadImageTypeForAudioTracks.PCM)]
        public AutoBulkReadImageTypeForAudioTracks ImageTypeForAudioTracks = AutoBulkReadImageTypeForAudioTracks.PCM;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(AutoBulkReadUseISRCAsFilenameForAudioTracks.@false)]
        public AutoBulkReadUseISRCAsFilenameForAudioTracks UseISRCAsFilenameForAudioTracks = AutoBulkReadUseISRCAsFilenameForAudioTracks.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(AutoBulkReadPutFailuresToRejectBin.@false)]
        public AutoBulkReadPutFailuresToRejectBin PutFailuresToRejectBin = AutoBulkReadPutFailuresToRejectBin.@false;
    }
    
    /// <remarks/>
    public enum AutoBulkReadUseVolumeIDAsFolderName {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum AutoBulkReadUseBarcodeAsFolderName {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum AutoBulkReadExtractISOImagesToFoldersAndFiles {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum AutoBulkReadImageTypeForAudioTracks {
        
        /// <remarks/>
        PCM,
        
        /// <remarks/>
        WAV,
        
        /// <remarks/>
        DDP,
    }
    
    /// <remarks/>
    public enum AutoBulkReadUseISRCAsFilenameForAudioTracks {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum AutoBulkReadPutFailuresToRejectBin {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Reading {
        
        /// <remarks/>
        public AutoBulkRead AutoBulkRead;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ReadingAudioReadSpeed.Max)]
        public ReadingAudioReadSpeed AudioReadSpeed = ReadingAudioReadSpeed.Max;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ReadingPreferredReader.Recorders)]
        public ReadingPreferredReader PreferredReader = ReadingPreferredReader.Recorders;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ReadingBarcodePort.None)]
        public ReadingBarcodePort BarcodePort = ReadingBarcodePort.None;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string BarcodeAngle;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ReadingUseBarcodeIndex.@false)]
        public ReadingUseBarcodeIndex UseBarcodeIndex = ReadingUseBarcodeIndex.@false;
    }
    
    /// <remarks/>
    public enum ReadingAudioReadSpeed {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1x")]
        Item1x,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2x")]
        Item2x,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4x")]
        Item4x,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8x")]
        Item8x,
        
        /// <remarks/>
        Max,
    }
    
    /// <remarks/>
    public enum ReadingPreferredReader {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("CDDVD-ROMDrive")]
        CDDVDROMDrive,
        
        /// <remarks/>
        Recorders,
    }
    
    /// <remarks/>
    public enum ReadingBarcodePort {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        COM1,
        
        /// <remarks/>
        COM2,
        
        /// <remarks/>
        COM3,
        
        /// <remarks/>
        COM4,
        
        /// <remarks/>
        COM5,
        
        /// <remarks/>
        COM6,
        
        /// <remarks/>
        COM7,
        
        /// <remarks/>
        COM8,
    }
    
    /// <remarks/>
    public enum ReadingUseBarcodeIndex {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class BinSetting {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public BinSettingBinNumber BinNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public BinSettingSetting Setting;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string AvailableBinSettings;
    }
    
    /// <remarks/>
    public enum BinSettingBinNumber {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
    }
    
    /// <remarks/>
    public enum BinSettingSetting {
        
        /// <remarks/>
        Input,
        
        /// <remarks/>
        InputOutput,
        
        /// <remarks/>
        CDRInputOnly,
        
        /// <remarks/>
        DVDRInputOnly,
        
        /// <remarks/>
        Output,
        
        /// <remarks/>
        OutputReject,
        
        /// <remarks/>
        Reject,
        
        /// <remarks/>
        Collate,
        
        /// <remarks/>
        ReservedInput,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DVDR-DLInputOnly")]
        DVDRDLInputOnly,
        
        /// <remarks/>
        SOQ_CDRInputOnly,
        
        /// <remarks/>
        SOQ_DVDRInputOnly,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SOQ_DVDR-DLInputOnly")]
        SOQ_DVDRDLInputOnly,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DVDR-HDInputOnly")]
        DVDRHDInputOnly,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DVDR-BDInputOnly")]
        DVDRBDInputOnly,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Autoloader {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("BinSetting")]
        public BinSetting[] BinSetting;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string LoaderNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public AutoloaderMailslotSetting MailslotSetting;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string AvailableMailslotSettings;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(AutoloaderMediaSize.Item120mm)]
        public AutoloaderMediaSize MediaSize = AutoloaderMediaSize.Item120mm;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string AvailableMediaSizes;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(AutoloaderMediaType.CDR)]
        public AutoloaderMediaType MediaType = AutoloaderMediaType.CDR;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(AutoloaderAvailableMediaTypes.CDR)]
        public AutoloaderAvailableMediaTypes AvailableMediaTypes = AutoloaderAvailableMediaTypes.CDR;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string AvailableMediaTypes2;
    }
    
    /// <remarks/>
    public enum AutoloaderMailslotSetting {
        
        /// <remarks/>
        Output,
        
        /// <remarks/>
        OutputReject,
        
        /// <remarks/>
        Unused,
        
        /// <remarks/>
        NotPresent,
        
        /// <remarks/>
        Reject,
        
        /// <remarks/>
        ReservedOutput,
    }
    
    /// <remarks/>
    public enum AutoloaderMediaSize {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120mm")]
        Item120mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("80mm")]
        Item80mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("63mm")]
        Item63mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("61mm")]
        Item61mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("58mm")]
        Item58mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("59x85mm")]
        Item59x85mm,
    }
    
    /// <remarks/>
    public enum AutoloaderMediaType {
        
        /// <remarks/>
        CDR,
        
        /// <remarks/>
        DVDR,
        
        /// <remarks/>
        BOTH,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DVDR-DL")]
        DVDRDL,
        
        /// <remarks/>
        COMBO,
        
        /// <remarks/>
        SOQ_CDR,
        
        /// <remarks/>
        SOQ_DVDR,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SOQ_DVDR-DL")]
        SOQ_DVDRDL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DVDR-HD")]
        DVDRHD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DVDR-BD")]
        DVDRBD,
    }
    
    /// <remarks/>
    public enum AutoloaderAvailableMediaTypes {
        
        /// <remarks/>
        CDR,
        
        /// <remarks/>
        DVDR,
        
        /// <remarks/>
        BOTH,
        
        /// <remarks/>
        CDR_OR_DVDR,
        
        /// <remarks/>
        NONE,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Printing {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(PrintingSimulatePrinting.@false)]
        public PrintingSimulatePrinting SimulatePrinting = PrintingSimulatePrinting.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(PrintingRejectPattern.Disabled)]
        public PrintingRejectPattern RejectPattern = PrintingRejectPattern.Disabled;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(PrintingTakeOrdersWithLabelWithoutPrinter.@true)]
        public PrintingTakeOrdersWithLabelWithoutPrinter TakeOrdersWithLabelWithoutPrinter = PrintingTakeOrdersWithLabelWithoutPrinter.@true;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(PrintingErrorOnLowInkLevel.@false)]
        public PrintingErrorOnLowInkLevel ErrorOnLowInkLevel = PrintingErrorOnLowInkLevel.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string LowInkPercentage;
    }
    
    /// <remarks/>
    public enum PrintingSimulatePrinting {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum PrintingRejectPattern {
        
        /// <remarks/>
        Disabled,
        
        /// <remarks/>
        AllRejectedDiscs,
        
        /// <remarks/>
        RecordingFailuresOnly,
    }
    
    /// <remarks/>
    public enum PrintingTakeOrdersWithLabelWithoutPrinter {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum PrintingErrorOnLowInkLevel {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Verify {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(VerifyUseVerify.@false)]
        public VerifyUseVerify UseVerify = VerifyUseVerify.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Frequency;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(VerifyIsChecksumDLLReady.@false)]
        public VerifyIsChecksumDLLReady IsChecksumDLLReady = VerifyIsChecksumDLLReady.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(VerifyUseChecksumDLL.@false)]
        public VerifyUseChecksumDLL UseChecksumDLL = VerifyUseChecksumDLL.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ChecksumDLLId;
    }
    
    /// <remarks/>
    public enum VerifyUseVerify {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum VerifyIsChecksumDLLReady {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum VerifyUseChecksumDLL {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Recording {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(RecordingSimulateRecording.@false)]
        public RecordingSimulateRecording SimulateRecording = RecordingSimulateRecording.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(RecordingUseNewMediaOnly.@false)]
        public RecordingUseNewMediaOnly UseNewMediaOnly = RecordingUseNewMediaOnly.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string MaxRecordingSpeed;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string MaxDVDRecordingSpeed;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(RecordingRejectNonISO.@true)]
        public RecordingRejectNonISO RejectNonISO = RecordingRejectNonISO.@true;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(RecordingDisableISOExtentFixups.@false)]
        public RecordingDisableISOExtentFixups DisableISOExtentFixups = RecordingDisableISOExtentFixups.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(RecordingAddPostgapToISO.Disabled)]
        public RecordingAddPostgapToISO AddPostgapToISO = RecordingAddPostgapToISO.Disabled;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(RecordingEnableUsing90_100MinuteCDRs.@false)]
        public RecordingEnableUsing90_100MinuteCDRs EnableUsing90_100MinuteCDRs = RecordingEnableUsing90_100MinuteCDRs.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(RecordingDestroyFailedRecordings.@false)]
        public RecordingDestroyFailedRecordings DestroyFailedRecordings = RecordingDestroyFailedRecordings.@false;
    }
    
    /// <remarks/>
    public enum RecordingSimulateRecording {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum RecordingUseNewMediaOnly {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum RecordingRejectNonISO {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum RecordingDisableISOExtentFixups {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum RecordingAddPostgapToISO {
        
        /// <remarks/>
        Disabled,
        
        /// <remarks/>
        Images,
        
        /// <remarks/>
        Discs,
        
        /// <remarks/>
        Both,
    }
    
    /// <remarks/>
    public enum RecordingEnableUsing90_100MinuteCDRs {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum RecordingDestroyFailedRecordings {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Caching {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(CachingUseStaticCaching.@false)]
        public CachingUseStaticCaching UseStaticCaching = CachingUseStaticCaching.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CacheDriveLetters;
    }
    
    /// <remarks/>
    public enum CachingUseStaticCaching {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Modes {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ModesServerMode.Attended)]
        public ModesServerMode ServerMode = ModesServerMode.Attended;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ModesOperatingMode.Normal)]
        public ModesOperatingMode OperatingMode = ModesOperatingMode.Normal;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ModesUseFIFOMode.@false)]
        public ModesUseFIFOMode UseFIFOMode = ModesUseFIFOMode.@false;
    }
    
    /// <remarks/>
    public enum ModesServerMode {
        
        /// <remarks/>
        Attended,
        
        /// <remarks/>
        UnAttended,
        
        /// <remarks/>
        Kiosk,
    }
    
    /// <remarks/>
    public enum ModesOperatingMode {
        
        /// <remarks/>
        Normal,
        
        /// <remarks/>
        BulkRead,
        
        /// <remarks/>
        JobStreaming,
        
        /// <remarks/>
        AutoBulkRead,
    }
    
    /// <remarks/>
    public enum ModesUseFIFOMode {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Server {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Description;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string OrderStatusUpdateInterval;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ProductionParameterSettings {
        
        /// <remarks/>
        public Server Server;
        
        /// <remarks/>
        public Modes Modes;
        
        /// <remarks/>
        public Caching Caching;
        
        /// <remarks/>
        public Recording Recording;
        
        /// <remarks/>
        public Verify Verify;
        
        /// <remarks/>
        public Printing Printing;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Autoloader")]
        public Autoloader[] Autoloader;
        
        /// <remarks/>
        public Reading Reading;
        
        /// <remarks/>
        public MediaCodes MediaCodes;
        
        /// <remarks/>
        public KioskMode KioskMode;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class DialogAction {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DialogId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public DialogActionButton Button;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name;
    }
    
    /// <remarks/>
    public enum DialogActionButton {
        
        /// <remarks/>
        First,
        
        /// <remarks/>
        Second,
        
        /// <remarks/>
        Third,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ProductionOrder {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string OrderId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ClientId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ProductionOrderOrderType.Record)]
        public ProductionOrderOrderType OrderType = ProductionOrderOrderType.Record;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ProductionOrderOrderState.IN_PROCESS)]
        public ProductionOrderOrderState OrderState = ProductionOrderOrderState.IN_PROCESS;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ProductionOrderOrderStage OrderStage;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ProductionOrderOrderStageEx OrderStageEx;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OrderStageExSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CopiesRequested;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CopiesCompleted;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string PercentCompleted;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string OriginalOrder;
    }
    
    /// <remarks/>
    public enum ProductionOrderOrderType {
        
        /// <remarks/>
        Read,
        
        /// <remarks/>
        Record,
        
        /// <remarks/>
        Copy,
        
        /// <remarks/>
        Print,
        
        /// <remarks/>
        Destroy,
    }
    
    /// <remarks/>
    public enum ProductionOrderOrderState {
        
        /// <remarks/>
        IN_PROCESS,
        
        /// <remarks/>
        COMPLETED,
        
        /// <remarks/>
        CANCELLED,
        
        /// <remarks/>
        FAILED,
    }
    
    /// <remarks/>
    public enum ProductionOrderOrderStage {
        
        /// <remarks/>
        WAITING,
        
        /// <remarks/>
        BUSY,
        
        /// <remarks/>
        DOWNLOADING,
        
        /// <remarks/>
        RECORDING,
        
        /// <remarks/>
        FIXATING,
        
        /// <remarks/>
        DESTROYING,
        
        /// <remarks/>
        PRINTING,
        
        /// <remarks/>
        MAPPING,
        
        /// <remarks/>
        READING,
        
        /// <remarks/>
        COMPLETED,
    }
    
    /// <remarks/>
    public enum ProductionOrderOrderStageEx {
        
        /// <remarks/>
        SUSPENDING,
        
        /// <remarks/>
        SUSPENDED,
        
        /// <remarks/>
        CANCELLING,
        
        /// <remarks/>
        SEGMENT,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class OrderList {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ProductionOrder")]
        public ProductionOrder[] ProductionOrder;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Cluster;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string NumberOfOrders;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class VideoCD {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(VideoCDStatus.Trial)]
        public VideoCDStatus Status = VideoCDStatus.Trial;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DaysRemaining;
    }
    
    /// <remarks/>
    public enum VideoCDStatus {
        
        /// <remarks/>
        Trial,
        
        /// <remarks/>
        Unlimited,
        
        /// <remarks/>
        Periodic,
        
        /// <remarks/>
        Expired,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class SmarteCD {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SmarteCDStatus.Trial)]
        public SmarteCDStatus Status = SmarteCDStatus.Trial;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DaysRemaining;
    }
    
    /// <remarks/>
    public enum SmarteCDStatus {
        
        /// <remarks/>
        Trial,
        
        /// <remarks/>
        Unlimited,
        
        /// <remarks/>
        Periodic,
        
        /// <remarks/>
        Expired,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class RawMode {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(RawModeStatus.Trial)]
        public RawModeStatus Status = RawModeStatus.Trial;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DaysRemaining;
    }
    
    /// <remarks/>
    public enum RawModeStatus {
        
        /// <remarks/>
        Trial,
        
        /// <remarks/>
        Unlimited,
        
        /// <remarks/>
        Periodic,
        
        /// <remarks/>
        Expired,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Base {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(BaseStatus.Trial)]
        public BaseStatus Status = BaseStatus.Trial;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DaysRemaining;
    }
    
    /// <remarks/>
    public enum BaseStatus {
        
        /// <remarks/>
        Trial,
        
        /// <remarks/>
        Unlimited,
        
        /// <remarks/>
        Periodic,
        
        /// <remarks/>
        Expired,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ActivationInfo {
        
        /// <remarks/>
        public Base Base;
        
        /// <remarks/>
        public RawMode RawMode;
        
        /// <remarks/>
        public SmarteCD SmarteCD;
        
        /// <remarks/>
        public VideoCD VideoCD;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Recorder {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Number;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public RecorderOffline Offline;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DiscCount;
    }
    
    /// <remarks/>
    public enum RecorderOffline {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Printer {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Number;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public PrinterOffline Offline;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string LabelsRemaining;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DiscCount;
    }
    
    /// <remarks/>
    public enum PrinterOffline {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Bin {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public BinNumber Number;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Level;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public BinUsage Usage;
    }
    
    /// <remarks/>
    public enum BinNumber {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
    }
    
    /// <remarks/>
    public enum BinUsage {
        
        /// <remarks/>
        Input,
        
        /// <remarks/>
        Output,
        
        /// <remarks/>
        Reject,
        
        /// <remarks/>
        Collate,
        
        /// <remarks/>
        ReservedInput,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class AutoloaderStatus {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Bin")]
        public Bin[] Bin;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Printer")]
        public Printer[] Printer;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Recorder")]
        public Recorder[] Recorder;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string LoaderNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public AutoloaderStatusOffline Offline;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string MailslotLevel;
    }
    
    /// <remarks/>
    public enum AutoloaderStatusOffline {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Switches {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesManufacturingTestMode.@false)]
        public SwitchesManufacturingTestMode ManufacturingTestMode = SwitchesManufacturingTestMode.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesVerifyOnlyMode.@false)]
        public SwitchesVerifyOnlyMode VerifyOnlyMode = SwitchesVerifyOnlyMode.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesSlugsMode.@false)]
        public SwitchesSlugsMode SlugsMode = SwitchesSlugsMode.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesNoLogLimit.@false)]
        public SwitchesNoLogLimit NoLogLimit = SwitchesNoLogLimit.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesSimulateFixate.@false)]
        public SwitchesSimulateFixate SimulateFixate = SwitchesSimulateFixate.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesSetupMode.@false)]
        public SwitchesSetupMode SetupMode = SwitchesSetupMode.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesDirectImaging.@false)]
        public SwitchesDirectImaging DirectImaging = SwitchesDirectImaging.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesAutoThroughPutMeasurement.@false)]
        public SwitchesAutoThroughPutMeasurement AutoThroughPutMeasurement = SwitchesAutoThroughPutMeasurement.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesTimingLogged.@false)]
        public SwitchesTimingLogged TimingLogged = SwitchesTimingLogged.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesSkipOrderStatusUpdates.@false)]
        public SwitchesSkipOrderStatusUpdates SkipOrderStatusUpdates = SwitchesSkipOrderStatusUpdates.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesPrintOnlyMode.@false)]
        public SwitchesPrintOnlyMode PrintOnlyMode = SwitchesPrintOnlyMode.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesSkipAutoloaderScanning.@false)]
        public SwitchesSkipAutoloaderScanning SkipAutoloaderScanning = SwitchesSkipAutoloaderScanning.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesPrintBeforeRecording.@false)]
        public SwitchesPrintBeforeRecording PrintBeforeRecording = SwitchesPrintBeforeRecording.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesUseDriveLettersForRecorders.@false)]
        public SwitchesUseDriveLettersForRecorders UseDriveLettersForRecorders = SwitchesUseDriveLettersForRecorders.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesTraceSCSICommands.@false)]
        public SwitchesTraceSCSICommands TraceSCSICommands = SwitchesTraceSCSICommands.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesTraceReadWriteCommands.@false)]
        public SwitchesTraceReadWriteCommands TraceReadWriteCommands = SwitchesTraceReadWriteCommands.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesTraceSerialCommands.@false)]
        public SwitchesTraceSerialCommands TraceSerialCommands = SwitchesTraceSerialCommands.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesTraceLabelAndPrinting.@false)]
        public SwitchesTraceLabelAndPrinting TraceLabelAndPrinting = SwitchesTraceLabelAndPrinting.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesTraceXMLMessages.@false)]
        public SwitchesTraceXMLMessages TraceXMLMessages = SwitchesTraceXMLMessages.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesLogSkippingOrder.@false)]
        public SwitchesLogSkippingOrder LogSkippingOrder = SwitchesLogSkippingOrder.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesRunWithoutDevices.@false)]
        public SwitchesRunWithoutDevices RunWithoutDevices = SwitchesRunWithoutDevices.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesDisablePreloadingRecorderAfterPrinterLoad.@false)]
        public SwitchesDisablePreloadingRecorderAfterPrinterLoad DisablePreloadingRecorderAfterPrinterLoad = SwitchesDisablePreloadingRecorderAfterPrinterLoad.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesDisableCacheLocking.@false)]
        public SwitchesDisableCacheLocking DisableCacheLocking = SwitchesDisableCacheLocking.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesEnableCacheLimiting.@false)]
        public SwitchesEnableCacheLimiting EnableCacheLimiting = SwitchesEnableCacheLimiting.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string SkipSerialPortsForAutoloader;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string SkipDrivesForReaderRecorderCache;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string SecondsDelayBeforeMainWindow;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesUseParallelPortForPrism.@false)]
        public SwitchesUseParallelPortForPrism UseParallelPortForPrism = SwitchesUseParallelPortForPrism.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesDisableDriverNameInRendering.@false)]
        public SwitchesDisableDriverNameInRendering DisableDriverNameInRendering = SwitchesDisableDriverNameInRendering.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesEraseCDRWBeforeRecording.@false)]
        public SwitchesEraseCDRWBeforeRecording EraseCDRWBeforeRecording = SwitchesEraseCDRWBeforeRecording.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesStrictWaveFileChecking.@false)]
        public SwitchesStrictWaveFileChecking StrictWaveFileChecking = SwitchesStrictWaveFileChecking.@false;
    }
    
    /// <remarks/>
    public enum SwitchesManufacturingTestMode {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesVerifyOnlyMode {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesSlugsMode {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesNoLogLimit {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesSimulateFixate {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesSetupMode {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesDirectImaging {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesAutoThroughPutMeasurement {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesTimingLogged {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesSkipOrderStatusUpdates {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesPrintOnlyMode {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesSkipAutoloaderScanning {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesPrintBeforeRecording {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesUseDriveLettersForRecorders {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesTraceSCSICommands {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesTraceReadWriteCommands {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesTraceSerialCommands {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesTraceLabelAndPrinting {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesTraceXMLMessages {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesLogSkippingOrder {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesRunWithoutDevices {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesDisablePreloadingRecorderAfterPrinterLoad {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesDisableCacheLocking {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesEnableCacheLimiting {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesUseParallelPortForPrism {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesDisableDriverNameInRendering {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesEraseCDRWBeforeRecording {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesStrictWaveFileChecking {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ProductionCount {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CopiesProduced;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CopiesRejected;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ServerInfo {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string SoftwareVersion;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Description;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Hostname;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Cluster;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string MessagingPort;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string SystemFolder;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ServerInfoIsService.@false)]
        public ServerInfoIsService IsService = ServerInfoIsService.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ServerInfoPasswordSet PasswordSet;
    }
    
    /// <remarks/>
    public enum ServerInfoIsService {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum ServerInfoPasswordSet {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ServerStatus {
        
        /// <remarks/>
        public ServerInfo ServerInfo;
        
        /// <remarks/>
        public ProductionCount ProductionCount;
        
        /// <remarks/>
        public Switches Switches;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("AutoloaderStatus")]
        public AutoloaderStatus[] AutoloaderStatus;
        
        /// <remarks/>
        public ActivationInfo ActivationInfo;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class AckOnly {
    }
    
    /// <remarks/>
    public enum ProductionServerReplyCommandState {
        
        /// <remarks/>
        IN_PROCESS,
        
        /// <remarks/>
        COMPLETED,
        
        /// <remarks/>
        FAILED,
    }
    
    /// <remarks/>
    public enum ProductionServerReplyAutomation {
        
        /// <remarks/>
        StartPending,
        
        /// <remarks/>
        Running,
        
        /// <remarks/>
        Paused,
        
        /// <remarks/>
        PausePending,
        
        /// <remarks/>
        StopPending,
    }
}
