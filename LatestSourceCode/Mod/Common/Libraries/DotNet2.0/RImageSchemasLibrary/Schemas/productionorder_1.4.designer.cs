//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace RImageSchemas.Schemas {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("ProductionOrder")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ProductionOrder : System.Data.DataSet {
        
        private MediaDataTable tableMedia;
        
        private TargetDataTable tableTarget;
        
        private InOutDataTable tableInOut;
        
        private CustomizeDataTable tableCustomize;
        
        private ActionDataTable tableAction;
        
        private RecordDataTable tableRecord;
        
        private WriteTrackDataTable tableWriteTrack;
        
        private AudioDataTable tableAudio;
        
        private SubIndexDataTable tableSubIndex;
        
        private AudioControlDataTable tableAudioControl;
        
        private DataElementDataTable tableDataElement;
        
        private VolumeIdDataTable tableVolumeId;
        
        private DataControlDataTable tableDataControl;
        
        private DvdFlagsDataTable tableDvdFlags;
        
        private WriteDDPDataTable tableWriteDDP;
        
        private FixateDataTable tableFixate;
        
        private ReserveTrackDataTable tableReserveTrack;
        
        private WriteDiscDataTable tableWriteDisc;
        
        private ReadDataTable tableRead;
        
        private MapDataTable tableMap;
        
        private ReadTrackDataTable tableReadTrack;
        
        private ReadPVDDataTable tableReadPVD;
        
        private CloseSessionDataTable tableCloseSession;
        
        private Destroy1DataTable tableDestroy1;
        
        private TerminateReadDataTable tableTerminateRead;
        
        private ReadDDPDataTable tableReadDDP;
        
        private ReadDiscDataTable tableReadDisc;
        
        private CallReadProcDataTable tableCallReadProc;
        
        private LabelDataTable tableLabel;
        
        private PCLDataTable tablePCL;
        
        private BMPDataTable tableBMP;
        
        private BTWDataTable tableBTW;
        
        private BTW_ODBCDataTable tableBTW_ODBC;
        
        private PDFDataTable tablePDF;
        
        private CollateDataTable tableCollate;
        
        private CopyDataTable tableCopy;
        
        private DestroyDataTable tableDestroy;
        
        private System.Data.DataRelation relationAction_Record;
        
        private System.Data.DataRelation relationRecord_WriteTrack;
        
        private System.Data.DataRelation relationWriteTrack_Audio;
        
        private System.Data.DataRelation relationAudio_SubIndex;
        
        private System.Data.DataRelation relationAudio_AudioControl;
        
        private System.Data.DataRelation relationWriteTrack_DataElement;
        
        private System.Data.DataRelation relationDataElement_VolumeId;
        
        private System.Data.DataRelation relationDataElement_DataControl;
        
        private System.Data.DataRelation relationDataElement_DvdFlags;
        
        private System.Data.DataRelation relationRecord_WriteDDP;
        
        private System.Data.DataRelation relationRecord_Fixate;
        
        private System.Data.DataRelation relationRecord_ReserveTrack;
        
        private System.Data.DataRelation relationRecord_WriteDisc;
        
        private System.Data.DataRelation relationAction_Read;
        
        private System.Data.DataRelation relationRead_Map;
        
        private System.Data.DataRelation relationRead_ReadTrack;
        
        private System.Data.DataRelation relationRead_ReadPVD;
        
        private System.Data.DataRelation relationRead_CloseSession;
        
        private System.Data.DataRelation relationRead_Destroy1;
        
        private System.Data.DataRelation relationRead_TerminateRead;
        
        private System.Data.DataRelation relationRead_ReadDDP;
        
        private System.Data.DataRelation relationRead_ReadDisc;
        
        private System.Data.DataRelation relationRead_CallReadProc;
        
        private System.Data.DataRelation relationAction_Label;
        
        private System.Data.DataRelation relationLabel_PCL;
        
        private System.Data.DataRelation relationLabel_BMP;
        
        private System.Data.DataRelation relationLabel_BTW;
        
        private System.Data.DataRelation relationLabel_BTW_ODBC;
        
        private System.Data.DataRelation relationLabel_PDF;
        
        private System.Data.DataRelation relationAction_Collate;
        
        private System.Data.DataRelation relationAction_Copy;
        
        private System.Data.DataRelation relationAction_Destroy;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProductionOrder() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ProductionOrder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Media"] != null)) {
                    base.Tables.Add(new MediaDataTable(ds.Tables["Media"]));
                }
                if ((ds.Tables["Target"] != null)) {
                    base.Tables.Add(new TargetDataTable(ds.Tables["Target"]));
                }
                if ((ds.Tables["InOut"] != null)) {
                    base.Tables.Add(new InOutDataTable(ds.Tables["InOut"]));
                }
                if ((ds.Tables["Customize"] != null)) {
                    base.Tables.Add(new CustomizeDataTable(ds.Tables["Customize"]));
                }
                if ((ds.Tables["Action"] != null)) {
                    base.Tables.Add(new ActionDataTable(ds.Tables["Action"]));
                }
                if ((ds.Tables["Record"] != null)) {
                    base.Tables.Add(new RecordDataTable(ds.Tables["Record"]));
                }
                if ((ds.Tables["WriteTrack"] != null)) {
                    base.Tables.Add(new WriteTrackDataTable(ds.Tables["WriteTrack"]));
                }
                if ((ds.Tables["Audio"] != null)) {
                    base.Tables.Add(new AudioDataTable(ds.Tables["Audio"]));
                }
                if ((ds.Tables["SubIndex"] != null)) {
                    base.Tables.Add(new SubIndexDataTable(ds.Tables["SubIndex"]));
                }
                if ((ds.Tables["AudioControl"] != null)) {
                    base.Tables.Add(new AudioControlDataTable(ds.Tables["AudioControl"]));
                }
                if ((ds.Tables["DataElement"] != null)) {
                    base.Tables.Add(new DataElementDataTable(ds.Tables["DataElement"]));
                }
                if ((ds.Tables["VolumeId"] != null)) {
                    base.Tables.Add(new VolumeIdDataTable(ds.Tables["VolumeId"]));
                }
                if ((ds.Tables["DataControl"] != null)) {
                    base.Tables.Add(new DataControlDataTable(ds.Tables["DataControl"]));
                }
                if ((ds.Tables["DvdFlags"] != null)) {
                    base.Tables.Add(new DvdFlagsDataTable(ds.Tables["DvdFlags"]));
                }
                if ((ds.Tables["WriteDDP"] != null)) {
                    base.Tables.Add(new WriteDDPDataTable(ds.Tables["WriteDDP"]));
                }
                if ((ds.Tables["Fixate"] != null)) {
                    base.Tables.Add(new FixateDataTable(ds.Tables["Fixate"]));
                }
                if ((ds.Tables["ReserveTrack"] != null)) {
                    base.Tables.Add(new ReserveTrackDataTable(ds.Tables["ReserveTrack"]));
                }
                if ((ds.Tables["WriteDisc"] != null)) {
                    base.Tables.Add(new WriteDiscDataTable(ds.Tables["WriteDisc"]));
                }
                if ((ds.Tables["Read"] != null)) {
                    base.Tables.Add(new ReadDataTable(ds.Tables["Read"]));
                }
                if ((ds.Tables["Map"] != null)) {
                    base.Tables.Add(new MapDataTable(ds.Tables["Map"]));
                }
                if ((ds.Tables["ReadTrack"] != null)) {
                    base.Tables.Add(new ReadTrackDataTable(ds.Tables["ReadTrack"]));
                }
                if ((ds.Tables["ReadPVD"] != null)) {
                    base.Tables.Add(new ReadPVDDataTable(ds.Tables["ReadPVD"]));
                }
                if ((ds.Tables["CloseSession"] != null)) {
                    base.Tables.Add(new CloseSessionDataTable(ds.Tables["CloseSession"]));
                }
                if ((ds.Tables["Destroy1"] != null)) {
                    base.Tables.Add(new Destroy1DataTable(ds.Tables["Destroy1"]));
                }
                if ((ds.Tables["TerminateRead"] != null)) {
                    base.Tables.Add(new TerminateReadDataTable(ds.Tables["TerminateRead"]));
                }
                if ((ds.Tables["ReadDDP"] != null)) {
                    base.Tables.Add(new ReadDDPDataTable(ds.Tables["ReadDDP"]));
                }
                if ((ds.Tables["ReadDisc"] != null)) {
                    base.Tables.Add(new ReadDiscDataTable(ds.Tables["ReadDisc"]));
                }
                if ((ds.Tables["CallReadProc"] != null)) {
                    base.Tables.Add(new CallReadProcDataTable(ds.Tables["CallReadProc"]));
                }
                if ((ds.Tables["Label"] != null)) {
                    base.Tables.Add(new LabelDataTable(ds.Tables["Label"]));
                }
                if ((ds.Tables["PCL"] != null)) {
                    base.Tables.Add(new PCLDataTable(ds.Tables["PCL"]));
                }
                if ((ds.Tables["BMP"] != null)) {
                    base.Tables.Add(new BMPDataTable(ds.Tables["BMP"]));
                }
                if ((ds.Tables["BTW"] != null)) {
                    base.Tables.Add(new BTWDataTable(ds.Tables["BTW"]));
                }
                if ((ds.Tables["BTW_ODBC"] != null)) {
                    base.Tables.Add(new BTW_ODBCDataTable(ds.Tables["BTW_ODBC"]));
                }
                if ((ds.Tables["PDF"] != null)) {
                    base.Tables.Add(new PDFDataTable(ds.Tables["PDF"]));
                }
                if ((ds.Tables["Collate"] != null)) {
                    base.Tables.Add(new CollateDataTable(ds.Tables["Collate"]));
                }
                if ((ds.Tables["Copy"] != null)) {
                    base.Tables.Add(new CopyDataTable(ds.Tables["Copy"]));
                }
                if ((ds.Tables["Destroy"] != null)) {
                    base.Tables.Add(new DestroyDataTable(ds.Tables["Destroy"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MediaDataTable Media {
            get {
                return this.tableMedia;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TargetDataTable Target {
            get {
                return this.tableTarget;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InOutDataTable InOut {
            get {
                return this.tableInOut;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CustomizeDataTable Customize {
            get {
                return this.tableCustomize;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ActionDataTable Action {
            get {
                return this.tableAction;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RecordDataTable Record {
            get {
                return this.tableRecord;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WriteTrackDataTable WriteTrack {
            get {
                return this.tableWriteTrack;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AudioDataTable Audio {
            get {
                return this.tableAudio;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SubIndexDataTable SubIndex {
            get {
                return this.tableSubIndex;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AudioControlDataTable AudioControl {
            get {
                return this.tableAudioControl;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataElementDataTable DataElement {
            get {
                return this.tableDataElement;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VolumeIdDataTable VolumeId {
            get {
                return this.tableVolumeId;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataControlDataTable DataControl {
            get {
                return this.tableDataControl;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DvdFlagsDataTable DvdFlags {
            get {
                return this.tableDvdFlags;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WriteDDPDataTable WriteDDP {
            get {
                return this.tableWriteDDP;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FixateDataTable Fixate {
            get {
                return this.tableFixate;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReserveTrackDataTable ReserveTrack {
            get {
                return this.tableReserveTrack;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WriteDiscDataTable WriteDisc {
            get {
                return this.tableWriteDisc;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReadDataTable Read {
            get {
                return this.tableRead;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MapDataTable Map {
            get {
                return this.tableMap;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReadTrackDataTable ReadTrack {
            get {
                return this.tableReadTrack;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReadPVDDataTable ReadPVD {
            get {
                return this.tableReadPVD;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CloseSessionDataTable CloseSession {
            get {
                return this.tableCloseSession;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Destroy1DataTable Destroy1 {
            get {
                return this.tableDestroy1;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TerminateReadDataTable TerminateRead {
            get {
                return this.tableTerminateRead;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReadDDPDataTable ReadDDP {
            get {
                return this.tableReadDDP;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReadDiscDataTable ReadDisc {
            get {
                return this.tableReadDisc;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CallReadProcDataTable CallReadProc {
            get {
                return this.tableCallReadProc;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LabelDataTable Label {
            get {
                return this.tableLabel;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PCLDataTable PCL {
            get {
                return this.tablePCL;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BMPDataTable BMP {
            get {
                return this.tableBMP;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BTWDataTable BTW {
            get {
                return this.tableBTW;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BTW_ODBCDataTable BTW_ODBC {
            get {
                return this.tableBTW_ODBC;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PDFDataTable PDF {
            get {
                return this.tablePDF;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CollateDataTable Collate {
            get {
                return this.tableCollate;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CopyDataTable Copy {
            get {
                return this.tableCopy;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DestroyDataTable Destroy {
            get {
                return this.tableDestroy;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            ProductionOrder cln = ((ProductionOrder)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Media"] != null)) {
                    base.Tables.Add(new MediaDataTable(ds.Tables["Media"]));
                }
                if ((ds.Tables["Target"] != null)) {
                    base.Tables.Add(new TargetDataTable(ds.Tables["Target"]));
                }
                if ((ds.Tables["InOut"] != null)) {
                    base.Tables.Add(new InOutDataTable(ds.Tables["InOut"]));
                }
                if ((ds.Tables["Customize"] != null)) {
                    base.Tables.Add(new CustomizeDataTable(ds.Tables["Customize"]));
                }
                if ((ds.Tables["Action"] != null)) {
                    base.Tables.Add(new ActionDataTable(ds.Tables["Action"]));
                }
                if ((ds.Tables["Record"] != null)) {
                    base.Tables.Add(new RecordDataTable(ds.Tables["Record"]));
                }
                if ((ds.Tables["WriteTrack"] != null)) {
                    base.Tables.Add(new WriteTrackDataTable(ds.Tables["WriteTrack"]));
                }
                if ((ds.Tables["Audio"] != null)) {
                    base.Tables.Add(new AudioDataTable(ds.Tables["Audio"]));
                }
                if ((ds.Tables["SubIndex"] != null)) {
                    base.Tables.Add(new SubIndexDataTable(ds.Tables["SubIndex"]));
                }
                if ((ds.Tables["AudioControl"] != null)) {
                    base.Tables.Add(new AudioControlDataTable(ds.Tables["AudioControl"]));
                }
                if ((ds.Tables["DataElement"] != null)) {
                    base.Tables.Add(new DataElementDataTable(ds.Tables["DataElement"]));
                }
                if ((ds.Tables["VolumeId"] != null)) {
                    base.Tables.Add(new VolumeIdDataTable(ds.Tables["VolumeId"]));
                }
                if ((ds.Tables["DataControl"] != null)) {
                    base.Tables.Add(new DataControlDataTable(ds.Tables["DataControl"]));
                }
                if ((ds.Tables["DvdFlags"] != null)) {
                    base.Tables.Add(new DvdFlagsDataTable(ds.Tables["DvdFlags"]));
                }
                if ((ds.Tables["WriteDDP"] != null)) {
                    base.Tables.Add(new WriteDDPDataTable(ds.Tables["WriteDDP"]));
                }
                if ((ds.Tables["Fixate"] != null)) {
                    base.Tables.Add(new FixateDataTable(ds.Tables["Fixate"]));
                }
                if ((ds.Tables["ReserveTrack"] != null)) {
                    base.Tables.Add(new ReserveTrackDataTable(ds.Tables["ReserveTrack"]));
                }
                if ((ds.Tables["WriteDisc"] != null)) {
                    base.Tables.Add(new WriteDiscDataTable(ds.Tables["WriteDisc"]));
                }
                if ((ds.Tables["Read"] != null)) {
                    base.Tables.Add(new ReadDataTable(ds.Tables["Read"]));
                }
                if ((ds.Tables["Map"] != null)) {
                    base.Tables.Add(new MapDataTable(ds.Tables["Map"]));
                }
                if ((ds.Tables["ReadTrack"] != null)) {
                    base.Tables.Add(new ReadTrackDataTable(ds.Tables["ReadTrack"]));
                }
                if ((ds.Tables["ReadPVD"] != null)) {
                    base.Tables.Add(new ReadPVDDataTable(ds.Tables["ReadPVD"]));
                }
                if ((ds.Tables["CloseSession"] != null)) {
                    base.Tables.Add(new CloseSessionDataTable(ds.Tables["CloseSession"]));
                }
                if ((ds.Tables["Destroy1"] != null)) {
                    base.Tables.Add(new Destroy1DataTable(ds.Tables["Destroy1"]));
                }
                if ((ds.Tables["TerminateRead"] != null)) {
                    base.Tables.Add(new TerminateReadDataTable(ds.Tables["TerminateRead"]));
                }
                if ((ds.Tables["ReadDDP"] != null)) {
                    base.Tables.Add(new ReadDDPDataTable(ds.Tables["ReadDDP"]));
                }
                if ((ds.Tables["ReadDisc"] != null)) {
                    base.Tables.Add(new ReadDiscDataTable(ds.Tables["ReadDisc"]));
                }
                if ((ds.Tables["CallReadProc"] != null)) {
                    base.Tables.Add(new CallReadProcDataTable(ds.Tables["CallReadProc"]));
                }
                if ((ds.Tables["Label"] != null)) {
                    base.Tables.Add(new LabelDataTable(ds.Tables["Label"]));
                }
                if ((ds.Tables["PCL"] != null)) {
                    base.Tables.Add(new PCLDataTable(ds.Tables["PCL"]));
                }
                if ((ds.Tables["BMP"] != null)) {
                    base.Tables.Add(new BMPDataTable(ds.Tables["BMP"]));
                }
                if ((ds.Tables["BTW"] != null)) {
                    base.Tables.Add(new BTWDataTable(ds.Tables["BTW"]));
                }
                if ((ds.Tables["BTW_ODBC"] != null)) {
                    base.Tables.Add(new BTW_ODBCDataTable(ds.Tables["BTW_ODBC"]));
                }
                if ((ds.Tables["PDF"] != null)) {
                    base.Tables.Add(new PDFDataTable(ds.Tables["PDF"]));
                }
                if ((ds.Tables["Collate"] != null)) {
                    base.Tables.Add(new CollateDataTable(ds.Tables["Collate"]));
                }
                if ((ds.Tables["Copy"] != null)) {
                    base.Tables.Add(new CopyDataTable(ds.Tables["Copy"]));
                }
                if ((ds.Tables["Destroy"] != null)) {
                    base.Tables.Add(new DestroyDataTable(ds.Tables["Destroy"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableMedia = ((MediaDataTable)(base.Tables["Media"]));
            if ((initTable == true)) {
                if ((this.tableMedia != null)) {
                    this.tableMedia.InitVars();
                }
            }
            this.tableTarget = ((TargetDataTable)(base.Tables["Target"]));
            if ((initTable == true)) {
                if ((this.tableTarget != null)) {
                    this.tableTarget.InitVars();
                }
            }
            this.tableInOut = ((InOutDataTable)(base.Tables["InOut"]));
            if ((initTable == true)) {
                if ((this.tableInOut != null)) {
                    this.tableInOut.InitVars();
                }
            }
            this.tableCustomize = ((CustomizeDataTable)(base.Tables["Customize"]));
            if ((initTable == true)) {
                if ((this.tableCustomize != null)) {
                    this.tableCustomize.InitVars();
                }
            }
            this.tableAction = ((ActionDataTable)(base.Tables["Action"]));
            if ((initTable == true)) {
                if ((this.tableAction != null)) {
                    this.tableAction.InitVars();
                }
            }
            this.tableRecord = ((RecordDataTable)(base.Tables["Record"]));
            if ((initTable == true)) {
                if ((this.tableRecord != null)) {
                    this.tableRecord.InitVars();
                }
            }
            this.tableWriteTrack = ((WriteTrackDataTable)(base.Tables["WriteTrack"]));
            if ((initTable == true)) {
                if ((this.tableWriteTrack != null)) {
                    this.tableWriteTrack.InitVars();
                }
            }
            this.tableAudio = ((AudioDataTable)(base.Tables["Audio"]));
            if ((initTable == true)) {
                if ((this.tableAudio != null)) {
                    this.tableAudio.InitVars();
                }
            }
            this.tableSubIndex = ((SubIndexDataTable)(base.Tables["SubIndex"]));
            if ((initTable == true)) {
                if ((this.tableSubIndex != null)) {
                    this.tableSubIndex.InitVars();
                }
            }
            this.tableAudioControl = ((AudioControlDataTable)(base.Tables["AudioControl"]));
            if ((initTable == true)) {
                if ((this.tableAudioControl != null)) {
                    this.tableAudioControl.InitVars();
                }
            }
            this.tableDataElement = ((DataElementDataTable)(base.Tables["DataElement"]));
            if ((initTable == true)) {
                if ((this.tableDataElement != null)) {
                    this.tableDataElement.InitVars();
                }
            }
            this.tableVolumeId = ((VolumeIdDataTable)(base.Tables["VolumeId"]));
            if ((initTable == true)) {
                if ((this.tableVolumeId != null)) {
                    this.tableVolumeId.InitVars();
                }
            }
            this.tableDataControl = ((DataControlDataTable)(base.Tables["DataControl"]));
            if ((initTable == true)) {
                if ((this.tableDataControl != null)) {
                    this.tableDataControl.InitVars();
                }
            }
            this.tableDvdFlags = ((DvdFlagsDataTable)(base.Tables["DvdFlags"]));
            if ((initTable == true)) {
                if ((this.tableDvdFlags != null)) {
                    this.tableDvdFlags.InitVars();
                }
            }
            this.tableWriteDDP = ((WriteDDPDataTable)(base.Tables["WriteDDP"]));
            if ((initTable == true)) {
                if ((this.tableWriteDDP != null)) {
                    this.tableWriteDDP.InitVars();
                }
            }
            this.tableFixate = ((FixateDataTable)(base.Tables["Fixate"]));
            if ((initTable == true)) {
                if ((this.tableFixate != null)) {
                    this.tableFixate.InitVars();
                }
            }
            this.tableReserveTrack = ((ReserveTrackDataTable)(base.Tables["ReserveTrack"]));
            if ((initTable == true)) {
                if ((this.tableReserveTrack != null)) {
                    this.tableReserveTrack.InitVars();
                }
            }
            this.tableWriteDisc = ((WriteDiscDataTable)(base.Tables["WriteDisc"]));
            if ((initTable == true)) {
                if ((this.tableWriteDisc != null)) {
                    this.tableWriteDisc.InitVars();
                }
            }
            this.tableRead = ((ReadDataTable)(base.Tables["Read"]));
            if ((initTable == true)) {
                if ((this.tableRead != null)) {
                    this.tableRead.InitVars();
                }
            }
            this.tableMap = ((MapDataTable)(base.Tables["Map"]));
            if ((initTable == true)) {
                if ((this.tableMap != null)) {
                    this.tableMap.InitVars();
                }
            }
            this.tableReadTrack = ((ReadTrackDataTable)(base.Tables["ReadTrack"]));
            if ((initTable == true)) {
                if ((this.tableReadTrack != null)) {
                    this.tableReadTrack.InitVars();
                }
            }
            this.tableReadPVD = ((ReadPVDDataTable)(base.Tables["ReadPVD"]));
            if ((initTable == true)) {
                if ((this.tableReadPVD != null)) {
                    this.tableReadPVD.InitVars();
                }
            }
            this.tableCloseSession = ((CloseSessionDataTable)(base.Tables["CloseSession"]));
            if ((initTable == true)) {
                if ((this.tableCloseSession != null)) {
                    this.tableCloseSession.InitVars();
                }
            }
            this.tableDestroy1 = ((Destroy1DataTable)(base.Tables["Destroy1"]));
            if ((initTable == true)) {
                if ((this.tableDestroy1 != null)) {
                    this.tableDestroy1.InitVars();
                }
            }
            this.tableTerminateRead = ((TerminateReadDataTable)(base.Tables["TerminateRead"]));
            if ((initTable == true)) {
                if ((this.tableTerminateRead != null)) {
                    this.tableTerminateRead.InitVars();
                }
            }
            this.tableReadDDP = ((ReadDDPDataTable)(base.Tables["ReadDDP"]));
            if ((initTable == true)) {
                if ((this.tableReadDDP != null)) {
                    this.tableReadDDP.InitVars();
                }
            }
            this.tableReadDisc = ((ReadDiscDataTable)(base.Tables["ReadDisc"]));
            if ((initTable == true)) {
                if ((this.tableReadDisc != null)) {
                    this.tableReadDisc.InitVars();
                }
            }
            this.tableCallReadProc = ((CallReadProcDataTable)(base.Tables["CallReadProc"]));
            if ((initTable == true)) {
                if ((this.tableCallReadProc != null)) {
                    this.tableCallReadProc.InitVars();
                }
            }
            this.tableLabel = ((LabelDataTable)(base.Tables["Label"]));
            if ((initTable == true)) {
                if ((this.tableLabel != null)) {
                    this.tableLabel.InitVars();
                }
            }
            this.tablePCL = ((PCLDataTable)(base.Tables["PCL"]));
            if ((initTable == true)) {
                if ((this.tablePCL != null)) {
                    this.tablePCL.InitVars();
                }
            }
            this.tableBMP = ((BMPDataTable)(base.Tables["BMP"]));
            if ((initTable == true)) {
                if ((this.tableBMP != null)) {
                    this.tableBMP.InitVars();
                }
            }
            this.tableBTW = ((BTWDataTable)(base.Tables["BTW"]));
            if ((initTable == true)) {
                if ((this.tableBTW != null)) {
                    this.tableBTW.InitVars();
                }
            }
            this.tableBTW_ODBC = ((BTW_ODBCDataTable)(base.Tables["BTW_ODBC"]));
            if ((initTable == true)) {
                if ((this.tableBTW_ODBC != null)) {
                    this.tableBTW_ODBC.InitVars();
                }
            }
            this.tablePDF = ((PDFDataTable)(base.Tables["PDF"]));
            if ((initTable == true)) {
                if ((this.tablePDF != null)) {
                    this.tablePDF.InitVars();
                }
            }
            this.tableCollate = ((CollateDataTable)(base.Tables["Collate"]));
            if ((initTable == true)) {
                if ((this.tableCollate != null)) {
                    this.tableCollate.InitVars();
                }
            }
            this.tableCopy = ((CopyDataTable)(base.Tables["Copy"]));
            if ((initTable == true)) {
                if ((this.tableCopy != null)) {
                    this.tableCopy.InitVars();
                }
            }
            this.tableDestroy = ((DestroyDataTable)(base.Tables["Destroy"]));
            if ((initTable == true)) {
                if ((this.tableDestroy != null)) {
                    this.tableDestroy.InitVars();
                }
            }
            this.relationAction_Record = this.Relations["Action_Record"];
            this.relationRecord_WriteTrack = this.Relations["Record_WriteTrack"];
            this.relationWriteTrack_Audio = this.Relations["WriteTrack_Audio"];
            this.relationAudio_SubIndex = this.Relations["Audio_SubIndex"];
            this.relationAudio_AudioControl = this.Relations["Audio_AudioControl"];
            this.relationWriteTrack_DataElement = this.Relations["WriteTrack_DataElement"];
            this.relationDataElement_VolumeId = this.Relations["DataElement_VolumeId"];
            this.relationDataElement_DataControl = this.Relations["DataElement_DataControl"];
            this.relationDataElement_DvdFlags = this.Relations["DataElement_DvdFlags"];
            this.relationRecord_WriteDDP = this.Relations["Record_WriteDDP"];
            this.relationRecord_Fixate = this.Relations["Record_Fixate"];
            this.relationRecord_ReserveTrack = this.Relations["Record_ReserveTrack"];
            this.relationRecord_WriteDisc = this.Relations["Record_WriteDisc"];
            this.relationAction_Read = this.Relations["Action_Read"];
            this.relationRead_Map = this.Relations["Read_Map"];
            this.relationRead_ReadTrack = this.Relations["Read_ReadTrack"];
            this.relationRead_ReadPVD = this.Relations["Read_ReadPVD"];
            this.relationRead_CloseSession = this.Relations["Read_CloseSession"];
            this.relationRead_Destroy1 = this.Relations["Read_Destroy1"];
            this.relationRead_TerminateRead = this.Relations["Read_TerminateRead"];
            this.relationRead_ReadDDP = this.Relations["Read_ReadDDP"];
            this.relationRead_ReadDisc = this.Relations["Read_ReadDisc"];
            this.relationRead_CallReadProc = this.Relations["Read_CallReadProc"];
            this.relationAction_Label = this.Relations["Action_Label"];
            this.relationLabel_PCL = this.Relations["Label_PCL"];
            this.relationLabel_BMP = this.Relations["Label_BMP"];
            this.relationLabel_BTW = this.Relations["Label_BTW"];
            this.relationLabel_BTW_ODBC = this.Relations["Label_BTW_ODBC"];
            this.relationLabel_PDF = this.Relations["Label_PDF"];
            this.relationAction_Collate = this.Relations["Action_Collate"];
            this.relationAction_Copy = this.Relations["Action_Copy"];
            this.relationAction_Destroy = this.Relations["Action_Destroy"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ProductionOrder";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableMedia = new MediaDataTable();
            base.Tables.Add(this.tableMedia);
            this.tableTarget = new TargetDataTable();
            base.Tables.Add(this.tableTarget);
            this.tableInOut = new InOutDataTable();
            base.Tables.Add(this.tableInOut);
            this.tableCustomize = new CustomizeDataTable();
            base.Tables.Add(this.tableCustomize);
            this.tableAction = new ActionDataTable();
            base.Tables.Add(this.tableAction);
            this.tableRecord = new RecordDataTable();
            base.Tables.Add(this.tableRecord);
            this.tableWriteTrack = new WriteTrackDataTable();
            base.Tables.Add(this.tableWriteTrack);
            this.tableAudio = new AudioDataTable();
            base.Tables.Add(this.tableAudio);
            this.tableSubIndex = new SubIndexDataTable();
            base.Tables.Add(this.tableSubIndex);
            this.tableAudioControl = new AudioControlDataTable();
            base.Tables.Add(this.tableAudioControl);
            this.tableDataElement = new DataElementDataTable();
            base.Tables.Add(this.tableDataElement);
            this.tableVolumeId = new VolumeIdDataTable();
            base.Tables.Add(this.tableVolumeId);
            this.tableDataControl = new DataControlDataTable();
            base.Tables.Add(this.tableDataControl);
            this.tableDvdFlags = new DvdFlagsDataTable();
            base.Tables.Add(this.tableDvdFlags);
            this.tableWriteDDP = new WriteDDPDataTable();
            base.Tables.Add(this.tableWriteDDP);
            this.tableFixate = new FixateDataTable();
            base.Tables.Add(this.tableFixate);
            this.tableReserveTrack = new ReserveTrackDataTable();
            base.Tables.Add(this.tableReserveTrack);
            this.tableWriteDisc = new WriteDiscDataTable();
            base.Tables.Add(this.tableWriteDisc);
            this.tableRead = new ReadDataTable();
            base.Tables.Add(this.tableRead);
            this.tableMap = new MapDataTable();
            base.Tables.Add(this.tableMap);
            this.tableReadTrack = new ReadTrackDataTable();
            base.Tables.Add(this.tableReadTrack);
            this.tableReadPVD = new ReadPVDDataTable();
            base.Tables.Add(this.tableReadPVD);
            this.tableCloseSession = new CloseSessionDataTable();
            base.Tables.Add(this.tableCloseSession);
            this.tableDestroy1 = new Destroy1DataTable();
            base.Tables.Add(this.tableDestroy1);
            this.tableTerminateRead = new TerminateReadDataTable();
            base.Tables.Add(this.tableTerminateRead);
            this.tableReadDDP = new ReadDDPDataTable();
            base.Tables.Add(this.tableReadDDP);
            this.tableReadDisc = new ReadDiscDataTable();
            base.Tables.Add(this.tableReadDisc);
            this.tableCallReadProc = new CallReadProcDataTable();
            base.Tables.Add(this.tableCallReadProc);
            this.tableLabel = new LabelDataTable();
            base.Tables.Add(this.tableLabel);
            this.tablePCL = new PCLDataTable();
            base.Tables.Add(this.tablePCL);
            this.tableBMP = new BMPDataTable();
            base.Tables.Add(this.tableBMP);
            this.tableBTW = new BTWDataTable();
            base.Tables.Add(this.tableBTW);
            this.tableBTW_ODBC = new BTW_ODBCDataTable();
            base.Tables.Add(this.tableBTW_ODBC);
            this.tablePDF = new PDFDataTable();
            base.Tables.Add(this.tablePDF);
            this.tableCollate = new CollateDataTable();
            base.Tables.Add(this.tableCollate);
            this.tableCopy = new CopyDataTable();
            base.Tables.Add(this.tableCopy);
            this.tableDestroy = new DestroyDataTable();
            base.Tables.Add(this.tableDestroy);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("Action_Record", new System.Data.DataColumn[] {
                        this.tableAction.Action_IdColumn}, new System.Data.DataColumn[] {
                        this.tableRecord.Action_IdColumn});
            this.tableRecord.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Record_WriteTrack", new System.Data.DataColumn[] {
                        this.tableRecord.Record_IdColumn}, new System.Data.DataColumn[] {
                        this.tableWriteTrack.Record_IdColumn});
            this.tableWriteTrack.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("WriteTrack_Audio", new System.Data.DataColumn[] {
                        this.tableWriteTrack.WriteTrack_IdColumn}, new System.Data.DataColumn[] {
                        this.tableAudio.WriteTrack_IdColumn});
            this.tableAudio.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Audio_SubIndex", new System.Data.DataColumn[] {
                        this.tableAudio.Audio_IdColumn}, new System.Data.DataColumn[] {
                        this.tableSubIndex.Audio_IdColumn});
            this.tableSubIndex.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Audio_AudioControl", new System.Data.DataColumn[] {
                        this.tableAudio.Audio_IdColumn}, new System.Data.DataColumn[] {
                        this.tableAudioControl.Audio_IdColumn});
            this.tableAudioControl.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("WriteTrack_DataElement", new System.Data.DataColumn[] {
                        this.tableWriteTrack.WriteTrack_IdColumn}, new System.Data.DataColumn[] {
                        this.tableDataElement.WriteTrack_IdColumn});
            this.tableDataElement.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("DataElement_VolumeId", new System.Data.DataColumn[] {
                        this.tableDataElement.DataElement_IdColumn}, new System.Data.DataColumn[] {
                        this.tableVolumeId.DataElement_IdColumn});
            this.tableVolumeId.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("DataElement_DataControl", new System.Data.DataColumn[] {
                        this.tableDataElement.DataElement_IdColumn}, new System.Data.DataColumn[] {
                        this.tableDataControl.DataElement_IdColumn});
            this.tableDataControl.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("DataElement_DvdFlags", new System.Data.DataColumn[] {
                        this.tableDataElement.DataElement_IdColumn}, new System.Data.DataColumn[] {
                        this.tableDvdFlags.DataElement_IdColumn});
            this.tableDvdFlags.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Record_WriteDDP", new System.Data.DataColumn[] {
                        this.tableRecord.Record_IdColumn}, new System.Data.DataColumn[] {
                        this.tableWriteDDP.Record_IdColumn});
            this.tableWriteDDP.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Record_Fixate", new System.Data.DataColumn[] {
                        this.tableRecord.Record_IdColumn}, new System.Data.DataColumn[] {
                        this.tableFixate.Record_IdColumn});
            this.tableFixate.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Record_ReserveTrack", new System.Data.DataColumn[] {
                        this.tableRecord.Record_IdColumn}, new System.Data.DataColumn[] {
                        this.tableReserveTrack.Record_IdColumn});
            this.tableReserveTrack.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Record_WriteDisc", new System.Data.DataColumn[] {
                        this.tableRecord.Record_IdColumn}, new System.Data.DataColumn[] {
                        this.tableWriteDisc.Record_IdColumn});
            this.tableWriteDisc.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Action_Read", new System.Data.DataColumn[] {
                        this.tableAction.Action_IdColumn}, new System.Data.DataColumn[] {
                        this.tableRead.Action_IdColumn});
            this.tableRead.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Read_Map", new System.Data.DataColumn[] {
                        this.tableRead.Read_IdColumn}, new System.Data.DataColumn[] {
                        this.tableMap.Read_IdColumn});
            this.tableMap.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Read_ReadTrack", new System.Data.DataColumn[] {
                        this.tableRead.Read_IdColumn}, new System.Data.DataColumn[] {
                        this.tableReadTrack.Read_IdColumn});
            this.tableReadTrack.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Read_ReadPVD", new System.Data.DataColumn[] {
                        this.tableRead.Read_IdColumn}, new System.Data.DataColumn[] {
                        this.tableReadPVD.Read_IdColumn});
            this.tableReadPVD.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Read_CloseSession", new System.Data.DataColumn[] {
                        this.tableRead.Read_IdColumn}, new System.Data.DataColumn[] {
                        this.tableCloseSession.Read_IdColumn});
            this.tableCloseSession.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Read_Destroy1", new System.Data.DataColumn[] {
                        this.tableRead.Read_IdColumn}, new System.Data.DataColumn[] {
                        this.tableDestroy1.Read_IdColumn});
            this.tableDestroy1.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Read_TerminateRead", new System.Data.DataColumn[] {
                        this.tableRead.Read_IdColumn}, new System.Data.DataColumn[] {
                        this.tableTerminateRead.Read_IdColumn});
            this.tableTerminateRead.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Read_ReadDDP", new System.Data.DataColumn[] {
                        this.tableRead.Read_IdColumn}, new System.Data.DataColumn[] {
                        this.tableReadDDP.Read_IdColumn});
            this.tableReadDDP.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Read_ReadDisc", new System.Data.DataColumn[] {
                        this.tableRead.Read_IdColumn}, new System.Data.DataColumn[] {
                        this.tableReadDisc.Read_IdColumn});
            this.tableReadDisc.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Read_CallReadProc", new System.Data.DataColumn[] {
                        this.tableRead.Read_IdColumn}, new System.Data.DataColumn[] {
                        this.tableCallReadProc.Read_IdColumn});
            this.tableCallReadProc.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Action_Label", new System.Data.DataColumn[] {
                        this.tableAction.Action_IdColumn}, new System.Data.DataColumn[] {
                        this.tableLabel.Action_IdColumn});
            this.tableLabel.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Label_PCL", new System.Data.DataColumn[] {
                        this.tableLabel.Label_IdColumn}, new System.Data.DataColumn[] {
                        this.tablePCL.Label_IdColumn});
            this.tablePCL.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Label_BMP", new System.Data.DataColumn[] {
                        this.tableLabel.Label_IdColumn}, new System.Data.DataColumn[] {
                        this.tableBMP.Label_IdColumn});
            this.tableBMP.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Label_BTW", new System.Data.DataColumn[] {
                        this.tableLabel.Label_IdColumn}, new System.Data.DataColumn[] {
                        this.tableBTW.Label_IdColumn});
            this.tableBTW.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Label_BTW_ODBC", new System.Data.DataColumn[] {
                        this.tableLabel.Label_IdColumn}, new System.Data.DataColumn[] {
                        this.tableBTW_ODBC.Label_IdColumn});
            this.tableBTW_ODBC.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Label_PDF", new System.Data.DataColumn[] {
                        this.tableLabel.Label_IdColumn}, new System.Data.DataColumn[] {
                        this.tablePDF.Label_IdColumn});
            this.tablePDF.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Action_Collate", new System.Data.DataColumn[] {
                        this.tableAction.Action_IdColumn}, new System.Data.DataColumn[] {
                        this.tableCollate.Action_IdColumn});
            this.tableCollate.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Action_Copy", new System.Data.DataColumn[] {
                        this.tableAction.Action_IdColumn}, new System.Data.DataColumn[] {
                        this.tableCopy.Action_IdColumn});
            this.tableCopy.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Action_Destroy", new System.Data.DataColumn[] {
                        this.tableAction.Action_IdColumn}, new System.Data.DataColumn[] {
                        this.tableDestroy.Action_IdColumn});
            this.tableDestroy.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationAction_Record = new System.Data.DataRelation("Action_Record", new System.Data.DataColumn[] {
                        this.tableAction.Action_IdColumn}, new System.Data.DataColumn[] {
                        this.tableRecord.Action_IdColumn}, false);
            this.relationAction_Record.Nested = true;
            this.Relations.Add(this.relationAction_Record);
            this.relationRecord_WriteTrack = new System.Data.DataRelation("Record_WriteTrack", new System.Data.DataColumn[] {
                        this.tableRecord.Record_IdColumn}, new System.Data.DataColumn[] {
                        this.tableWriteTrack.Record_IdColumn}, false);
            this.relationRecord_WriteTrack.Nested = true;
            this.Relations.Add(this.relationRecord_WriteTrack);
            this.relationWriteTrack_Audio = new System.Data.DataRelation("WriteTrack_Audio", new System.Data.DataColumn[] {
                        this.tableWriteTrack.WriteTrack_IdColumn}, new System.Data.DataColumn[] {
                        this.tableAudio.WriteTrack_IdColumn}, false);
            this.relationWriteTrack_Audio.Nested = true;
            this.Relations.Add(this.relationWriteTrack_Audio);
            this.relationAudio_SubIndex = new System.Data.DataRelation("Audio_SubIndex", new System.Data.DataColumn[] {
                        this.tableAudio.Audio_IdColumn}, new System.Data.DataColumn[] {
                        this.tableSubIndex.Audio_IdColumn}, false);
            this.relationAudio_SubIndex.Nested = true;
            this.Relations.Add(this.relationAudio_SubIndex);
            this.relationAudio_AudioControl = new System.Data.DataRelation("Audio_AudioControl", new System.Data.DataColumn[] {
                        this.tableAudio.Audio_IdColumn}, new System.Data.DataColumn[] {
                        this.tableAudioControl.Audio_IdColumn}, false);
            this.relationAudio_AudioControl.Nested = true;
            this.Relations.Add(this.relationAudio_AudioControl);
            this.relationWriteTrack_DataElement = new System.Data.DataRelation("WriteTrack_DataElement", new System.Data.DataColumn[] {
                        this.tableWriteTrack.WriteTrack_IdColumn}, new System.Data.DataColumn[] {
                        this.tableDataElement.WriteTrack_IdColumn}, false);
            this.relationWriteTrack_DataElement.Nested = true;
            this.Relations.Add(this.relationWriteTrack_DataElement);
            this.relationDataElement_VolumeId = new System.Data.DataRelation("DataElement_VolumeId", new System.Data.DataColumn[] {
                        this.tableDataElement.DataElement_IdColumn}, new System.Data.DataColumn[] {
                        this.tableVolumeId.DataElement_IdColumn}, false);
            this.relationDataElement_VolumeId.Nested = true;
            this.Relations.Add(this.relationDataElement_VolumeId);
            this.relationDataElement_DataControl = new System.Data.DataRelation("DataElement_DataControl", new System.Data.DataColumn[] {
                        this.tableDataElement.DataElement_IdColumn}, new System.Data.DataColumn[] {
                        this.tableDataControl.DataElement_IdColumn}, false);
            this.relationDataElement_DataControl.Nested = true;
            this.Relations.Add(this.relationDataElement_DataControl);
            this.relationDataElement_DvdFlags = new System.Data.DataRelation("DataElement_DvdFlags", new System.Data.DataColumn[] {
                        this.tableDataElement.DataElement_IdColumn}, new System.Data.DataColumn[] {
                        this.tableDvdFlags.DataElement_IdColumn}, false);
            this.relationDataElement_DvdFlags.Nested = true;
            this.Relations.Add(this.relationDataElement_DvdFlags);
            this.relationRecord_WriteDDP = new System.Data.DataRelation("Record_WriteDDP", new System.Data.DataColumn[] {
                        this.tableRecord.Record_IdColumn}, new System.Data.DataColumn[] {
                        this.tableWriteDDP.Record_IdColumn}, false);
            this.relationRecord_WriteDDP.Nested = true;
            this.Relations.Add(this.relationRecord_WriteDDP);
            this.relationRecord_Fixate = new System.Data.DataRelation("Record_Fixate", new System.Data.DataColumn[] {
                        this.tableRecord.Record_IdColumn}, new System.Data.DataColumn[] {
                        this.tableFixate.Record_IdColumn}, false);
            this.relationRecord_Fixate.Nested = true;
            this.Relations.Add(this.relationRecord_Fixate);
            this.relationRecord_ReserveTrack = new System.Data.DataRelation("Record_ReserveTrack", new System.Data.DataColumn[] {
                        this.tableRecord.Record_IdColumn}, new System.Data.DataColumn[] {
                        this.tableReserveTrack.Record_IdColumn}, false);
            this.relationRecord_ReserveTrack.Nested = true;
            this.Relations.Add(this.relationRecord_ReserveTrack);
            this.relationRecord_WriteDisc = new System.Data.DataRelation("Record_WriteDisc", new System.Data.DataColumn[] {
                        this.tableRecord.Record_IdColumn}, new System.Data.DataColumn[] {
                        this.tableWriteDisc.Record_IdColumn}, false);
            this.relationRecord_WriteDisc.Nested = true;
            this.Relations.Add(this.relationRecord_WriteDisc);
            this.relationAction_Read = new System.Data.DataRelation("Action_Read", new System.Data.DataColumn[] {
                        this.tableAction.Action_IdColumn}, new System.Data.DataColumn[] {
                        this.tableRead.Action_IdColumn}, false);
            this.relationAction_Read.Nested = true;
            this.Relations.Add(this.relationAction_Read);
            this.relationRead_Map = new System.Data.DataRelation("Read_Map", new System.Data.DataColumn[] {
                        this.tableRead.Read_IdColumn}, new System.Data.DataColumn[] {
                        this.tableMap.Read_IdColumn}, false);
            this.relationRead_Map.Nested = true;
            this.Relations.Add(this.relationRead_Map);
            this.relationRead_ReadTrack = new System.Data.DataRelation("Read_ReadTrack", new System.Data.DataColumn[] {
                        this.tableRead.Read_IdColumn}, new System.Data.DataColumn[] {
                        this.tableReadTrack.Read_IdColumn}, false);
            this.relationRead_ReadTrack.Nested = true;
            this.Relations.Add(this.relationRead_ReadTrack);
            this.relationRead_ReadPVD = new System.Data.DataRelation("Read_ReadPVD", new System.Data.DataColumn[] {
                        this.tableRead.Read_IdColumn}, new System.Data.DataColumn[] {
                        this.tableReadPVD.Read_IdColumn}, false);
            this.relationRead_ReadPVD.Nested = true;
            this.Relations.Add(this.relationRead_ReadPVD);
            this.relationRead_CloseSession = new System.Data.DataRelation("Read_CloseSession", new System.Data.DataColumn[] {
                        this.tableRead.Read_IdColumn}, new System.Data.DataColumn[] {
                        this.tableCloseSession.Read_IdColumn}, false);
            this.relationRead_CloseSession.Nested = true;
            this.Relations.Add(this.relationRead_CloseSession);
            this.relationRead_Destroy1 = new System.Data.DataRelation("Read_Destroy1", new System.Data.DataColumn[] {
                        this.tableRead.Read_IdColumn}, new System.Data.DataColumn[] {
                        this.tableDestroy1.Read_IdColumn}, false);
            this.relationRead_Destroy1.Nested = true;
            this.Relations.Add(this.relationRead_Destroy1);
            this.relationRead_TerminateRead = new System.Data.DataRelation("Read_TerminateRead", new System.Data.DataColumn[] {
                        this.tableRead.Read_IdColumn}, new System.Data.DataColumn[] {
                        this.tableTerminateRead.Read_IdColumn}, false);
            this.relationRead_TerminateRead.Nested = true;
            this.Relations.Add(this.relationRead_TerminateRead);
            this.relationRead_ReadDDP = new System.Data.DataRelation("Read_ReadDDP", new System.Data.DataColumn[] {
                        this.tableRead.Read_IdColumn}, new System.Data.DataColumn[] {
                        this.tableReadDDP.Read_IdColumn}, false);
            this.relationRead_ReadDDP.Nested = true;
            this.Relations.Add(this.relationRead_ReadDDP);
            this.relationRead_ReadDisc = new System.Data.DataRelation("Read_ReadDisc", new System.Data.DataColumn[] {
                        this.tableRead.Read_IdColumn}, new System.Data.DataColumn[] {
                        this.tableReadDisc.Read_IdColumn}, false);
            this.relationRead_ReadDisc.Nested = true;
            this.Relations.Add(this.relationRead_ReadDisc);
            this.relationRead_CallReadProc = new System.Data.DataRelation("Read_CallReadProc", new System.Data.DataColumn[] {
                        this.tableRead.Read_IdColumn}, new System.Data.DataColumn[] {
                        this.tableCallReadProc.Read_IdColumn}, false);
            this.relationRead_CallReadProc.Nested = true;
            this.Relations.Add(this.relationRead_CallReadProc);
            this.relationAction_Label = new System.Data.DataRelation("Action_Label", new System.Data.DataColumn[] {
                        this.tableAction.Action_IdColumn}, new System.Data.DataColumn[] {
                        this.tableLabel.Action_IdColumn}, false);
            this.relationAction_Label.Nested = true;
            this.Relations.Add(this.relationAction_Label);
            this.relationLabel_PCL = new System.Data.DataRelation("Label_PCL", new System.Data.DataColumn[] {
                        this.tableLabel.Label_IdColumn}, new System.Data.DataColumn[] {
                        this.tablePCL.Label_IdColumn}, false);
            this.relationLabel_PCL.Nested = true;
            this.Relations.Add(this.relationLabel_PCL);
            this.relationLabel_BMP = new System.Data.DataRelation("Label_BMP", new System.Data.DataColumn[] {
                        this.tableLabel.Label_IdColumn}, new System.Data.DataColumn[] {
                        this.tableBMP.Label_IdColumn}, false);
            this.relationLabel_BMP.Nested = true;
            this.Relations.Add(this.relationLabel_BMP);
            this.relationLabel_BTW = new System.Data.DataRelation("Label_BTW", new System.Data.DataColumn[] {
                        this.tableLabel.Label_IdColumn}, new System.Data.DataColumn[] {
                        this.tableBTW.Label_IdColumn}, false);
            this.relationLabel_BTW.Nested = true;
            this.Relations.Add(this.relationLabel_BTW);
            this.relationLabel_BTW_ODBC = new System.Data.DataRelation("Label_BTW_ODBC", new System.Data.DataColumn[] {
                        this.tableLabel.Label_IdColumn}, new System.Data.DataColumn[] {
                        this.tableBTW_ODBC.Label_IdColumn}, false);
            this.relationLabel_BTW_ODBC.Nested = true;
            this.Relations.Add(this.relationLabel_BTW_ODBC);
            this.relationLabel_PDF = new System.Data.DataRelation("Label_PDF", new System.Data.DataColumn[] {
                        this.tableLabel.Label_IdColumn}, new System.Data.DataColumn[] {
                        this.tablePDF.Label_IdColumn}, false);
            this.relationLabel_PDF.Nested = true;
            this.Relations.Add(this.relationLabel_PDF);
            this.relationAction_Collate = new System.Data.DataRelation("Action_Collate", new System.Data.DataColumn[] {
                        this.tableAction.Action_IdColumn}, new System.Data.DataColumn[] {
                        this.tableCollate.Action_IdColumn}, false);
            this.relationAction_Collate.Nested = true;
            this.Relations.Add(this.relationAction_Collate);
            this.relationAction_Copy = new System.Data.DataRelation("Action_Copy", new System.Data.DataColumn[] {
                        this.tableAction.Action_IdColumn}, new System.Data.DataColumn[] {
                        this.tableCopy.Action_IdColumn}, false);
            this.relationAction_Copy.Nested = true;
            this.Relations.Add(this.relationAction_Copy);
            this.relationAction_Destroy = new System.Data.DataRelation("Action_Destroy", new System.Data.DataColumn[] {
                        this.tableAction.Action_IdColumn}, new System.Data.DataColumn[] {
                        this.tableDestroy.Action_IdColumn}, false);
            this.relationAction_Destroy.Nested = true;
            this.Relations.Add(this.relationAction_Destroy);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMedia() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTarget() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInOut() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCustomize() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAction() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRecord() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeWriteTrack() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAudio() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSubIndex() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAudioControl() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataElement() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeVolumeId() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataControl() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDvdFlags() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeWriteDDP() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFixate() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReserveTrack() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeWriteDisc() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRead() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMap() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReadTrack() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReadPVD() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCloseSession() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDestroy1() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTerminateRead() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReadDDP() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReadDisc() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCallReadProc() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLabel() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePCL() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBMP() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBTW() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBTW_ODBC() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePDF() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCollate() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCopy() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDestroy() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            ProductionOrder ds = new ProductionOrder();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void MediaRowChangeEventHandler(object sender, MediaRowChangeEvent e);
        
        public delegate void TargetRowChangeEventHandler(object sender, TargetRowChangeEvent e);
        
        public delegate void InOutRowChangeEventHandler(object sender, InOutRowChangeEvent e);
        
        public delegate void CustomizeRowChangeEventHandler(object sender, CustomizeRowChangeEvent e);
        
        public delegate void ActionRowChangeEventHandler(object sender, ActionRowChangeEvent e);
        
        public delegate void RecordRowChangeEventHandler(object sender, RecordRowChangeEvent e);
        
        public delegate void WriteTrackRowChangeEventHandler(object sender, WriteTrackRowChangeEvent e);
        
        public delegate void AudioRowChangeEventHandler(object sender, AudioRowChangeEvent e);
        
        public delegate void SubIndexRowChangeEventHandler(object sender, SubIndexRowChangeEvent e);
        
        public delegate void AudioControlRowChangeEventHandler(object sender, AudioControlRowChangeEvent e);
        
        public delegate void DataElementRowChangeEventHandler(object sender, DataElementRowChangeEvent e);
        
        public delegate void VolumeIdRowChangeEventHandler(object sender, VolumeIdRowChangeEvent e);
        
        public delegate void DataControlRowChangeEventHandler(object sender, DataControlRowChangeEvent e);
        
        public delegate void DvdFlagsRowChangeEventHandler(object sender, DvdFlagsRowChangeEvent e);
        
        public delegate void WriteDDPRowChangeEventHandler(object sender, WriteDDPRowChangeEvent e);
        
        public delegate void FixateRowChangeEventHandler(object sender, FixateRowChangeEvent e);
        
        public delegate void ReserveTrackRowChangeEventHandler(object sender, ReserveTrackRowChangeEvent e);
        
        public delegate void WriteDiscRowChangeEventHandler(object sender, WriteDiscRowChangeEvent e);
        
        public delegate void ReadRowChangeEventHandler(object sender, ReadRowChangeEvent e);
        
        public delegate void MapRowChangeEventHandler(object sender, MapRowChangeEvent e);
        
        public delegate void ReadTrackRowChangeEventHandler(object sender, ReadTrackRowChangeEvent e);
        
        public delegate void ReadPVDRowChangeEventHandler(object sender, ReadPVDRowChangeEvent e);
        
        public delegate void CloseSessionRowChangeEventHandler(object sender, CloseSessionRowChangeEvent e);
        
        public delegate void Destroy1RowChangeEventHandler(object sender, Destroy1RowChangeEvent e);
        
        public delegate void TerminateReadRowChangeEventHandler(object sender, TerminateReadRowChangeEvent e);
        
        public delegate void ReadDDPRowChangeEventHandler(object sender, ReadDDPRowChangeEvent e);
        
        public delegate void ReadDiscRowChangeEventHandler(object sender, ReadDiscRowChangeEvent e);
        
        public delegate void CallReadProcRowChangeEventHandler(object sender, CallReadProcRowChangeEvent e);
        
        public delegate void LabelRowChangeEventHandler(object sender, LabelRowChangeEvent e);
        
        public delegate void PCLRowChangeEventHandler(object sender, PCLRowChangeEvent e);
        
        public delegate void BMPRowChangeEventHandler(object sender, BMPRowChangeEvent e);
        
        public delegate void BTWRowChangeEventHandler(object sender, BTWRowChangeEvent e);
        
        public delegate void BTW_ODBCRowChangeEventHandler(object sender, BTW_ODBCRowChangeEvent e);
        
        public delegate void PDFRowChangeEventHandler(object sender, PDFRowChangeEvent e);
        
        public delegate void CollateRowChangeEventHandler(object sender, CollateRowChangeEvent e);
        
        public delegate void CopyRowChangeEventHandler(object sender, CopyRowChangeEvent e);
        
        public delegate void DestroyRowChangeEventHandler(object sender, DestroyRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MediaDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnType;
            
            private System.Data.DataColumn columnSize;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaDataTable() {
                this.TableName = "Media";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MediaDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MediaDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SizeColumn {
                get {
                    return this.columnSize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaRow this[int index] {
                get {
                    return ((MediaRow)(this.Rows[index]));
                }
            }
            
            public event MediaRowChangeEventHandler MediaRowChanging;
            
            public event MediaRowChangeEventHandler MediaRowChanged;
            
            public event MediaRowChangeEventHandler MediaRowDeleting;
            
            public event MediaRowChangeEventHandler MediaRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMediaRow(MediaRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaRow AddMediaRow(string Type, string Size) {
                MediaRow rowMediaRow = ((MediaRow)(this.NewRow()));
                rowMediaRow.ItemArray = new object[] {
                        Type,
                        Size};
                this.Rows.Add(rowMediaRow);
                return rowMediaRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MediaDataTable cln = ((MediaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MediaDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnType = base.Columns["Type"];
                this.columnSize = base.Columns["Size"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnType = new System.Data.DataColumn("Type", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnType);
                this.columnSize = new System.Data.DataColumn("Size", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSize);
                this.columnType.Namespace = "";
                this.columnType.DefaultValue = ((string)("CDR"));
                this.columnSize.Namespace = "";
                this.columnSize.DefaultValue = ((string)("120mm"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaRow NewMediaRow() {
                return ((MediaRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MediaRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MediaRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MediaRowChanged != null)) {
                    this.MediaRowChanged(this, new MediaRowChangeEvent(((MediaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MediaRowChanging != null)) {
                    this.MediaRowChanging(this, new MediaRowChangeEvent(((MediaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MediaRowDeleted != null)) {
                    this.MediaRowDeleted(this, new MediaRowChangeEvent(((MediaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MediaRowDeleting != null)) {
                    this.MediaRowDeleting(this, new MediaRowChangeEvent(((MediaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMediaRow(MediaRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MediaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TargetDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCluster;
            
            private System.Data.DataColumn columnServer;
            
            private System.Data.DataColumn columnLine;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TargetDataTable() {
                this.TableName = "Target";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TargetDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TargetDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClusterColumn {
                get {
                    return this.columnCluster;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ServerColumn {
                get {
                    return this.columnServer;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LineColumn {
                get {
                    return this.columnLine;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TargetRow this[int index] {
                get {
                    return ((TargetRow)(this.Rows[index]));
                }
            }
            
            public event TargetRowChangeEventHandler TargetRowChanging;
            
            public event TargetRowChangeEventHandler TargetRowChanged;
            
            public event TargetRowChangeEventHandler TargetRowDeleting;
            
            public event TargetRowChangeEventHandler TargetRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTargetRow(TargetRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TargetRow AddTargetRow(string Cluster, string Server, string Line) {
                TargetRow rowTargetRow = ((TargetRow)(this.NewRow()));
                rowTargetRow.ItemArray = new object[] {
                        Cluster,
                        Server,
                        Line};
                this.Rows.Add(rowTargetRow);
                return rowTargetRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TargetDataTable cln = ((TargetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TargetDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCluster = base.Columns["Cluster"];
                this.columnServer = base.Columns["Server"];
                this.columnLine = base.Columns["Line"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCluster = new System.Data.DataColumn("Cluster", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCluster);
                this.columnServer = new System.Data.DataColumn("Server", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnServer);
                this.columnLine = new System.Data.DataColumn("Line", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLine);
                this.columnCluster.Namespace = "";
                this.columnCluster.DefaultValue = ((string)("DefaultProductionCluster"));
                this.columnServer.Namespace = "";
                this.columnServer.DefaultValue = ((string)("ANY"));
                this.columnLine.Namespace = "";
                this.columnLine.DefaultValue = ((string)("ANY"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TargetRow NewTargetRow() {
                return ((TargetRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TargetRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TargetRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TargetRowChanged != null)) {
                    this.TargetRowChanged(this, new TargetRowChangeEvent(((TargetRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TargetRowChanging != null)) {
                    this.TargetRowChanging(this, new TargetRowChangeEvent(((TargetRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TargetRowDeleted != null)) {
                    this.TargetRowDeleted(this, new TargetRowChangeEvent(((TargetRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TargetRowDeleting != null)) {
                    this.TargetRowDeleting(this, new TargetRowChangeEvent(((TargetRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTargetRow(TargetRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TargetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InOutDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnInputBin;
            
            private System.Data.DataColumn columnOutputMailslot;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InOutDataTable() {
                this.TableName = "InOut";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InOutDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InOutDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn InputBinColumn {
                get {
                    return this.columnInputBin;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OutputMailslotColumn {
                get {
                    return this.columnOutputMailslot;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InOutRow this[int index] {
                get {
                    return ((InOutRow)(this.Rows[index]));
                }
            }
            
            public event InOutRowChangeEventHandler InOutRowChanging;
            
            public event InOutRowChangeEventHandler InOutRowChanged;
            
            public event InOutRowChangeEventHandler InOutRowDeleting;
            
            public event InOutRowChangeEventHandler InOutRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInOutRow(InOutRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InOutRow AddInOutRow(string InputBin, string OutputMailslot) {
                InOutRow rowInOutRow = ((InOutRow)(this.NewRow()));
                rowInOutRow.ItemArray = new object[] {
                        InputBin,
                        OutputMailslot};
                this.Rows.Add(rowInOutRow);
                return rowInOutRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                InOutDataTable cln = ((InOutDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new InOutDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInputBin = base.Columns["InputBin"];
                this.columnOutputMailslot = base.Columns["OutputMailslot"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInputBin = new System.Data.DataColumn("InputBin", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnInputBin);
                this.columnOutputMailslot = new System.Data.DataColumn("OutputMailslot", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOutputMailslot);
                this.columnInputBin.Namespace = "";
                this.columnInputBin.DefaultValue = ((string)("ANY"));
                this.columnOutputMailslot.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InOutRow NewInOutRow() {
                return ((InOutRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new InOutRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(InOutRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InOutRowChanged != null)) {
                    this.InOutRowChanged(this, new InOutRowChangeEvent(((InOutRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InOutRowChanging != null)) {
                    this.InOutRowChanging(this, new InOutRowChangeEvent(((InOutRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InOutRowDeleted != null)) {
                    this.InOutRowDeleted(this, new InOutRowChangeEvent(((InOutRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InOutRowDeleting != null)) {
                    this.InOutRowDeleting(this, new InOutRowChangeEvent(((InOutRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInOutRow(InOutRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InOutDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CustomizeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUserType;
            
            private System.Data.DataColumn columnUserData;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomizeDataTable() {
                this.TableName = "Customize";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomizeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CustomizeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserTypeColumn {
                get {
                    return this.columnUserType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserDataColumn {
                get {
                    return this.columnUserData;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomizeRow this[int index] {
                get {
                    return ((CustomizeRow)(this.Rows[index]));
                }
            }
            
            public event CustomizeRowChangeEventHandler CustomizeRowChanging;
            
            public event CustomizeRowChangeEventHandler CustomizeRowChanged;
            
            public event CustomizeRowChangeEventHandler CustomizeRowDeleting;
            
            public event CustomizeRowChangeEventHandler CustomizeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCustomizeRow(CustomizeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomizeRow AddCustomizeRow(string UserType, string UserData) {
                CustomizeRow rowCustomizeRow = ((CustomizeRow)(this.NewRow()));
                rowCustomizeRow.ItemArray = new object[] {
                        UserType,
                        UserData};
                this.Rows.Add(rowCustomizeRow);
                return rowCustomizeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CustomizeDataTable cln = ((CustomizeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CustomizeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserType = base.Columns["UserType"];
                this.columnUserData = base.Columns["UserData"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserType = new System.Data.DataColumn("UserType", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUserType);
                this.columnUserData = new System.Data.DataColumn("UserData", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUserData);
                this.columnUserType.AllowDBNull = false;
                this.columnUserType.Namespace = "";
                this.columnUserData.AllowDBNull = false;
                this.columnUserData.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomizeRow NewCustomizeRow() {
                return ((CustomizeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CustomizeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CustomizeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CustomizeRowChanged != null)) {
                    this.CustomizeRowChanged(this, new CustomizeRowChangeEvent(((CustomizeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CustomizeRowChanging != null)) {
                    this.CustomizeRowChanging(this, new CustomizeRowChangeEvent(((CustomizeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CustomizeRowDeleted != null)) {
                    this.CustomizeRowDeleted(this, new CustomizeRowChangeEvent(((CustomizeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CustomizeRowDeleting != null)) {
                    this.CustomizeRowDeleting(this, new CustomizeRowChangeEvent(((CustomizeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCustomizeRow(CustomizeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CustomizeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ActionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnAction_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionDataTable() {
                this.TableName = "Action";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ActionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ActionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Action_IdColumn {
                get {
                    return this.columnAction_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionRow this[int index] {
                get {
                    return ((ActionRow)(this.Rows[index]));
                }
            }
            
            public event ActionRowChangeEventHandler ActionRowChanging;
            
            public event ActionRowChangeEventHandler ActionRowChanged;
            
            public event ActionRowChangeEventHandler ActionRowDeleting;
            
            public event ActionRowChangeEventHandler ActionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddActionRow(ActionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionRow AddActionRow() {
                ActionRow rowActionRow = ((ActionRow)(this.NewRow()));
                rowActionRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowActionRow);
                return rowActionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ActionDataTable cln = ((ActionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ActionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAction_Id = base.Columns["Action_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAction_Id = new System.Data.DataColumn("Action_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAction_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnAction_Id}, true));
                this.columnAction_Id.AutoIncrement = true;
                this.columnAction_Id.AllowDBNull = false;
                this.columnAction_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionRow NewActionRow() {
                return ((ActionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ActionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ActionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ActionRowChanged != null)) {
                    this.ActionRowChanged(this, new ActionRowChangeEvent(((ActionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ActionRowChanging != null)) {
                    this.ActionRowChanging(this, new ActionRowChangeEvent(((ActionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ActionRowDeleted != null)) {
                    this.ActionRowDeleted(this, new ActionRowChangeEvent(((ActionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ActionRowDeleting != null)) {
                    this.ActionRowDeleting(this, new ActionRowChangeEvent(((ActionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveActionRow(ActionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ActionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RecordDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnRecord_Id;
            
            private System.Data.DataColumn columnAction_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordDataTable() {
                this.TableName = "Record";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RecordDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RecordDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Record_IdColumn {
                get {
                    return this.columnRecord_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Action_IdColumn {
                get {
                    return this.columnAction_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordRow this[int index] {
                get {
                    return ((RecordRow)(this.Rows[index]));
                }
            }
            
            public event RecordRowChangeEventHandler RecordRowChanging;
            
            public event RecordRowChangeEventHandler RecordRowChanged;
            
            public event RecordRowChangeEventHandler RecordRowDeleting;
            
            public event RecordRowChangeEventHandler RecordRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRecordRow(RecordRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordRow AddRecordRow(ActionRow parentActionRowByAction_Record) {
                RecordRow rowRecordRow = ((RecordRow)(this.NewRow()));
                rowRecordRow.ItemArray = new object[] {
                        null,
                        parentActionRowByAction_Record[0]};
                this.Rows.Add(rowRecordRow);
                return rowRecordRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RecordDataTable cln = ((RecordDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RecordDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRecord_Id = base.Columns["Record_Id"];
                this.columnAction_Id = base.Columns["Action_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRecord_Id = new System.Data.DataColumn("Record_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRecord_Id);
                this.columnAction_Id = new System.Data.DataColumn("Action_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAction_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnRecord_Id}, true));
                this.columnRecord_Id.AutoIncrement = true;
                this.columnRecord_Id.AllowDBNull = false;
                this.columnRecord_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordRow NewRecordRow() {
                return ((RecordRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RecordRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RecordRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RecordRowChanged != null)) {
                    this.RecordRowChanged(this, new RecordRowChangeEvent(((RecordRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RecordRowChanging != null)) {
                    this.RecordRowChanging(this, new RecordRowChangeEvent(((RecordRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RecordRowDeleted != null)) {
                    this.RecordRowDeleted(this, new RecordRowChangeEvent(((RecordRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RecordRowDeleting != null)) {
                    this.RecordRowDeleting(this, new RecordRowChangeEvent(((RecordRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRecordRow(RecordRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RecordDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class WriteTrackDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFilename;
            
            private System.Data.DataColumn columnReservedTrackNumber;
            
            private System.Data.DataColumn columnDeleteAfterRecording;
            
            private System.Data.DataColumn columnWriteTrack_Id;
            
            private System.Data.DataColumn columnRecord_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WriteTrackDataTable() {
                this.TableName = "WriteTrack";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WriteTrackDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected WriteTrackDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FilenameColumn {
                get {
                    return this.columnFilename;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReservedTrackNumberColumn {
                get {
                    return this.columnReservedTrackNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DeleteAfterRecordingColumn {
                get {
                    return this.columnDeleteAfterRecording;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WriteTrack_IdColumn {
                get {
                    return this.columnWriteTrack_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Record_IdColumn {
                get {
                    return this.columnRecord_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WriteTrackRow this[int index] {
                get {
                    return ((WriteTrackRow)(this.Rows[index]));
                }
            }
            
            public event WriteTrackRowChangeEventHandler WriteTrackRowChanging;
            
            public event WriteTrackRowChangeEventHandler WriteTrackRowChanged;
            
            public event WriteTrackRowChangeEventHandler WriteTrackRowDeleting;
            
            public event WriteTrackRowChangeEventHandler WriteTrackRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddWriteTrackRow(WriteTrackRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WriteTrackRow AddWriteTrackRow(string Filename, string ReservedTrackNumber, string DeleteAfterRecording, RecordRow parentRecordRowByRecord_WriteTrack) {
                WriteTrackRow rowWriteTrackRow = ((WriteTrackRow)(this.NewRow()));
                rowWriteTrackRow.ItemArray = new object[] {
                        Filename,
                        ReservedTrackNumber,
                        DeleteAfterRecording,
                        null,
                        parentRecordRowByRecord_WriteTrack[0]};
                this.Rows.Add(rowWriteTrackRow);
                return rowWriteTrackRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                WriteTrackDataTable cln = ((WriteTrackDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new WriteTrackDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFilename = base.Columns["Filename"];
                this.columnReservedTrackNumber = base.Columns["ReservedTrackNumber"];
                this.columnDeleteAfterRecording = base.Columns["DeleteAfterRecording"];
                this.columnWriteTrack_Id = base.Columns["WriteTrack_Id"];
                this.columnRecord_Id = base.Columns["Record_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFilename = new System.Data.DataColumn("Filename", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFilename);
                this.columnReservedTrackNumber = new System.Data.DataColumn("ReservedTrackNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnReservedTrackNumber);
                this.columnDeleteAfterRecording = new System.Data.DataColumn("DeleteAfterRecording", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDeleteAfterRecording);
                this.columnWriteTrack_Id = new System.Data.DataColumn("WriteTrack_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnWriteTrack_Id);
                this.columnRecord_Id = new System.Data.DataColumn("Record_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRecord_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnWriteTrack_Id}, true));
                this.columnFilename.AllowDBNull = false;
                this.columnFilename.Namespace = "";
                this.columnReservedTrackNumber.Namespace = "";
                this.columnDeleteAfterRecording.Namespace = "";
                this.columnDeleteAfterRecording.DefaultValue = ((string)("false"));
                this.columnWriteTrack_Id.AutoIncrement = true;
                this.columnWriteTrack_Id.AllowDBNull = false;
                this.columnWriteTrack_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WriteTrackRow NewWriteTrackRow() {
                return ((WriteTrackRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new WriteTrackRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(WriteTrackRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WriteTrackRowChanged != null)) {
                    this.WriteTrackRowChanged(this, new WriteTrackRowChangeEvent(((WriteTrackRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WriteTrackRowChanging != null)) {
                    this.WriteTrackRowChanging(this, new WriteTrackRowChangeEvent(((WriteTrackRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WriteTrackRowDeleted != null)) {
                    this.WriteTrackRowDeleted(this, new WriteTrackRowChangeEvent(((WriteTrackRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WriteTrackRowDeleting != null)) {
                    this.WriteTrackRowDeleting(this, new WriteTrackRowChangeEvent(((WriteTrackRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveWriteTrackRow(WriteTrackRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WriteTrackDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AudioDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnISRC;
            
            private System.Data.DataColumn columnAddPregapBlocks;
            
            private System.Data.DataColumn columnEmbeddedPregapBlocks;
            
            private System.Data.DataColumn columnAudio_Id;
            
            private System.Data.DataColumn columnWriteTrack_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AudioDataTable() {
                this.TableName = "Audio";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AudioDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AudioDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ISRCColumn {
                get {
                    return this.columnISRC;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AddPregapBlocksColumn {
                get {
                    return this.columnAddPregapBlocks;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EmbeddedPregapBlocksColumn {
                get {
                    return this.columnEmbeddedPregapBlocks;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Audio_IdColumn {
                get {
                    return this.columnAudio_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WriteTrack_IdColumn {
                get {
                    return this.columnWriteTrack_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AudioRow this[int index] {
                get {
                    return ((AudioRow)(this.Rows[index]));
                }
            }
            
            public event AudioRowChangeEventHandler AudioRowChanging;
            
            public event AudioRowChangeEventHandler AudioRowChanged;
            
            public event AudioRowChangeEventHandler AudioRowDeleting;
            
            public event AudioRowChangeEventHandler AudioRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAudioRow(AudioRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AudioRow AddAudioRow(string ISRC, string AddPregapBlocks, string EmbeddedPregapBlocks, WriteTrackRow parentWriteTrackRowByWriteTrack_Audio) {
                AudioRow rowAudioRow = ((AudioRow)(this.NewRow()));
                rowAudioRow.ItemArray = new object[] {
                        ISRC,
                        AddPregapBlocks,
                        EmbeddedPregapBlocks,
                        null,
                        parentWriteTrackRowByWriteTrack_Audio[3]};
                this.Rows.Add(rowAudioRow);
                return rowAudioRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                AudioDataTable cln = ((AudioDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new AudioDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnISRC = base.Columns["ISRC"];
                this.columnAddPregapBlocks = base.Columns["AddPregapBlocks"];
                this.columnEmbeddedPregapBlocks = base.Columns["EmbeddedPregapBlocks"];
                this.columnAudio_Id = base.Columns["Audio_Id"];
                this.columnWriteTrack_Id = base.Columns["WriteTrack_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnISRC = new System.Data.DataColumn("ISRC", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnISRC);
                this.columnAddPregapBlocks = new System.Data.DataColumn("AddPregapBlocks", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAddPregapBlocks);
                this.columnEmbeddedPregapBlocks = new System.Data.DataColumn("EmbeddedPregapBlocks", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEmbeddedPregapBlocks);
                this.columnAudio_Id = new System.Data.DataColumn("Audio_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAudio_Id);
                this.columnWriteTrack_Id = new System.Data.DataColumn("WriteTrack_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnWriteTrack_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnAudio_Id}, true));
                this.columnISRC.Namespace = "";
                this.columnAddPregapBlocks.Namespace = "";
                this.columnEmbeddedPregapBlocks.Namespace = "";
                this.columnAudio_Id.AutoIncrement = true;
                this.columnAudio_Id.AllowDBNull = false;
                this.columnAudio_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AudioRow NewAudioRow() {
                return ((AudioRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AudioRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(AudioRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AudioRowChanged != null)) {
                    this.AudioRowChanged(this, new AudioRowChangeEvent(((AudioRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AudioRowChanging != null)) {
                    this.AudioRowChanging(this, new AudioRowChangeEvent(((AudioRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AudioRowDeleted != null)) {
                    this.AudioRowDeleted(this, new AudioRowChangeEvent(((AudioRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AudioRowDeleting != null)) {
                    this.AudioRowDeleting(this, new AudioRowChangeEvent(((AudioRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAudioRow(AudioRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AudioDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SubIndexDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnBlockNumber;
            
            private System.Data.DataColumn columnAudio_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubIndexDataTable() {
                this.TableName = "SubIndex";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubIndexDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SubIndexDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BlockNumberColumn {
                get {
                    return this.columnBlockNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Audio_IdColumn {
                get {
                    return this.columnAudio_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubIndexRow this[int index] {
                get {
                    return ((SubIndexRow)(this.Rows[index]));
                }
            }
            
            public event SubIndexRowChangeEventHandler SubIndexRowChanging;
            
            public event SubIndexRowChangeEventHandler SubIndexRowChanged;
            
            public event SubIndexRowChangeEventHandler SubIndexRowDeleting;
            
            public event SubIndexRowChangeEventHandler SubIndexRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSubIndexRow(SubIndexRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubIndexRow AddSubIndexRow(string BlockNumber, AudioRow parentAudioRowByAudio_SubIndex) {
                SubIndexRow rowSubIndexRow = ((SubIndexRow)(this.NewRow()));
                rowSubIndexRow.ItemArray = new object[] {
                        BlockNumber,
                        parentAudioRowByAudio_SubIndex[3]};
                this.Rows.Add(rowSubIndexRow);
                return rowSubIndexRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SubIndexDataTable cln = ((SubIndexDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SubIndexDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBlockNumber = base.Columns["BlockNumber"];
                this.columnAudio_Id = base.Columns["Audio_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBlockNumber = new System.Data.DataColumn("BlockNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnBlockNumber);
                this.columnAudio_Id = new System.Data.DataColumn("Audio_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAudio_Id);
                this.columnBlockNumber.AllowDBNull = false;
                this.columnBlockNumber.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubIndexRow NewSubIndexRow() {
                return ((SubIndexRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SubIndexRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SubIndexRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SubIndexRowChanged != null)) {
                    this.SubIndexRowChanged(this, new SubIndexRowChangeEvent(((SubIndexRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SubIndexRowChanging != null)) {
                    this.SubIndexRowChanging(this, new SubIndexRowChangeEvent(((SubIndexRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SubIndexRowDeleted != null)) {
                    this.SubIndexRowDeleted(this, new SubIndexRowChangeEvent(((SubIndexRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SubIndexRowDeleting != null)) {
                    this.SubIndexRowDeleting(this, new SubIndexRowChangeEvent(((SubIndexRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSubIndexRow(SubIndexRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SubIndexDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AudioControlDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnAllowCopy;
            
            private System.Data.DataColumn columnPreEmphasis;
            
            private System.Data.DataColumn columnFourChannel;
            
            private System.Data.DataColumn columnAudio_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AudioControlDataTable() {
                this.TableName = "AudioControl";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AudioControlDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AudioControlDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AllowCopyColumn {
                get {
                    return this.columnAllowCopy;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PreEmphasisColumn {
                get {
                    return this.columnPreEmphasis;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FourChannelColumn {
                get {
                    return this.columnFourChannel;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Audio_IdColumn {
                get {
                    return this.columnAudio_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AudioControlRow this[int index] {
                get {
                    return ((AudioControlRow)(this.Rows[index]));
                }
            }
            
            public event AudioControlRowChangeEventHandler AudioControlRowChanging;
            
            public event AudioControlRowChangeEventHandler AudioControlRowChanged;
            
            public event AudioControlRowChangeEventHandler AudioControlRowDeleting;
            
            public event AudioControlRowChangeEventHandler AudioControlRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAudioControlRow(AudioControlRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AudioControlRow AddAudioControlRow(string AllowCopy, string PreEmphasis, string FourChannel, AudioRow parentAudioRowByAudio_AudioControl) {
                AudioControlRow rowAudioControlRow = ((AudioControlRow)(this.NewRow()));
                rowAudioControlRow.ItemArray = new object[] {
                        AllowCopy,
                        PreEmphasis,
                        FourChannel,
                        parentAudioRowByAudio_AudioControl[3]};
                this.Rows.Add(rowAudioControlRow);
                return rowAudioControlRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                AudioControlDataTable cln = ((AudioControlDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new AudioControlDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAllowCopy = base.Columns["AllowCopy"];
                this.columnPreEmphasis = base.Columns["PreEmphasis"];
                this.columnFourChannel = base.Columns["FourChannel"];
                this.columnAudio_Id = base.Columns["Audio_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAllowCopy = new System.Data.DataColumn("AllowCopy", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAllowCopy);
                this.columnPreEmphasis = new System.Data.DataColumn("PreEmphasis", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPreEmphasis);
                this.columnFourChannel = new System.Data.DataColumn("FourChannel", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFourChannel);
                this.columnAudio_Id = new System.Data.DataColumn("Audio_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAudio_Id);
                this.columnAllowCopy.Namespace = "";
                this.columnAllowCopy.DefaultValue = ((string)("false"));
                this.columnPreEmphasis.Namespace = "";
                this.columnPreEmphasis.DefaultValue = ((string)("false"));
                this.columnFourChannel.Namespace = "";
                this.columnFourChannel.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AudioControlRow NewAudioControlRow() {
                return ((AudioControlRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AudioControlRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(AudioControlRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AudioControlRowChanged != null)) {
                    this.AudioControlRowChanged(this, new AudioControlRowChangeEvent(((AudioControlRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AudioControlRowChanging != null)) {
                    this.AudioControlRowChanging(this, new AudioControlRowChangeEvent(((AudioControlRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AudioControlRowDeleted != null)) {
                    this.AudioControlRowDeleted(this, new AudioControlRowChangeEvent(((AudioControlRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AudioControlRowDeleting != null)) {
                    this.AudioControlRowDeleting(this, new AudioControlRowChangeEvent(((AudioControlRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAudioControlRow(AudioControlRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AudioControlDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataElementDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnType;
            
            private System.Data.DataColumn columnMergeSessions;
            
            private System.Data.DataColumn columnDisableExtentFixups;
            
            private System.Data.DataColumn columnVerifyChecksum;
            
            private System.Data.DataColumn columnDataElement_Id;
            
            private System.Data.DataColumn columnWriteTrack_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataElementDataTable() {
                this.TableName = "DataElement";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataElementDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataElementDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MergeSessionsColumn {
                get {
                    return this.columnMergeSessions;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DisableExtentFixupsColumn {
                get {
                    return this.columnDisableExtentFixups;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VerifyChecksumColumn {
                get {
                    return this.columnVerifyChecksum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DataElement_IdColumn {
                get {
                    return this.columnDataElement_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WriteTrack_IdColumn {
                get {
                    return this.columnWriteTrack_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataElementRow this[int index] {
                get {
                    return ((DataElementRow)(this.Rows[index]));
                }
            }
            
            public event DataElementRowChangeEventHandler DataElementRowChanging;
            
            public event DataElementRowChangeEventHandler DataElementRowChanged;
            
            public event DataElementRowChangeEventHandler DataElementRowDeleting;
            
            public event DataElementRowChangeEventHandler DataElementRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataElementRow(DataElementRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataElementRow AddDataElementRow(string Type, string MergeSessions, string DisableExtentFixups, string VerifyChecksum, WriteTrackRow parentWriteTrackRowByWriteTrack_DataElement) {
                DataElementRow rowDataElementRow = ((DataElementRow)(this.NewRow()));
                rowDataElementRow.ItemArray = new object[] {
                        Type,
                        MergeSessions,
                        DisableExtentFixups,
                        VerifyChecksum,
                        null,
                        parentWriteTrackRowByWriteTrack_DataElement[3]};
                this.Rows.Add(rowDataElementRow);
                return rowDataElementRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DataElementDataTable cln = ((DataElementDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DataElementDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnType = base.Columns["Type"];
                this.columnMergeSessions = base.Columns["MergeSessions"];
                this.columnDisableExtentFixups = base.Columns["DisableExtentFixups"];
                this.columnVerifyChecksum = base.Columns["VerifyChecksum"];
                this.columnDataElement_Id = base.Columns["DataElement_Id"];
                this.columnWriteTrack_Id = base.Columns["WriteTrack_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnType = new System.Data.DataColumn("Type", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnType);
                this.columnMergeSessions = new System.Data.DataColumn("MergeSessions", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMergeSessions);
                this.columnDisableExtentFixups = new System.Data.DataColumn("DisableExtentFixups", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDisableExtentFixups);
                this.columnVerifyChecksum = new System.Data.DataColumn("VerifyChecksum", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnVerifyChecksum);
                this.columnDataElement_Id = new System.Data.DataColumn("DataElement_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDataElement_Id);
                this.columnWriteTrack_Id = new System.Data.DataColumn("WriteTrack_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnWriteTrack_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnDataElement_Id}, true));
                this.columnType.Namespace = "";
                this.columnType.DefaultValue = ((string)("Mode1"));
                this.columnMergeSessions.Namespace = "";
                this.columnMergeSessions.DefaultValue = ((string)("false"));
                this.columnDisableExtentFixups.Namespace = "";
                this.columnDisableExtentFixups.DefaultValue = ((string)("false"));
                this.columnVerifyChecksum.Namespace = "";
                this.columnDataElement_Id.AutoIncrement = true;
                this.columnDataElement_Id.AllowDBNull = false;
                this.columnDataElement_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataElementRow NewDataElementRow() {
                return ((DataElementRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DataElementRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DataElementRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataElementRowChanged != null)) {
                    this.DataElementRowChanged(this, new DataElementRowChangeEvent(((DataElementRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataElementRowChanging != null)) {
                    this.DataElementRowChanging(this, new DataElementRowChangeEvent(((DataElementRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataElementRowDeleted != null)) {
                    this.DataElementRowDeleted(this, new DataElementRowChangeEvent(((DataElementRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataElementRowDeleting != null)) {
                    this.DataElementRowDeleting(this, new DataElementRowChangeEvent(((DataElementRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataElementRow(DataElementRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataElementDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class VolumeIdDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnvolume_id;
            
            private System.Data.DataColumn columnUsage;
            
            private System.Data.DataColumn columnPvdFilename;
            
            private System.Data.DataColumn columnDataElement_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VolumeIdDataTable() {
                this.TableName = "VolumeId";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VolumeIdDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected VolumeIdDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn volume_idColumn {
                get {
                    return this.columnvolume_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UsageColumn {
                get {
                    return this.columnUsage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PvdFilenameColumn {
                get {
                    return this.columnPvdFilename;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DataElement_IdColumn {
                get {
                    return this.columnDataElement_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VolumeIdRow this[int index] {
                get {
                    return ((VolumeIdRow)(this.Rows[index]));
                }
            }
            
            public event VolumeIdRowChangeEventHandler VolumeIdRowChanging;
            
            public event VolumeIdRowChangeEventHandler VolumeIdRowChanged;
            
            public event VolumeIdRowChangeEventHandler VolumeIdRowDeleting;
            
            public event VolumeIdRowChangeEventHandler VolumeIdRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddVolumeIdRow(VolumeIdRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VolumeIdRow AddVolumeIdRow(string volume_id, string Usage, string PvdFilename, DataElementRow parentDataElementRowByDataElement_VolumeId) {
                VolumeIdRow rowVolumeIdRow = ((VolumeIdRow)(this.NewRow()));
                rowVolumeIdRow.ItemArray = new object[] {
                        volume_id,
                        Usage,
                        PvdFilename,
                        parentDataElementRowByDataElement_VolumeId[4]};
                this.Rows.Add(rowVolumeIdRow);
                return rowVolumeIdRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                VolumeIdDataTable cln = ((VolumeIdDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new VolumeIdDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnvolume_id = base.Columns["volume_id"];
                this.columnUsage = base.Columns["Usage"];
                this.columnPvdFilename = base.Columns["PvdFilename"];
                this.columnDataElement_Id = base.Columns["DataElement_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnvolume_id = new System.Data.DataColumn("volume_id", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnvolume_id);
                this.columnUsage = new System.Data.DataColumn("Usage", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUsage);
                this.columnPvdFilename = new System.Data.DataColumn("PvdFilename", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPvdFilename);
                this.columnDataElement_Id = new System.Data.DataColumn("DataElement_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDataElement_Id);
                this.columnvolume_id.Namespace = "";
                this.columnUsage.Namespace = "";
                this.columnUsage.DefaultValue = ((string)("MustExistOnDisc"));
                this.columnPvdFilename.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VolumeIdRow NewVolumeIdRow() {
                return ((VolumeIdRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new VolumeIdRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(VolumeIdRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VolumeIdRowChanged != null)) {
                    this.VolumeIdRowChanged(this, new VolumeIdRowChangeEvent(((VolumeIdRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VolumeIdRowChanging != null)) {
                    this.VolumeIdRowChanging(this, new VolumeIdRowChangeEvent(((VolumeIdRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VolumeIdRowDeleted != null)) {
                    this.VolumeIdRowDeleted(this, new VolumeIdRowChangeEvent(((VolumeIdRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VolumeIdRowDeleting != null)) {
                    this.VolumeIdRowDeleting(this, new VolumeIdRowChangeEvent(((VolumeIdRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveVolumeIdRow(VolumeIdRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VolumeIdDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataControlDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnBit1;
            
            private System.Data.DataColumn columnAllowCopy;
            
            private System.Data.DataColumn columnBit4;
            
            private System.Data.DataColumn columnBit8;
            
            private System.Data.DataColumn columnDataElement_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataControlDataTable() {
                this.TableName = "DataControl";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataControlDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataControlDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Bit1Column {
                get {
                    return this.columnBit1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AllowCopyColumn {
                get {
                    return this.columnAllowCopy;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Bit4Column {
                get {
                    return this.columnBit4;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Bit8Column {
                get {
                    return this.columnBit8;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DataElement_IdColumn {
                get {
                    return this.columnDataElement_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataControlRow this[int index] {
                get {
                    return ((DataControlRow)(this.Rows[index]));
                }
            }
            
            public event DataControlRowChangeEventHandler DataControlRowChanging;
            
            public event DataControlRowChangeEventHandler DataControlRowChanged;
            
            public event DataControlRowChangeEventHandler DataControlRowDeleting;
            
            public event DataControlRowChangeEventHandler DataControlRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataControlRow(DataControlRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataControlRow AddDataControlRow(string Bit1, string AllowCopy, string Bit4, string Bit8, DataElementRow parentDataElementRowByDataElement_DataControl) {
                DataControlRow rowDataControlRow = ((DataControlRow)(this.NewRow()));
                rowDataControlRow.ItemArray = new object[] {
                        Bit1,
                        AllowCopy,
                        Bit4,
                        Bit8,
                        parentDataElementRowByDataElement_DataControl[4]};
                this.Rows.Add(rowDataControlRow);
                return rowDataControlRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DataControlDataTable cln = ((DataControlDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DataControlDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBit1 = base.Columns["Bit1"];
                this.columnAllowCopy = base.Columns["AllowCopy"];
                this.columnBit4 = base.Columns["Bit4"];
                this.columnBit8 = base.Columns["Bit8"];
                this.columnDataElement_Id = base.Columns["DataElement_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBit1 = new System.Data.DataColumn("Bit1", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnBit1);
                this.columnAllowCopy = new System.Data.DataColumn("AllowCopy", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAllowCopy);
                this.columnBit4 = new System.Data.DataColumn("Bit4", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnBit4);
                this.columnBit8 = new System.Data.DataColumn("Bit8", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnBit8);
                this.columnDataElement_Id = new System.Data.DataColumn("DataElement_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDataElement_Id);
                this.columnBit1.Namespace = "";
                this.columnBit1.DefaultValue = ((string)("false"));
                this.columnAllowCopy.Namespace = "";
                this.columnAllowCopy.DefaultValue = ((string)("false"));
                this.columnBit4.Namespace = "";
                this.columnBit4.DefaultValue = ((string)("true"));
                this.columnBit8.Namespace = "";
                this.columnBit8.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataControlRow NewDataControlRow() {
                return ((DataControlRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DataControlRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DataControlRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataControlRowChanged != null)) {
                    this.DataControlRowChanged(this, new DataControlRowChangeEvent(((DataControlRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataControlRowChanging != null)) {
                    this.DataControlRowChanging(this, new DataControlRowChangeEvent(((DataControlRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataControlRowDeleted != null)) {
                    this.DataControlRowDeleted(this, new DataControlRowChangeEvent(((DataControlRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataControlRowDeleting != null)) {
                    this.DataControlRowDeleting(this, new DataControlRowChangeEvent(((DataControlRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataControlRow(DataControlRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataControlDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DvdFlagsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnADP_TY;
            
            private System.Data.DataColumn columnDataElement_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DvdFlagsDataTable() {
                this.TableName = "DvdFlags";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DvdFlagsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DvdFlagsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ADP_TYColumn {
                get {
                    return this.columnADP_TY;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DataElement_IdColumn {
                get {
                    return this.columnDataElement_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DvdFlagsRow this[int index] {
                get {
                    return ((DvdFlagsRow)(this.Rows[index]));
                }
            }
            
            public event DvdFlagsRowChangeEventHandler DvdFlagsRowChanging;
            
            public event DvdFlagsRowChangeEventHandler DvdFlagsRowChanged;
            
            public event DvdFlagsRowChangeEventHandler DvdFlagsRowDeleting;
            
            public event DvdFlagsRowChangeEventHandler DvdFlagsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDvdFlagsRow(DvdFlagsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DvdFlagsRow AddDvdFlagsRow(string ADP_TY, DataElementRow parentDataElementRowByDataElement_DvdFlags) {
                DvdFlagsRow rowDvdFlagsRow = ((DvdFlagsRow)(this.NewRow()));
                rowDvdFlagsRow.ItemArray = new object[] {
                        ADP_TY,
                        parentDataElementRowByDataElement_DvdFlags[4]};
                this.Rows.Add(rowDvdFlagsRow);
                return rowDvdFlagsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DvdFlagsDataTable cln = ((DvdFlagsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DvdFlagsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnADP_TY = base.Columns["ADP_TY"];
                this.columnDataElement_Id = base.Columns["DataElement_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnADP_TY = new System.Data.DataColumn("ADP_TY", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnADP_TY);
                this.columnDataElement_Id = new System.Data.DataColumn("DataElement_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDataElement_Id);
                this.columnADP_TY.Namespace = "";
                this.columnADP_TY.DefaultValue = ((string)("0"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DvdFlagsRow NewDvdFlagsRow() {
                return ((DvdFlagsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DvdFlagsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DvdFlagsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DvdFlagsRowChanged != null)) {
                    this.DvdFlagsRowChanged(this, new DvdFlagsRowChangeEvent(((DvdFlagsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DvdFlagsRowChanging != null)) {
                    this.DvdFlagsRowChanging(this, new DvdFlagsRowChangeEvent(((DvdFlagsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DvdFlagsRowDeleted != null)) {
                    this.DvdFlagsRowDeleted(this, new DvdFlagsRowChangeEvent(((DvdFlagsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DvdFlagsRowDeleting != null)) {
                    this.DvdFlagsRowDeleting(this, new DvdFlagsRowChangeEvent(((DvdFlagsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDvdFlagsRow(DvdFlagsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DvdFlagsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class WriteDDPDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDirectoryName;
            
            private System.Data.DataColumn columnAppendable;
            
            private System.Data.DataColumn columnRecord_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WriteDDPDataTable() {
                this.TableName = "WriteDDP";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WriteDDPDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected WriteDDPDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DirectoryNameColumn {
                get {
                    return this.columnDirectoryName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AppendableColumn {
                get {
                    return this.columnAppendable;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Record_IdColumn {
                get {
                    return this.columnRecord_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WriteDDPRow this[int index] {
                get {
                    return ((WriteDDPRow)(this.Rows[index]));
                }
            }
            
            public event WriteDDPRowChangeEventHandler WriteDDPRowChanging;
            
            public event WriteDDPRowChangeEventHandler WriteDDPRowChanged;
            
            public event WriteDDPRowChangeEventHandler WriteDDPRowDeleting;
            
            public event WriteDDPRowChangeEventHandler WriteDDPRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddWriteDDPRow(WriteDDPRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WriteDDPRow AddWriteDDPRow(string DirectoryName, string Appendable, RecordRow parentRecordRowByRecord_WriteDDP) {
                WriteDDPRow rowWriteDDPRow = ((WriteDDPRow)(this.NewRow()));
                rowWriteDDPRow.ItemArray = new object[] {
                        DirectoryName,
                        Appendable,
                        parentRecordRowByRecord_WriteDDP[0]};
                this.Rows.Add(rowWriteDDPRow);
                return rowWriteDDPRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                WriteDDPDataTable cln = ((WriteDDPDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new WriteDDPDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDirectoryName = base.Columns["DirectoryName"];
                this.columnAppendable = base.Columns["Appendable"];
                this.columnRecord_Id = base.Columns["Record_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDirectoryName = new System.Data.DataColumn("DirectoryName", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDirectoryName);
                this.columnAppendable = new System.Data.DataColumn("Appendable", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAppendable);
                this.columnRecord_Id = new System.Data.DataColumn("Record_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRecord_Id);
                this.columnDirectoryName.AllowDBNull = false;
                this.columnDirectoryName.Namespace = "";
                this.columnAppendable.Namespace = "";
                this.columnAppendable.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WriteDDPRow NewWriteDDPRow() {
                return ((WriteDDPRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new WriteDDPRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(WriteDDPRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WriteDDPRowChanged != null)) {
                    this.WriteDDPRowChanged(this, new WriteDDPRowChangeEvent(((WriteDDPRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WriteDDPRowChanging != null)) {
                    this.WriteDDPRowChanging(this, new WriteDDPRowChangeEvent(((WriteDDPRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WriteDDPRowDeleted != null)) {
                    this.WriteDDPRowDeleted(this, new WriteDDPRowChangeEvent(((WriteDDPRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WriteDDPRowDeleting != null)) {
                    this.WriteDDPRowDeleting(this, new WriteDDPRowChangeEvent(((WriteDDPRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveWriteDDPRow(WriteDDPRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WriteDDPDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FixateDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnType;
            
            private System.Data.DataColumn columnFinal;
            
            private System.Data.DataColumn columnUPC_EAN;
            
            private System.Data.DataColumn columnRecord_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FixateDataTable() {
                this.TableName = "Fixate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FixateDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FixateDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FinalColumn {
                get {
                    return this.columnFinal;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UPC_EANColumn {
                get {
                    return this.columnUPC_EAN;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Record_IdColumn {
                get {
                    return this.columnRecord_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FixateRow this[int index] {
                get {
                    return ((FixateRow)(this.Rows[index]));
                }
            }
            
            public event FixateRowChangeEventHandler FixateRowChanging;
            
            public event FixateRowChangeEventHandler FixateRowChanged;
            
            public event FixateRowChangeEventHandler FixateRowDeleting;
            
            public event FixateRowChangeEventHandler FixateRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFixateRow(FixateRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FixateRow AddFixateRow(string Type, string Final, string UPC_EAN, RecordRow parentRecordRowByRecord_Fixate) {
                FixateRow rowFixateRow = ((FixateRow)(this.NewRow()));
                rowFixateRow.ItemArray = new object[] {
                        Type,
                        Final,
                        UPC_EAN,
                        parentRecordRowByRecord_Fixate[0]};
                this.Rows.Add(rowFixateRow);
                return rowFixateRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FixateDataTable cln = ((FixateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FixateDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnType = base.Columns["Type"];
                this.columnFinal = base.Columns["Final"];
                this.columnUPC_EAN = base.Columns["UPC_EAN"];
                this.columnRecord_Id = base.Columns["Record_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnType = new System.Data.DataColumn("Type", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnType);
                this.columnFinal = new System.Data.DataColumn("Final", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFinal);
                this.columnUPC_EAN = new System.Data.DataColumn("UPC_EAN", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUPC_EAN);
                this.columnRecord_Id = new System.Data.DataColumn("Record_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRecord_Id);
                this.columnType.Namespace = "";
                this.columnType.DefaultValue = ((string)("TAO"));
                this.columnFinal.Namespace = "";
                this.columnFinal.DefaultValue = ((string)("false"));
                this.columnUPC_EAN.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FixateRow NewFixateRow() {
                return ((FixateRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FixateRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FixateRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FixateRowChanged != null)) {
                    this.FixateRowChanged(this, new FixateRowChangeEvent(((FixateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FixateRowChanging != null)) {
                    this.FixateRowChanging(this, new FixateRowChangeEvent(((FixateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FixateRowDeleted != null)) {
                    this.FixateRowDeleted(this, new FixateRowChangeEvent(((FixateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FixateRowDeleting != null)) {
                    this.FixateRowDeleting(this, new FixateRowChangeEvent(((FixateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFixateRow(FixateRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FixateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReserveTrackDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnNumberOfBlocks;
            
            private System.Data.DataColumn columnRecord_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReserveTrackDataTable() {
                this.TableName = "ReserveTrack";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReserveTrackDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReserveTrackDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberOfBlocksColumn {
                get {
                    return this.columnNumberOfBlocks;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Record_IdColumn {
                get {
                    return this.columnRecord_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReserveTrackRow this[int index] {
                get {
                    return ((ReserveTrackRow)(this.Rows[index]));
                }
            }
            
            public event ReserveTrackRowChangeEventHandler ReserveTrackRowChanging;
            
            public event ReserveTrackRowChangeEventHandler ReserveTrackRowChanged;
            
            public event ReserveTrackRowChangeEventHandler ReserveTrackRowDeleting;
            
            public event ReserveTrackRowChangeEventHandler ReserveTrackRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReserveTrackRow(ReserveTrackRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReserveTrackRow AddReserveTrackRow(string NumberOfBlocks, RecordRow parentRecordRowByRecord_ReserveTrack) {
                ReserveTrackRow rowReserveTrackRow = ((ReserveTrackRow)(this.NewRow()));
                rowReserveTrackRow.ItemArray = new object[] {
                        NumberOfBlocks,
                        parentRecordRowByRecord_ReserveTrack[0]};
                this.Rows.Add(rowReserveTrackRow);
                return rowReserveTrackRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ReserveTrackDataTable cln = ((ReserveTrackDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ReserveTrackDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNumberOfBlocks = base.Columns["NumberOfBlocks"];
                this.columnRecord_Id = base.Columns["Record_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNumberOfBlocks = new System.Data.DataColumn("NumberOfBlocks", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNumberOfBlocks);
                this.columnRecord_Id = new System.Data.DataColumn("Record_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRecord_Id);
                this.columnNumberOfBlocks.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReserveTrackRow NewReserveTrackRow() {
                return ((ReserveTrackRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ReserveTrackRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ReserveTrackRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReserveTrackRowChanged != null)) {
                    this.ReserveTrackRowChanged(this, new ReserveTrackRowChangeEvent(((ReserveTrackRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReserveTrackRowChanging != null)) {
                    this.ReserveTrackRowChanging(this, new ReserveTrackRowChangeEvent(((ReserveTrackRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReserveTrackRowDeleted != null)) {
                    this.ReserveTrackRowDeleted(this, new ReserveTrackRowChangeEvent(((ReserveTrackRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReserveTrackRowDeleting != null)) {
                    this.ReserveTrackRowDeleting(this, new ReserveTrackRowChangeEvent(((ReserveTrackRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReserveTrackRow(ReserveTrackRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReserveTrackDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class WriteDiscDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFilename;
            
            private System.Data.DataColumn columnRecord_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WriteDiscDataTable() {
                this.TableName = "WriteDisc";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WriteDiscDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected WriteDiscDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FilenameColumn {
                get {
                    return this.columnFilename;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Record_IdColumn {
                get {
                    return this.columnRecord_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WriteDiscRow this[int index] {
                get {
                    return ((WriteDiscRow)(this.Rows[index]));
                }
            }
            
            public event WriteDiscRowChangeEventHandler WriteDiscRowChanging;
            
            public event WriteDiscRowChangeEventHandler WriteDiscRowChanged;
            
            public event WriteDiscRowChangeEventHandler WriteDiscRowDeleting;
            
            public event WriteDiscRowChangeEventHandler WriteDiscRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddWriteDiscRow(WriteDiscRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WriteDiscRow AddWriteDiscRow(string Filename, RecordRow parentRecordRowByRecord_WriteDisc) {
                WriteDiscRow rowWriteDiscRow = ((WriteDiscRow)(this.NewRow()));
                rowWriteDiscRow.ItemArray = new object[] {
                        Filename,
                        parentRecordRowByRecord_WriteDisc[0]};
                this.Rows.Add(rowWriteDiscRow);
                return rowWriteDiscRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                WriteDiscDataTable cln = ((WriteDiscDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new WriteDiscDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFilename = base.Columns["Filename"];
                this.columnRecord_Id = base.Columns["Record_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFilename = new System.Data.DataColumn("Filename", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFilename);
                this.columnRecord_Id = new System.Data.DataColumn("Record_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRecord_Id);
                this.columnFilename.AllowDBNull = false;
                this.columnFilename.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WriteDiscRow NewWriteDiscRow() {
                return ((WriteDiscRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new WriteDiscRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(WriteDiscRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WriteDiscRowChanged != null)) {
                    this.WriteDiscRowChanged(this, new WriteDiscRowChangeEvent(((WriteDiscRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WriteDiscRowChanging != null)) {
                    this.WriteDiscRowChanging(this, new WriteDiscRowChangeEvent(((WriteDiscRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WriteDiscRowDeleted != null)) {
                    this.WriteDiscRowDeleted(this, new WriteDiscRowChangeEvent(((WriteDiscRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WriteDiscRowDeleting != null)) {
                    this.WriteDiscRowDeleting(this, new WriteDiscRowChangeEvent(((WriteDiscRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveWriteDiscRow(WriteDiscRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WriteDiscDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReadDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnReadSpeed;
            
            private System.Data.DataColumn columnRead_Id;
            
            private System.Data.DataColumn columnAction_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadDataTable() {
                this.TableName = "Read";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReadDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReadDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReadSpeedColumn {
                get {
                    return this.columnReadSpeed;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Read_IdColumn {
                get {
                    return this.columnRead_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Action_IdColumn {
                get {
                    return this.columnAction_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadRow this[int index] {
                get {
                    return ((ReadRow)(this.Rows[index]));
                }
            }
            
            public event ReadRowChangeEventHandler ReadRowChanging;
            
            public event ReadRowChangeEventHandler ReadRowChanged;
            
            public event ReadRowChangeEventHandler ReadRowDeleting;
            
            public event ReadRowChangeEventHandler ReadRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReadRow(ReadRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadRow AddReadRow(string ReadSpeed, ActionRow parentActionRowByAction_Read) {
                ReadRow rowReadRow = ((ReadRow)(this.NewRow()));
                rowReadRow.ItemArray = new object[] {
                        ReadSpeed,
                        null,
                        parentActionRowByAction_Read[0]};
                this.Rows.Add(rowReadRow);
                return rowReadRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ReadDataTable cln = ((ReadDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ReadDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnReadSpeed = base.Columns["ReadSpeed"];
                this.columnRead_Id = base.Columns["Read_Id"];
                this.columnAction_Id = base.Columns["Action_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnReadSpeed = new System.Data.DataColumn("ReadSpeed", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnReadSpeed);
                this.columnRead_Id = new System.Data.DataColumn("Read_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRead_Id);
                this.columnAction_Id = new System.Data.DataColumn("Action_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAction_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnRead_Id}, true));
                this.columnReadSpeed.Namespace = "";
                this.columnReadSpeed.DefaultValue = ((string)("Unspecified"));
                this.columnRead_Id.AutoIncrement = true;
                this.columnRead_Id.AllowDBNull = false;
                this.columnRead_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadRow NewReadRow() {
                return ((ReadRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ReadRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ReadRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReadRowChanged != null)) {
                    this.ReadRowChanged(this, new ReadRowChangeEvent(((ReadRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReadRowChanging != null)) {
                    this.ReadRowChanging(this, new ReadRowChangeEvent(((ReadRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReadRowDeleted != null)) {
                    this.ReadRowDeleted(this, new ReadRowChangeEvent(((ReadRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReadRowDeleting != null)) {
                    this.ReadRowDeleting(this, new ReadRowChangeEvent(((ReadRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReadRow(ReadRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReadDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MapDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFilename;
            
            private System.Data.DataColumn columnGetBarcode;
            
            private System.Data.DataColumn columnFullDiscMap;
            
            private System.Data.DataColumn columnRead_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapDataTable() {
                this.TableName = "Map";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MapDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MapDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FilenameColumn {
                get {
                    return this.columnFilename;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GetBarcodeColumn {
                get {
                    return this.columnGetBarcode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FullDiscMapColumn {
                get {
                    return this.columnFullDiscMap;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Read_IdColumn {
                get {
                    return this.columnRead_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapRow this[int index] {
                get {
                    return ((MapRow)(this.Rows[index]));
                }
            }
            
            public event MapRowChangeEventHandler MapRowChanging;
            
            public event MapRowChangeEventHandler MapRowChanged;
            
            public event MapRowChangeEventHandler MapRowDeleting;
            
            public event MapRowChangeEventHandler MapRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMapRow(MapRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapRow AddMapRow(string Filename, string GetBarcode, string FullDiscMap, ReadRow parentReadRowByRead_Map) {
                MapRow rowMapRow = ((MapRow)(this.NewRow()));
                rowMapRow.ItemArray = new object[] {
                        Filename,
                        GetBarcode,
                        FullDiscMap,
                        parentReadRowByRead_Map[1]};
                this.Rows.Add(rowMapRow);
                return rowMapRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MapDataTable cln = ((MapDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MapDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFilename = base.Columns["Filename"];
                this.columnGetBarcode = base.Columns["GetBarcode"];
                this.columnFullDiscMap = base.Columns["FullDiscMap"];
                this.columnRead_Id = base.Columns["Read_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFilename = new System.Data.DataColumn("Filename", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFilename);
                this.columnGetBarcode = new System.Data.DataColumn("GetBarcode", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnGetBarcode);
                this.columnFullDiscMap = new System.Data.DataColumn("FullDiscMap", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFullDiscMap);
                this.columnRead_Id = new System.Data.DataColumn("Read_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRead_Id);
                this.columnFilename.AllowDBNull = false;
                this.columnFilename.Namespace = "";
                this.columnGetBarcode.Namespace = "";
                this.columnGetBarcode.DefaultValue = ((string)("false"));
                this.columnFullDiscMap.Namespace = "";
                this.columnFullDiscMap.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapRow NewMapRow() {
                return ((MapRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MapRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MapRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MapRowChanged != null)) {
                    this.MapRowChanged(this, new MapRowChangeEvent(((MapRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MapRowChanging != null)) {
                    this.MapRowChanging(this, new MapRowChangeEvent(((MapRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MapRowDeleted != null)) {
                    this.MapRowDeleted(this, new MapRowChangeEvent(((MapRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MapRowDeleting != null)) {
                    this.MapRowDeleting(this, new MapRowChangeEvent(((MapRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMapRow(MapRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MapDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReadTrackDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFilename;
            
            private System.Data.DataColumn columnTrackNumber;
            
            private System.Data.DataColumn columnPrefixHeader;
            
            private System.Data.DataColumn columnDescription;
            
            private System.Data.DataColumn columnReadPregap;
            
            private System.Data.DataColumn columnReadNextPregap;
            
            private System.Data.DataColumn columnBlockSize;
            
            private System.Data.DataColumn columnExtractISOFiles;
            
            private System.Data.DataColumn columnRead_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadTrackDataTable() {
                this.TableName = "ReadTrack";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReadTrackDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReadTrackDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FilenameColumn {
                get {
                    return this.columnFilename;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TrackNumberColumn {
                get {
                    return this.columnTrackNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PrefixHeaderColumn {
                get {
                    return this.columnPrefixHeader;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReadPregapColumn {
                get {
                    return this.columnReadPregap;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReadNextPregapColumn {
                get {
                    return this.columnReadNextPregap;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BlockSizeColumn {
                get {
                    return this.columnBlockSize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExtractISOFilesColumn {
                get {
                    return this.columnExtractISOFiles;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Read_IdColumn {
                get {
                    return this.columnRead_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadTrackRow this[int index] {
                get {
                    return ((ReadTrackRow)(this.Rows[index]));
                }
            }
            
            public event ReadTrackRowChangeEventHandler ReadTrackRowChanging;
            
            public event ReadTrackRowChangeEventHandler ReadTrackRowChanged;
            
            public event ReadTrackRowChangeEventHandler ReadTrackRowDeleting;
            
            public event ReadTrackRowChangeEventHandler ReadTrackRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReadTrackRow(ReadTrackRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadTrackRow AddReadTrackRow(string Filename, string TrackNumber, string PrefixHeader, string Description, string ReadPregap, string ReadNextPregap, string BlockSize, string ExtractISOFiles, ReadRow parentReadRowByRead_ReadTrack) {
                ReadTrackRow rowReadTrackRow = ((ReadTrackRow)(this.NewRow()));
                rowReadTrackRow.ItemArray = new object[] {
                        Filename,
                        TrackNumber,
                        PrefixHeader,
                        Description,
                        ReadPregap,
                        ReadNextPregap,
                        BlockSize,
                        ExtractISOFiles,
                        parentReadRowByRead_ReadTrack[1]};
                this.Rows.Add(rowReadTrackRow);
                return rowReadTrackRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ReadTrackDataTable cln = ((ReadTrackDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ReadTrackDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFilename = base.Columns["Filename"];
                this.columnTrackNumber = base.Columns["TrackNumber"];
                this.columnPrefixHeader = base.Columns["PrefixHeader"];
                this.columnDescription = base.Columns["Description"];
                this.columnReadPregap = base.Columns["ReadPregap"];
                this.columnReadNextPregap = base.Columns["ReadNextPregap"];
                this.columnBlockSize = base.Columns["BlockSize"];
                this.columnExtractISOFiles = base.Columns["ExtractISOFiles"];
                this.columnRead_Id = base.Columns["Read_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFilename = new System.Data.DataColumn("Filename", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFilename);
                this.columnTrackNumber = new System.Data.DataColumn("TrackNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTrackNumber);
                this.columnPrefixHeader = new System.Data.DataColumn("PrefixHeader", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPrefixHeader);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDescription);
                this.columnReadPregap = new System.Data.DataColumn("ReadPregap", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnReadPregap);
                this.columnReadNextPregap = new System.Data.DataColumn("ReadNextPregap", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnReadNextPregap);
                this.columnBlockSize = new System.Data.DataColumn("BlockSize", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnBlockSize);
                this.columnExtractISOFiles = new System.Data.DataColumn("ExtractISOFiles", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnExtractISOFiles);
                this.columnRead_Id = new System.Data.DataColumn("Read_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRead_Id);
                this.columnFilename.AllowDBNull = false;
                this.columnFilename.Namespace = "";
                this.columnTrackNumber.AllowDBNull = false;
                this.columnTrackNumber.Namespace = "";
                this.columnPrefixHeader.Namespace = "";
                this.columnPrefixHeader.DefaultValue = ((string)("false"));
                this.columnDescription.Namespace = "";
                this.columnReadPregap.Namespace = "";
                this.columnReadPregap.DefaultValue = ((string)("false"));
                this.columnReadNextPregap.Namespace = "";
                this.columnReadNextPregap.DefaultValue = ((string)("false"));
                this.columnBlockSize.Namespace = "";
                this.columnBlockSize.DefaultValue = ((string)("default"));
                this.columnExtractISOFiles.Namespace = "";
                this.columnExtractISOFiles.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadTrackRow NewReadTrackRow() {
                return ((ReadTrackRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ReadTrackRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ReadTrackRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReadTrackRowChanged != null)) {
                    this.ReadTrackRowChanged(this, new ReadTrackRowChangeEvent(((ReadTrackRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReadTrackRowChanging != null)) {
                    this.ReadTrackRowChanging(this, new ReadTrackRowChangeEvent(((ReadTrackRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReadTrackRowDeleted != null)) {
                    this.ReadTrackRowDeleted(this, new ReadTrackRowChangeEvent(((ReadTrackRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReadTrackRowDeleting != null)) {
                    this.ReadTrackRowDeleting(this, new ReadTrackRowChangeEvent(((ReadTrackRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReadTrackRow(ReadTrackRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReadTrackDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReadPVDDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFilename;
            
            private System.Data.DataColumn columnTrackNumber;
            
            private System.Data.DataColumn columnRead_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadPVDDataTable() {
                this.TableName = "ReadPVD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReadPVDDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReadPVDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FilenameColumn {
                get {
                    return this.columnFilename;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TrackNumberColumn {
                get {
                    return this.columnTrackNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Read_IdColumn {
                get {
                    return this.columnRead_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadPVDRow this[int index] {
                get {
                    return ((ReadPVDRow)(this.Rows[index]));
                }
            }
            
            public event ReadPVDRowChangeEventHandler ReadPVDRowChanging;
            
            public event ReadPVDRowChangeEventHandler ReadPVDRowChanged;
            
            public event ReadPVDRowChangeEventHandler ReadPVDRowDeleting;
            
            public event ReadPVDRowChangeEventHandler ReadPVDRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReadPVDRow(ReadPVDRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadPVDRow AddReadPVDRow(string Filename, string TrackNumber, ReadRow parentReadRowByRead_ReadPVD) {
                ReadPVDRow rowReadPVDRow = ((ReadPVDRow)(this.NewRow()));
                rowReadPVDRow.ItemArray = new object[] {
                        Filename,
                        TrackNumber,
                        parentReadRowByRead_ReadPVD[1]};
                this.Rows.Add(rowReadPVDRow);
                return rowReadPVDRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ReadPVDDataTable cln = ((ReadPVDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ReadPVDDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFilename = base.Columns["Filename"];
                this.columnTrackNumber = base.Columns["TrackNumber"];
                this.columnRead_Id = base.Columns["Read_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFilename = new System.Data.DataColumn("Filename", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFilename);
                this.columnTrackNumber = new System.Data.DataColumn("TrackNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTrackNumber);
                this.columnRead_Id = new System.Data.DataColumn("Read_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRead_Id);
                this.columnFilename.AllowDBNull = false;
                this.columnFilename.Namespace = "";
                this.columnTrackNumber.AllowDBNull = false;
                this.columnTrackNumber.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadPVDRow NewReadPVDRow() {
                return ((ReadPVDRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ReadPVDRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ReadPVDRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReadPVDRowChanged != null)) {
                    this.ReadPVDRowChanged(this, new ReadPVDRowChangeEvent(((ReadPVDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReadPVDRowChanging != null)) {
                    this.ReadPVDRowChanging(this, new ReadPVDRowChangeEvent(((ReadPVDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReadPVDRowDeleted != null)) {
                    this.ReadPVDRowDeleted(this, new ReadPVDRowChangeEvent(((ReadPVDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReadPVDRowDeleting != null)) {
                    this.ReadPVDRowDeleting(this, new ReadPVDRowChangeEvent(((ReadPVDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReadPVDRow(ReadPVDRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReadPVDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CloseSessionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnAppendable;
            
            private System.Data.DataColumn columnRead_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CloseSessionDataTable() {
                this.TableName = "CloseSession";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CloseSessionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CloseSessionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AppendableColumn {
                get {
                    return this.columnAppendable;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Read_IdColumn {
                get {
                    return this.columnRead_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CloseSessionRow this[int index] {
                get {
                    return ((CloseSessionRow)(this.Rows[index]));
                }
            }
            
            public event CloseSessionRowChangeEventHandler CloseSessionRowChanging;
            
            public event CloseSessionRowChangeEventHandler CloseSessionRowChanged;
            
            public event CloseSessionRowChangeEventHandler CloseSessionRowDeleting;
            
            public event CloseSessionRowChangeEventHandler CloseSessionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCloseSessionRow(CloseSessionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CloseSessionRow AddCloseSessionRow(string Appendable, ReadRow parentReadRowByRead_CloseSession) {
                CloseSessionRow rowCloseSessionRow = ((CloseSessionRow)(this.NewRow()));
                rowCloseSessionRow.ItemArray = new object[] {
                        Appendable,
                        parentReadRowByRead_CloseSession[1]};
                this.Rows.Add(rowCloseSessionRow);
                return rowCloseSessionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CloseSessionDataTable cln = ((CloseSessionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CloseSessionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAppendable = base.Columns["Appendable"];
                this.columnRead_Id = base.Columns["Read_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAppendable = new System.Data.DataColumn("Appendable", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAppendable);
                this.columnRead_Id = new System.Data.DataColumn("Read_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRead_Id);
                this.columnAppendable.Namespace = "";
                this.columnAppendable.DefaultValue = ((string)("true"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CloseSessionRow NewCloseSessionRow() {
                return ((CloseSessionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CloseSessionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CloseSessionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CloseSessionRowChanged != null)) {
                    this.CloseSessionRowChanged(this, new CloseSessionRowChangeEvent(((CloseSessionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CloseSessionRowChanging != null)) {
                    this.CloseSessionRowChanging(this, new CloseSessionRowChangeEvent(((CloseSessionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CloseSessionRowDeleted != null)) {
                    this.CloseSessionRowDeleted(this, new CloseSessionRowChangeEvent(((CloseSessionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CloseSessionRowDeleting != null)) {
                    this.CloseSessionRowDeleting(this, new CloseSessionRowChangeEvent(((CloseSessionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCloseSessionRow(CloseSessionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CloseSessionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Destroy1DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnVolumeId;
            
            private System.Data.DataColumn columnRead_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Destroy1DataTable() {
                this.TableName = "Destroy1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Destroy1DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Destroy1DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VolumeIdColumn {
                get {
                    return this.columnVolumeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Read_IdColumn {
                get {
                    return this.columnRead_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Destroy1Row this[int index] {
                get {
                    return ((Destroy1Row)(this.Rows[index]));
                }
            }
            
            public event Destroy1RowChangeEventHandler Destroy1RowChanging;
            
            public event Destroy1RowChangeEventHandler Destroy1RowChanged;
            
            public event Destroy1RowChangeEventHandler Destroy1RowDeleting;
            
            public event Destroy1RowChangeEventHandler Destroy1RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDestroy1Row(Destroy1Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Destroy1Row AddDestroy1Row(string VolumeId, ReadRow parentReadRowByRead_Destroy1) {
                Destroy1Row rowDestroy1Row = ((Destroy1Row)(this.NewRow()));
                rowDestroy1Row.ItemArray = new object[] {
                        VolumeId,
                        parentReadRowByRead_Destroy1[1]};
                this.Rows.Add(rowDestroy1Row);
                return rowDestroy1Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Destroy1DataTable cln = ((Destroy1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Destroy1DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnVolumeId = base.Columns["VolumeId"];
                this.columnRead_Id = base.Columns["Read_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnVolumeId = new System.Data.DataColumn("VolumeId", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnVolumeId);
                this.columnRead_Id = new System.Data.DataColumn("Read_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRead_Id);
                this.columnVolumeId.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Destroy1Row NewDestroy1Row() {
                return ((Destroy1Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Destroy1Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Destroy1Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Destroy1RowChanged != null)) {
                    this.Destroy1RowChanged(this, new Destroy1RowChangeEvent(((Destroy1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Destroy1RowChanging != null)) {
                    this.Destroy1RowChanging(this, new Destroy1RowChangeEvent(((Destroy1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Destroy1RowDeleted != null)) {
                    this.Destroy1RowDeleted(this, new Destroy1RowChangeEvent(((Destroy1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Destroy1RowDeleting != null)) {
                    this.Destroy1RowDeleting(this, new Destroy1RowChangeEvent(((Destroy1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDestroy1Row(Destroy1Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Destroy1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TerminateReadDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnEjectDisc;
            
            private System.Data.DataColumn columnPrintRejectLabel;
            
            private System.Data.DataColumn columnOutputToAcceptBin;
            
            private System.Data.DataColumn columnRead_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TerminateReadDataTable() {
                this.TableName = "TerminateRead";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TerminateReadDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TerminateReadDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EjectDiscColumn {
                get {
                    return this.columnEjectDisc;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PrintRejectLabelColumn {
                get {
                    return this.columnPrintRejectLabel;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OutputToAcceptBinColumn {
                get {
                    return this.columnOutputToAcceptBin;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Read_IdColumn {
                get {
                    return this.columnRead_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TerminateReadRow this[int index] {
                get {
                    return ((TerminateReadRow)(this.Rows[index]));
                }
            }
            
            public event TerminateReadRowChangeEventHandler TerminateReadRowChanging;
            
            public event TerminateReadRowChangeEventHandler TerminateReadRowChanged;
            
            public event TerminateReadRowChangeEventHandler TerminateReadRowDeleting;
            
            public event TerminateReadRowChangeEventHandler TerminateReadRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTerminateReadRow(TerminateReadRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TerminateReadRow AddTerminateReadRow(string EjectDisc, string PrintRejectLabel, string OutputToAcceptBin, ReadRow parentReadRowByRead_TerminateRead) {
                TerminateReadRow rowTerminateReadRow = ((TerminateReadRow)(this.NewRow()));
                rowTerminateReadRow.ItemArray = new object[] {
                        EjectDisc,
                        PrintRejectLabel,
                        OutputToAcceptBin,
                        parentReadRowByRead_TerminateRead[1]};
                this.Rows.Add(rowTerminateReadRow);
                return rowTerminateReadRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TerminateReadDataTable cln = ((TerminateReadDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TerminateReadDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEjectDisc = base.Columns["EjectDisc"];
                this.columnPrintRejectLabel = base.Columns["PrintRejectLabel"];
                this.columnOutputToAcceptBin = base.Columns["OutputToAcceptBin"];
                this.columnRead_Id = base.Columns["Read_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEjectDisc = new System.Data.DataColumn("EjectDisc", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEjectDisc);
                this.columnPrintRejectLabel = new System.Data.DataColumn("PrintRejectLabel", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPrintRejectLabel);
                this.columnOutputToAcceptBin = new System.Data.DataColumn("OutputToAcceptBin", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOutputToAcceptBin);
                this.columnRead_Id = new System.Data.DataColumn("Read_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRead_Id);
                this.columnEjectDisc.Namespace = "";
                this.columnEjectDisc.DefaultValue = ((string)("true"));
                this.columnPrintRejectLabel.Namespace = "";
                this.columnPrintRejectLabel.DefaultValue = ((string)("false"));
                this.columnOutputToAcceptBin.Namespace = "";
                this.columnOutputToAcceptBin.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TerminateReadRow NewTerminateReadRow() {
                return ((TerminateReadRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TerminateReadRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TerminateReadRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TerminateReadRowChanged != null)) {
                    this.TerminateReadRowChanged(this, new TerminateReadRowChangeEvent(((TerminateReadRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TerminateReadRowChanging != null)) {
                    this.TerminateReadRowChanging(this, new TerminateReadRowChangeEvent(((TerminateReadRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TerminateReadRowDeleted != null)) {
                    this.TerminateReadRowDeleted(this, new TerminateReadRowChangeEvent(((TerminateReadRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TerminateReadRowDeleting != null)) {
                    this.TerminateReadRowDeleting(this, new TerminateReadRowChangeEvent(((TerminateReadRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTerminateReadRow(TerminateReadRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TerminateReadDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReadDDPDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDirectoryName;
            
            private System.Data.DataColumn columnMasterId;
            
            private System.Data.DataColumn columnText;
            
            private System.Data.DataColumn columnRead_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadDDPDataTable() {
                this.TableName = "ReadDDP";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReadDDPDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReadDDPDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DirectoryNameColumn {
                get {
                    return this.columnDirectoryName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MasterIdColumn {
                get {
                    return this.columnMasterId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TextColumn {
                get {
                    return this.columnText;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Read_IdColumn {
                get {
                    return this.columnRead_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadDDPRow this[int index] {
                get {
                    return ((ReadDDPRow)(this.Rows[index]));
                }
            }
            
            public event ReadDDPRowChangeEventHandler ReadDDPRowChanging;
            
            public event ReadDDPRowChangeEventHandler ReadDDPRowChanged;
            
            public event ReadDDPRowChangeEventHandler ReadDDPRowDeleting;
            
            public event ReadDDPRowChangeEventHandler ReadDDPRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReadDDPRow(ReadDDPRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadDDPRow AddReadDDPRow(string DirectoryName, string MasterId, string Text, ReadRow parentReadRowByRead_ReadDDP) {
                ReadDDPRow rowReadDDPRow = ((ReadDDPRow)(this.NewRow()));
                rowReadDDPRow.ItemArray = new object[] {
                        DirectoryName,
                        MasterId,
                        Text,
                        parentReadRowByRead_ReadDDP[1]};
                this.Rows.Add(rowReadDDPRow);
                return rowReadDDPRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ReadDDPDataTable cln = ((ReadDDPDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ReadDDPDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDirectoryName = base.Columns["DirectoryName"];
                this.columnMasterId = base.Columns["MasterId"];
                this.columnText = base.Columns["Text"];
                this.columnRead_Id = base.Columns["Read_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDirectoryName = new System.Data.DataColumn("DirectoryName", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDirectoryName);
                this.columnMasterId = new System.Data.DataColumn("MasterId", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMasterId);
                this.columnText = new System.Data.DataColumn("Text", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnText);
                this.columnRead_Id = new System.Data.DataColumn("Read_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRead_Id);
                this.columnDirectoryName.AllowDBNull = false;
                this.columnDirectoryName.Namespace = "";
                this.columnMasterId.Namespace = "";
                this.columnText.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadDDPRow NewReadDDPRow() {
                return ((ReadDDPRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ReadDDPRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ReadDDPRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReadDDPRowChanged != null)) {
                    this.ReadDDPRowChanged(this, new ReadDDPRowChangeEvent(((ReadDDPRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReadDDPRowChanging != null)) {
                    this.ReadDDPRowChanging(this, new ReadDDPRowChangeEvent(((ReadDDPRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReadDDPRowDeleted != null)) {
                    this.ReadDDPRowDeleted(this, new ReadDDPRowChangeEvent(((ReadDDPRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReadDDPRowDeleting != null)) {
                    this.ReadDDPRowDeleting(this, new ReadDDPRowChangeEvent(((ReadDDPRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReadDDPRow(ReadDDPRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReadDDPDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReadDiscDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFilename;
            
            private System.Data.DataColumn columnBlockSize;
            
            private System.Data.DataColumn columnRead_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadDiscDataTable() {
                this.TableName = "ReadDisc";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReadDiscDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReadDiscDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FilenameColumn {
                get {
                    return this.columnFilename;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BlockSizeColumn {
                get {
                    return this.columnBlockSize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Read_IdColumn {
                get {
                    return this.columnRead_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadDiscRow this[int index] {
                get {
                    return ((ReadDiscRow)(this.Rows[index]));
                }
            }
            
            public event ReadDiscRowChangeEventHandler ReadDiscRowChanging;
            
            public event ReadDiscRowChangeEventHandler ReadDiscRowChanged;
            
            public event ReadDiscRowChangeEventHandler ReadDiscRowDeleting;
            
            public event ReadDiscRowChangeEventHandler ReadDiscRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReadDiscRow(ReadDiscRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadDiscRow AddReadDiscRow(string Filename, string BlockSize, ReadRow parentReadRowByRead_ReadDisc) {
                ReadDiscRow rowReadDiscRow = ((ReadDiscRow)(this.NewRow()));
                rowReadDiscRow.ItemArray = new object[] {
                        Filename,
                        BlockSize,
                        parentReadRowByRead_ReadDisc[1]};
                this.Rows.Add(rowReadDiscRow);
                return rowReadDiscRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ReadDiscDataTable cln = ((ReadDiscDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ReadDiscDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFilename = base.Columns["Filename"];
                this.columnBlockSize = base.Columns["BlockSize"];
                this.columnRead_Id = base.Columns["Read_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFilename = new System.Data.DataColumn("Filename", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFilename);
                this.columnBlockSize = new System.Data.DataColumn("BlockSize", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnBlockSize);
                this.columnRead_Id = new System.Data.DataColumn("Read_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRead_Id);
                this.columnFilename.AllowDBNull = false;
                this.columnFilename.Namespace = "";
                this.columnBlockSize.Namespace = "";
                this.columnBlockSize.DefaultValue = ((string)("default"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadDiscRow NewReadDiscRow() {
                return ((ReadDiscRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ReadDiscRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ReadDiscRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReadDiscRowChanged != null)) {
                    this.ReadDiscRowChanged(this, new ReadDiscRowChangeEvent(((ReadDiscRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReadDiscRowChanging != null)) {
                    this.ReadDiscRowChanging(this, new ReadDiscRowChangeEvent(((ReadDiscRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReadDiscRowDeleted != null)) {
                    this.ReadDiscRowDeleted(this, new ReadDiscRowChangeEvent(((ReadDiscRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReadDiscRowDeleting != null)) {
                    this.ReadDiscRowDeleting(this, new ReadDiscRowChangeEvent(((ReadDiscRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReadDiscRow(ReadDiscRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReadDiscDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CallReadProcDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnPrintRejectLabelOnError;
            
            private System.Data.DataColumn columnRead_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CallReadProcDataTable() {
                this.TableName = "CallReadProc";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CallReadProcDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CallReadProcDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PrintRejectLabelOnErrorColumn {
                get {
                    return this.columnPrintRejectLabelOnError;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Read_IdColumn {
                get {
                    return this.columnRead_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CallReadProcRow this[int index] {
                get {
                    return ((CallReadProcRow)(this.Rows[index]));
                }
            }
            
            public event CallReadProcRowChangeEventHandler CallReadProcRowChanging;
            
            public event CallReadProcRowChangeEventHandler CallReadProcRowChanged;
            
            public event CallReadProcRowChangeEventHandler CallReadProcRowDeleting;
            
            public event CallReadProcRowChangeEventHandler CallReadProcRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCallReadProcRow(CallReadProcRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CallReadProcRow AddCallReadProcRow(string PrintRejectLabelOnError, ReadRow parentReadRowByRead_CallReadProc) {
                CallReadProcRow rowCallReadProcRow = ((CallReadProcRow)(this.NewRow()));
                rowCallReadProcRow.ItemArray = new object[] {
                        PrintRejectLabelOnError,
                        parentReadRowByRead_CallReadProc[1]};
                this.Rows.Add(rowCallReadProcRow);
                return rowCallReadProcRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CallReadProcDataTable cln = ((CallReadProcDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CallReadProcDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPrintRejectLabelOnError = base.Columns["PrintRejectLabelOnError"];
                this.columnRead_Id = base.Columns["Read_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPrintRejectLabelOnError = new System.Data.DataColumn("PrintRejectLabelOnError", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPrintRejectLabelOnError);
                this.columnRead_Id = new System.Data.DataColumn("Read_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRead_Id);
                this.columnPrintRejectLabelOnError.Namespace = "";
                this.columnPrintRejectLabelOnError.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CallReadProcRow NewCallReadProcRow() {
                return ((CallReadProcRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CallReadProcRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CallReadProcRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CallReadProcRowChanged != null)) {
                    this.CallReadProcRowChanged(this, new CallReadProcRowChangeEvent(((CallReadProcRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CallReadProcRowChanging != null)) {
                    this.CallReadProcRowChanging(this, new CallReadProcRowChangeEvent(((CallReadProcRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CallReadProcRowDeleted != null)) {
                    this.CallReadProcRowDeleted(this, new CallReadProcRowChangeEvent(((CallReadProcRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CallReadProcRowDeleting != null)) {
                    this.CallReadProcRowDeleting(this, new CallReadProcRowChangeEvent(((CallReadProcRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCallReadProcRow(CallReadProcRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CallReadProcDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LabelDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFilename;
            
            private System.Data.DataColumn columnPerfectPrintAngle;
            
            private System.Data.DataColumn columnDeleteOnCompletion;
            
            private System.Data.DataColumn columnLabel_Id;
            
            private System.Data.DataColumn columnAction_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelDataTable() {
                this.TableName = "Label";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LabelDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LabelDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FilenameColumn {
                get {
                    return this.columnFilename;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PerfectPrintAngleColumn {
                get {
                    return this.columnPerfectPrintAngle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DeleteOnCompletionColumn {
                get {
                    return this.columnDeleteOnCompletion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Label_IdColumn {
                get {
                    return this.columnLabel_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Action_IdColumn {
                get {
                    return this.columnAction_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelRow this[int index] {
                get {
                    return ((LabelRow)(this.Rows[index]));
                }
            }
            
            public event LabelRowChangeEventHandler LabelRowChanging;
            
            public event LabelRowChangeEventHandler LabelRowChanged;
            
            public event LabelRowChangeEventHandler LabelRowDeleting;
            
            public event LabelRowChangeEventHandler LabelRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLabelRow(LabelRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelRow AddLabelRow(string Filename, string PerfectPrintAngle, string DeleteOnCompletion, ActionRow parentActionRowByAction_Label) {
                LabelRow rowLabelRow = ((LabelRow)(this.NewRow()));
                rowLabelRow.ItemArray = new object[] {
                        Filename,
                        PerfectPrintAngle,
                        DeleteOnCompletion,
                        null,
                        parentActionRowByAction_Label[0]};
                this.Rows.Add(rowLabelRow);
                return rowLabelRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LabelDataTable cln = ((LabelDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LabelDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFilename = base.Columns["Filename"];
                this.columnPerfectPrintAngle = base.Columns["PerfectPrintAngle"];
                this.columnDeleteOnCompletion = base.Columns["DeleteOnCompletion"];
                this.columnLabel_Id = base.Columns["Label_Id"];
                this.columnAction_Id = base.Columns["Action_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFilename = new System.Data.DataColumn("Filename", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFilename);
                this.columnPerfectPrintAngle = new System.Data.DataColumn("PerfectPrintAngle", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPerfectPrintAngle);
                this.columnDeleteOnCompletion = new System.Data.DataColumn("DeleteOnCompletion", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDeleteOnCompletion);
                this.columnLabel_Id = new System.Data.DataColumn("Label_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnLabel_Id);
                this.columnAction_Id = new System.Data.DataColumn("Action_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAction_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnLabel_Id}, true));
                this.columnFilename.AllowDBNull = false;
                this.columnFilename.Namespace = "";
                this.columnPerfectPrintAngle.Namespace = "";
                this.columnDeleteOnCompletion.Namespace = "";
                this.columnDeleteOnCompletion.DefaultValue = ((string)("false"));
                this.columnLabel_Id.AutoIncrement = true;
                this.columnLabel_Id.AllowDBNull = false;
                this.columnLabel_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelRow NewLabelRow() {
                return ((LabelRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LabelRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LabelRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LabelRowChanged != null)) {
                    this.LabelRowChanged(this, new LabelRowChangeEvent(((LabelRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LabelRowChanging != null)) {
                    this.LabelRowChanging(this, new LabelRowChangeEvent(((LabelRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LabelRowDeleted != null)) {
                    this.LabelRowDeleted(this, new LabelRowChangeEvent(((LabelRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LabelRowDeleting != null)) {
                    this.LabelRowDeleting(this, new LabelRowChangeEvent(((LabelRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLabelRow(LabelRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LabelDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PCLDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnLabel_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PCLDataTable() {
                this.TableName = "PCL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PCLDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PCLDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Label_IdColumn {
                get {
                    return this.columnLabel_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PCLRow this[int index] {
                get {
                    return ((PCLRow)(this.Rows[index]));
                }
            }
            
            public event PCLRowChangeEventHandler PCLRowChanging;
            
            public event PCLRowChangeEventHandler PCLRowChanged;
            
            public event PCLRowChangeEventHandler PCLRowDeleting;
            
            public event PCLRowChangeEventHandler PCLRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPCLRow(PCLRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PCLRow AddPCLRow(LabelRow parentLabelRowByLabel_PCL) {
                PCLRow rowPCLRow = ((PCLRow)(this.NewRow()));
                rowPCLRow.ItemArray = new object[] {
                        parentLabelRowByLabel_PCL[3]};
                this.Rows.Add(rowPCLRow);
                return rowPCLRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PCLDataTable cln = ((PCLDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PCLDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLabel_Id = base.Columns["Label_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLabel_Id = new System.Data.DataColumn("Label_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnLabel_Id);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PCLRow NewPCLRow() {
                return ((PCLRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PCLRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PCLRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PCLRowChanged != null)) {
                    this.PCLRowChanged(this, new PCLRowChangeEvent(((PCLRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PCLRowChanging != null)) {
                    this.PCLRowChanging(this, new PCLRowChangeEvent(((PCLRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PCLRowDeleted != null)) {
                    this.PCLRowDeleted(this, new PCLRowChangeEvent(((PCLRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PCLRowDeleting != null)) {
                    this.PCLRowDeleting(this, new PCLRowChangeEvent(((PCLRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePCLRow(PCLRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PCLDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BMPDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnLabel_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BMPDataTable() {
                this.TableName = "BMP";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BMPDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BMPDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Label_IdColumn {
                get {
                    return this.columnLabel_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BMPRow this[int index] {
                get {
                    return ((BMPRow)(this.Rows[index]));
                }
            }
            
            public event BMPRowChangeEventHandler BMPRowChanging;
            
            public event BMPRowChangeEventHandler BMPRowChanged;
            
            public event BMPRowChangeEventHandler BMPRowDeleting;
            
            public event BMPRowChangeEventHandler BMPRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBMPRow(BMPRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BMPRow AddBMPRow(LabelRow parentLabelRowByLabel_BMP) {
                BMPRow rowBMPRow = ((BMPRow)(this.NewRow()));
                rowBMPRow.ItemArray = new object[] {
                        parentLabelRowByLabel_BMP[3]};
                this.Rows.Add(rowBMPRow);
                return rowBMPRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BMPDataTable cln = ((BMPDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BMPDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLabel_Id = base.Columns["Label_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLabel_Id = new System.Data.DataColumn("Label_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnLabel_Id);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BMPRow NewBMPRow() {
                return ((BMPRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BMPRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BMPRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BMPRowChanged != null)) {
                    this.BMPRowChanged(this, new BMPRowChangeEvent(((BMPRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BMPRowChanging != null)) {
                    this.BMPRowChanging(this, new BMPRowChangeEvent(((BMPRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BMPRowDeleted != null)) {
                    this.BMPRowDeleted(this, new BMPRowChangeEvent(((BMPRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BMPRowDeleting != null)) {
                    this.BMPRowDeleting(this, new BMPRowChangeEvent(((BMPRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBMPRow(BMPRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BMPDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BTWDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnMerge_Filename;
            
            private System.Data.DataColumn columnSaveAfterRendering;
            
            private System.Data.DataColumn columnDeleteMergeFileOnCompletion;
            
            private System.Data.DataColumn columnRenderLocalCopy;
            
            private System.Data.DataColumn columnMergeFileHasFieldNames;
            
            private System.Data.DataColumn columnLabel_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BTWDataTable() {
                this.TableName = "BTW";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BTWDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BTWDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Merge_FilenameColumn {
                get {
                    return this.columnMerge_Filename;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SaveAfterRenderingColumn {
                get {
                    return this.columnSaveAfterRendering;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DeleteMergeFileOnCompletionColumn {
                get {
                    return this.columnDeleteMergeFileOnCompletion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RenderLocalCopyColumn {
                get {
                    return this.columnRenderLocalCopy;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MergeFileHasFieldNamesColumn {
                get {
                    return this.columnMergeFileHasFieldNames;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Label_IdColumn {
                get {
                    return this.columnLabel_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BTWRow this[int index] {
                get {
                    return ((BTWRow)(this.Rows[index]));
                }
            }
            
            public event BTWRowChangeEventHandler BTWRowChanging;
            
            public event BTWRowChangeEventHandler BTWRowChanged;
            
            public event BTWRowChangeEventHandler BTWRowDeleting;
            
            public event BTWRowChangeEventHandler BTWRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBTWRow(BTWRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BTWRow AddBTWRow(string Merge_Filename, string SaveAfterRendering, string DeleteMergeFileOnCompletion, string RenderLocalCopy, string MergeFileHasFieldNames, LabelRow parentLabelRowByLabel_BTW) {
                BTWRow rowBTWRow = ((BTWRow)(this.NewRow()));
                rowBTWRow.ItemArray = new object[] {
                        Merge_Filename,
                        SaveAfterRendering,
                        DeleteMergeFileOnCompletion,
                        RenderLocalCopy,
                        MergeFileHasFieldNames,
                        parentLabelRowByLabel_BTW[3]};
                this.Rows.Add(rowBTWRow);
                return rowBTWRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BTWDataTable cln = ((BTWDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BTWDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMerge_Filename = base.Columns["Merge_Filename"];
                this.columnSaveAfterRendering = base.Columns["SaveAfterRendering"];
                this.columnDeleteMergeFileOnCompletion = base.Columns["DeleteMergeFileOnCompletion"];
                this.columnRenderLocalCopy = base.Columns["RenderLocalCopy"];
                this.columnMergeFileHasFieldNames = base.Columns["MergeFileHasFieldNames"];
                this.columnLabel_Id = base.Columns["Label_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMerge_Filename = new System.Data.DataColumn("Merge_Filename", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMerge_Filename);
                this.columnSaveAfterRendering = new System.Data.DataColumn("SaveAfterRendering", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSaveAfterRendering);
                this.columnDeleteMergeFileOnCompletion = new System.Data.DataColumn("DeleteMergeFileOnCompletion", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDeleteMergeFileOnCompletion);
                this.columnRenderLocalCopy = new System.Data.DataColumn("RenderLocalCopy", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRenderLocalCopy);
                this.columnMergeFileHasFieldNames = new System.Data.DataColumn("MergeFileHasFieldNames", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMergeFileHasFieldNames);
                this.columnLabel_Id = new System.Data.DataColumn("Label_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnLabel_Id);
                this.columnMerge_Filename.Namespace = "";
                this.columnSaveAfterRendering.Namespace = "";
                this.columnSaveAfterRendering.DefaultValue = ((string)("false"));
                this.columnDeleteMergeFileOnCompletion.Namespace = "";
                this.columnDeleteMergeFileOnCompletion.DefaultValue = ((string)("false"));
                this.columnRenderLocalCopy.Namespace = "";
                this.columnRenderLocalCopy.DefaultValue = ((string)("false"));
                this.columnMergeFileHasFieldNames.Namespace = "";
                this.columnMergeFileHasFieldNames.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BTWRow NewBTWRow() {
                return ((BTWRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BTWRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BTWRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BTWRowChanged != null)) {
                    this.BTWRowChanged(this, new BTWRowChangeEvent(((BTWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BTWRowChanging != null)) {
                    this.BTWRowChanging(this, new BTWRowChangeEvent(((BTWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BTWRowDeleted != null)) {
                    this.BTWRowDeleted(this, new BTWRowChangeEvent(((BTWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BTWRowDeleting != null)) {
                    this.BTWRowDeleting(this, new BTWRowChangeEvent(((BTWRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBTWRow(BTWRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BTWDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BTW_ODBCDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnODBC_Connect;
            
            private System.Data.DataColumn columnSQLSelect;
            
            private System.Data.DataColumn columnRenderLocalCopy;
            
            private System.Data.DataColumn columnLabel_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BTW_ODBCDataTable() {
                this.TableName = "BTW_ODBC";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BTW_ODBCDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BTW_ODBCDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ODBC_ConnectColumn {
                get {
                    return this.columnODBC_Connect;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SQLSelectColumn {
                get {
                    return this.columnSQLSelect;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RenderLocalCopyColumn {
                get {
                    return this.columnRenderLocalCopy;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Label_IdColumn {
                get {
                    return this.columnLabel_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BTW_ODBCRow this[int index] {
                get {
                    return ((BTW_ODBCRow)(this.Rows[index]));
                }
            }
            
            public event BTW_ODBCRowChangeEventHandler BTW_ODBCRowChanging;
            
            public event BTW_ODBCRowChangeEventHandler BTW_ODBCRowChanged;
            
            public event BTW_ODBCRowChangeEventHandler BTW_ODBCRowDeleting;
            
            public event BTW_ODBCRowChangeEventHandler BTW_ODBCRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBTW_ODBCRow(BTW_ODBCRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BTW_ODBCRow AddBTW_ODBCRow(string ODBC_Connect, string SQLSelect, string RenderLocalCopy, LabelRow parentLabelRowByLabel_BTW_ODBC) {
                BTW_ODBCRow rowBTW_ODBCRow = ((BTW_ODBCRow)(this.NewRow()));
                rowBTW_ODBCRow.ItemArray = new object[] {
                        ODBC_Connect,
                        SQLSelect,
                        RenderLocalCopy,
                        parentLabelRowByLabel_BTW_ODBC[3]};
                this.Rows.Add(rowBTW_ODBCRow);
                return rowBTW_ODBCRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BTW_ODBCDataTable cln = ((BTW_ODBCDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BTW_ODBCDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnODBC_Connect = base.Columns["ODBC_Connect"];
                this.columnSQLSelect = base.Columns["SQLSelect"];
                this.columnRenderLocalCopy = base.Columns["RenderLocalCopy"];
                this.columnLabel_Id = base.Columns["Label_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnODBC_Connect = new System.Data.DataColumn("ODBC_Connect", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnODBC_Connect);
                this.columnSQLSelect = new System.Data.DataColumn("SQLSelect", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSQLSelect);
                this.columnRenderLocalCopy = new System.Data.DataColumn("RenderLocalCopy", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRenderLocalCopy);
                this.columnLabel_Id = new System.Data.DataColumn("Label_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnLabel_Id);
                this.columnODBC_Connect.AllowDBNull = false;
                this.columnODBC_Connect.Namespace = "";
                this.columnSQLSelect.AllowDBNull = false;
                this.columnSQLSelect.Namespace = "";
                this.columnRenderLocalCopy.Namespace = "";
                this.columnRenderLocalCopy.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BTW_ODBCRow NewBTW_ODBCRow() {
                return ((BTW_ODBCRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BTW_ODBCRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BTW_ODBCRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BTW_ODBCRowChanged != null)) {
                    this.BTW_ODBCRowChanged(this, new BTW_ODBCRowChangeEvent(((BTW_ODBCRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BTW_ODBCRowChanging != null)) {
                    this.BTW_ODBCRowChanging(this, new BTW_ODBCRowChangeEvent(((BTW_ODBCRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BTW_ODBCRowDeleted != null)) {
                    this.BTW_ODBCRowDeleted(this, new BTW_ODBCRowChangeEvent(((BTW_ODBCRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BTW_ODBCRowDeleting != null)) {
                    this.BTW_ODBCRowDeleting(this, new BTW_ODBCRowChangeEvent(((BTW_ODBCRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBTW_ODBCRow(BTW_ODBCRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BTW_ODBCDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PDFDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnLabel_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PDFDataTable() {
                this.TableName = "PDF";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PDFDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PDFDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Label_IdColumn {
                get {
                    return this.columnLabel_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PDFRow this[int index] {
                get {
                    return ((PDFRow)(this.Rows[index]));
                }
            }
            
            public event PDFRowChangeEventHandler PDFRowChanging;
            
            public event PDFRowChangeEventHandler PDFRowChanged;
            
            public event PDFRowChangeEventHandler PDFRowDeleting;
            
            public event PDFRowChangeEventHandler PDFRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPDFRow(PDFRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PDFRow AddPDFRow(LabelRow parentLabelRowByLabel_PDF) {
                PDFRow rowPDFRow = ((PDFRow)(this.NewRow()));
                rowPDFRow.ItemArray = new object[] {
                        parentLabelRowByLabel_PDF[3]};
                this.Rows.Add(rowPDFRow);
                return rowPDFRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PDFDataTable cln = ((PDFDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PDFDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLabel_Id = base.Columns["Label_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLabel_Id = new System.Data.DataColumn("Label_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnLabel_Id);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PDFRow NewPDFRow() {
                return ((PDFRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PDFRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PDFRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PDFRowChanged != null)) {
                    this.PDFRowChanged(this, new PDFRowChangeEvent(((PDFRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PDFRowChanging != null)) {
                    this.PDFRowChanging(this, new PDFRowChangeEvent(((PDFRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PDFRowDeleted != null)) {
                    this.PDFRowDeleted(this, new PDFRowChangeEvent(((PDFRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PDFRowDeleting != null)) {
                    this.PDFRowDeleting(this, new PDFRowChangeEvent(((PDFRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePDFRow(PDFRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PDFDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CollateDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnAction_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CollateDataTable() {
                this.TableName = "Collate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CollateDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CollateDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Action_IdColumn {
                get {
                    return this.columnAction_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CollateRow this[int index] {
                get {
                    return ((CollateRow)(this.Rows[index]));
                }
            }
            
            public event CollateRowChangeEventHandler CollateRowChanging;
            
            public event CollateRowChangeEventHandler CollateRowChanged;
            
            public event CollateRowChangeEventHandler CollateRowDeleting;
            
            public event CollateRowChangeEventHandler CollateRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCollateRow(CollateRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CollateRow AddCollateRow(ActionRow parentActionRowByAction_Collate) {
                CollateRow rowCollateRow = ((CollateRow)(this.NewRow()));
                rowCollateRow.ItemArray = new object[] {
                        parentActionRowByAction_Collate[0]};
                this.Rows.Add(rowCollateRow);
                return rowCollateRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CollateDataTable cln = ((CollateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CollateDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAction_Id = base.Columns["Action_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAction_Id = new System.Data.DataColumn("Action_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAction_Id);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CollateRow NewCollateRow() {
                return ((CollateRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CollateRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CollateRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CollateRowChanged != null)) {
                    this.CollateRowChanged(this, new CollateRowChangeEvent(((CollateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CollateRowChanging != null)) {
                    this.CollateRowChanging(this, new CollateRowChangeEvent(((CollateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CollateRowDeleted != null)) {
                    this.CollateRowDeleted(this, new CollateRowChangeEvent(((CollateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CollateRowDeleting != null)) {
                    this.CollateRowDeleting(this, new CollateRowChangeEvent(((CollateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCollateRow(CollateRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CollateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CopyDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDisplayMap;
            
            private System.Data.DataColumn columnForceDAO;
            
            private System.Data.DataColumn columnRawMode;
            
            private System.Data.DataColumn columnVerifyChecksum;
            
            private System.Data.DataColumn columnReadSpeed;
            
            private System.Data.DataColumn columnAction_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CopyDataTable() {
                this.TableName = "Copy";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CopyDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CopyDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DisplayMapColumn {
                get {
                    return this.columnDisplayMap;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ForceDAOColumn {
                get {
                    return this.columnForceDAO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RawModeColumn {
                get {
                    return this.columnRawMode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VerifyChecksumColumn {
                get {
                    return this.columnVerifyChecksum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ReadSpeedColumn {
                get {
                    return this.columnReadSpeed;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Action_IdColumn {
                get {
                    return this.columnAction_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CopyRow this[int index] {
                get {
                    return ((CopyRow)(this.Rows[index]));
                }
            }
            
            public event CopyRowChangeEventHandler CopyRowChanging;
            
            public event CopyRowChangeEventHandler CopyRowChanged;
            
            public event CopyRowChangeEventHandler CopyRowDeleting;
            
            public event CopyRowChangeEventHandler CopyRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCopyRow(CopyRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CopyRow AddCopyRow(string DisplayMap, string ForceDAO, string RawMode, string VerifyChecksum, string ReadSpeed, ActionRow parentActionRowByAction_Copy) {
                CopyRow rowCopyRow = ((CopyRow)(this.NewRow()));
                rowCopyRow.ItemArray = new object[] {
                        DisplayMap,
                        ForceDAO,
                        RawMode,
                        VerifyChecksum,
                        ReadSpeed,
                        parentActionRowByAction_Copy[0]};
                this.Rows.Add(rowCopyRow);
                return rowCopyRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CopyDataTable cln = ((CopyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CopyDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDisplayMap = base.Columns["DisplayMap"];
                this.columnForceDAO = base.Columns["ForceDAO"];
                this.columnRawMode = base.Columns["RawMode"];
                this.columnVerifyChecksum = base.Columns["VerifyChecksum"];
                this.columnReadSpeed = base.Columns["ReadSpeed"];
                this.columnAction_Id = base.Columns["Action_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDisplayMap = new System.Data.DataColumn("DisplayMap", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDisplayMap);
                this.columnForceDAO = new System.Data.DataColumn("ForceDAO", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnForceDAO);
                this.columnRawMode = new System.Data.DataColumn("RawMode", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRawMode);
                this.columnVerifyChecksum = new System.Data.DataColumn("VerifyChecksum", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnVerifyChecksum);
                this.columnReadSpeed = new System.Data.DataColumn("ReadSpeed", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnReadSpeed);
                this.columnAction_Id = new System.Data.DataColumn("Action_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAction_Id);
                this.columnDisplayMap.Namespace = "";
                this.columnDisplayMap.DefaultValue = ((string)("false"));
                this.columnForceDAO.Namespace = "";
                this.columnForceDAO.DefaultValue = ((string)("false"));
                this.columnRawMode.Namespace = "";
                this.columnRawMode.DefaultValue = ((string)("false"));
                this.columnVerifyChecksum.Namespace = "";
                this.columnReadSpeed.Namespace = "";
                this.columnReadSpeed.DefaultValue = ((string)("Maximum"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CopyRow NewCopyRow() {
                return ((CopyRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CopyRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CopyRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CopyRowChanged != null)) {
                    this.CopyRowChanged(this, new CopyRowChangeEvent(((CopyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CopyRowChanging != null)) {
                    this.CopyRowChanging(this, new CopyRowChangeEvent(((CopyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CopyRowDeleted != null)) {
                    this.CopyRowDeleted(this, new CopyRowChangeEvent(((CopyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CopyRowDeleting != null)) {
                    this.CopyRowDeleting(this, new CopyRowChangeEvent(((CopyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCopyRow(CopyRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CopyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DestroyDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnVolumeId;
            
            private System.Data.DataColumn columnAction_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DestroyDataTable() {
                this.TableName = "Destroy";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DestroyDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DestroyDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VolumeIdColumn {
                get {
                    return this.columnVolumeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Action_IdColumn {
                get {
                    return this.columnAction_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DestroyRow this[int index] {
                get {
                    return ((DestroyRow)(this.Rows[index]));
                }
            }
            
            public event DestroyRowChangeEventHandler DestroyRowChanging;
            
            public event DestroyRowChangeEventHandler DestroyRowChanged;
            
            public event DestroyRowChangeEventHandler DestroyRowDeleting;
            
            public event DestroyRowChangeEventHandler DestroyRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDestroyRow(DestroyRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DestroyRow AddDestroyRow(string VolumeId, ActionRow parentActionRowByAction_Destroy) {
                DestroyRow rowDestroyRow = ((DestroyRow)(this.NewRow()));
                rowDestroyRow.ItemArray = new object[] {
                        VolumeId,
                        parentActionRowByAction_Destroy[0]};
                this.Rows.Add(rowDestroyRow);
                return rowDestroyRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DestroyDataTable cln = ((DestroyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DestroyDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnVolumeId = base.Columns["VolumeId"];
                this.columnAction_Id = base.Columns["Action_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnVolumeId = new System.Data.DataColumn("VolumeId", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnVolumeId);
                this.columnAction_Id = new System.Data.DataColumn("Action_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAction_Id);
                this.columnVolumeId.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DestroyRow NewDestroyRow() {
                return ((DestroyRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DestroyRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DestroyRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DestroyRowChanged != null)) {
                    this.DestroyRowChanged(this, new DestroyRowChangeEvent(((DestroyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DestroyRowChanging != null)) {
                    this.DestroyRowChanging(this, new DestroyRowChangeEvent(((DestroyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DestroyRowDeleted != null)) {
                    this.DestroyRowDeleted(this, new DestroyRowChangeEvent(((DestroyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DestroyRowDeleting != null)) {
                    this.DestroyRowDeleting(this, new DestroyRowChangeEvent(((DestroyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDestroyRow(DestroyRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionOrder ds = new ProductionOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DestroyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MediaRow : System.Data.DataRow {
            
            private MediaDataTable tableMedia;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MediaRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMedia = ((MediaDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableMedia.TypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Type\' in table \'Media\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMedia.TypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size {
                get {
                    try {
                        return ((string)(this[this.tableMedia.SizeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Size\' in table \'Media\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMedia.SizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableMedia.TypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableMedia.TypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSizeNull() {
                return this.IsNull(this.tableMedia.SizeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSizeNull() {
                this[this.tableMedia.SizeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TargetRow : System.Data.DataRow {
            
            private TargetDataTable tableTarget;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TargetRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTarget = ((TargetDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cluster {
                get {
                    try {
                        return ((string)(this[this.tableTarget.ClusterColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Cluster\' in table \'Target\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTarget.ClusterColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Server {
                get {
                    try {
                        return ((string)(this[this.tableTarget.ServerColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Server\' in table \'Target\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTarget.ServerColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Line {
                get {
                    try {
                        return ((string)(this[this.tableTarget.LineColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Line\' in table \'Target\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTarget.LineColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClusterNull() {
                return this.IsNull(this.tableTarget.ClusterColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClusterNull() {
                this[this.tableTarget.ClusterColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServerNull() {
                return this.IsNull(this.tableTarget.ServerColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServerNull() {
                this[this.tableTarget.ServerColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLineNull() {
                return this.IsNull(this.tableTarget.LineColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLineNull() {
                this[this.tableTarget.LineColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InOutRow : System.Data.DataRow {
            
            private InOutDataTable tableInOut;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InOutRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInOut = ((InOutDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InputBin {
                get {
                    try {
                        return ((string)(this[this.tableInOut.InputBinColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'InputBin\' in table \'InOut\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInOut.InputBinColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OutputMailslot {
                get {
                    try {
                        return ((string)(this[this.tableInOut.OutputMailslotColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OutputMailslot\' in table \'InOut\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInOut.OutputMailslotColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInputBinNull() {
                return this.IsNull(this.tableInOut.InputBinColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInputBinNull() {
                this[this.tableInOut.InputBinColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOutputMailslotNull() {
                return this.IsNull(this.tableInOut.OutputMailslotColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOutputMailslotNull() {
                this[this.tableInOut.OutputMailslotColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CustomizeRow : System.Data.DataRow {
            
            private CustomizeDataTable tableCustomize;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CustomizeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCustomize = ((CustomizeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserType {
                get {
                    return ((string)(this[this.tableCustomize.UserTypeColumn]));
                }
                set {
                    this[this.tableCustomize.UserTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserData {
                get {
                    return ((string)(this[this.tableCustomize.UserDataColumn]));
                }
                set {
                    this[this.tableCustomize.UserDataColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ActionRow : System.Data.DataRow {
            
            private ActionDataTable tableAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ActionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAction = ((ActionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Action_Id {
                get {
                    return ((int)(this[this.tableAction.Action_IdColumn]));
                }
                set {
                    this[this.tableAction.Action_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordRow[] GetRecordRows() {
                return ((RecordRow[])(base.GetChildRows(this.Table.ChildRelations["Action_Record"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadRow[] GetReadRows() {
                return ((ReadRow[])(base.GetChildRows(this.Table.ChildRelations["Action_Read"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelRow[] GetLabelRows() {
                return ((LabelRow[])(base.GetChildRows(this.Table.ChildRelations["Action_Label"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CollateRow[] GetCollateRows() {
                return ((CollateRow[])(base.GetChildRows(this.Table.ChildRelations["Action_Collate"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CopyRow[] GetCopyRows() {
                return ((CopyRow[])(base.GetChildRows(this.Table.ChildRelations["Action_Copy"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DestroyRow[] GetDestroyRows() {
                return ((DestroyRow[])(base.GetChildRows(this.Table.ChildRelations["Action_Destroy"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RecordRow : System.Data.DataRow {
            
            private RecordDataTable tableRecord;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RecordRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRecord = ((RecordDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Record_Id {
                get {
                    return ((int)(this[this.tableRecord.Record_IdColumn]));
                }
                set {
                    this[this.tableRecord.Record_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Action_Id {
                get {
                    try {
                        return ((int)(this[this.tableRecord.Action_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Action_Id\' in table \'Record\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecord.Action_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionRow ActionRow {
                get {
                    return ((ActionRow)(this.GetParentRow(this.Table.ParentRelations["Action_Record"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Action_Record"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAction_IdNull() {
                return this.IsNull(this.tableRecord.Action_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAction_IdNull() {
                this[this.tableRecord.Action_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WriteTrackRow[] GetWriteTrackRows() {
                return ((WriteTrackRow[])(base.GetChildRows(this.Table.ChildRelations["Record_WriteTrack"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WriteDDPRow[] GetWriteDDPRows() {
                return ((WriteDDPRow[])(base.GetChildRows(this.Table.ChildRelations["Record_WriteDDP"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FixateRow[] GetFixateRows() {
                return ((FixateRow[])(base.GetChildRows(this.Table.ChildRelations["Record_Fixate"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReserveTrackRow[] GetReserveTrackRows() {
                return ((ReserveTrackRow[])(base.GetChildRows(this.Table.ChildRelations["Record_ReserveTrack"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WriteDiscRow[] GetWriteDiscRows() {
                return ((WriteDiscRow[])(base.GetChildRows(this.Table.ChildRelations["Record_WriteDisc"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class WriteTrackRow : System.Data.DataRow {
            
            private WriteTrackDataTable tableWriteTrack;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WriteTrackRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableWriteTrack = ((WriteTrackDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Filename {
                get {
                    return ((string)(this[this.tableWriteTrack.FilenameColumn]));
                }
                set {
                    this[this.tableWriteTrack.FilenameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReservedTrackNumber {
                get {
                    try {
                        return ((string)(this[this.tableWriteTrack.ReservedTrackNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ReservedTrackNumber\' in table \'WriteTrack\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWriteTrack.ReservedTrackNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeleteAfterRecording {
                get {
                    try {
                        return ((string)(this[this.tableWriteTrack.DeleteAfterRecordingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DeleteAfterRecording\' in table \'WriteTrack\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWriteTrack.DeleteAfterRecordingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WriteTrack_Id {
                get {
                    return ((int)(this[this.tableWriteTrack.WriteTrack_IdColumn]));
                }
                set {
                    this[this.tableWriteTrack.WriteTrack_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Record_Id {
                get {
                    try {
                        return ((int)(this[this.tableWriteTrack.Record_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Record_Id\' in table \'WriteTrack\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWriteTrack.Record_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordRow RecordRow {
                get {
                    return ((RecordRow)(this.GetParentRow(this.Table.ParentRelations["Record_WriteTrack"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Record_WriteTrack"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReservedTrackNumberNull() {
                return this.IsNull(this.tableWriteTrack.ReservedTrackNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReservedTrackNumberNull() {
                this[this.tableWriteTrack.ReservedTrackNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleteAfterRecordingNull() {
                return this.IsNull(this.tableWriteTrack.DeleteAfterRecordingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeleteAfterRecordingNull() {
                this[this.tableWriteTrack.DeleteAfterRecordingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecord_IdNull() {
                return this.IsNull(this.tableWriteTrack.Record_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecord_IdNull() {
                this[this.tableWriteTrack.Record_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AudioRow[] GetAudioRows() {
                return ((AudioRow[])(base.GetChildRows(this.Table.ChildRelations["WriteTrack_Audio"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataElementRow[] GetDataElementRows() {
                return ((DataElementRow[])(base.GetChildRows(this.Table.ChildRelations["WriteTrack_DataElement"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AudioRow : System.Data.DataRow {
            
            private AudioDataTable tableAudio;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AudioRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAudio = ((AudioDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ISRC {
                get {
                    try {
                        return ((string)(this[this.tableAudio.ISRCColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ISRC\' in table \'Audio\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAudio.ISRCColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AddPregapBlocks {
                get {
                    try {
                        return ((string)(this[this.tableAudio.AddPregapBlocksColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AddPregapBlocks\' in table \'Audio\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAudio.AddPregapBlocksColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmbeddedPregapBlocks {
                get {
                    try {
                        return ((string)(this[this.tableAudio.EmbeddedPregapBlocksColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EmbeddedPregapBlocks\' in table \'Audio\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAudio.EmbeddedPregapBlocksColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Audio_Id {
                get {
                    return ((int)(this[this.tableAudio.Audio_IdColumn]));
                }
                set {
                    this[this.tableAudio.Audio_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WriteTrack_Id {
                get {
                    try {
                        return ((int)(this[this.tableAudio.WriteTrack_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'WriteTrack_Id\' in table \'Audio\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAudio.WriteTrack_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WriteTrackRow WriteTrackRow {
                get {
                    return ((WriteTrackRow)(this.GetParentRow(this.Table.ParentRelations["WriteTrack_Audio"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["WriteTrack_Audio"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsISRCNull() {
                return this.IsNull(this.tableAudio.ISRCColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetISRCNull() {
                this[this.tableAudio.ISRCColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddPregapBlocksNull() {
                return this.IsNull(this.tableAudio.AddPregapBlocksColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddPregapBlocksNull() {
                this[this.tableAudio.AddPregapBlocksColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmbeddedPregapBlocksNull() {
                return this.IsNull(this.tableAudio.EmbeddedPregapBlocksColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmbeddedPregapBlocksNull() {
                this[this.tableAudio.EmbeddedPregapBlocksColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWriteTrack_IdNull() {
                return this.IsNull(this.tableAudio.WriteTrack_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWriteTrack_IdNull() {
                this[this.tableAudio.WriteTrack_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubIndexRow[] GetSubIndexRows() {
                return ((SubIndexRow[])(base.GetChildRows(this.Table.ChildRelations["Audio_SubIndex"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AudioControlRow[] GetAudioControlRows() {
                return ((AudioControlRow[])(base.GetChildRows(this.Table.ChildRelations["Audio_AudioControl"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SubIndexRow : System.Data.DataRow {
            
            private SubIndexDataTable tableSubIndex;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubIndexRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSubIndex = ((SubIndexDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BlockNumber {
                get {
                    return ((string)(this[this.tableSubIndex.BlockNumberColumn]));
                }
                set {
                    this[this.tableSubIndex.BlockNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Audio_Id {
                get {
                    try {
                        return ((int)(this[this.tableSubIndex.Audio_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Audio_Id\' in table \'SubIndex\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubIndex.Audio_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AudioRow AudioRow {
                get {
                    return ((AudioRow)(this.GetParentRow(this.Table.ParentRelations["Audio_SubIndex"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Audio_SubIndex"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAudio_IdNull() {
                return this.IsNull(this.tableSubIndex.Audio_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAudio_IdNull() {
                this[this.tableSubIndex.Audio_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AudioControlRow : System.Data.DataRow {
            
            private AudioControlDataTable tableAudioControl;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AudioControlRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAudioControl = ((AudioControlDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AllowCopy {
                get {
                    try {
                        return ((string)(this[this.tableAudioControl.AllowCopyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AllowCopy\' in table \'AudioControl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAudioControl.AllowCopyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PreEmphasis {
                get {
                    try {
                        return ((string)(this[this.tableAudioControl.PreEmphasisColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PreEmphasis\' in table \'AudioControl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAudioControl.PreEmphasisColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FourChannel {
                get {
                    try {
                        return ((string)(this[this.tableAudioControl.FourChannelColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FourChannel\' in table \'AudioControl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAudioControl.FourChannelColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Audio_Id {
                get {
                    try {
                        return ((int)(this[this.tableAudioControl.Audio_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Audio_Id\' in table \'AudioControl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAudioControl.Audio_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AudioRow AudioRow {
                get {
                    return ((AudioRow)(this.GetParentRow(this.Table.ParentRelations["Audio_AudioControl"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Audio_AudioControl"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAllowCopyNull() {
                return this.IsNull(this.tableAudioControl.AllowCopyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAllowCopyNull() {
                this[this.tableAudioControl.AllowCopyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreEmphasisNull() {
                return this.IsNull(this.tableAudioControl.PreEmphasisColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreEmphasisNull() {
                this[this.tableAudioControl.PreEmphasisColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourChannelNull() {
                return this.IsNull(this.tableAudioControl.FourChannelColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourChannelNull() {
                this[this.tableAudioControl.FourChannelColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAudio_IdNull() {
                return this.IsNull(this.tableAudioControl.Audio_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAudio_IdNull() {
                this[this.tableAudioControl.Audio_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataElementRow : System.Data.DataRow {
            
            private DataElementDataTable tableDataElement;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataElementRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataElement = ((DataElementDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableDataElement.TypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Type\' in table \'DataElement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataElement.TypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MergeSessions {
                get {
                    try {
                        return ((string)(this[this.tableDataElement.MergeSessionsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MergeSessions\' in table \'DataElement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataElement.MergeSessionsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DisableExtentFixups {
                get {
                    try {
                        return ((string)(this[this.tableDataElement.DisableExtentFixupsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DisableExtentFixups\' in table \'DataElement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataElement.DisableExtentFixupsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VerifyChecksum {
                get {
                    try {
                        return ((string)(this[this.tableDataElement.VerifyChecksumColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'VerifyChecksum\' in table \'DataElement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataElement.VerifyChecksumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DataElement_Id {
                get {
                    return ((int)(this[this.tableDataElement.DataElement_IdColumn]));
                }
                set {
                    this[this.tableDataElement.DataElement_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WriteTrack_Id {
                get {
                    try {
                        return ((int)(this[this.tableDataElement.WriteTrack_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'WriteTrack_Id\' in table \'DataElement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataElement.WriteTrack_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WriteTrackRow WriteTrackRow {
                get {
                    return ((WriteTrackRow)(this.GetParentRow(this.Table.ParentRelations["WriteTrack_DataElement"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["WriteTrack_DataElement"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableDataElement.TypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableDataElement.TypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMergeSessionsNull() {
                return this.IsNull(this.tableDataElement.MergeSessionsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMergeSessionsNull() {
                this[this.tableDataElement.MergeSessionsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDisableExtentFixupsNull() {
                return this.IsNull(this.tableDataElement.DisableExtentFixupsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDisableExtentFixupsNull() {
                this[this.tableDataElement.DisableExtentFixupsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVerifyChecksumNull() {
                return this.IsNull(this.tableDataElement.VerifyChecksumColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVerifyChecksumNull() {
                this[this.tableDataElement.VerifyChecksumColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWriteTrack_IdNull() {
                return this.IsNull(this.tableDataElement.WriteTrack_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWriteTrack_IdNull() {
                this[this.tableDataElement.WriteTrack_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VolumeIdRow[] GetVolumeIdRows() {
                return ((VolumeIdRow[])(base.GetChildRows(this.Table.ChildRelations["DataElement_VolumeId"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataControlRow[] GetDataControlRows() {
                return ((DataControlRow[])(base.GetChildRows(this.Table.ChildRelations["DataElement_DataControl"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DvdFlagsRow[] GetDvdFlagsRows() {
                return ((DvdFlagsRow[])(base.GetChildRows(this.Table.ChildRelations["DataElement_DvdFlags"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class VolumeIdRow : System.Data.DataRow {
            
            private VolumeIdDataTable tableVolumeId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VolumeIdRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVolumeId = ((VolumeIdDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string volume_id {
                get {
                    try {
                        return ((string)(this[this.tableVolumeId.volume_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'volume_id\' in table \'VolumeId\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVolumeId.volume_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Usage {
                get {
                    try {
                        return ((string)(this[this.tableVolumeId.UsageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Usage\' in table \'VolumeId\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVolumeId.UsageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PvdFilename {
                get {
                    try {
                        return ((string)(this[this.tableVolumeId.PvdFilenameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PvdFilename\' in table \'VolumeId\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVolumeId.PvdFilenameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DataElement_Id {
                get {
                    try {
                        return ((int)(this[this.tableVolumeId.DataElement_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DataElement_Id\' in table \'VolumeId\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVolumeId.DataElement_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataElementRow DataElementRow {
                get {
                    return ((DataElementRow)(this.GetParentRow(this.Table.ParentRelations["DataElement_VolumeId"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DataElement_VolumeId"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isvolume_idNull() {
                return this.IsNull(this.tableVolumeId.volume_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setvolume_idNull() {
                this[this.tableVolumeId.volume_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUsageNull() {
                return this.IsNull(this.tableVolumeId.UsageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUsageNull() {
                this[this.tableVolumeId.UsageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPvdFilenameNull() {
                return this.IsNull(this.tableVolumeId.PvdFilenameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPvdFilenameNull() {
                this[this.tableVolumeId.PvdFilenameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataElement_IdNull() {
                return this.IsNull(this.tableVolumeId.DataElement_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataElement_IdNull() {
                this[this.tableVolumeId.DataElement_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataControlRow : System.Data.DataRow {
            
            private DataControlDataTable tableDataControl;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataControlRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataControl = ((DataControlDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Bit1 {
                get {
                    try {
                        return ((string)(this[this.tableDataControl.Bit1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Bit1\' in table \'DataControl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataControl.Bit1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AllowCopy {
                get {
                    try {
                        return ((string)(this[this.tableDataControl.AllowCopyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AllowCopy\' in table \'DataControl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataControl.AllowCopyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Bit4 {
                get {
                    try {
                        return ((string)(this[this.tableDataControl.Bit4Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Bit4\' in table \'DataControl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataControl.Bit4Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Bit8 {
                get {
                    try {
                        return ((string)(this[this.tableDataControl.Bit8Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Bit8\' in table \'DataControl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataControl.Bit8Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DataElement_Id {
                get {
                    try {
                        return ((int)(this[this.tableDataControl.DataElement_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DataElement_Id\' in table \'DataControl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataControl.DataElement_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataElementRow DataElementRow {
                get {
                    return ((DataElementRow)(this.GetParentRow(this.Table.ParentRelations["DataElement_DataControl"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DataElement_DataControl"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBit1Null() {
                return this.IsNull(this.tableDataControl.Bit1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBit1Null() {
                this[this.tableDataControl.Bit1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAllowCopyNull() {
                return this.IsNull(this.tableDataControl.AllowCopyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAllowCopyNull() {
                this[this.tableDataControl.AllowCopyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBit4Null() {
                return this.IsNull(this.tableDataControl.Bit4Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBit4Null() {
                this[this.tableDataControl.Bit4Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBit8Null() {
                return this.IsNull(this.tableDataControl.Bit8Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBit8Null() {
                this[this.tableDataControl.Bit8Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataElement_IdNull() {
                return this.IsNull(this.tableDataControl.DataElement_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataElement_IdNull() {
                this[this.tableDataControl.DataElement_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DvdFlagsRow : System.Data.DataRow {
            
            private DvdFlagsDataTable tableDvdFlags;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DvdFlagsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDvdFlags = ((DvdFlagsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADP_TY {
                get {
                    try {
                        return ((string)(this[this.tableDvdFlags.ADP_TYColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ADP_TY\' in table \'DvdFlags\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDvdFlags.ADP_TYColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DataElement_Id {
                get {
                    try {
                        return ((int)(this[this.tableDvdFlags.DataElement_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DataElement_Id\' in table \'DvdFlags\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDvdFlags.DataElement_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataElementRow DataElementRow {
                get {
                    return ((DataElementRow)(this.GetParentRow(this.Table.ParentRelations["DataElement_DvdFlags"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DataElement_DvdFlags"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADP_TYNull() {
                return this.IsNull(this.tableDvdFlags.ADP_TYColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADP_TYNull() {
                this[this.tableDvdFlags.ADP_TYColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataElement_IdNull() {
                return this.IsNull(this.tableDvdFlags.DataElement_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataElement_IdNull() {
                this[this.tableDvdFlags.DataElement_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class WriteDDPRow : System.Data.DataRow {
            
            private WriteDDPDataTable tableWriteDDP;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WriteDDPRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableWriteDDP = ((WriteDDPDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DirectoryName {
                get {
                    return ((string)(this[this.tableWriteDDP.DirectoryNameColumn]));
                }
                set {
                    this[this.tableWriteDDP.DirectoryNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Appendable {
                get {
                    try {
                        return ((string)(this[this.tableWriteDDP.AppendableColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Appendable\' in table \'WriteDDP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWriteDDP.AppendableColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Record_Id {
                get {
                    try {
                        return ((int)(this[this.tableWriteDDP.Record_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Record_Id\' in table \'WriteDDP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWriteDDP.Record_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordRow RecordRow {
                get {
                    return ((RecordRow)(this.GetParentRow(this.Table.ParentRelations["Record_WriteDDP"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Record_WriteDDP"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAppendableNull() {
                return this.IsNull(this.tableWriteDDP.AppendableColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAppendableNull() {
                this[this.tableWriteDDP.AppendableColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecord_IdNull() {
                return this.IsNull(this.tableWriteDDP.Record_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecord_IdNull() {
                this[this.tableWriteDDP.Record_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FixateRow : System.Data.DataRow {
            
            private FixateDataTable tableFixate;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FixateRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFixate = ((FixateDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableFixate.TypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Type\' in table \'Fixate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFixate.TypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Final {
                get {
                    try {
                        return ((string)(this[this.tableFixate.FinalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Final\' in table \'Fixate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFixate.FinalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UPC_EAN {
                get {
                    try {
                        return ((string)(this[this.tableFixate.UPC_EANColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UPC_EAN\' in table \'Fixate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFixate.UPC_EANColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Record_Id {
                get {
                    try {
                        return ((int)(this[this.tableFixate.Record_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Record_Id\' in table \'Fixate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFixate.Record_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordRow RecordRow {
                get {
                    return ((RecordRow)(this.GetParentRow(this.Table.ParentRelations["Record_Fixate"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Record_Fixate"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableFixate.TypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableFixate.TypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinalNull() {
                return this.IsNull(this.tableFixate.FinalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinalNull() {
                this[this.tableFixate.FinalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPC_EANNull() {
                return this.IsNull(this.tableFixate.UPC_EANColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPC_EANNull() {
                this[this.tableFixate.UPC_EANColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecord_IdNull() {
                return this.IsNull(this.tableFixate.Record_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecord_IdNull() {
                this[this.tableFixate.Record_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReserveTrackRow : System.Data.DataRow {
            
            private ReserveTrackDataTable tableReserveTrack;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReserveTrackRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReserveTrack = ((ReserveTrackDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NumberOfBlocks {
                get {
                    try {
                        return ((string)(this[this.tableReserveTrack.NumberOfBlocksColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NumberOfBlocks\' in table \'ReserveTrack\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReserveTrack.NumberOfBlocksColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Record_Id {
                get {
                    try {
                        return ((int)(this[this.tableReserveTrack.Record_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Record_Id\' in table \'ReserveTrack\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReserveTrack.Record_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordRow RecordRow {
                get {
                    return ((RecordRow)(this.GetParentRow(this.Table.ParentRelations["Record_ReserveTrack"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Record_ReserveTrack"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumberOfBlocksNull() {
                return this.IsNull(this.tableReserveTrack.NumberOfBlocksColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumberOfBlocksNull() {
                this[this.tableReserveTrack.NumberOfBlocksColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecord_IdNull() {
                return this.IsNull(this.tableReserveTrack.Record_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecord_IdNull() {
                this[this.tableReserveTrack.Record_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class WriteDiscRow : System.Data.DataRow {
            
            private WriteDiscDataTable tableWriteDisc;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WriteDiscRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableWriteDisc = ((WriteDiscDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Filename {
                get {
                    return ((string)(this[this.tableWriteDisc.FilenameColumn]));
                }
                set {
                    this[this.tableWriteDisc.FilenameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Record_Id {
                get {
                    try {
                        return ((int)(this[this.tableWriteDisc.Record_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Record_Id\' in table \'WriteDisc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWriteDisc.Record_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordRow RecordRow {
                get {
                    return ((RecordRow)(this.GetParentRow(this.Table.ParentRelations["Record_WriteDisc"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Record_WriteDisc"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecord_IdNull() {
                return this.IsNull(this.tableWriteDisc.Record_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecord_IdNull() {
                this[this.tableWriteDisc.Record_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReadRow : System.Data.DataRow {
            
            private ReadDataTable tableRead;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReadRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRead = ((ReadDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReadSpeed {
                get {
                    try {
                        return ((string)(this[this.tableRead.ReadSpeedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ReadSpeed\' in table \'Read\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRead.ReadSpeedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Read_Id {
                get {
                    return ((int)(this[this.tableRead.Read_IdColumn]));
                }
                set {
                    this[this.tableRead.Read_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Action_Id {
                get {
                    try {
                        return ((int)(this[this.tableRead.Action_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Action_Id\' in table \'Read\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRead.Action_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionRow ActionRow {
                get {
                    return ((ActionRow)(this.GetParentRow(this.Table.ParentRelations["Action_Read"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Action_Read"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReadSpeedNull() {
                return this.IsNull(this.tableRead.ReadSpeedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReadSpeedNull() {
                this[this.tableRead.ReadSpeedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAction_IdNull() {
                return this.IsNull(this.tableRead.Action_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAction_IdNull() {
                this[this.tableRead.Action_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapRow[] GetMapRows() {
                return ((MapRow[])(base.GetChildRows(this.Table.ChildRelations["Read_Map"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadTrackRow[] GetReadTrackRows() {
                return ((ReadTrackRow[])(base.GetChildRows(this.Table.ChildRelations["Read_ReadTrack"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadPVDRow[] GetReadPVDRows() {
                return ((ReadPVDRow[])(base.GetChildRows(this.Table.ChildRelations["Read_ReadPVD"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CloseSessionRow[] GetCloseSessionRows() {
                return ((CloseSessionRow[])(base.GetChildRows(this.Table.ChildRelations["Read_CloseSession"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Destroy1Row[] GetDestroy1Rows() {
                return ((Destroy1Row[])(base.GetChildRows(this.Table.ChildRelations["Read_Destroy1"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TerminateReadRow[] GetTerminateReadRows() {
                return ((TerminateReadRow[])(base.GetChildRows(this.Table.ChildRelations["Read_TerminateRead"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadDDPRow[] GetReadDDPRows() {
                return ((ReadDDPRow[])(base.GetChildRows(this.Table.ChildRelations["Read_ReadDDP"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadDiscRow[] GetReadDiscRows() {
                return ((ReadDiscRow[])(base.GetChildRows(this.Table.ChildRelations["Read_ReadDisc"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CallReadProcRow[] GetCallReadProcRows() {
                return ((CallReadProcRow[])(base.GetChildRows(this.Table.ChildRelations["Read_CallReadProc"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MapRow : System.Data.DataRow {
            
            private MapDataTable tableMap;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MapRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMap = ((MapDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Filename {
                get {
                    return ((string)(this[this.tableMap.FilenameColumn]));
                }
                set {
                    this[this.tableMap.FilenameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GetBarcode {
                get {
                    try {
                        return ((string)(this[this.tableMap.GetBarcodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'GetBarcode\' in table \'Map\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMap.GetBarcodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FullDiscMap {
                get {
                    try {
                        return ((string)(this[this.tableMap.FullDiscMapColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FullDiscMap\' in table \'Map\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMap.FullDiscMapColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Read_Id {
                get {
                    try {
                        return ((int)(this[this.tableMap.Read_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Read_Id\' in table \'Map\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMap.Read_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadRow ReadRow {
                get {
                    return ((ReadRow)(this.GetParentRow(this.Table.ParentRelations["Read_Map"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Read_Map"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGetBarcodeNull() {
                return this.IsNull(this.tableMap.GetBarcodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGetBarcodeNull() {
                this[this.tableMap.GetBarcodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFullDiscMapNull() {
                return this.IsNull(this.tableMap.FullDiscMapColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFullDiscMapNull() {
                this[this.tableMap.FullDiscMapColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRead_IdNull() {
                return this.IsNull(this.tableMap.Read_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRead_IdNull() {
                this[this.tableMap.Read_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReadTrackRow : System.Data.DataRow {
            
            private ReadTrackDataTable tableReadTrack;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReadTrackRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReadTrack = ((ReadTrackDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Filename {
                get {
                    return ((string)(this[this.tableReadTrack.FilenameColumn]));
                }
                set {
                    this[this.tableReadTrack.FilenameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrackNumber {
                get {
                    return ((string)(this[this.tableReadTrack.TrackNumberColumn]));
                }
                set {
                    this[this.tableReadTrack.TrackNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrefixHeader {
                get {
                    try {
                        return ((string)(this[this.tableReadTrack.PrefixHeaderColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PrefixHeader\' in table \'ReadTrack\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReadTrack.PrefixHeaderColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableReadTrack.DescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'ReadTrack\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReadTrack.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReadPregap {
                get {
                    try {
                        return ((string)(this[this.tableReadTrack.ReadPregapColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ReadPregap\' in table \'ReadTrack\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReadTrack.ReadPregapColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReadNextPregap {
                get {
                    try {
                        return ((string)(this[this.tableReadTrack.ReadNextPregapColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ReadNextPregap\' in table \'ReadTrack\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReadTrack.ReadNextPregapColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BlockSize {
                get {
                    try {
                        return ((string)(this[this.tableReadTrack.BlockSizeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BlockSize\' in table \'ReadTrack\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReadTrack.BlockSizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExtractISOFiles {
                get {
                    try {
                        return ((string)(this[this.tableReadTrack.ExtractISOFilesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ExtractISOFiles\' in table \'ReadTrack\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReadTrack.ExtractISOFilesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Read_Id {
                get {
                    try {
                        return ((int)(this[this.tableReadTrack.Read_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Read_Id\' in table \'ReadTrack\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReadTrack.Read_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadRow ReadRow {
                get {
                    return ((ReadRow)(this.GetParentRow(this.Table.ParentRelations["Read_ReadTrack"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Read_ReadTrack"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrefixHeaderNull() {
                return this.IsNull(this.tableReadTrack.PrefixHeaderColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrefixHeaderNull() {
                this[this.tableReadTrack.PrefixHeaderColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableReadTrack.DescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableReadTrack.DescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReadPregapNull() {
                return this.IsNull(this.tableReadTrack.ReadPregapColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReadPregapNull() {
                this[this.tableReadTrack.ReadPregapColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReadNextPregapNull() {
                return this.IsNull(this.tableReadTrack.ReadNextPregapColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReadNextPregapNull() {
                this[this.tableReadTrack.ReadNextPregapColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBlockSizeNull() {
                return this.IsNull(this.tableReadTrack.BlockSizeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBlockSizeNull() {
                this[this.tableReadTrack.BlockSizeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExtractISOFilesNull() {
                return this.IsNull(this.tableReadTrack.ExtractISOFilesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExtractISOFilesNull() {
                this[this.tableReadTrack.ExtractISOFilesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRead_IdNull() {
                return this.IsNull(this.tableReadTrack.Read_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRead_IdNull() {
                this[this.tableReadTrack.Read_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReadPVDRow : System.Data.DataRow {
            
            private ReadPVDDataTable tableReadPVD;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReadPVDRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReadPVD = ((ReadPVDDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Filename {
                get {
                    return ((string)(this[this.tableReadPVD.FilenameColumn]));
                }
                set {
                    this[this.tableReadPVD.FilenameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrackNumber {
                get {
                    return ((string)(this[this.tableReadPVD.TrackNumberColumn]));
                }
                set {
                    this[this.tableReadPVD.TrackNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Read_Id {
                get {
                    try {
                        return ((int)(this[this.tableReadPVD.Read_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Read_Id\' in table \'ReadPVD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReadPVD.Read_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadRow ReadRow {
                get {
                    return ((ReadRow)(this.GetParentRow(this.Table.ParentRelations["Read_ReadPVD"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Read_ReadPVD"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRead_IdNull() {
                return this.IsNull(this.tableReadPVD.Read_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRead_IdNull() {
                this[this.tableReadPVD.Read_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CloseSessionRow : System.Data.DataRow {
            
            private CloseSessionDataTable tableCloseSession;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CloseSessionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCloseSession = ((CloseSessionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Appendable {
                get {
                    try {
                        return ((string)(this[this.tableCloseSession.AppendableColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Appendable\' in table \'CloseSession\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCloseSession.AppendableColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Read_Id {
                get {
                    try {
                        return ((int)(this[this.tableCloseSession.Read_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Read_Id\' in table \'CloseSession\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCloseSession.Read_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadRow ReadRow {
                get {
                    return ((ReadRow)(this.GetParentRow(this.Table.ParentRelations["Read_CloseSession"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Read_CloseSession"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAppendableNull() {
                return this.IsNull(this.tableCloseSession.AppendableColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAppendableNull() {
                this[this.tableCloseSession.AppendableColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRead_IdNull() {
                return this.IsNull(this.tableCloseSession.Read_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRead_IdNull() {
                this[this.tableCloseSession.Read_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Destroy1Row : System.Data.DataRow {
            
            private Destroy1DataTable tableDestroy1;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Destroy1Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDestroy1 = ((Destroy1DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VolumeId {
                get {
                    try {
                        return ((string)(this[this.tableDestroy1.VolumeIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'VolumeId\' in table \'Destroy1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDestroy1.VolumeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Read_Id {
                get {
                    try {
                        return ((int)(this[this.tableDestroy1.Read_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Read_Id\' in table \'Destroy1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDestroy1.Read_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadRow ReadRow {
                get {
                    return ((ReadRow)(this.GetParentRow(this.Table.ParentRelations["Read_Destroy1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Read_Destroy1"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVolumeIdNull() {
                return this.IsNull(this.tableDestroy1.VolumeIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVolumeIdNull() {
                this[this.tableDestroy1.VolumeIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRead_IdNull() {
                return this.IsNull(this.tableDestroy1.Read_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRead_IdNull() {
                this[this.tableDestroy1.Read_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TerminateReadRow : System.Data.DataRow {
            
            private TerminateReadDataTable tableTerminateRead;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TerminateReadRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTerminateRead = ((TerminateReadDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EjectDisc {
                get {
                    try {
                        return ((string)(this[this.tableTerminateRead.EjectDiscColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EjectDisc\' in table \'TerminateRead\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminateRead.EjectDiscColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrintRejectLabel {
                get {
                    try {
                        return ((string)(this[this.tableTerminateRead.PrintRejectLabelColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PrintRejectLabel\' in table \'TerminateRead\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminateRead.PrintRejectLabelColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OutputToAcceptBin {
                get {
                    try {
                        return ((string)(this[this.tableTerminateRead.OutputToAcceptBinColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OutputToAcceptBin\' in table \'TerminateRead\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminateRead.OutputToAcceptBinColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Read_Id {
                get {
                    try {
                        return ((int)(this[this.tableTerminateRead.Read_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Read_Id\' in table \'TerminateRead\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerminateRead.Read_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadRow ReadRow {
                get {
                    return ((ReadRow)(this.GetParentRow(this.Table.ParentRelations["Read_TerminateRead"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Read_TerminateRead"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEjectDiscNull() {
                return this.IsNull(this.tableTerminateRead.EjectDiscColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEjectDiscNull() {
                this[this.tableTerminateRead.EjectDiscColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrintRejectLabelNull() {
                return this.IsNull(this.tableTerminateRead.PrintRejectLabelColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrintRejectLabelNull() {
                this[this.tableTerminateRead.PrintRejectLabelColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOutputToAcceptBinNull() {
                return this.IsNull(this.tableTerminateRead.OutputToAcceptBinColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOutputToAcceptBinNull() {
                this[this.tableTerminateRead.OutputToAcceptBinColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRead_IdNull() {
                return this.IsNull(this.tableTerminateRead.Read_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRead_IdNull() {
                this[this.tableTerminateRead.Read_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReadDDPRow : System.Data.DataRow {
            
            private ReadDDPDataTable tableReadDDP;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReadDDPRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReadDDP = ((ReadDDPDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DirectoryName {
                get {
                    return ((string)(this[this.tableReadDDP.DirectoryNameColumn]));
                }
                set {
                    this[this.tableReadDDP.DirectoryNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MasterId {
                get {
                    try {
                        return ((string)(this[this.tableReadDDP.MasterIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MasterId\' in table \'ReadDDP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReadDDP.MasterIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text {
                get {
                    try {
                        return ((string)(this[this.tableReadDDP.TextColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Text\' in table \'ReadDDP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReadDDP.TextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Read_Id {
                get {
                    try {
                        return ((int)(this[this.tableReadDDP.Read_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Read_Id\' in table \'ReadDDP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReadDDP.Read_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadRow ReadRow {
                get {
                    return ((ReadRow)(this.GetParentRow(this.Table.ParentRelations["Read_ReadDDP"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Read_ReadDDP"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMasterIdNull() {
                return this.IsNull(this.tableReadDDP.MasterIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMasterIdNull() {
                this[this.tableReadDDP.MasterIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTextNull() {
                return this.IsNull(this.tableReadDDP.TextColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTextNull() {
                this[this.tableReadDDP.TextColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRead_IdNull() {
                return this.IsNull(this.tableReadDDP.Read_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRead_IdNull() {
                this[this.tableReadDDP.Read_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReadDiscRow : System.Data.DataRow {
            
            private ReadDiscDataTable tableReadDisc;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReadDiscRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReadDisc = ((ReadDiscDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Filename {
                get {
                    return ((string)(this[this.tableReadDisc.FilenameColumn]));
                }
                set {
                    this[this.tableReadDisc.FilenameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BlockSize {
                get {
                    try {
                        return ((string)(this[this.tableReadDisc.BlockSizeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BlockSize\' in table \'ReadDisc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReadDisc.BlockSizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Read_Id {
                get {
                    try {
                        return ((int)(this[this.tableReadDisc.Read_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Read_Id\' in table \'ReadDisc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReadDisc.Read_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadRow ReadRow {
                get {
                    return ((ReadRow)(this.GetParentRow(this.Table.ParentRelations["Read_ReadDisc"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Read_ReadDisc"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBlockSizeNull() {
                return this.IsNull(this.tableReadDisc.BlockSizeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBlockSizeNull() {
                this[this.tableReadDisc.BlockSizeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRead_IdNull() {
                return this.IsNull(this.tableReadDisc.Read_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRead_IdNull() {
                this[this.tableReadDisc.Read_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CallReadProcRow : System.Data.DataRow {
            
            private CallReadProcDataTable tableCallReadProc;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CallReadProcRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCallReadProc = ((CallReadProcDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrintRejectLabelOnError {
                get {
                    try {
                        return ((string)(this[this.tableCallReadProc.PrintRejectLabelOnErrorColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PrintRejectLabelOnError\' in table \'CallReadProc\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableCallReadProc.PrintRejectLabelOnErrorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Read_Id {
                get {
                    try {
                        return ((int)(this[this.tableCallReadProc.Read_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Read_Id\' in table \'CallReadProc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCallReadProc.Read_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadRow ReadRow {
                get {
                    return ((ReadRow)(this.GetParentRow(this.Table.ParentRelations["Read_CallReadProc"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Read_CallReadProc"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrintRejectLabelOnErrorNull() {
                return this.IsNull(this.tableCallReadProc.PrintRejectLabelOnErrorColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrintRejectLabelOnErrorNull() {
                this[this.tableCallReadProc.PrintRejectLabelOnErrorColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRead_IdNull() {
                return this.IsNull(this.tableCallReadProc.Read_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRead_IdNull() {
                this[this.tableCallReadProc.Read_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LabelRow : System.Data.DataRow {
            
            private LabelDataTable tableLabel;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LabelRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLabel = ((LabelDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Filename {
                get {
                    return ((string)(this[this.tableLabel.FilenameColumn]));
                }
                set {
                    this[this.tableLabel.FilenameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PerfectPrintAngle {
                get {
                    try {
                        return ((string)(this[this.tableLabel.PerfectPrintAngleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PerfectPrintAngle\' in table \'Label\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabel.PerfectPrintAngleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeleteOnCompletion {
                get {
                    try {
                        return ((string)(this[this.tableLabel.DeleteOnCompletionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DeleteOnCompletion\' in table \'Label\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabel.DeleteOnCompletionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Label_Id {
                get {
                    return ((int)(this[this.tableLabel.Label_IdColumn]));
                }
                set {
                    this[this.tableLabel.Label_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Action_Id {
                get {
                    try {
                        return ((int)(this[this.tableLabel.Action_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Action_Id\' in table \'Label\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabel.Action_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionRow ActionRow {
                get {
                    return ((ActionRow)(this.GetParentRow(this.Table.ParentRelations["Action_Label"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Action_Label"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPerfectPrintAngleNull() {
                return this.IsNull(this.tableLabel.PerfectPrintAngleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPerfectPrintAngleNull() {
                this[this.tableLabel.PerfectPrintAngleColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleteOnCompletionNull() {
                return this.IsNull(this.tableLabel.DeleteOnCompletionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeleteOnCompletionNull() {
                this[this.tableLabel.DeleteOnCompletionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAction_IdNull() {
                return this.IsNull(this.tableLabel.Action_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAction_IdNull() {
                this[this.tableLabel.Action_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PCLRow[] GetPCLRows() {
                return ((PCLRow[])(base.GetChildRows(this.Table.ChildRelations["Label_PCL"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BMPRow[] GetBMPRows() {
                return ((BMPRow[])(base.GetChildRows(this.Table.ChildRelations["Label_BMP"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BTWRow[] GetBTWRows() {
                return ((BTWRow[])(base.GetChildRows(this.Table.ChildRelations["Label_BTW"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BTW_ODBCRow[] GetBTW_ODBCRows() {
                return ((BTW_ODBCRow[])(base.GetChildRows(this.Table.ChildRelations["Label_BTW_ODBC"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PDFRow[] GetPDFRows() {
                return ((PDFRow[])(base.GetChildRows(this.Table.ChildRelations["Label_PDF"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PCLRow : System.Data.DataRow {
            
            private PCLDataTable tablePCL;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PCLRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePCL = ((PCLDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Label_Id {
                get {
                    try {
                        return ((int)(this[this.tablePCL.Label_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Label_Id\' in table \'PCL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePCL.Label_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelRow LabelRow {
                get {
                    return ((LabelRow)(this.GetParentRow(this.Table.ParentRelations["Label_PCL"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Label_PCL"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabel_IdNull() {
                return this.IsNull(this.tablePCL.Label_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabel_IdNull() {
                this[this.tablePCL.Label_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BMPRow : System.Data.DataRow {
            
            private BMPDataTable tableBMP;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BMPRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBMP = ((BMPDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Label_Id {
                get {
                    try {
                        return ((int)(this[this.tableBMP.Label_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Label_Id\' in table \'BMP\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBMP.Label_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelRow LabelRow {
                get {
                    return ((LabelRow)(this.GetParentRow(this.Table.ParentRelations["Label_BMP"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Label_BMP"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabel_IdNull() {
                return this.IsNull(this.tableBMP.Label_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabel_IdNull() {
                this[this.tableBMP.Label_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BTWRow : System.Data.DataRow {
            
            private BTWDataTable tableBTW;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BTWRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBTW = ((BTWDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Merge_Filename {
                get {
                    try {
                        return ((string)(this[this.tableBTW.Merge_FilenameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Merge_Filename\' in table \'BTW\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBTW.Merge_FilenameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SaveAfterRendering {
                get {
                    try {
                        return ((string)(this[this.tableBTW.SaveAfterRenderingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SaveAfterRendering\' in table \'BTW\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBTW.SaveAfterRenderingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeleteMergeFileOnCompletion {
                get {
                    try {
                        return ((string)(this[this.tableBTW.DeleteMergeFileOnCompletionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DeleteMergeFileOnCompletion\' in table \'BTW\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBTW.DeleteMergeFileOnCompletionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RenderLocalCopy {
                get {
                    try {
                        return ((string)(this[this.tableBTW.RenderLocalCopyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RenderLocalCopy\' in table \'BTW\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBTW.RenderLocalCopyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MergeFileHasFieldNames {
                get {
                    try {
                        return ((string)(this[this.tableBTW.MergeFileHasFieldNamesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MergeFileHasFieldNames\' in table \'BTW\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBTW.MergeFileHasFieldNamesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Label_Id {
                get {
                    try {
                        return ((int)(this[this.tableBTW.Label_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Label_Id\' in table \'BTW\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBTW.Label_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelRow LabelRow {
                get {
                    return ((LabelRow)(this.GetParentRow(this.Table.ParentRelations["Label_BTW"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Label_BTW"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMerge_FilenameNull() {
                return this.IsNull(this.tableBTW.Merge_FilenameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMerge_FilenameNull() {
                this[this.tableBTW.Merge_FilenameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSaveAfterRenderingNull() {
                return this.IsNull(this.tableBTW.SaveAfterRenderingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSaveAfterRenderingNull() {
                this[this.tableBTW.SaveAfterRenderingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleteMergeFileOnCompletionNull() {
                return this.IsNull(this.tableBTW.DeleteMergeFileOnCompletionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeleteMergeFileOnCompletionNull() {
                this[this.tableBTW.DeleteMergeFileOnCompletionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRenderLocalCopyNull() {
                return this.IsNull(this.tableBTW.RenderLocalCopyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRenderLocalCopyNull() {
                this[this.tableBTW.RenderLocalCopyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMergeFileHasFieldNamesNull() {
                return this.IsNull(this.tableBTW.MergeFileHasFieldNamesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMergeFileHasFieldNamesNull() {
                this[this.tableBTW.MergeFileHasFieldNamesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabel_IdNull() {
                return this.IsNull(this.tableBTW.Label_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabel_IdNull() {
                this[this.tableBTW.Label_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BTW_ODBCRow : System.Data.DataRow {
            
            private BTW_ODBCDataTable tableBTW_ODBC;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BTW_ODBCRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBTW_ODBC = ((BTW_ODBCDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ODBC_Connect {
                get {
                    return ((string)(this[this.tableBTW_ODBC.ODBC_ConnectColumn]));
                }
                set {
                    this[this.tableBTW_ODBC.ODBC_ConnectColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SQLSelect {
                get {
                    return ((string)(this[this.tableBTW_ODBC.SQLSelectColumn]));
                }
                set {
                    this[this.tableBTW_ODBC.SQLSelectColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RenderLocalCopy {
                get {
                    try {
                        return ((string)(this[this.tableBTW_ODBC.RenderLocalCopyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RenderLocalCopy\' in table \'BTW_ODBC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBTW_ODBC.RenderLocalCopyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Label_Id {
                get {
                    try {
                        return ((int)(this[this.tableBTW_ODBC.Label_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Label_Id\' in table \'BTW_ODBC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBTW_ODBC.Label_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelRow LabelRow {
                get {
                    return ((LabelRow)(this.GetParentRow(this.Table.ParentRelations["Label_BTW_ODBC"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Label_BTW_ODBC"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRenderLocalCopyNull() {
                return this.IsNull(this.tableBTW_ODBC.RenderLocalCopyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRenderLocalCopyNull() {
                this[this.tableBTW_ODBC.RenderLocalCopyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabel_IdNull() {
                return this.IsNull(this.tableBTW_ODBC.Label_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabel_IdNull() {
                this[this.tableBTW_ODBC.Label_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PDFRow : System.Data.DataRow {
            
            private PDFDataTable tablePDF;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PDFRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePDF = ((PDFDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Label_Id {
                get {
                    try {
                        return ((int)(this[this.tablePDF.Label_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Label_Id\' in table \'PDF\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePDF.Label_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelRow LabelRow {
                get {
                    return ((LabelRow)(this.GetParentRow(this.Table.ParentRelations["Label_PDF"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Label_PDF"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabel_IdNull() {
                return this.IsNull(this.tablePDF.Label_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabel_IdNull() {
                this[this.tablePDF.Label_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CollateRow : System.Data.DataRow {
            
            private CollateDataTable tableCollate;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CollateRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCollate = ((CollateDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Action_Id {
                get {
                    try {
                        return ((int)(this[this.tableCollate.Action_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Action_Id\' in table \'Collate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCollate.Action_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionRow ActionRow {
                get {
                    return ((ActionRow)(this.GetParentRow(this.Table.ParentRelations["Action_Collate"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Action_Collate"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAction_IdNull() {
                return this.IsNull(this.tableCollate.Action_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAction_IdNull() {
                this[this.tableCollate.Action_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CopyRow : System.Data.DataRow {
            
            private CopyDataTable tableCopy;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CopyRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCopy = ((CopyDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DisplayMap {
                get {
                    try {
                        return ((string)(this[this.tableCopy.DisplayMapColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DisplayMap\' in table \'Copy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCopy.DisplayMapColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ForceDAO {
                get {
                    try {
                        return ((string)(this[this.tableCopy.ForceDAOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ForceDAO\' in table \'Copy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCopy.ForceDAOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RawMode {
                get {
                    try {
                        return ((string)(this[this.tableCopy.RawModeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RawMode\' in table \'Copy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCopy.RawModeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VerifyChecksum {
                get {
                    try {
                        return ((string)(this[this.tableCopy.VerifyChecksumColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'VerifyChecksum\' in table \'Copy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCopy.VerifyChecksumColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReadSpeed {
                get {
                    try {
                        return ((string)(this[this.tableCopy.ReadSpeedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ReadSpeed\' in table \'Copy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCopy.ReadSpeedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Action_Id {
                get {
                    try {
                        return ((int)(this[this.tableCopy.Action_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Action_Id\' in table \'Copy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCopy.Action_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionRow ActionRow {
                get {
                    return ((ActionRow)(this.GetParentRow(this.Table.ParentRelations["Action_Copy"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Action_Copy"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDisplayMapNull() {
                return this.IsNull(this.tableCopy.DisplayMapColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDisplayMapNull() {
                this[this.tableCopy.DisplayMapColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsForceDAONull() {
                return this.IsNull(this.tableCopy.ForceDAOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetForceDAONull() {
                this[this.tableCopy.ForceDAOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRawModeNull() {
                return this.IsNull(this.tableCopy.RawModeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRawModeNull() {
                this[this.tableCopy.RawModeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVerifyChecksumNull() {
                return this.IsNull(this.tableCopy.VerifyChecksumColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVerifyChecksumNull() {
                this[this.tableCopy.VerifyChecksumColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReadSpeedNull() {
                return this.IsNull(this.tableCopy.ReadSpeedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReadSpeedNull() {
                this[this.tableCopy.ReadSpeedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAction_IdNull() {
                return this.IsNull(this.tableCopy.Action_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAction_IdNull() {
                this[this.tableCopy.Action_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DestroyRow : System.Data.DataRow {
            
            private DestroyDataTable tableDestroy;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DestroyRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDestroy = ((DestroyDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VolumeId {
                get {
                    try {
                        return ((string)(this[this.tableDestroy.VolumeIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'VolumeId\' in table \'Destroy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDestroy.VolumeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Action_Id {
                get {
                    try {
                        return ((int)(this[this.tableDestroy.Action_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Action_Id\' in table \'Destroy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDestroy.Action_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionRow ActionRow {
                get {
                    return ((ActionRow)(this.GetParentRow(this.Table.ParentRelations["Action_Destroy"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Action_Destroy"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVolumeIdNull() {
                return this.IsNull(this.tableDestroy.VolumeIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVolumeIdNull() {
                this[this.tableDestroy.VolumeIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAction_IdNull() {
                return this.IsNull(this.tableDestroy.Action_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAction_IdNull() {
                this[this.tableDestroy.Action_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MediaRowChangeEvent : System.EventArgs {
            
            private MediaRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaRowChangeEvent(MediaRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TargetRowChangeEvent : System.EventArgs {
            
            private TargetRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TargetRowChangeEvent(TargetRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TargetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InOutRowChangeEvent : System.EventArgs {
            
            private InOutRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InOutRowChangeEvent(InOutRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InOutRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CustomizeRowChangeEvent : System.EventArgs {
            
            private CustomizeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomizeRowChangeEvent(CustomizeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CustomizeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ActionRowChangeEvent : System.EventArgs {
            
            private ActionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionRowChangeEvent(ActionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RecordRowChangeEvent : System.EventArgs {
            
            private RecordRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordRowChangeEvent(RecordRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class WriteTrackRowChangeEvent : System.EventArgs {
            
            private WriteTrackRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WriteTrackRowChangeEvent(WriteTrackRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WriteTrackRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AudioRowChangeEvent : System.EventArgs {
            
            private AudioRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AudioRowChangeEvent(AudioRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AudioRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SubIndexRowChangeEvent : System.EventArgs {
            
            private SubIndexRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubIndexRowChangeEvent(SubIndexRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubIndexRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AudioControlRowChangeEvent : System.EventArgs {
            
            private AudioControlRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AudioControlRowChangeEvent(AudioControlRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AudioControlRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataElementRowChangeEvent : System.EventArgs {
            
            private DataElementRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataElementRowChangeEvent(DataElementRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataElementRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class VolumeIdRowChangeEvent : System.EventArgs {
            
            private VolumeIdRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VolumeIdRowChangeEvent(VolumeIdRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VolumeIdRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataControlRowChangeEvent : System.EventArgs {
            
            private DataControlRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataControlRowChangeEvent(DataControlRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataControlRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DvdFlagsRowChangeEvent : System.EventArgs {
            
            private DvdFlagsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DvdFlagsRowChangeEvent(DvdFlagsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DvdFlagsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class WriteDDPRowChangeEvent : System.EventArgs {
            
            private WriteDDPRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WriteDDPRowChangeEvent(WriteDDPRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WriteDDPRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FixateRowChangeEvent : System.EventArgs {
            
            private FixateRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FixateRowChangeEvent(FixateRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FixateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReserveTrackRowChangeEvent : System.EventArgs {
            
            private ReserveTrackRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReserveTrackRowChangeEvent(ReserveTrackRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReserveTrackRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class WriteDiscRowChangeEvent : System.EventArgs {
            
            private WriteDiscRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WriteDiscRowChangeEvent(WriteDiscRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WriteDiscRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReadRowChangeEvent : System.EventArgs {
            
            private ReadRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadRowChangeEvent(ReadRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MapRowChangeEvent : System.EventArgs {
            
            private MapRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapRowChangeEvent(MapRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReadTrackRowChangeEvent : System.EventArgs {
            
            private ReadTrackRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadTrackRowChangeEvent(ReadTrackRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadTrackRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReadPVDRowChangeEvent : System.EventArgs {
            
            private ReadPVDRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadPVDRowChangeEvent(ReadPVDRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadPVDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CloseSessionRowChangeEvent : System.EventArgs {
            
            private CloseSessionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CloseSessionRowChangeEvent(CloseSessionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CloseSessionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Destroy1RowChangeEvent : System.EventArgs {
            
            private Destroy1Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Destroy1RowChangeEvent(Destroy1Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Destroy1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TerminateReadRowChangeEvent : System.EventArgs {
            
            private TerminateReadRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TerminateReadRowChangeEvent(TerminateReadRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TerminateReadRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReadDDPRowChangeEvent : System.EventArgs {
            
            private ReadDDPRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadDDPRowChangeEvent(ReadDDPRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadDDPRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReadDiscRowChangeEvent : System.EventArgs {
            
            private ReadDiscRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadDiscRowChangeEvent(ReadDiscRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadDiscRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CallReadProcRowChangeEvent : System.EventArgs {
            
            private CallReadProcRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CallReadProcRowChangeEvent(CallReadProcRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CallReadProcRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LabelRowChangeEvent : System.EventArgs {
            
            private LabelRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelRowChangeEvent(LabelRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabelRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PCLRowChangeEvent : System.EventArgs {
            
            private PCLRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PCLRowChangeEvent(PCLRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PCLRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BMPRowChangeEvent : System.EventArgs {
            
            private BMPRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BMPRowChangeEvent(BMPRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BMPRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BTWRowChangeEvent : System.EventArgs {
            
            private BTWRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BTWRowChangeEvent(BTWRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BTWRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BTW_ODBCRowChangeEvent : System.EventArgs {
            
            private BTW_ODBCRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BTW_ODBCRowChangeEvent(BTW_ODBCRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BTW_ODBCRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PDFRowChangeEvent : System.EventArgs {
            
            private PDFRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PDFRowChangeEvent(PDFRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PDFRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CollateRowChangeEvent : System.EventArgs {
            
            private CollateRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CollateRowChangeEvent(CollateRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CollateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CopyRowChangeEvent : System.EventArgs {
            
            private CopyRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CopyRowChangeEvent(CopyRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CopyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DestroyRowChangeEvent : System.EventArgs {
            
            private DestroyRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DestroyRowChangeEvent(DestroyRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DestroyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591