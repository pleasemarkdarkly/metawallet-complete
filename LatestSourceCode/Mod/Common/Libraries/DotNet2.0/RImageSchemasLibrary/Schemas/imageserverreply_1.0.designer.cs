//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace RImageSchemas.Schemas {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("ImageServerReply")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ImageServerReply : System.Data.DataSet {
        
        private AckOnlyDataTable tableAckOnly;
        
        private ServerStatusDataTable tableServerStatus;
        
        private ServerInfoDataTable tableServerInfo;
        
        private ImageServerInfoDataTable tableImageServerInfo;
        
        private OrderListDataTable tableOrderList;
        
        private ImagingOrderDataTable tableImagingOrder;
        
        private SessionLogDataTable tableSessionLog;
        
        private EntryDataTable tableEntry;
        
        private ImagingParameterSettingsDataTable tableImagingParameterSettings;
        
        private ServerDataTable tableServer;
        
        private System.Data.DataRelation relationServerStatus_ServerInfo;
        
        private System.Data.DataRelation relationServerStatus_ImageServerInfo;
        
        private System.Data.DataRelation relationOrderList_ImagingOrder;
        
        private System.Data.DataRelation relationSessionLog_Entry;
        
        private System.Data.DataRelation relationImagingParameterSettings_Server;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ImageServerReply() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ImageServerReply(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["AckOnly"] != null)) {
                    base.Tables.Add(new AckOnlyDataTable(ds.Tables["AckOnly"]));
                }
                if ((ds.Tables["ServerStatus"] != null)) {
                    base.Tables.Add(new ServerStatusDataTable(ds.Tables["ServerStatus"]));
                }
                if ((ds.Tables["ServerInfo"] != null)) {
                    base.Tables.Add(new ServerInfoDataTable(ds.Tables["ServerInfo"]));
                }
                if ((ds.Tables["ImageServerInfo"] != null)) {
                    base.Tables.Add(new ImageServerInfoDataTable(ds.Tables["ImageServerInfo"]));
                }
                if ((ds.Tables["OrderList"] != null)) {
                    base.Tables.Add(new OrderListDataTable(ds.Tables["OrderList"]));
                }
                if ((ds.Tables["ImagingOrder"] != null)) {
                    base.Tables.Add(new ImagingOrderDataTable(ds.Tables["ImagingOrder"]));
                }
                if ((ds.Tables["SessionLog"] != null)) {
                    base.Tables.Add(new SessionLogDataTable(ds.Tables["SessionLog"]));
                }
                if ((ds.Tables["Entry"] != null)) {
                    base.Tables.Add(new EntryDataTable(ds.Tables["Entry"]));
                }
                if ((ds.Tables["ImagingParameterSettings"] != null)) {
                    base.Tables.Add(new ImagingParameterSettingsDataTable(ds.Tables["ImagingParameterSettings"]));
                }
                if ((ds.Tables["Server"] != null)) {
                    base.Tables.Add(new ServerDataTable(ds.Tables["Server"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AckOnlyDataTable AckOnly {
            get {
                return this.tableAckOnly;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerStatusDataTable ServerStatus {
            get {
                return this.tableServerStatus;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerInfoDataTable ServerInfo {
            get {
                return this.tableServerInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ImageServerInfoDataTable ImageServerInfo {
            get {
                return this.tableImageServerInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OrderListDataTable OrderList {
            get {
                return this.tableOrderList;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ImagingOrderDataTable ImagingOrder {
            get {
                return this.tableImagingOrder;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SessionLogDataTable SessionLog {
            get {
                return this.tableSessionLog;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EntryDataTable Entry {
            get {
                return this.tableEntry;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ImagingParameterSettingsDataTable ImagingParameterSettings {
            get {
                return this.tableImagingParameterSettings;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerDataTable Server {
            get {
                return this.tableServer;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            ImageServerReply cln = ((ImageServerReply)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["AckOnly"] != null)) {
                    base.Tables.Add(new AckOnlyDataTable(ds.Tables["AckOnly"]));
                }
                if ((ds.Tables["ServerStatus"] != null)) {
                    base.Tables.Add(new ServerStatusDataTable(ds.Tables["ServerStatus"]));
                }
                if ((ds.Tables["ServerInfo"] != null)) {
                    base.Tables.Add(new ServerInfoDataTable(ds.Tables["ServerInfo"]));
                }
                if ((ds.Tables["ImageServerInfo"] != null)) {
                    base.Tables.Add(new ImageServerInfoDataTable(ds.Tables["ImageServerInfo"]));
                }
                if ((ds.Tables["OrderList"] != null)) {
                    base.Tables.Add(new OrderListDataTable(ds.Tables["OrderList"]));
                }
                if ((ds.Tables["ImagingOrder"] != null)) {
                    base.Tables.Add(new ImagingOrderDataTable(ds.Tables["ImagingOrder"]));
                }
                if ((ds.Tables["SessionLog"] != null)) {
                    base.Tables.Add(new SessionLogDataTable(ds.Tables["SessionLog"]));
                }
                if ((ds.Tables["Entry"] != null)) {
                    base.Tables.Add(new EntryDataTable(ds.Tables["Entry"]));
                }
                if ((ds.Tables["ImagingParameterSettings"] != null)) {
                    base.Tables.Add(new ImagingParameterSettingsDataTable(ds.Tables["ImagingParameterSettings"]));
                }
                if ((ds.Tables["Server"] != null)) {
                    base.Tables.Add(new ServerDataTable(ds.Tables["Server"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableAckOnly = ((AckOnlyDataTable)(base.Tables["AckOnly"]));
            if ((initTable == true)) {
                if ((this.tableAckOnly != null)) {
                    this.tableAckOnly.InitVars();
                }
            }
            this.tableServerStatus = ((ServerStatusDataTable)(base.Tables["ServerStatus"]));
            if ((initTable == true)) {
                if ((this.tableServerStatus != null)) {
                    this.tableServerStatus.InitVars();
                }
            }
            this.tableServerInfo = ((ServerInfoDataTable)(base.Tables["ServerInfo"]));
            if ((initTable == true)) {
                if ((this.tableServerInfo != null)) {
                    this.tableServerInfo.InitVars();
                }
            }
            this.tableImageServerInfo = ((ImageServerInfoDataTable)(base.Tables["ImageServerInfo"]));
            if ((initTable == true)) {
                if ((this.tableImageServerInfo != null)) {
                    this.tableImageServerInfo.InitVars();
                }
            }
            this.tableOrderList = ((OrderListDataTable)(base.Tables["OrderList"]));
            if ((initTable == true)) {
                if ((this.tableOrderList != null)) {
                    this.tableOrderList.InitVars();
                }
            }
            this.tableImagingOrder = ((ImagingOrderDataTable)(base.Tables["ImagingOrder"]));
            if ((initTable == true)) {
                if ((this.tableImagingOrder != null)) {
                    this.tableImagingOrder.InitVars();
                }
            }
            this.tableSessionLog = ((SessionLogDataTable)(base.Tables["SessionLog"]));
            if ((initTable == true)) {
                if ((this.tableSessionLog != null)) {
                    this.tableSessionLog.InitVars();
                }
            }
            this.tableEntry = ((EntryDataTable)(base.Tables["Entry"]));
            if ((initTable == true)) {
                if ((this.tableEntry != null)) {
                    this.tableEntry.InitVars();
                }
            }
            this.tableImagingParameterSettings = ((ImagingParameterSettingsDataTable)(base.Tables["ImagingParameterSettings"]));
            if ((initTable == true)) {
                if ((this.tableImagingParameterSettings != null)) {
                    this.tableImagingParameterSettings.InitVars();
                }
            }
            this.tableServer = ((ServerDataTable)(base.Tables["Server"]));
            if ((initTable == true)) {
                if ((this.tableServer != null)) {
                    this.tableServer.InitVars();
                }
            }
            this.relationServerStatus_ServerInfo = this.Relations["ServerStatus_ServerInfo"];
            this.relationServerStatus_ImageServerInfo = this.Relations["ServerStatus_ImageServerInfo"];
            this.relationOrderList_ImagingOrder = this.Relations["OrderList_ImagingOrder"];
            this.relationSessionLog_Entry = this.Relations["SessionLog_Entry"];
            this.relationImagingParameterSettings_Server = this.Relations["ImagingParameterSettings_Server"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ImageServerReply";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableAckOnly = new AckOnlyDataTable();
            base.Tables.Add(this.tableAckOnly);
            this.tableServerStatus = new ServerStatusDataTable();
            base.Tables.Add(this.tableServerStatus);
            this.tableServerInfo = new ServerInfoDataTable();
            base.Tables.Add(this.tableServerInfo);
            this.tableImageServerInfo = new ImageServerInfoDataTable();
            base.Tables.Add(this.tableImageServerInfo);
            this.tableOrderList = new OrderListDataTable();
            base.Tables.Add(this.tableOrderList);
            this.tableImagingOrder = new ImagingOrderDataTable();
            base.Tables.Add(this.tableImagingOrder);
            this.tableSessionLog = new SessionLogDataTable();
            base.Tables.Add(this.tableSessionLog);
            this.tableEntry = new EntryDataTable();
            base.Tables.Add(this.tableEntry);
            this.tableImagingParameterSettings = new ImagingParameterSettingsDataTable();
            base.Tables.Add(this.tableImagingParameterSettings);
            this.tableServer = new ServerDataTable();
            base.Tables.Add(this.tableServer);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("ServerStatus_ServerInfo", new System.Data.DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerInfo.ServerStatus_IdColumn});
            this.tableServerInfo.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ServerStatus_ImageServerInfo", new System.Data.DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new System.Data.DataColumn[] {
                        this.tableImageServerInfo.ServerStatus_IdColumn});
            this.tableImageServerInfo.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("OrderList_ImagingOrder", new System.Data.DataColumn[] {
                        this.tableOrderList.OrderList_IdColumn}, new System.Data.DataColumn[] {
                        this.tableImagingOrder.OrderList_IdColumn});
            this.tableImagingOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("SessionLog_Entry", new System.Data.DataColumn[] {
                        this.tableSessionLog.SessionLog_IdColumn}, new System.Data.DataColumn[] {
                        this.tableEntry.SessionLog_IdColumn});
            this.tableEntry.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ImagingParameterSettings_Server", new System.Data.DataColumn[] {
                        this.tableImagingParameterSettings.ImagingParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServer.ImagingParameterSettings_IdColumn});
            this.tableServer.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationServerStatus_ServerInfo = new System.Data.DataRelation("ServerStatus_ServerInfo", new System.Data.DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerInfo.ServerStatus_IdColumn}, false);
            this.relationServerStatus_ServerInfo.Nested = true;
            this.Relations.Add(this.relationServerStatus_ServerInfo);
            this.relationServerStatus_ImageServerInfo = new System.Data.DataRelation("ServerStatus_ImageServerInfo", new System.Data.DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new System.Data.DataColumn[] {
                        this.tableImageServerInfo.ServerStatus_IdColumn}, false);
            this.relationServerStatus_ImageServerInfo.Nested = true;
            this.Relations.Add(this.relationServerStatus_ImageServerInfo);
            this.relationOrderList_ImagingOrder = new System.Data.DataRelation("OrderList_ImagingOrder", new System.Data.DataColumn[] {
                        this.tableOrderList.OrderList_IdColumn}, new System.Data.DataColumn[] {
                        this.tableImagingOrder.OrderList_IdColumn}, false);
            this.relationOrderList_ImagingOrder.Nested = true;
            this.Relations.Add(this.relationOrderList_ImagingOrder);
            this.relationSessionLog_Entry = new System.Data.DataRelation("SessionLog_Entry", new System.Data.DataColumn[] {
                        this.tableSessionLog.SessionLog_IdColumn}, new System.Data.DataColumn[] {
                        this.tableEntry.SessionLog_IdColumn}, false);
            this.relationSessionLog_Entry.Nested = true;
            this.Relations.Add(this.relationSessionLog_Entry);
            this.relationImagingParameterSettings_Server = new System.Data.DataRelation("ImagingParameterSettings_Server", new System.Data.DataColumn[] {
                        this.tableImagingParameterSettings.ImagingParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServer.ImagingParameterSettings_IdColumn}, false);
            this.relationImagingParameterSettings_Server.Nested = true;
            this.Relations.Add(this.relationImagingParameterSettings_Server);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAckOnly() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServerStatus() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServerInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeImageServerInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOrderList() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeImagingOrder() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSessionLog() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEntry() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeImagingParameterSettings() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServer() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            ImageServerReply ds = new ImageServerReply();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void AckOnlyRowChangeEventHandler(object sender, AckOnlyRowChangeEvent e);
        
        public delegate void ServerStatusRowChangeEventHandler(object sender, ServerStatusRowChangeEvent e);
        
        public delegate void ServerInfoRowChangeEventHandler(object sender, ServerInfoRowChangeEvent e);
        
        public delegate void ImageServerInfoRowChangeEventHandler(object sender, ImageServerInfoRowChangeEvent e);
        
        public delegate void OrderListRowChangeEventHandler(object sender, OrderListRowChangeEvent e);
        
        public delegate void ImagingOrderRowChangeEventHandler(object sender, ImagingOrderRowChangeEvent e);
        
        public delegate void SessionLogRowChangeEventHandler(object sender, SessionLogRowChangeEvent e);
        
        public delegate void EntryRowChangeEventHandler(object sender, EntryRowChangeEvent e);
        
        public delegate void ImagingParameterSettingsRowChangeEventHandler(object sender, ImagingParameterSettingsRowChangeEvent e);
        
        public delegate void ServerRowChangeEventHandler(object sender, ServerRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AckOnlyDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AckOnlyDataTable() {
                this.TableName = "AckOnly";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AckOnlyDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AckOnlyDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AckOnlyRow this[int index] {
                get {
                    return ((AckOnlyRow)(this.Rows[index]));
                }
            }
            
            public event AckOnlyRowChangeEventHandler AckOnlyRowChanging;
            
            public event AckOnlyRowChangeEventHandler AckOnlyRowChanged;
            
            public event AckOnlyRowChangeEventHandler AckOnlyRowDeleting;
            
            public event AckOnlyRowChangeEventHandler AckOnlyRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAckOnlyRow(AckOnlyRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AckOnlyRow AddAckOnlyRow() {
                AckOnlyRow rowAckOnlyRow = ((AckOnlyRow)(this.NewRow()));
                rowAckOnlyRow.ItemArray = new object[0];
                this.Rows.Add(rowAckOnlyRow);
                return rowAckOnlyRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                AckOnlyDataTable cln = ((AckOnlyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new AckOnlyDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AckOnlyRow NewAckOnlyRow() {
                return ((AckOnlyRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AckOnlyRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(AckOnlyRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AckOnlyRowChanged != null)) {
                    this.AckOnlyRowChanged(this, new AckOnlyRowChangeEvent(((AckOnlyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AckOnlyRowChanging != null)) {
                    this.AckOnlyRowChanging(this, new AckOnlyRowChangeEvent(((AckOnlyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AckOnlyRowDeleted != null)) {
                    this.AckOnlyRowDeleted(this, new AckOnlyRowChangeEvent(((AckOnlyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AckOnlyRowDeleting != null)) {
                    this.AckOnlyRowDeleting(this, new AckOnlyRowChangeEvent(((AckOnlyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAckOnlyRow(AckOnlyRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ImageServerReply ds = new ImageServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AckOnlyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServerStatusDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnServerStatus_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerStatusDataTable() {
                this.TableName = "ServerStatus";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerStatusDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServerStatusDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ServerStatus_IdColumn {
                get {
                    return this.columnServerStatus_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerStatusRow this[int index] {
                get {
                    return ((ServerStatusRow)(this.Rows[index]));
                }
            }
            
            public event ServerStatusRowChangeEventHandler ServerStatusRowChanging;
            
            public event ServerStatusRowChangeEventHandler ServerStatusRowChanged;
            
            public event ServerStatusRowChangeEventHandler ServerStatusRowDeleting;
            
            public event ServerStatusRowChangeEventHandler ServerStatusRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServerStatusRow(ServerStatusRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerStatusRow AddServerStatusRow() {
                ServerStatusRow rowServerStatusRow = ((ServerStatusRow)(this.NewRow()));
                rowServerStatusRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowServerStatusRow);
                return rowServerStatusRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ServerStatusDataTable cln = ((ServerStatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ServerStatusDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnServerStatus_Id = base.Columns["ServerStatus_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnServerStatus_Id = new System.Data.DataColumn("ServerStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnServerStatus_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnServerStatus_Id}, true));
                this.columnServerStatus_Id.AutoIncrement = true;
                this.columnServerStatus_Id.AllowDBNull = false;
                this.columnServerStatus_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerStatusRow NewServerStatusRow() {
                return ((ServerStatusRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ServerStatusRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ServerStatusRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerStatusRowChanged != null)) {
                    this.ServerStatusRowChanged(this, new ServerStatusRowChangeEvent(((ServerStatusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerStatusRowChanging != null)) {
                    this.ServerStatusRowChanging(this, new ServerStatusRowChangeEvent(((ServerStatusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerStatusRowDeleted != null)) {
                    this.ServerStatusRowDeleted(this, new ServerStatusRowChangeEvent(((ServerStatusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerStatusRowDeleting != null)) {
                    this.ServerStatusRowDeleting(this, new ServerStatusRowChangeEvent(((ServerStatusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServerStatusRow(ServerStatusRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ImageServerReply ds = new ImageServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServerStatusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServerInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSoftwareVersion;
            
            private System.Data.DataColumn columnDescription;
            
            private System.Data.DataColumn columnHostname;
            
            private System.Data.DataColumn columnCluster;
            
            private System.Data.DataColumn columnMessagingPort;
            
            private System.Data.DataColumn columnSystemFolder;
            
            private System.Data.DataColumn columnIsService;
            
            private System.Data.DataColumn columnPasswordSet;
            
            private System.Data.DataColumn columnServerStatus_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerInfoDataTable() {
                this.TableName = "ServerInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerInfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServerInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SoftwareVersionColumn {
                get {
                    return this.columnSoftwareVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HostnameColumn {
                get {
                    return this.columnHostname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClusterColumn {
                get {
                    return this.columnCluster;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MessagingPortColumn {
                get {
                    return this.columnMessagingPort;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SystemFolderColumn {
                get {
                    return this.columnSystemFolder;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsServiceColumn {
                get {
                    return this.columnIsService;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PasswordSetColumn {
                get {
                    return this.columnPasswordSet;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ServerStatus_IdColumn {
                get {
                    return this.columnServerStatus_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerInfoRow this[int index] {
                get {
                    return ((ServerInfoRow)(this.Rows[index]));
                }
            }
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowChanging;
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowChanged;
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowDeleting;
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServerInfoRow(ServerInfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerInfoRow AddServerInfoRow(string SoftwareVersion, string Description, string Hostname, string Cluster, string MessagingPort, string SystemFolder, string IsService, string PasswordSet, ServerStatusRow parentServerStatusRowByServerStatus_ServerInfo) {
                ServerInfoRow rowServerInfoRow = ((ServerInfoRow)(this.NewRow()));
                rowServerInfoRow.ItemArray = new object[] {
                        SoftwareVersion,
                        Description,
                        Hostname,
                        Cluster,
                        MessagingPort,
                        SystemFolder,
                        IsService,
                        PasswordSet,
                        parentServerStatusRowByServerStatus_ServerInfo[0]};
                this.Rows.Add(rowServerInfoRow);
                return rowServerInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ServerInfoDataTable cln = ((ServerInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ServerInfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSoftwareVersion = base.Columns["SoftwareVersion"];
                this.columnDescription = base.Columns["Description"];
                this.columnHostname = base.Columns["Hostname"];
                this.columnCluster = base.Columns["Cluster"];
                this.columnMessagingPort = base.Columns["MessagingPort"];
                this.columnSystemFolder = base.Columns["SystemFolder"];
                this.columnIsService = base.Columns["IsService"];
                this.columnPasswordSet = base.Columns["PasswordSet"];
                this.columnServerStatus_Id = base.Columns["ServerStatus_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSoftwareVersion = new System.Data.DataColumn("SoftwareVersion", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSoftwareVersion);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDescription);
                this.columnHostname = new System.Data.DataColumn("Hostname", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnHostname);
                this.columnCluster = new System.Data.DataColumn("Cluster", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCluster);
                this.columnMessagingPort = new System.Data.DataColumn("MessagingPort", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMessagingPort);
                this.columnSystemFolder = new System.Data.DataColumn("SystemFolder", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSystemFolder);
                this.columnIsService = new System.Data.DataColumn("IsService", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIsService);
                this.columnPasswordSet = new System.Data.DataColumn("PasswordSet", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPasswordSet);
                this.columnServerStatus_Id = new System.Data.DataColumn("ServerStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnServerStatus_Id);
                this.columnSoftwareVersion.AllowDBNull = false;
                this.columnSoftwareVersion.Namespace = "";
                this.columnDescription.Namespace = "";
                this.columnHostname.AllowDBNull = false;
                this.columnHostname.Namespace = "";
                this.columnCluster.AllowDBNull = false;
                this.columnCluster.Namespace = "";
                this.columnMessagingPort.AllowDBNull = false;
                this.columnMessagingPort.Namespace = "";
                this.columnSystemFolder.AllowDBNull = false;
                this.columnSystemFolder.Namespace = "";
                this.columnIsService.Namespace = "";
                this.columnIsService.DefaultValue = ((string)("false"));
                this.columnPasswordSet.AllowDBNull = false;
                this.columnPasswordSet.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerInfoRow NewServerInfoRow() {
                return ((ServerInfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ServerInfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ServerInfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerInfoRowChanged != null)) {
                    this.ServerInfoRowChanged(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerInfoRowChanging != null)) {
                    this.ServerInfoRowChanging(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerInfoRowDeleted != null)) {
                    this.ServerInfoRowDeleted(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerInfoRowDeleting != null)) {
                    this.ServerInfoRowDeleting(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServerInfoRow(ServerInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ImageServerReply ds = new ImageServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServerInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ImageServerInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnImagesWritten;
            
            private System.Data.DataColumn columnImagesRejected;
            
            private System.Data.DataColumn columnServerStatus_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImageServerInfoDataTable() {
                this.TableName = "ImageServerInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ImageServerInfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ImageServerInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ImagesWrittenColumn {
                get {
                    return this.columnImagesWritten;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ImagesRejectedColumn {
                get {
                    return this.columnImagesRejected;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ServerStatus_IdColumn {
                get {
                    return this.columnServerStatus_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImageServerInfoRow this[int index] {
                get {
                    return ((ImageServerInfoRow)(this.Rows[index]));
                }
            }
            
            public event ImageServerInfoRowChangeEventHandler ImageServerInfoRowChanging;
            
            public event ImageServerInfoRowChangeEventHandler ImageServerInfoRowChanged;
            
            public event ImageServerInfoRowChangeEventHandler ImageServerInfoRowDeleting;
            
            public event ImageServerInfoRowChangeEventHandler ImageServerInfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddImageServerInfoRow(ImageServerInfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImageServerInfoRow AddImageServerInfoRow(string ImagesWritten, string ImagesRejected, ServerStatusRow parentServerStatusRowByServerStatus_ImageServerInfo) {
                ImageServerInfoRow rowImageServerInfoRow = ((ImageServerInfoRow)(this.NewRow()));
                rowImageServerInfoRow.ItemArray = new object[] {
                        ImagesWritten,
                        ImagesRejected,
                        parentServerStatusRowByServerStatus_ImageServerInfo[0]};
                this.Rows.Add(rowImageServerInfoRow);
                return rowImageServerInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ImageServerInfoDataTable cln = ((ImageServerInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ImageServerInfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnImagesWritten = base.Columns["ImagesWritten"];
                this.columnImagesRejected = base.Columns["ImagesRejected"];
                this.columnServerStatus_Id = base.Columns["ServerStatus_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnImagesWritten = new System.Data.DataColumn("ImagesWritten", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnImagesWritten);
                this.columnImagesRejected = new System.Data.DataColumn("ImagesRejected", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnImagesRejected);
                this.columnServerStatus_Id = new System.Data.DataColumn("ServerStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnServerStatus_Id);
                this.columnImagesWritten.Namespace = "";
                this.columnImagesRejected.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImageServerInfoRow NewImageServerInfoRow() {
                return ((ImageServerInfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ImageServerInfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ImageServerInfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ImageServerInfoRowChanged != null)) {
                    this.ImageServerInfoRowChanged(this, new ImageServerInfoRowChangeEvent(((ImageServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ImageServerInfoRowChanging != null)) {
                    this.ImageServerInfoRowChanging(this, new ImageServerInfoRowChangeEvent(((ImageServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ImageServerInfoRowDeleted != null)) {
                    this.ImageServerInfoRowDeleted(this, new ImageServerInfoRowChangeEvent(((ImageServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ImageServerInfoRowDeleting != null)) {
                    this.ImageServerInfoRowDeleting(this, new ImageServerInfoRowChangeEvent(((ImageServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveImageServerInfoRow(ImageServerInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ImageServerReply ds = new ImageServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ImageServerInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OrderListDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCluster;
            
            private System.Data.DataColumn columnNumberOfOrders;
            
            private System.Data.DataColumn columnOrderList_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderListDataTable() {
                this.TableName = "OrderList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OrderListDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OrderListDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClusterColumn {
                get {
                    return this.columnCluster;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberOfOrdersColumn {
                get {
                    return this.columnNumberOfOrders;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrderList_IdColumn {
                get {
                    return this.columnOrderList_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderListRow this[int index] {
                get {
                    return ((OrderListRow)(this.Rows[index]));
                }
            }
            
            public event OrderListRowChangeEventHandler OrderListRowChanging;
            
            public event OrderListRowChangeEventHandler OrderListRowChanged;
            
            public event OrderListRowChangeEventHandler OrderListRowDeleting;
            
            public event OrderListRowChangeEventHandler OrderListRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOrderListRow(OrderListRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderListRow AddOrderListRow(string Cluster, string NumberOfOrders) {
                OrderListRow rowOrderListRow = ((OrderListRow)(this.NewRow()));
                rowOrderListRow.ItemArray = new object[] {
                        Cluster,
                        NumberOfOrders,
                        null};
                this.Rows.Add(rowOrderListRow);
                return rowOrderListRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                OrderListDataTable cln = ((OrderListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new OrderListDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCluster = base.Columns["Cluster"];
                this.columnNumberOfOrders = base.Columns["NumberOfOrders"];
                this.columnOrderList_Id = base.Columns["OrderList_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCluster = new System.Data.DataColumn("Cluster", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCluster);
                this.columnNumberOfOrders = new System.Data.DataColumn("NumberOfOrders", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNumberOfOrders);
                this.columnOrderList_Id = new System.Data.DataColumn("OrderList_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnOrderList_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnOrderList_Id}, true));
                this.columnCluster.AllowDBNull = false;
                this.columnCluster.Namespace = "";
                this.columnNumberOfOrders.AllowDBNull = false;
                this.columnNumberOfOrders.Namespace = "";
                this.columnOrderList_Id.AutoIncrement = true;
                this.columnOrderList_Id.AllowDBNull = false;
                this.columnOrderList_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderListRow NewOrderListRow() {
                return ((OrderListRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OrderListRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(OrderListRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OrderListRowChanged != null)) {
                    this.OrderListRowChanged(this, new OrderListRowChangeEvent(((OrderListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OrderListRowChanging != null)) {
                    this.OrderListRowChanging(this, new OrderListRowChangeEvent(((OrderListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OrderListRowDeleted != null)) {
                    this.OrderListRowDeleted(this, new OrderListRowChangeEvent(((OrderListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OrderListRowDeleting != null)) {
                    this.OrderListRowDeleting(this, new OrderListRowChangeEvent(((OrderListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOrderListRow(OrderListRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ImageServerReply ds = new ImageServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OrderListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ImagingOrderDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnOrderId;
            
            private System.Data.DataColumn columnClientId;
            
            private System.Data.DataColumn columnOrderState;
            
            private System.Data.DataColumn columnPercentCompleted;
            
            private System.Data.DataColumn columnOriginalOrder;
            
            private System.Data.DataColumn columnOrderList_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagingOrderDataTable() {
                this.TableName = "ImagingOrder";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ImagingOrderDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ImagingOrderDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrderIdColumn {
                get {
                    return this.columnOrderId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClientIdColumn {
                get {
                    return this.columnClientId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrderStateColumn {
                get {
                    return this.columnOrderState;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PercentCompletedColumn {
                get {
                    return this.columnPercentCompleted;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OriginalOrderColumn {
                get {
                    return this.columnOriginalOrder;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrderList_IdColumn {
                get {
                    return this.columnOrderList_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagingOrderRow this[int index] {
                get {
                    return ((ImagingOrderRow)(this.Rows[index]));
                }
            }
            
            public event ImagingOrderRowChangeEventHandler ImagingOrderRowChanging;
            
            public event ImagingOrderRowChangeEventHandler ImagingOrderRowChanged;
            
            public event ImagingOrderRowChangeEventHandler ImagingOrderRowDeleting;
            
            public event ImagingOrderRowChangeEventHandler ImagingOrderRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddImagingOrderRow(ImagingOrderRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagingOrderRow AddImagingOrderRow(string OrderId, string ClientId, string OrderState, string PercentCompleted, string OriginalOrder, OrderListRow parentOrderListRowByOrderList_ImagingOrder) {
                ImagingOrderRow rowImagingOrderRow = ((ImagingOrderRow)(this.NewRow()));
                rowImagingOrderRow.ItemArray = new object[] {
                        OrderId,
                        ClientId,
                        OrderState,
                        PercentCompleted,
                        OriginalOrder,
                        parentOrderListRowByOrderList_ImagingOrder[2]};
                this.Rows.Add(rowImagingOrderRow);
                return rowImagingOrderRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ImagingOrderDataTable cln = ((ImagingOrderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ImagingOrderDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOrderId = base.Columns["OrderId"];
                this.columnClientId = base.Columns["ClientId"];
                this.columnOrderState = base.Columns["OrderState"];
                this.columnPercentCompleted = base.Columns["PercentCompleted"];
                this.columnOriginalOrder = base.Columns["OriginalOrder"];
                this.columnOrderList_Id = base.Columns["OrderList_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOrderId = new System.Data.DataColumn("OrderId", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOrderId);
                this.columnClientId = new System.Data.DataColumn("ClientId", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnClientId);
                this.columnOrderState = new System.Data.DataColumn("OrderState", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOrderState);
                this.columnPercentCompleted = new System.Data.DataColumn("PercentCompleted", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPercentCompleted);
                this.columnOriginalOrder = new System.Data.DataColumn("OriginalOrder", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOriginalOrder);
                this.columnOrderList_Id = new System.Data.DataColumn("OrderList_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnOrderList_Id);
                this.columnOrderId.AllowDBNull = false;
                this.columnOrderId.Namespace = "";
                this.columnClientId.AllowDBNull = false;
                this.columnClientId.Namespace = "";
                this.columnOrderState.Namespace = "";
                this.columnOrderState.DefaultValue = ((string)("ACTIVE"));
                this.columnPercentCompleted.AllowDBNull = false;
                this.columnPercentCompleted.Namespace = "";
                this.columnOriginalOrder.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagingOrderRow NewImagingOrderRow() {
                return ((ImagingOrderRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ImagingOrderRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ImagingOrderRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ImagingOrderRowChanged != null)) {
                    this.ImagingOrderRowChanged(this, new ImagingOrderRowChangeEvent(((ImagingOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ImagingOrderRowChanging != null)) {
                    this.ImagingOrderRowChanging(this, new ImagingOrderRowChangeEvent(((ImagingOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ImagingOrderRowDeleted != null)) {
                    this.ImagingOrderRowDeleted(this, new ImagingOrderRowChangeEvent(((ImagingOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ImagingOrderRowDeleting != null)) {
                    this.ImagingOrderRowDeleting(this, new ImagingOrderRowChangeEvent(((ImagingOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveImagingOrderRow(ImagingOrderRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ImageServerReply ds = new ImageServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ImagingOrderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SessionLogDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnNumberOfEntries;
            
            private System.Data.DataColumn columnSessionLog_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionLogDataTable() {
                this.TableName = "SessionLog";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SessionLogDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SessionLogDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberOfEntriesColumn {
                get {
                    return this.columnNumberOfEntries;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SessionLog_IdColumn {
                get {
                    return this.columnSessionLog_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionLogRow this[int index] {
                get {
                    return ((SessionLogRow)(this.Rows[index]));
                }
            }
            
            public event SessionLogRowChangeEventHandler SessionLogRowChanging;
            
            public event SessionLogRowChangeEventHandler SessionLogRowChanged;
            
            public event SessionLogRowChangeEventHandler SessionLogRowDeleting;
            
            public event SessionLogRowChangeEventHandler SessionLogRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSessionLogRow(SessionLogRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionLogRow AddSessionLogRow(string NumberOfEntries) {
                SessionLogRow rowSessionLogRow = ((SessionLogRow)(this.NewRow()));
                rowSessionLogRow.ItemArray = new object[] {
                        NumberOfEntries,
                        null};
                this.Rows.Add(rowSessionLogRow);
                return rowSessionLogRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SessionLogDataTable cln = ((SessionLogDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SessionLogDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNumberOfEntries = base.Columns["NumberOfEntries"];
                this.columnSessionLog_Id = base.Columns["SessionLog_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNumberOfEntries = new System.Data.DataColumn("NumberOfEntries", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNumberOfEntries);
                this.columnSessionLog_Id = new System.Data.DataColumn("SessionLog_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSessionLog_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnSessionLog_Id}, true));
                this.columnNumberOfEntries.AllowDBNull = false;
                this.columnNumberOfEntries.Namespace = "";
                this.columnSessionLog_Id.AutoIncrement = true;
                this.columnSessionLog_Id.AllowDBNull = false;
                this.columnSessionLog_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionLogRow NewSessionLogRow() {
                return ((SessionLogRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SessionLogRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SessionLogRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SessionLogRowChanged != null)) {
                    this.SessionLogRowChanged(this, new SessionLogRowChangeEvent(((SessionLogRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SessionLogRowChanging != null)) {
                    this.SessionLogRowChanging(this, new SessionLogRowChangeEvent(((SessionLogRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SessionLogRowDeleted != null)) {
                    this.SessionLogRowDeleted(this, new SessionLogRowChangeEvent(((SessionLogRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SessionLogRowDeleting != null)) {
                    this.SessionLogRowDeleting(this, new SessionLogRowChangeEvent(((SessionLogRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSessionLogRow(SessionLogRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ImageServerReply ds = new ImageServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SessionLogDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EntryDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnText;
            
            private System.Data.DataColumn columnTimestamp;
            
            private System.Data.DataColumn columnMessageId;
            
            private System.Data.DataColumn columnSessionLog_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntryDataTable() {
                this.TableName = "Entry";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EntryDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EntryDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TextColumn {
                get {
                    return this.columnText;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimestampColumn {
                get {
                    return this.columnTimestamp;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MessageIdColumn {
                get {
                    return this.columnMessageId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SessionLog_IdColumn {
                get {
                    return this.columnSessionLog_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntryRow this[int index] {
                get {
                    return ((EntryRow)(this.Rows[index]));
                }
            }
            
            public event EntryRowChangeEventHandler EntryRowChanging;
            
            public event EntryRowChangeEventHandler EntryRowChanged;
            
            public event EntryRowChangeEventHandler EntryRowDeleting;
            
            public event EntryRowChangeEventHandler EntryRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEntryRow(EntryRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntryRow AddEntryRow(string Text, string Timestamp, string MessageId, SessionLogRow parentSessionLogRowBySessionLog_Entry) {
                EntryRow rowEntryRow = ((EntryRow)(this.NewRow()));
                rowEntryRow.ItemArray = new object[] {
                        Text,
                        Timestamp,
                        MessageId,
                        parentSessionLogRowBySessionLog_Entry[1]};
                this.Rows.Add(rowEntryRow);
                return rowEntryRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EntryDataTable cln = ((EntryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EntryDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnText = base.Columns["Text"];
                this.columnTimestamp = base.Columns["Timestamp"];
                this.columnMessageId = base.Columns["MessageId"];
                this.columnSessionLog_Id = base.Columns["SessionLog_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnText = new System.Data.DataColumn("Text", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnText);
                this.columnTimestamp = new System.Data.DataColumn("Timestamp", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTimestamp);
                this.columnMessageId = new System.Data.DataColumn("MessageId", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMessageId);
                this.columnSessionLog_Id = new System.Data.DataColumn("SessionLog_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSessionLog_Id);
                this.columnText.AllowDBNull = false;
                this.columnText.Namespace = "";
                this.columnTimestamp.AllowDBNull = false;
                this.columnTimestamp.Namespace = "";
                this.columnMessageId.AllowDBNull = false;
                this.columnMessageId.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntryRow NewEntryRow() {
                return ((EntryRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EntryRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EntryRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EntryRowChanged != null)) {
                    this.EntryRowChanged(this, new EntryRowChangeEvent(((EntryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EntryRowChanging != null)) {
                    this.EntryRowChanging(this, new EntryRowChangeEvent(((EntryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EntryRowDeleted != null)) {
                    this.EntryRowDeleted(this, new EntryRowChangeEvent(((EntryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EntryRowDeleting != null)) {
                    this.EntryRowDeleting(this, new EntryRowChangeEvent(((EntryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEntryRow(EntryRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ImageServerReply ds = new ImageServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EntryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ImagingParameterSettingsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnImagingParameterSettings_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagingParameterSettingsDataTable() {
                this.TableName = "ImagingParameterSettings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ImagingParameterSettingsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ImagingParameterSettingsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ImagingParameterSettings_IdColumn {
                get {
                    return this.columnImagingParameterSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagingParameterSettingsRow this[int index] {
                get {
                    return ((ImagingParameterSettingsRow)(this.Rows[index]));
                }
            }
            
            public event ImagingParameterSettingsRowChangeEventHandler ImagingParameterSettingsRowChanging;
            
            public event ImagingParameterSettingsRowChangeEventHandler ImagingParameterSettingsRowChanged;
            
            public event ImagingParameterSettingsRowChangeEventHandler ImagingParameterSettingsRowDeleting;
            
            public event ImagingParameterSettingsRowChangeEventHandler ImagingParameterSettingsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddImagingParameterSettingsRow(ImagingParameterSettingsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagingParameterSettingsRow AddImagingParameterSettingsRow() {
                ImagingParameterSettingsRow rowImagingParameterSettingsRow = ((ImagingParameterSettingsRow)(this.NewRow()));
                rowImagingParameterSettingsRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowImagingParameterSettingsRow);
                return rowImagingParameterSettingsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ImagingParameterSettingsDataTable cln = ((ImagingParameterSettingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ImagingParameterSettingsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnImagingParameterSettings_Id = base.Columns["ImagingParameterSettings_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnImagingParameterSettings_Id = new System.Data.DataColumn("ImagingParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnImagingParameterSettings_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnImagingParameterSettings_Id}, true));
                this.columnImagingParameterSettings_Id.AutoIncrement = true;
                this.columnImagingParameterSettings_Id.AllowDBNull = false;
                this.columnImagingParameterSettings_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagingParameterSettingsRow NewImagingParameterSettingsRow() {
                return ((ImagingParameterSettingsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ImagingParameterSettingsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ImagingParameterSettingsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ImagingParameterSettingsRowChanged != null)) {
                    this.ImagingParameterSettingsRowChanged(this, new ImagingParameterSettingsRowChangeEvent(((ImagingParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ImagingParameterSettingsRowChanging != null)) {
                    this.ImagingParameterSettingsRowChanging(this, new ImagingParameterSettingsRowChangeEvent(((ImagingParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ImagingParameterSettingsRowDeleted != null)) {
                    this.ImagingParameterSettingsRowDeleted(this, new ImagingParameterSettingsRowChangeEvent(((ImagingParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ImagingParameterSettingsRowDeleting != null)) {
                    this.ImagingParameterSettingsRowDeleting(this, new ImagingParameterSettingsRowChangeEvent(((ImagingParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveImagingParameterSettingsRow(ImagingParameterSettingsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ImageServerReply ds = new ImageServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ImagingParameterSettingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServerDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDescription;
            
            private System.Data.DataColumn columnOrderStatusUpdateInterval;
            
            private System.Data.DataColumn columnImagingParameterSettings_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerDataTable() {
                this.TableName = "Server";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServerDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrderStatusUpdateIntervalColumn {
                get {
                    return this.columnOrderStatusUpdateInterval;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ImagingParameterSettings_IdColumn {
                get {
                    return this.columnImagingParameterSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerRow this[int index] {
                get {
                    return ((ServerRow)(this.Rows[index]));
                }
            }
            
            public event ServerRowChangeEventHandler ServerRowChanging;
            
            public event ServerRowChangeEventHandler ServerRowChanged;
            
            public event ServerRowChangeEventHandler ServerRowDeleting;
            
            public event ServerRowChangeEventHandler ServerRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServerRow(ServerRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerRow AddServerRow(string Description, string OrderStatusUpdateInterval, ImagingParameterSettingsRow parentImagingParameterSettingsRowByImagingParameterSettings_Server) {
                ServerRow rowServerRow = ((ServerRow)(this.NewRow()));
                rowServerRow.ItemArray = new object[] {
                        Description,
                        OrderStatusUpdateInterval,
                        parentImagingParameterSettingsRowByImagingParameterSettings_Server[0]};
                this.Rows.Add(rowServerRow);
                return rowServerRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ServerDataTable cln = ((ServerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ServerDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDescription = base.Columns["Description"];
                this.columnOrderStatusUpdateInterval = base.Columns["OrderStatusUpdateInterval"];
                this.columnImagingParameterSettings_Id = base.Columns["ImagingParameterSettings_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDescription);
                this.columnOrderStatusUpdateInterval = new System.Data.DataColumn("OrderStatusUpdateInterval", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOrderStatusUpdateInterval);
                this.columnImagingParameterSettings_Id = new System.Data.DataColumn("ImagingParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnImagingParameterSettings_Id);
                this.columnDescription.Namespace = "";
                this.columnOrderStatusUpdateInterval.AllowDBNull = false;
                this.columnOrderStatusUpdateInterval.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerRow NewServerRow() {
                return ((ServerRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ServerRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ServerRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerRowChanged != null)) {
                    this.ServerRowChanged(this, new ServerRowChangeEvent(((ServerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerRowChanging != null)) {
                    this.ServerRowChanging(this, new ServerRowChangeEvent(((ServerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerRowDeleted != null)) {
                    this.ServerRowDeleted(this, new ServerRowChangeEvent(((ServerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerRowDeleting != null)) {
                    this.ServerRowDeleting(this, new ServerRowChangeEvent(((ServerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServerRow(ServerRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ImageServerReply ds = new ImageServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AckOnlyRow : System.Data.DataRow {
            
            private AckOnlyDataTable tableAckOnly;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AckOnlyRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAckOnly = ((AckOnlyDataTable)(this.Table));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServerStatusRow : System.Data.DataRow {
            
            private ServerStatusDataTable tableServerStatus;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerStatusRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerStatus = ((ServerStatusDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServerStatus_Id {
                get {
                    return ((int)(this[this.tableServerStatus.ServerStatus_IdColumn]));
                }
                set {
                    this[this.tableServerStatus.ServerStatus_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerInfoRow[] GetServerInfoRows() {
                return ((ServerInfoRow[])(base.GetChildRows(this.Table.ChildRelations["ServerStatus_ServerInfo"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImageServerInfoRow[] GetImageServerInfoRows() {
                return ((ImageServerInfoRow[])(base.GetChildRows(this.Table.ChildRelations["ServerStatus_ImageServerInfo"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServerInfoRow : System.Data.DataRow {
            
            private ServerInfoDataTable tableServerInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerInfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerInfo = ((ServerInfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SoftwareVersion {
                get {
                    return ((string)(this[this.tableServerInfo.SoftwareVersionColumn]));
                }
                set {
                    this[this.tableServerInfo.SoftwareVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableServerInfo.DescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'ServerInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Hostname {
                get {
                    return ((string)(this[this.tableServerInfo.HostnameColumn]));
                }
                set {
                    this[this.tableServerInfo.HostnameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cluster {
                get {
                    return ((string)(this[this.tableServerInfo.ClusterColumn]));
                }
                set {
                    this[this.tableServerInfo.ClusterColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MessagingPort {
                get {
                    return ((string)(this[this.tableServerInfo.MessagingPortColumn]));
                }
                set {
                    this[this.tableServerInfo.MessagingPortColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SystemFolder {
                get {
                    return ((string)(this[this.tableServerInfo.SystemFolderColumn]));
                }
                set {
                    this[this.tableServerInfo.SystemFolderColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsService {
                get {
                    try {
                        return ((string)(this[this.tableServerInfo.IsServiceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IsService\' in table \'ServerInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.IsServiceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PasswordSet {
                get {
                    return ((string)(this[this.tableServerInfo.PasswordSetColumn]));
                }
                set {
                    this[this.tableServerInfo.PasswordSetColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServerStatus_Id {
                get {
                    try {
                        return ((int)(this[this.tableServerInfo.ServerStatus_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ServerStatus_Id\' in table \'ServerInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.ServerStatus_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerStatusRow ServerStatusRow {
                get {
                    return ((ServerStatusRow)(this.GetParentRow(this.Table.ParentRelations["ServerStatus_ServerInfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ServerStatus_ServerInfo"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableServerInfo.DescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableServerInfo.DescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsServiceNull() {
                return this.IsNull(this.tableServerInfo.IsServiceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsServiceNull() {
                this[this.tableServerInfo.IsServiceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServerStatus_IdNull() {
                return this.IsNull(this.tableServerInfo.ServerStatus_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServerStatus_IdNull() {
                this[this.tableServerInfo.ServerStatus_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ImageServerInfoRow : System.Data.DataRow {
            
            private ImageServerInfoDataTable tableImageServerInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ImageServerInfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableImageServerInfo = ((ImageServerInfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImagesWritten {
                get {
                    try {
                        return ((string)(this[this.tableImageServerInfo.ImagesWrittenColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ImagesWritten\' in table \'ImageServerInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableImageServerInfo.ImagesWrittenColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImagesRejected {
                get {
                    try {
                        return ((string)(this[this.tableImageServerInfo.ImagesRejectedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ImagesRejected\' in table \'ImageServerInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableImageServerInfo.ImagesRejectedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServerStatus_Id {
                get {
                    try {
                        return ((int)(this[this.tableImageServerInfo.ServerStatus_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ServerStatus_Id\' in table \'ImageServerInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableImageServerInfo.ServerStatus_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerStatusRow ServerStatusRow {
                get {
                    return ((ServerStatusRow)(this.GetParentRow(this.Table.ParentRelations["ServerStatus_ImageServerInfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ServerStatus_ImageServerInfo"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImagesWrittenNull() {
                return this.IsNull(this.tableImageServerInfo.ImagesWrittenColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImagesWrittenNull() {
                this[this.tableImageServerInfo.ImagesWrittenColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImagesRejectedNull() {
                return this.IsNull(this.tableImageServerInfo.ImagesRejectedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImagesRejectedNull() {
                this[this.tableImageServerInfo.ImagesRejectedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServerStatus_IdNull() {
                return this.IsNull(this.tableImageServerInfo.ServerStatus_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServerStatus_IdNull() {
                this[this.tableImageServerInfo.ServerStatus_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OrderListRow : System.Data.DataRow {
            
            private OrderListDataTable tableOrderList;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OrderListRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOrderList = ((OrderListDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cluster {
                get {
                    return ((string)(this[this.tableOrderList.ClusterColumn]));
                }
                set {
                    this[this.tableOrderList.ClusterColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NumberOfOrders {
                get {
                    return ((string)(this[this.tableOrderList.NumberOfOrdersColumn]));
                }
                set {
                    this[this.tableOrderList.NumberOfOrdersColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OrderList_Id {
                get {
                    return ((int)(this[this.tableOrderList.OrderList_IdColumn]));
                }
                set {
                    this[this.tableOrderList.OrderList_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagingOrderRow[] GetImagingOrderRows() {
                return ((ImagingOrderRow[])(base.GetChildRows(this.Table.ChildRelations["OrderList_ImagingOrder"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ImagingOrderRow : System.Data.DataRow {
            
            private ImagingOrderDataTable tableImagingOrder;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ImagingOrderRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableImagingOrder = ((ImagingOrderDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrderId {
                get {
                    return ((string)(this[this.tableImagingOrder.OrderIdColumn]));
                }
                set {
                    this[this.tableImagingOrder.OrderIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientId {
                get {
                    return ((string)(this[this.tableImagingOrder.ClientIdColumn]));
                }
                set {
                    this[this.tableImagingOrder.ClientIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrderState {
                get {
                    try {
                        return ((string)(this[this.tableImagingOrder.OrderStateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OrderState\' in table \'ImagingOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableImagingOrder.OrderStateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PercentCompleted {
                get {
                    return ((string)(this[this.tableImagingOrder.PercentCompletedColumn]));
                }
                set {
                    this[this.tableImagingOrder.PercentCompletedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OriginalOrder {
                get {
                    try {
                        return ((string)(this[this.tableImagingOrder.OriginalOrderColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OriginalOrder\' in table \'ImagingOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableImagingOrder.OriginalOrderColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OrderList_Id {
                get {
                    try {
                        return ((int)(this[this.tableImagingOrder.OrderList_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OrderList_Id\' in table \'ImagingOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableImagingOrder.OrderList_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderListRow OrderListRow {
                get {
                    return ((OrderListRow)(this.GetParentRow(this.Table.ParentRelations["OrderList_ImagingOrder"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["OrderList_ImagingOrder"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderStateNull() {
                return this.IsNull(this.tableImagingOrder.OrderStateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderStateNull() {
                this[this.tableImagingOrder.OrderStateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOriginalOrderNull() {
                return this.IsNull(this.tableImagingOrder.OriginalOrderColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOriginalOrderNull() {
                this[this.tableImagingOrder.OriginalOrderColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderList_IdNull() {
                return this.IsNull(this.tableImagingOrder.OrderList_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderList_IdNull() {
                this[this.tableImagingOrder.OrderList_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SessionLogRow : System.Data.DataRow {
            
            private SessionLogDataTable tableSessionLog;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SessionLogRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSessionLog = ((SessionLogDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NumberOfEntries {
                get {
                    return ((string)(this[this.tableSessionLog.NumberOfEntriesColumn]));
                }
                set {
                    this[this.tableSessionLog.NumberOfEntriesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SessionLog_Id {
                get {
                    return ((int)(this[this.tableSessionLog.SessionLog_IdColumn]));
                }
                set {
                    this[this.tableSessionLog.SessionLog_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntryRow[] GetEntryRows() {
                return ((EntryRow[])(base.GetChildRows(this.Table.ChildRelations["SessionLog_Entry"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EntryRow : System.Data.DataRow {
            
            private EntryDataTable tableEntry;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EntryRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEntry = ((EntryDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text {
                get {
                    return ((string)(this[this.tableEntry.TextColumn]));
                }
                set {
                    this[this.tableEntry.TextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Timestamp {
                get {
                    return ((string)(this[this.tableEntry.TimestampColumn]));
                }
                set {
                    this[this.tableEntry.TimestampColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MessageId {
                get {
                    return ((string)(this[this.tableEntry.MessageIdColumn]));
                }
                set {
                    this[this.tableEntry.MessageIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SessionLog_Id {
                get {
                    try {
                        return ((int)(this[this.tableEntry.SessionLog_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SessionLog_Id\' in table \'Entry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntry.SessionLog_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionLogRow SessionLogRow {
                get {
                    return ((SessionLogRow)(this.GetParentRow(this.Table.ParentRelations["SessionLog_Entry"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SessionLog_Entry"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSessionLog_IdNull() {
                return this.IsNull(this.tableEntry.SessionLog_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSessionLog_IdNull() {
                this[this.tableEntry.SessionLog_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ImagingParameterSettingsRow : System.Data.DataRow {
            
            private ImagingParameterSettingsDataTable tableImagingParameterSettings;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ImagingParameterSettingsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableImagingParameterSettings = ((ImagingParameterSettingsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImagingParameterSettings_Id {
                get {
                    return ((int)(this[this.tableImagingParameterSettings.ImagingParameterSettings_IdColumn]));
                }
                set {
                    this[this.tableImagingParameterSettings.ImagingParameterSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerRow[] GetServerRows() {
                return ((ServerRow[])(base.GetChildRows(this.Table.ChildRelations["ImagingParameterSettings_Server"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServerRow : System.Data.DataRow {
            
            private ServerDataTable tableServer;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServer = ((ServerDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableServer.DescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'Server\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServer.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrderStatusUpdateInterval {
                get {
                    return ((string)(this[this.tableServer.OrderStatusUpdateIntervalColumn]));
                }
                set {
                    this[this.tableServer.OrderStatusUpdateIntervalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ImagingParameterSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tableServer.ImagingParameterSettings_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ImagingParameterSettings_Id\' in table \'Server\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServer.ImagingParameterSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagingParameterSettingsRow ImagingParameterSettingsRow {
                get {
                    return ((ImagingParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ImagingParameterSettings_Server"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ImagingParameterSettings_Server"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableServer.DescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableServer.DescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImagingParameterSettings_IdNull() {
                return this.IsNull(this.tableServer.ImagingParameterSettings_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImagingParameterSettings_IdNull() {
                this[this.tableServer.ImagingParameterSettings_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AckOnlyRowChangeEvent : System.EventArgs {
            
            private AckOnlyRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AckOnlyRowChangeEvent(AckOnlyRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AckOnlyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServerStatusRowChangeEvent : System.EventArgs {
            
            private ServerStatusRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerStatusRowChangeEvent(ServerStatusRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerStatusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServerInfoRowChangeEvent : System.EventArgs {
            
            private ServerInfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerInfoRowChangeEvent(ServerInfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ImageServerInfoRowChangeEvent : System.EventArgs {
            
            private ImageServerInfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImageServerInfoRowChangeEvent(ImageServerInfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImageServerInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OrderListRowChangeEvent : System.EventArgs {
            
            private OrderListRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderListRowChangeEvent(OrderListRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ImagingOrderRowChangeEvent : System.EventArgs {
            
            private ImagingOrderRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagingOrderRowChangeEvent(ImagingOrderRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagingOrderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SessionLogRowChangeEvent : System.EventArgs {
            
            private SessionLogRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionLogRowChangeEvent(SessionLogRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionLogRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EntryRowChangeEvent : System.EventArgs {
            
            private EntryRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntryRowChangeEvent(EntryRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ImagingParameterSettingsRowChangeEvent : System.EventArgs {
            
            private ImagingParameterSettingsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagingParameterSettingsRowChangeEvent(ImagingParameterSettingsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagingParameterSettingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServerRowChangeEvent : System.EventArgs {
            
            private ServerRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerRowChangeEvent(ServerRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591