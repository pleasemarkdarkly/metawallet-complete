//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace RImageSchemas.Schemas {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("CDTextData")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class CDTextData : System.Data.DataSet {
        
        private LanguageSetDataTable tableLanguageSet;
        
        private TrackInfoDataTable tableTrackInfo;
        
        private System.Data.DataRelation relationLanguageSet_TrackInfo;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CDTextData() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected CDTextData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["LanguageSet"] != null)) {
                    base.Tables.Add(new LanguageSetDataTable(ds.Tables["LanguageSet"]));
                }
                if ((ds.Tables["TrackInfo"] != null)) {
                    base.Tables.Add(new TrackInfoDataTable(ds.Tables["TrackInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LanguageSetDataTable LanguageSet {
            get {
                return this.tableLanguageSet;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TrackInfoDataTable TrackInfo {
            get {
                return this.tableTrackInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            CDTextData cln = ((CDTextData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["LanguageSet"] != null)) {
                    base.Tables.Add(new LanguageSetDataTable(ds.Tables["LanguageSet"]));
                }
                if ((ds.Tables["TrackInfo"] != null)) {
                    base.Tables.Add(new TrackInfoDataTable(ds.Tables["TrackInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableLanguageSet = ((LanguageSetDataTable)(base.Tables["LanguageSet"]));
            if ((initTable == true)) {
                if ((this.tableLanguageSet != null)) {
                    this.tableLanguageSet.InitVars();
                }
            }
            this.tableTrackInfo = ((TrackInfoDataTable)(base.Tables["TrackInfo"]));
            if ((initTable == true)) {
                if ((this.tableTrackInfo != null)) {
                    this.tableTrackInfo.InitVars();
                }
            }
            this.relationLanguageSet_TrackInfo = this.Relations["LanguageSet_TrackInfo"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "CDTextData";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableLanguageSet = new LanguageSetDataTable();
            base.Tables.Add(this.tableLanguageSet);
            this.tableTrackInfo = new TrackInfoDataTable();
            base.Tables.Add(this.tableTrackInfo);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("LanguageSet_TrackInfo", new System.Data.DataColumn[] {
                        this.tableLanguageSet.LanguageSet_IdColumn}, new System.Data.DataColumn[] {
                        this.tableTrackInfo.LanguageSet_IdColumn});
            this.tableTrackInfo.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationLanguageSet_TrackInfo = new System.Data.DataRelation("LanguageSet_TrackInfo", new System.Data.DataColumn[] {
                        this.tableLanguageSet.LanguageSet_IdColumn}, new System.Data.DataColumn[] {
                        this.tableTrackInfo.LanguageSet_IdColumn}, false);
            this.relationLanguageSet_TrackInfo.Nested = true;
            this.Relations.Add(this.relationLanguageSet_TrackInfo);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLanguageSet() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTrackInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            CDTextData ds = new CDTextData();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void LanguageSetRowChangeEventHandler(object sender, LanguageSetRowChangeEvent e);
        
        public delegate void TrackInfoRowChangeEventHandler(object sender, TrackInfoRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LanguageSetDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSetNumber;
            
            private System.Data.DataColumn columnLanguage;
            
            private System.Data.DataColumn columnUse_ISO8859_Set;
            
            private System.Data.DataColumn columnDiscIdentification;
            
            private System.Data.DataColumn columnGenreCode;
            
            private System.Data.DataColumn columnGenreSupplemental;
            
            private System.Data.DataColumn columnUPC_EAN_Code;
            
            private System.Data.DataColumn columnLanguageSet_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguageSetDataTable() {
                this.TableName = "LanguageSet";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LanguageSetDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LanguageSetDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SetNumberColumn {
                get {
                    return this.columnSetNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LanguageColumn {
                get {
                    return this.columnLanguage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Use_ISO8859_SetColumn {
                get {
                    return this.columnUse_ISO8859_Set;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DiscIdentificationColumn {
                get {
                    return this.columnDiscIdentification;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GenreCodeColumn {
                get {
                    return this.columnGenreCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GenreSupplementalColumn {
                get {
                    return this.columnGenreSupplemental;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UPC_EAN_CodeColumn {
                get {
                    return this.columnUPC_EAN_Code;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LanguageSet_IdColumn {
                get {
                    return this.columnLanguageSet_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguageSetRow this[int index] {
                get {
                    return ((LanguageSetRow)(this.Rows[index]));
                }
            }
            
            public event LanguageSetRowChangeEventHandler LanguageSetRowChanging;
            
            public event LanguageSetRowChangeEventHandler LanguageSetRowChanged;
            
            public event LanguageSetRowChangeEventHandler LanguageSetRowDeleting;
            
            public event LanguageSetRowChangeEventHandler LanguageSetRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLanguageSetRow(LanguageSetRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguageSetRow AddLanguageSetRow(string SetNumber, string Language, string Use_ISO8859_Set, string DiscIdentification, string GenreCode, string GenreSupplemental, string UPC_EAN_Code) {
                LanguageSetRow rowLanguageSetRow = ((LanguageSetRow)(this.NewRow()));
                rowLanguageSetRow.ItemArray = new object[] {
                        SetNumber,
                        Language,
                        Use_ISO8859_Set,
                        DiscIdentification,
                        GenreCode,
                        GenreSupplemental,
                        UPC_EAN_Code,
                        null};
                this.Rows.Add(rowLanguageSetRow);
                return rowLanguageSetRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LanguageSetDataTable cln = ((LanguageSetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LanguageSetDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSetNumber = base.Columns["SetNumber"];
                this.columnLanguage = base.Columns["Language"];
                this.columnUse_ISO8859_Set = base.Columns["Use_ISO8859_Set"];
                this.columnDiscIdentification = base.Columns["DiscIdentification"];
                this.columnGenreCode = base.Columns["GenreCode"];
                this.columnGenreSupplemental = base.Columns["GenreSupplemental"];
                this.columnUPC_EAN_Code = base.Columns["UPC_EAN_Code"];
                this.columnLanguageSet_Id = base.Columns["LanguageSet_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSetNumber = new System.Data.DataColumn("SetNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSetNumber);
                this.columnLanguage = new System.Data.DataColumn("Language", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLanguage);
                this.columnUse_ISO8859_Set = new System.Data.DataColumn("Use_ISO8859_Set", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUse_ISO8859_Set);
                this.columnDiscIdentification = new System.Data.DataColumn("DiscIdentification", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDiscIdentification);
                this.columnGenreCode = new System.Data.DataColumn("GenreCode", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnGenreCode);
                this.columnGenreSupplemental = new System.Data.DataColumn("GenreSupplemental", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnGenreSupplemental);
                this.columnUPC_EAN_Code = new System.Data.DataColumn("UPC_EAN_Code", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUPC_EAN_Code);
                this.columnLanguageSet_Id = new System.Data.DataColumn("LanguageSet_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnLanguageSet_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnLanguageSet_Id}, true));
                this.columnSetNumber.Namespace = "";
                this.columnSetNumber.DefaultValue = ((string)("1"));
                this.columnLanguage.Namespace = "";
                this.columnLanguage.DefaultValue = ((string)("English"));
                this.columnUse_ISO8859_Set.Namespace = "";
                this.columnUse_ISO8859_Set.DefaultValue = ((string)("false"));
                this.columnDiscIdentification.Namespace = "";
                this.columnGenreCode.Namespace = "";
                this.columnGenreSupplemental.Namespace = "";
                this.columnUPC_EAN_Code.Namespace = "";
                this.columnLanguageSet_Id.AutoIncrement = true;
                this.columnLanguageSet_Id.AllowDBNull = false;
                this.columnLanguageSet_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguageSetRow NewLanguageSetRow() {
                return ((LanguageSetRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LanguageSetRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LanguageSetRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LanguageSetRowChanged != null)) {
                    this.LanguageSetRowChanged(this, new LanguageSetRowChangeEvent(((LanguageSetRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LanguageSetRowChanging != null)) {
                    this.LanguageSetRowChanging(this, new LanguageSetRowChangeEvent(((LanguageSetRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LanguageSetRowDeleted != null)) {
                    this.LanguageSetRowDeleted(this, new LanguageSetRowChangeEvent(((LanguageSetRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LanguageSetRowDeleting != null)) {
                    this.LanguageSetRowDeleting(this, new LanguageSetRowChangeEvent(((LanguageSetRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLanguageSetRow(LanguageSetRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                CDTextData ds = new CDTextData();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LanguageSetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TrackInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTrackNumber;
            
            private System.Data.DataColumn columnTitle;
            
            private System.Data.DataColumn columnPerformer;
            
            private System.Data.DataColumn columnSongWriter;
            
            private System.Data.DataColumn columnComposer;
            
            private System.Data.DataColumn columnArranger;
            
            private System.Data.DataColumn columnMessage;
            
            private System.Data.DataColumn columnISRC_Code;
            
            private System.Data.DataColumn columnLanguageSet_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrackInfoDataTable() {
                this.TableName = "TrackInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TrackInfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TrackInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TrackNumberColumn {
                get {
                    return this.columnTrackNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PerformerColumn {
                get {
                    return this.columnPerformer;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SongWriterColumn {
                get {
                    return this.columnSongWriter;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ComposerColumn {
                get {
                    return this.columnComposer;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ArrangerColumn {
                get {
                    return this.columnArranger;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MessageColumn {
                get {
                    return this.columnMessage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ISRC_CodeColumn {
                get {
                    return this.columnISRC_Code;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LanguageSet_IdColumn {
                get {
                    return this.columnLanguageSet_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrackInfoRow this[int index] {
                get {
                    return ((TrackInfoRow)(this.Rows[index]));
                }
            }
            
            public event TrackInfoRowChangeEventHandler TrackInfoRowChanging;
            
            public event TrackInfoRowChangeEventHandler TrackInfoRowChanged;
            
            public event TrackInfoRowChangeEventHandler TrackInfoRowDeleting;
            
            public event TrackInfoRowChangeEventHandler TrackInfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTrackInfoRow(TrackInfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrackInfoRow AddTrackInfoRow(string TrackNumber, string Title, string Performer, string SongWriter, string Composer, string Arranger, string Message, string ISRC_Code, LanguageSetRow parentLanguageSetRowByLanguageSet_TrackInfo) {
                TrackInfoRow rowTrackInfoRow = ((TrackInfoRow)(this.NewRow()));
                rowTrackInfoRow.ItemArray = new object[] {
                        TrackNumber,
                        Title,
                        Performer,
                        SongWriter,
                        Composer,
                        Arranger,
                        Message,
                        ISRC_Code,
                        parentLanguageSetRowByLanguageSet_TrackInfo[7]};
                this.Rows.Add(rowTrackInfoRow);
                return rowTrackInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TrackInfoDataTable cln = ((TrackInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TrackInfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTrackNumber = base.Columns["TrackNumber"];
                this.columnTitle = base.Columns["Title"];
                this.columnPerformer = base.Columns["Performer"];
                this.columnSongWriter = base.Columns["SongWriter"];
                this.columnComposer = base.Columns["Composer"];
                this.columnArranger = base.Columns["Arranger"];
                this.columnMessage = base.Columns["Message"];
                this.columnISRC_Code = base.Columns["ISRC_Code"];
                this.columnLanguageSet_Id = base.Columns["LanguageSet_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTrackNumber = new System.Data.DataColumn("TrackNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTrackNumber);
                this.columnTitle = new System.Data.DataColumn("Title", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTitle);
                this.columnPerformer = new System.Data.DataColumn("Performer", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPerformer);
                this.columnSongWriter = new System.Data.DataColumn("SongWriter", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSongWriter);
                this.columnComposer = new System.Data.DataColumn("Composer", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnComposer);
                this.columnArranger = new System.Data.DataColumn("Arranger", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnArranger);
                this.columnMessage = new System.Data.DataColumn("Message", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMessage);
                this.columnISRC_Code = new System.Data.DataColumn("ISRC_Code", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnISRC_Code);
                this.columnLanguageSet_Id = new System.Data.DataColumn("LanguageSet_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnLanguageSet_Id);
                this.columnTrackNumber.AllowDBNull = false;
                this.columnTrackNumber.Namespace = "";
                this.columnTitle.Namespace = "";
                this.columnPerformer.Namespace = "";
                this.columnSongWriter.Namespace = "";
                this.columnComposer.Namespace = "";
                this.columnArranger.Namespace = "";
                this.columnMessage.Namespace = "";
                this.columnISRC_Code.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrackInfoRow NewTrackInfoRow() {
                return ((TrackInfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TrackInfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TrackInfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TrackInfoRowChanged != null)) {
                    this.TrackInfoRowChanged(this, new TrackInfoRowChangeEvent(((TrackInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TrackInfoRowChanging != null)) {
                    this.TrackInfoRowChanging(this, new TrackInfoRowChangeEvent(((TrackInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TrackInfoRowDeleted != null)) {
                    this.TrackInfoRowDeleted(this, new TrackInfoRowChangeEvent(((TrackInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TrackInfoRowDeleting != null)) {
                    this.TrackInfoRowDeleting(this, new TrackInfoRowChangeEvent(((TrackInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTrackInfoRow(TrackInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                CDTextData ds = new CDTextData();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TrackInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LanguageSetRow : System.Data.DataRow {
            
            private LanguageSetDataTable tableLanguageSet;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LanguageSetRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLanguageSet = ((LanguageSetDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SetNumber {
                get {
                    try {
                        return ((string)(this[this.tableLanguageSet.SetNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SetNumber\' in table \'LanguageSet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLanguageSet.SetNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Language {
                get {
                    try {
                        return ((string)(this[this.tableLanguageSet.LanguageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Language\' in table \'LanguageSet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLanguageSet.LanguageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Use_ISO8859_Set {
                get {
                    try {
                        return ((string)(this[this.tableLanguageSet.Use_ISO8859_SetColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Use_ISO8859_Set\' in table \'LanguageSet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLanguageSet.Use_ISO8859_SetColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DiscIdentification {
                get {
                    try {
                        return ((string)(this[this.tableLanguageSet.DiscIdentificationColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DiscIdentification\' in table \'LanguageSet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLanguageSet.DiscIdentificationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GenreCode {
                get {
                    try {
                        return ((string)(this[this.tableLanguageSet.GenreCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'GenreCode\' in table \'LanguageSet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLanguageSet.GenreCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GenreSupplemental {
                get {
                    try {
                        return ((string)(this[this.tableLanguageSet.GenreSupplementalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'GenreSupplemental\' in table \'LanguageSet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLanguageSet.GenreSupplementalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UPC_EAN_Code {
                get {
                    try {
                        return ((string)(this[this.tableLanguageSet.UPC_EAN_CodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UPC_EAN_Code\' in table \'LanguageSet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLanguageSet.UPC_EAN_CodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LanguageSet_Id {
                get {
                    return ((int)(this[this.tableLanguageSet.LanguageSet_IdColumn]));
                }
                set {
                    this[this.tableLanguageSet.LanguageSet_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetNumberNull() {
                return this.IsNull(this.tableLanguageSet.SetNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetNumberNull() {
                this[this.tableLanguageSet.SetNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLanguageNull() {
                return this.IsNull(this.tableLanguageSet.LanguageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLanguageNull() {
                this[this.tableLanguageSet.LanguageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUse_ISO8859_SetNull() {
                return this.IsNull(this.tableLanguageSet.Use_ISO8859_SetColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUse_ISO8859_SetNull() {
                this[this.tableLanguageSet.Use_ISO8859_SetColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiscIdentificationNull() {
                return this.IsNull(this.tableLanguageSet.DiscIdentificationColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiscIdentificationNull() {
                this[this.tableLanguageSet.DiscIdentificationColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenreCodeNull() {
                return this.IsNull(this.tableLanguageSet.GenreCodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenreCodeNull() {
                this[this.tableLanguageSet.GenreCodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenreSupplementalNull() {
                return this.IsNull(this.tableLanguageSet.GenreSupplementalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenreSupplementalNull() {
                this[this.tableLanguageSet.GenreSupplementalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPC_EAN_CodeNull() {
                return this.IsNull(this.tableLanguageSet.UPC_EAN_CodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPC_EAN_CodeNull() {
                this[this.tableLanguageSet.UPC_EAN_CodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrackInfoRow[] GetTrackInfoRows() {
                return ((TrackInfoRow[])(base.GetChildRows(this.Table.ChildRelations["LanguageSet_TrackInfo"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TrackInfoRow : System.Data.DataRow {
            
            private TrackInfoDataTable tableTrackInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TrackInfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTrackInfo = ((TrackInfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrackNumber {
                get {
                    return ((string)(this[this.tableTrackInfo.TrackNumberColumn]));
                }
                set {
                    this[this.tableTrackInfo.TrackNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.TitleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Title\' in table \'TrackInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.TitleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Performer {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.PerformerColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Performer\' in table \'TrackInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.PerformerColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SongWriter {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.SongWriterColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SongWriter\' in table \'TrackInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.SongWriterColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Composer {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.ComposerColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Composer\' in table \'TrackInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.ComposerColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Arranger {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.ArrangerColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Arranger\' in table \'TrackInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.ArrangerColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Message {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.MessageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Message\' in table \'TrackInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.MessageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ISRC_Code {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.ISRC_CodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ISRC_Code\' in table \'TrackInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.ISRC_CodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LanguageSet_Id {
                get {
                    try {
                        return ((int)(this[this.tableTrackInfo.LanguageSet_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LanguageSet_Id\' in table \'TrackInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.LanguageSet_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguageSetRow LanguageSetRow {
                get {
                    return ((LanguageSetRow)(this.GetParentRow(this.Table.ParentRelations["LanguageSet_TrackInfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LanguageSet_TrackInfo"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTitleNull() {
                return this.IsNull(this.tableTrackInfo.TitleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTitleNull() {
                this[this.tableTrackInfo.TitleColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPerformerNull() {
                return this.IsNull(this.tableTrackInfo.PerformerColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPerformerNull() {
                this[this.tableTrackInfo.PerformerColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSongWriterNull() {
                return this.IsNull(this.tableTrackInfo.SongWriterColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSongWriterNull() {
                this[this.tableTrackInfo.SongWriterColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsComposerNull() {
                return this.IsNull(this.tableTrackInfo.ComposerColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetComposerNull() {
                this[this.tableTrackInfo.ComposerColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArrangerNull() {
                return this.IsNull(this.tableTrackInfo.ArrangerColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArrangerNull() {
                this[this.tableTrackInfo.ArrangerColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMessageNull() {
                return this.IsNull(this.tableTrackInfo.MessageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMessageNull() {
                this[this.tableTrackInfo.MessageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsISRC_CodeNull() {
                return this.IsNull(this.tableTrackInfo.ISRC_CodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetISRC_CodeNull() {
                this[this.tableTrackInfo.ISRC_CodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLanguageSet_IdNull() {
                return this.IsNull(this.tableTrackInfo.LanguageSet_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLanguageSet_IdNull() {
                this[this.tableTrackInfo.LanguageSet_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LanguageSetRowChangeEvent : System.EventArgs {
            
            private LanguageSetRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguageSetRowChangeEvent(LanguageSetRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguageSetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TrackInfoRowChangeEvent : System.EventArgs {
            
            private TrackInfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrackInfoRowChangeEvent(TrackInfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrackInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591