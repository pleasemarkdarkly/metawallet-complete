//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace RImageSchemas.Schemas {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("ServerReply")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ServerReply : System.Data.DataSet {
        
        private AckOnlyDataTable tableAckOnly;
        
        private ServerStatusDataTable tableServerStatus;
        
        private ServerInfoDataTable tableServerInfo;
        
        private TimeStampsDataTable tableTimeStamps;
        
        private SwitchesDataTable tableSwitches;
        
        private OrderListDataTable tableOrderList;
        
        private ProductionOrderDataTable tableProductionOrder;
        
        private ImagingOrderDataTable tableImagingOrder;
        
        private SessionLogDataTable tableSessionLog;
        
        private EntryDataTable tableEntry;
        
        private DialogActionDataTable tableDialogAction;
        
        private ProductionParameterSettingsDataTable tableProductionParameterSettings;
        
        private ServerDataTable tableServer;
        
        private VerifyDataTable tableVerify;
        
        private RecordingDataTable tableRecording;
        
        private PrintingDataTable tablePrinting;
        
        private AutoloaderDataTable tableAutoloader;
        
        private BinDataTable tableBin;
        
        private ReadingDataTable tableReading;
        
        private AutoBulkReadDataTable tableAutoBulkRead;
        
        private KioskModeDataTable tableKioskMode;
        
        private MessagingDataTable tableMessaging;
        
        private ImagingParameterSettingsDataTable tableImagingParameterSettings;
        
        private System.Data.DataRelation relationServerStatus_ServerInfo;
        
        private System.Data.DataRelation relationServerStatus_TimeStamps;
        
        private System.Data.DataRelation relationServerStatus_Switches;
        
        private System.Data.DataRelation relationOrderList_ProductionOrder;
        
        private System.Data.DataRelation relationOrderList_ImagingOrder;
        
        private System.Data.DataRelation relationSessionLog_Entry;
        
        private System.Data.DataRelation relationProductionParameterSettings_Server;
        
        private System.Data.DataRelation relationProductionParameterSettings_Verify;
        
        private System.Data.DataRelation relationProductionParameterSettings_Recording;
        
        private System.Data.DataRelation relationProductionParameterSettings_Printing;
        
        private System.Data.DataRelation relationProductionParameterSettings_Autoloader;
        
        private System.Data.DataRelation relationAutoloader_Bin;
        
        private System.Data.DataRelation relationProductionParameterSettings_Reading;
        
        private System.Data.DataRelation relationReading_AutoBulkRead;
        
        private System.Data.DataRelation relationProductionParameterSettings_KioskMode;
        
        private System.Data.DataRelation relationProductionParameterSettings_Messaging;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ServerReply() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ServerReply(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["AckOnly"] != null)) {
                    base.Tables.Add(new AckOnlyDataTable(ds.Tables["AckOnly"]));
                }
                if ((ds.Tables["ServerStatus"] != null)) {
                    base.Tables.Add(new ServerStatusDataTable(ds.Tables["ServerStatus"]));
                }
                if ((ds.Tables["ServerInfo"] != null)) {
                    base.Tables.Add(new ServerInfoDataTable(ds.Tables["ServerInfo"]));
                }
                if ((ds.Tables["TimeStamps"] != null)) {
                    base.Tables.Add(new TimeStampsDataTable(ds.Tables["TimeStamps"]));
                }
                if ((ds.Tables["Switches"] != null)) {
                    base.Tables.Add(new SwitchesDataTable(ds.Tables["Switches"]));
                }
                if ((ds.Tables["OrderList"] != null)) {
                    base.Tables.Add(new OrderListDataTable(ds.Tables["OrderList"]));
                }
                if ((ds.Tables["ProductionOrder"] != null)) {
                    base.Tables.Add(new ProductionOrderDataTable(ds.Tables["ProductionOrder"]));
                }
                if ((ds.Tables["ImagingOrder"] != null)) {
                    base.Tables.Add(new ImagingOrderDataTable(ds.Tables["ImagingOrder"]));
                }
                if ((ds.Tables["SessionLog"] != null)) {
                    base.Tables.Add(new SessionLogDataTable(ds.Tables["SessionLog"]));
                }
                if ((ds.Tables["Entry"] != null)) {
                    base.Tables.Add(new EntryDataTable(ds.Tables["Entry"]));
                }
                if ((ds.Tables["DialogAction"] != null)) {
                    base.Tables.Add(new DialogActionDataTable(ds.Tables["DialogAction"]));
                }
                if ((ds.Tables["ProductionParameterSettings"] != null)) {
                    base.Tables.Add(new ProductionParameterSettingsDataTable(ds.Tables["ProductionParameterSettings"]));
                }
                if ((ds.Tables["Server"] != null)) {
                    base.Tables.Add(new ServerDataTable(ds.Tables["Server"]));
                }
                if ((ds.Tables["Verify"] != null)) {
                    base.Tables.Add(new VerifyDataTable(ds.Tables["Verify"]));
                }
                if ((ds.Tables["Recording"] != null)) {
                    base.Tables.Add(new RecordingDataTable(ds.Tables["Recording"]));
                }
                if ((ds.Tables["Printing"] != null)) {
                    base.Tables.Add(new PrintingDataTable(ds.Tables["Printing"]));
                }
                if ((ds.Tables["Autoloader"] != null)) {
                    base.Tables.Add(new AutoloaderDataTable(ds.Tables["Autoloader"]));
                }
                if ((ds.Tables["Bin"] != null)) {
                    base.Tables.Add(new BinDataTable(ds.Tables["Bin"]));
                }
                if ((ds.Tables["Reading"] != null)) {
                    base.Tables.Add(new ReadingDataTable(ds.Tables["Reading"]));
                }
                if ((ds.Tables["AutoBulkRead"] != null)) {
                    base.Tables.Add(new AutoBulkReadDataTable(ds.Tables["AutoBulkRead"]));
                }
                if ((ds.Tables["KioskMode"] != null)) {
                    base.Tables.Add(new KioskModeDataTable(ds.Tables["KioskMode"]));
                }
                if ((ds.Tables["Messaging"] != null)) {
                    base.Tables.Add(new MessagingDataTable(ds.Tables["Messaging"]));
                }
                if ((ds.Tables["ImagingParameterSettings"] != null)) {
                    base.Tables.Add(new ImagingParameterSettingsDataTable(ds.Tables["ImagingParameterSettings"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AckOnlyDataTable AckOnly {
            get {
                return this.tableAckOnly;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerStatusDataTable ServerStatus {
            get {
                return this.tableServerStatus;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerInfoDataTable ServerInfo {
            get {
                return this.tableServerInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TimeStampsDataTable TimeStamps {
            get {
                return this.tableTimeStamps;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SwitchesDataTable Switches {
            get {
                return this.tableSwitches;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OrderListDataTable OrderList {
            get {
                return this.tableOrderList;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProductionOrderDataTable ProductionOrder {
            get {
                return this.tableProductionOrder;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ImagingOrderDataTable ImagingOrder {
            get {
                return this.tableImagingOrder;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SessionLogDataTable SessionLog {
            get {
                return this.tableSessionLog;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EntryDataTable Entry {
            get {
                return this.tableEntry;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DialogActionDataTable DialogAction {
            get {
                return this.tableDialogAction;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProductionParameterSettingsDataTable ProductionParameterSettings {
            get {
                return this.tableProductionParameterSettings;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerDataTable Server {
            get {
                return this.tableServer;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VerifyDataTable Verify {
            get {
                return this.tableVerify;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RecordingDataTable Recording {
            get {
                return this.tableRecording;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrintingDataTable Printing {
            get {
                return this.tablePrinting;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AutoloaderDataTable Autoloader {
            get {
                return this.tableAutoloader;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BinDataTable Bin {
            get {
                return this.tableBin;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReadingDataTable Reading {
            get {
                return this.tableReading;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AutoBulkReadDataTable AutoBulkRead {
            get {
                return this.tableAutoBulkRead;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public KioskModeDataTable KioskMode {
            get {
                return this.tableKioskMode;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MessagingDataTable Messaging {
            get {
                return this.tableMessaging;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ImagingParameterSettingsDataTable ImagingParameterSettings {
            get {
                return this.tableImagingParameterSettings;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            ServerReply cln = ((ServerReply)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["AckOnly"] != null)) {
                    base.Tables.Add(new AckOnlyDataTable(ds.Tables["AckOnly"]));
                }
                if ((ds.Tables["ServerStatus"] != null)) {
                    base.Tables.Add(new ServerStatusDataTable(ds.Tables["ServerStatus"]));
                }
                if ((ds.Tables["ServerInfo"] != null)) {
                    base.Tables.Add(new ServerInfoDataTable(ds.Tables["ServerInfo"]));
                }
                if ((ds.Tables["TimeStamps"] != null)) {
                    base.Tables.Add(new TimeStampsDataTable(ds.Tables["TimeStamps"]));
                }
                if ((ds.Tables["Switches"] != null)) {
                    base.Tables.Add(new SwitchesDataTable(ds.Tables["Switches"]));
                }
                if ((ds.Tables["OrderList"] != null)) {
                    base.Tables.Add(new OrderListDataTable(ds.Tables["OrderList"]));
                }
                if ((ds.Tables["ProductionOrder"] != null)) {
                    base.Tables.Add(new ProductionOrderDataTable(ds.Tables["ProductionOrder"]));
                }
                if ((ds.Tables["ImagingOrder"] != null)) {
                    base.Tables.Add(new ImagingOrderDataTable(ds.Tables["ImagingOrder"]));
                }
                if ((ds.Tables["SessionLog"] != null)) {
                    base.Tables.Add(new SessionLogDataTable(ds.Tables["SessionLog"]));
                }
                if ((ds.Tables["Entry"] != null)) {
                    base.Tables.Add(new EntryDataTable(ds.Tables["Entry"]));
                }
                if ((ds.Tables["DialogAction"] != null)) {
                    base.Tables.Add(new DialogActionDataTable(ds.Tables["DialogAction"]));
                }
                if ((ds.Tables["ProductionParameterSettings"] != null)) {
                    base.Tables.Add(new ProductionParameterSettingsDataTable(ds.Tables["ProductionParameterSettings"]));
                }
                if ((ds.Tables["Server"] != null)) {
                    base.Tables.Add(new ServerDataTable(ds.Tables["Server"]));
                }
                if ((ds.Tables["Verify"] != null)) {
                    base.Tables.Add(new VerifyDataTable(ds.Tables["Verify"]));
                }
                if ((ds.Tables["Recording"] != null)) {
                    base.Tables.Add(new RecordingDataTable(ds.Tables["Recording"]));
                }
                if ((ds.Tables["Printing"] != null)) {
                    base.Tables.Add(new PrintingDataTable(ds.Tables["Printing"]));
                }
                if ((ds.Tables["Autoloader"] != null)) {
                    base.Tables.Add(new AutoloaderDataTable(ds.Tables["Autoloader"]));
                }
                if ((ds.Tables["Bin"] != null)) {
                    base.Tables.Add(new BinDataTable(ds.Tables["Bin"]));
                }
                if ((ds.Tables["Reading"] != null)) {
                    base.Tables.Add(new ReadingDataTable(ds.Tables["Reading"]));
                }
                if ((ds.Tables["AutoBulkRead"] != null)) {
                    base.Tables.Add(new AutoBulkReadDataTable(ds.Tables["AutoBulkRead"]));
                }
                if ((ds.Tables["KioskMode"] != null)) {
                    base.Tables.Add(new KioskModeDataTable(ds.Tables["KioskMode"]));
                }
                if ((ds.Tables["Messaging"] != null)) {
                    base.Tables.Add(new MessagingDataTable(ds.Tables["Messaging"]));
                }
                if ((ds.Tables["ImagingParameterSettings"] != null)) {
                    base.Tables.Add(new ImagingParameterSettingsDataTable(ds.Tables["ImagingParameterSettings"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableAckOnly = ((AckOnlyDataTable)(base.Tables["AckOnly"]));
            if ((initTable == true)) {
                if ((this.tableAckOnly != null)) {
                    this.tableAckOnly.InitVars();
                }
            }
            this.tableServerStatus = ((ServerStatusDataTable)(base.Tables["ServerStatus"]));
            if ((initTable == true)) {
                if ((this.tableServerStatus != null)) {
                    this.tableServerStatus.InitVars();
                }
            }
            this.tableServerInfo = ((ServerInfoDataTable)(base.Tables["ServerInfo"]));
            if ((initTable == true)) {
                if ((this.tableServerInfo != null)) {
                    this.tableServerInfo.InitVars();
                }
            }
            this.tableTimeStamps = ((TimeStampsDataTable)(base.Tables["TimeStamps"]));
            if ((initTable == true)) {
                if ((this.tableTimeStamps != null)) {
                    this.tableTimeStamps.InitVars();
                }
            }
            this.tableSwitches = ((SwitchesDataTable)(base.Tables["Switches"]));
            if ((initTable == true)) {
                if ((this.tableSwitches != null)) {
                    this.tableSwitches.InitVars();
                }
            }
            this.tableOrderList = ((OrderListDataTable)(base.Tables["OrderList"]));
            if ((initTable == true)) {
                if ((this.tableOrderList != null)) {
                    this.tableOrderList.InitVars();
                }
            }
            this.tableProductionOrder = ((ProductionOrderDataTable)(base.Tables["ProductionOrder"]));
            if ((initTable == true)) {
                if ((this.tableProductionOrder != null)) {
                    this.tableProductionOrder.InitVars();
                }
            }
            this.tableImagingOrder = ((ImagingOrderDataTable)(base.Tables["ImagingOrder"]));
            if ((initTable == true)) {
                if ((this.tableImagingOrder != null)) {
                    this.tableImagingOrder.InitVars();
                }
            }
            this.tableSessionLog = ((SessionLogDataTable)(base.Tables["SessionLog"]));
            if ((initTable == true)) {
                if ((this.tableSessionLog != null)) {
                    this.tableSessionLog.InitVars();
                }
            }
            this.tableEntry = ((EntryDataTable)(base.Tables["Entry"]));
            if ((initTable == true)) {
                if ((this.tableEntry != null)) {
                    this.tableEntry.InitVars();
                }
            }
            this.tableDialogAction = ((DialogActionDataTable)(base.Tables["DialogAction"]));
            if ((initTable == true)) {
                if ((this.tableDialogAction != null)) {
                    this.tableDialogAction.InitVars();
                }
            }
            this.tableProductionParameterSettings = ((ProductionParameterSettingsDataTable)(base.Tables["ProductionParameterSettings"]));
            if ((initTable == true)) {
                if ((this.tableProductionParameterSettings != null)) {
                    this.tableProductionParameterSettings.InitVars();
                }
            }
            this.tableServer = ((ServerDataTable)(base.Tables["Server"]));
            if ((initTable == true)) {
                if ((this.tableServer != null)) {
                    this.tableServer.InitVars();
                }
            }
            this.tableVerify = ((VerifyDataTable)(base.Tables["Verify"]));
            if ((initTable == true)) {
                if ((this.tableVerify != null)) {
                    this.tableVerify.InitVars();
                }
            }
            this.tableRecording = ((RecordingDataTable)(base.Tables["Recording"]));
            if ((initTable == true)) {
                if ((this.tableRecording != null)) {
                    this.tableRecording.InitVars();
                }
            }
            this.tablePrinting = ((PrintingDataTable)(base.Tables["Printing"]));
            if ((initTable == true)) {
                if ((this.tablePrinting != null)) {
                    this.tablePrinting.InitVars();
                }
            }
            this.tableAutoloader = ((AutoloaderDataTable)(base.Tables["Autoloader"]));
            if ((initTable == true)) {
                if ((this.tableAutoloader != null)) {
                    this.tableAutoloader.InitVars();
                }
            }
            this.tableBin = ((BinDataTable)(base.Tables["Bin"]));
            if ((initTable == true)) {
                if ((this.tableBin != null)) {
                    this.tableBin.InitVars();
                }
            }
            this.tableReading = ((ReadingDataTable)(base.Tables["Reading"]));
            if ((initTable == true)) {
                if ((this.tableReading != null)) {
                    this.tableReading.InitVars();
                }
            }
            this.tableAutoBulkRead = ((AutoBulkReadDataTable)(base.Tables["AutoBulkRead"]));
            if ((initTable == true)) {
                if ((this.tableAutoBulkRead != null)) {
                    this.tableAutoBulkRead.InitVars();
                }
            }
            this.tableKioskMode = ((KioskModeDataTable)(base.Tables["KioskMode"]));
            if ((initTable == true)) {
                if ((this.tableKioskMode != null)) {
                    this.tableKioskMode.InitVars();
                }
            }
            this.tableMessaging = ((MessagingDataTable)(base.Tables["Messaging"]));
            if ((initTable == true)) {
                if ((this.tableMessaging != null)) {
                    this.tableMessaging.InitVars();
                }
            }
            this.tableImagingParameterSettings = ((ImagingParameterSettingsDataTable)(base.Tables["ImagingParameterSettings"]));
            if ((initTable == true)) {
                if ((this.tableImagingParameterSettings != null)) {
                    this.tableImagingParameterSettings.InitVars();
                }
            }
            this.relationServerStatus_ServerInfo = this.Relations["ServerStatus_ServerInfo"];
            this.relationServerStatus_TimeStamps = this.Relations["ServerStatus_TimeStamps"];
            this.relationServerStatus_Switches = this.Relations["ServerStatus_Switches"];
            this.relationOrderList_ProductionOrder = this.Relations["OrderList_ProductionOrder"];
            this.relationOrderList_ImagingOrder = this.Relations["OrderList_ImagingOrder"];
            this.relationSessionLog_Entry = this.Relations["SessionLog_Entry"];
            this.relationProductionParameterSettings_Server = this.Relations["ProductionParameterSettings_Server"];
            this.relationProductionParameterSettings_Verify = this.Relations["ProductionParameterSettings_Verify"];
            this.relationProductionParameterSettings_Recording = this.Relations["ProductionParameterSettings_Recording"];
            this.relationProductionParameterSettings_Printing = this.Relations["ProductionParameterSettings_Printing"];
            this.relationProductionParameterSettings_Autoloader = this.Relations["ProductionParameterSettings_Autoloader"];
            this.relationAutoloader_Bin = this.Relations["Autoloader_Bin"];
            this.relationProductionParameterSettings_Reading = this.Relations["ProductionParameterSettings_Reading"];
            this.relationReading_AutoBulkRead = this.Relations["Reading_AutoBulkRead"];
            this.relationProductionParameterSettings_KioskMode = this.Relations["ProductionParameterSettings_KioskMode"];
            this.relationProductionParameterSettings_Messaging = this.Relations["ProductionParameterSettings_Messaging"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ServerReply";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableAckOnly = new AckOnlyDataTable();
            base.Tables.Add(this.tableAckOnly);
            this.tableServerStatus = new ServerStatusDataTable();
            base.Tables.Add(this.tableServerStatus);
            this.tableServerInfo = new ServerInfoDataTable();
            base.Tables.Add(this.tableServerInfo);
            this.tableTimeStamps = new TimeStampsDataTable();
            base.Tables.Add(this.tableTimeStamps);
            this.tableSwitches = new SwitchesDataTable();
            base.Tables.Add(this.tableSwitches);
            this.tableOrderList = new OrderListDataTable();
            base.Tables.Add(this.tableOrderList);
            this.tableProductionOrder = new ProductionOrderDataTable();
            base.Tables.Add(this.tableProductionOrder);
            this.tableImagingOrder = new ImagingOrderDataTable();
            base.Tables.Add(this.tableImagingOrder);
            this.tableSessionLog = new SessionLogDataTable();
            base.Tables.Add(this.tableSessionLog);
            this.tableEntry = new EntryDataTable();
            base.Tables.Add(this.tableEntry);
            this.tableDialogAction = new DialogActionDataTable();
            base.Tables.Add(this.tableDialogAction);
            this.tableProductionParameterSettings = new ProductionParameterSettingsDataTable();
            base.Tables.Add(this.tableProductionParameterSettings);
            this.tableServer = new ServerDataTable();
            base.Tables.Add(this.tableServer);
            this.tableVerify = new VerifyDataTable();
            base.Tables.Add(this.tableVerify);
            this.tableRecording = new RecordingDataTable();
            base.Tables.Add(this.tableRecording);
            this.tablePrinting = new PrintingDataTable();
            base.Tables.Add(this.tablePrinting);
            this.tableAutoloader = new AutoloaderDataTable();
            base.Tables.Add(this.tableAutoloader);
            this.tableBin = new BinDataTable();
            base.Tables.Add(this.tableBin);
            this.tableReading = new ReadingDataTable();
            base.Tables.Add(this.tableReading);
            this.tableAutoBulkRead = new AutoBulkReadDataTable();
            base.Tables.Add(this.tableAutoBulkRead);
            this.tableKioskMode = new KioskModeDataTable();
            base.Tables.Add(this.tableKioskMode);
            this.tableMessaging = new MessagingDataTable();
            base.Tables.Add(this.tableMessaging);
            this.tableImagingParameterSettings = new ImagingParameterSettingsDataTable();
            base.Tables.Add(this.tableImagingParameterSettings);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("ServerStatus_ServerInfo", new System.Data.DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerInfo.ServerStatus_IdColumn});
            this.tableServerInfo.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ServerStatus_TimeStamps", new System.Data.DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new System.Data.DataColumn[] {
                        this.tableTimeStamps.ServerStatus_IdColumn});
            this.tableTimeStamps.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ServerStatus_Switches", new System.Data.DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new System.Data.DataColumn[] {
                        this.tableSwitches.ServerStatus_IdColumn});
            this.tableSwitches.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("OrderList_ProductionOrder", new System.Data.DataColumn[] {
                        this.tableOrderList.OrderList_IdColumn}, new System.Data.DataColumn[] {
                        this.tableProductionOrder.OrderList_IdColumn});
            this.tableProductionOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("OrderList_ImagingOrder", new System.Data.DataColumn[] {
                        this.tableOrderList.OrderList_IdColumn}, new System.Data.DataColumn[] {
                        this.tableImagingOrder.OrderList_IdColumn});
            this.tableImagingOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("SessionLog_Entry", new System.Data.DataColumn[] {
                        this.tableSessionLog.SessionLog_IdColumn}, new System.Data.DataColumn[] {
                        this.tableEntry.SessionLog_IdColumn});
            this.tableEntry.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ProductionParameterSettings_Server", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServer.ProductionParameterSettings_IdColumn});
            this.tableServer.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ProductionParameterSettings_Verify", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableVerify.ProductionParameterSettings_IdColumn});
            this.tableVerify.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ProductionParameterSettings_Recording", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableRecording.ProductionParameterSettings_IdColumn});
            this.tableRecording.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ProductionParameterSettings_Printing", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tablePrinting.ProductionParameterSettings_IdColumn});
            this.tablePrinting.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ProductionParameterSettings_Autoloader", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableAutoloader.ProductionParameterSettings_IdColumn});
            this.tableAutoloader.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Autoloader_Bin", new System.Data.DataColumn[] {
                        this.tableAutoloader.Autoloader_IdColumn}, new System.Data.DataColumn[] {
                        this.tableBin.Autoloader_IdColumn});
            this.tableBin.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ProductionParameterSettings_Reading", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableReading.ProductionParameterSettings_IdColumn});
            this.tableReading.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Reading_AutoBulkRead", new System.Data.DataColumn[] {
                        this.tableReading.Reading_IdColumn}, new System.Data.DataColumn[] {
                        this.tableAutoBulkRead.Reading_IdColumn});
            this.tableAutoBulkRead.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ProductionParameterSettings_KioskMode", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableKioskMode.ProductionParameterSettings_IdColumn});
            this.tableKioskMode.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ProductionParameterSettings_Messaging", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableMessaging.ProductionParameterSettings_IdColumn});
            this.tableMessaging.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationServerStatus_ServerInfo = new System.Data.DataRelation("ServerStatus_ServerInfo", new System.Data.DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerInfo.ServerStatus_IdColumn}, false);
            this.relationServerStatus_ServerInfo.Nested = true;
            this.Relations.Add(this.relationServerStatus_ServerInfo);
            this.relationServerStatus_TimeStamps = new System.Data.DataRelation("ServerStatus_TimeStamps", new System.Data.DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new System.Data.DataColumn[] {
                        this.tableTimeStamps.ServerStatus_IdColumn}, false);
            this.relationServerStatus_TimeStamps.Nested = true;
            this.Relations.Add(this.relationServerStatus_TimeStamps);
            this.relationServerStatus_Switches = new System.Data.DataRelation("ServerStatus_Switches", new System.Data.DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new System.Data.DataColumn[] {
                        this.tableSwitches.ServerStatus_IdColumn}, false);
            this.relationServerStatus_Switches.Nested = true;
            this.Relations.Add(this.relationServerStatus_Switches);
            this.relationOrderList_ProductionOrder = new System.Data.DataRelation("OrderList_ProductionOrder", new System.Data.DataColumn[] {
                        this.tableOrderList.OrderList_IdColumn}, new System.Data.DataColumn[] {
                        this.tableProductionOrder.OrderList_IdColumn}, false);
            this.relationOrderList_ProductionOrder.Nested = true;
            this.Relations.Add(this.relationOrderList_ProductionOrder);
            this.relationOrderList_ImagingOrder = new System.Data.DataRelation("OrderList_ImagingOrder", new System.Data.DataColumn[] {
                        this.tableOrderList.OrderList_IdColumn}, new System.Data.DataColumn[] {
                        this.tableImagingOrder.OrderList_IdColumn}, false);
            this.relationOrderList_ImagingOrder.Nested = true;
            this.Relations.Add(this.relationOrderList_ImagingOrder);
            this.relationSessionLog_Entry = new System.Data.DataRelation("SessionLog_Entry", new System.Data.DataColumn[] {
                        this.tableSessionLog.SessionLog_IdColumn}, new System.Data.DataColumn[] {
                        this.tableEntry.SessionLog_IdColumn}, false);
            this.relationSessionLog_Entry.Nested = true;
            this.Relations.Add(this.relationSessionLog_Entry);
            this.relationProductionParameterSettings_Server = new System.Data.DataRelation("ProductionParameterSettings_Server", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServer.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Server.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Server);
            this.relationProductionParameterSettings_Verify = new System.Data.DataRelation("ProductionParameterSettings_Verify", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableVerify.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Verify.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Verify);
            this.relationProductionParameterSettings_Recording = new System.Data.DataRelation("ProductionParameterSettings_Recording", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableRecording.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Recording.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Recording);
            this.relationProductionParameterSettings_Printing = new System.Data.DataRelation("ProductionParameterSettings_Printing", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tablePrinting.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Printing.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Printing);
            this.relationProductionParameterSettings_Autoloader = new System.Data.DataRelation("ProductionParameterSettings_Autoloader", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableAutoloader.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Autoloader.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Autoloader);
            this.relationAutoloader_Bin = new System.Data.DataRelation("Autoloader_Bin", new System.Data.DataColumn[] {
                        this.tableAutoloader.Autoloader_IdColumn}, new System.Data.DataColumn[] {
                        this.tableBin.Autoloader_IdColumn}, false);
            this.relationAutoloader_Bin.Nested = true;
            this.Relations.Add(this.relationAutoloader_Bin);
            this.relationProductionParameterSettings_Reading = new System.Data.DataRelation("ProductionParameterSettings_Reading", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableReading.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Reading.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Reading);
            this.relationReading_AutoBulkRead = new System.Data.DataRelation("Reading_AutoBulkRead", new System.Data.DataColumn[] {
                        this.tableReading.Reading_IdColumn}, new System.Data.DataColumn[] {
                        this.tableAutoBulkRead.Reading_IdColumn}, false);
            this.relationReading_AutoBulkRead.Nested = true;
            this.Relations.Add(this.relationReading_AutoBulkRead);
            this.relationProductionParameterSettings_KioskMode = new System.Data.DataRelation("ProductionParameterSettings_KioskMode", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableKioskMode.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_KioskMode.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_KioskMode);
            this.relationProductionParameterSettings_Messaging = new System.Data.DataRelation("ProductionParameterSettings_Messaging", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableMessaging.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Messaging.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Messaging);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAckOnly() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServerStatus() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServerInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTimeStamps() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSwitches() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOrderList() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProductionOrder() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeImagingOrder() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSessionLog() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEntry() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDialogAction() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProductionParameterSettings() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServer() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeVerify() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRecording() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrinting() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAutoloader() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBin() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReading() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAutoBulkRead() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeKioskMode() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMessaging() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeImagingParameterSettings() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            ServerReply ds = new ServerReply();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void AckOnlyRowChangeEventHandler(object sender, AckOnlyRowChangeEvent e);
        
        public delegate void ServerStatusRowChangeEventHandler(object sender, ServerStatusRowChangeEvent e);
        
        public delegate void ServerInfoRowChangeEventHandler(object sender, ServerInfoRowChangeEvent e);
        
        public delegate void TimeStampsRowChangeEventHandler(object sender, TimeStampsRowChangeEvent e);
        
        public delegate void SwitchesRowChangeEventHandler(object sender, SwitchesRowChangeEvent e);
        
        public delegate void OrderListRowChangeEventHandler(object sender, OrderListRowChangeEvent e);
        
        public delegate void ProductionOrderRowChangeEventHandler(object sender, ProductionOrderRowChangeEvent e);
        
        public delegate void ImagingOrderRowChangeEventHandler(object sender, ImagingOrderRowChangeEvent e);
        
        public delegate void SessionLogRowChangeEventHandler(object sender, SessionLogRowChangeEvent e);
        
        public delegate void EntryRowChangeEventHandler(object sender, EntryRowChangeEvent e);
        
        public delegate void DialogActionRowChangeEventHandler(object sender, DialogActionRowChangeEvent e);
        
        public delegate void ProductionParameterSettingsRowChangeEventHandler(object sender, ProductionParameterSettingsRowChangeEvent e);
        
        public delegate void ServerRowChangeEventHandler(object sender, ServerRowChangeEvent e);
        
        public delegate void VerifyRowChangeEventHandler(object sender, VerifyRowChangeEvent e);
        
        public delegate void RecordingRowChangeEventHandler(object sender, RecordingRowChangeEvent e);
        
        public delegate void PrintingRowChangeEventHandler(object sender, PrintingRowChangeEvent e);
        
        public delegate void AutoloaderRowChangeEventHandler(object sender, AutoloaderRowChangeEvent e);
        
        public delegate void BinRowChangeEventHandler(object sender, BinRowChangeEvent e);
        
        public delegate void ReadingRowChangeEventHandler(object sender, ReadingRowChangeEvent e);
        
        public delegate void AutoBulkReadRowChangeEventHandler(object sender, AutoBulkReadRowChangeEvent e);
        
        public delegate void KioskModeRowChangeEventHandler(object sender, KioskModeRowChangeEvent e);
        
        public delegate void MessagingRowChangeEventHandler(object sender, MessagingRowChangeEvent e);
        
        public delegate void ImagingParameterSettingsRowChangeEventHandler(object sender, ImagingParameterSettingsRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AckOnlyDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AckOnlyDataTable() {
                this.TableName = "AckOnly";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AckOnlyDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AckOnlyDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AckOnlyRow this[int index] {
                get {
                    return ((AckOnlyRow)(this.Rows[index]));
                }
            }
            
            public event AckOnlyRowChangeEventHandler AckOnlyRowChanging;
            
            public event AckOnlyRowChangeEventHandler AckOnlyRowChanged;
            
            public event AckOnlyRowChangeEventHandler AckOnlyRowDeleting;
            
            public event AckOnlyRowChangeEventHandler AckOnlyRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAckOnlyRow(AckOnlyRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AckOnlyRow AddAckOnlyRow() {
                AckOnlyRow rowAckOnlyRow = ((AckOnlyRow)(this.NewRow()));
                rowAckOnlyRow.ItemArray = new object[0];
                this.Rows.Add(rowAckOnlyRow);
                return rowAckOnlyRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                AckOnlyDataTable cln = ((AckOnlyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new AckOnlyDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AckOnlyRow NewAckOnlyRow() {
                return ((AckOnlyRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AckOnlyRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(AckOnlyRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AckOnlyRowChanged != null)) {
                    this.AckOnlyRowChanged(this, new AckOnlyRowChangeEvent(((AckOnlyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AckOnlyRowChanging != null)) {
                    this.AckOnlyRowChanging(this, new AckOnlyRowChangeEvent(((AckOnlyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AckOnlyRowDeleted != null)) {
                    this.AckOnlyRowDeleted(this, new AckOnlyRowChangeEvent(((AckOnlyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AckOnlyRowDeleting != null)) {
                    this.AckOnlyRowDeleting(this, new AckOnlyRowChangeEvent(((AckOnlyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAckOnlyRow(AckOnlyRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ServerReply ds = new ServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AckOnlyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServerStatusDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnServerStatus_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerStatusDataTable() {
                this.TableName = "ServerStatus";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerStatusDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServerStatusDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ServerStatus_IdColumn {
                get {
                    return this.columnServerStatus_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerStatusRow this[int index] {
                get {
                    return ((ServerStatusRow)(this.Rows[index]));
                }
            }
            
            public event ServerStatusRowChangeEventHandler ServerStatusRowChanging;
            
            public event ServerStatusRowChangeEventHandler ServerStatusRowChanged;
            
            public event ServerStatusRowChangeEventHandler ServerStatusRowDeleting;
            
            public event ServerStatusRowChangeEventHandler ServerStatusRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServerStatusRow(ServerStatusRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerStatusRow AddServerStatusRow() {
                ServerStatusRow rowServerStatusRow = ((ServerStatusRow)(this.NewRow()));
                rowServerStatusRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowServerStatusRow);
                return rowServerStatusRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ServerStatusDataTable cln = ((ServerStatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ServerStatusDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnServerStatus_Id = base.Columns["ServerStatus_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnServerStatus_Id = new System.Data.DataColumn("ServerStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnServerStatus_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnServerStatus_Id}, true));
                this.columnServerStatus_Id.AutoIncrement = true;
                this.columnServerStatus_Id.AllowDBNull = false;
                this.columnServerStatus_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerStatusRow NewServerStatusRow() {
                return ((ServerStatusRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ServerStatusRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ServerStatusRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerStatusRowChanged != null)) {
                    this.ServerStatusRowChanged(this, new ServerStatusRowChangeEvent(((ServerStatusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerStatusRowChanging != null)) {
                    this.ServerStatusRowChanging(this, new ServerStatusRowChangeEvent(((ServerStatusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerStatusRowDeleted != null)) {
                    this.ServerStatusRowDeleted(this, new ServerStatusRowChangeEvent(((ServerStatusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerStatusRowDeleting != null)) {
                    this.ServerStatusRowDeleting(this, new ServerStatusRowChangeEvent(((ServerStatusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServerStatusRow(ServerStatusRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ServerReply ds = new ServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServerStatusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServerInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSoftwareVersion;
            
            private System.Data.DataColumn columnDescription;
            
            private System.Data.DataColumn columnHostname;
            
            private System.Data.DataColumn columnCluster;
            
            private System.Data.DataColumn columnMessagingPort;
            
            private System.Data.DataColumn columnDTDFolder;
            
            private System.Data.DataColumn columnIsService;
            
            private System.Data.DataColumn columnAutomation;
            
            private System.Data.DataColumn columnCopiesProduced;
            
            private System.Data.DataColumn columnCopiesRejected;
            
            private System.Data.DataColumn columnImagesWritten;
            
            private System.Data.DataColumn columnImagesRejected;
            
            private System.Data.DataColumn columnPasswordSet;
            
            private System.Data.DataColumn columnServerStatus_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerInfoDataTable() {
                this.TableName = "ServerInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerInfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServerInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SoftwareVersionColumn {
                get {
                    return this.columnSoftwareVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HostnameColumn {
                get {
                    return this.columnHostname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClusterColumn {
                get {
                    return this.columnCluster;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MessagingPortColumn {
                get {
                    return this.columnMessagingPort;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DTDFolderColumn {
                get {
                    return this.columnDTDFolder;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsServiceColumn {
                get {
                    return this.columnIsService;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AutomationColumn {
                get {
                    return this.columnAutomation;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CopiesProducedColumn {
                get {
                    return this.columnCopiesProduced;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CopiesRejectedColumn {
                get {
                    return this.columnCopiesRejected;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ImagesWrittenColumn {
                get {
                    return this.columnImagesWritten;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ImagesRejectedColumn {
                get {
                    return this.columnImagesRejected;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PasswordSetColumn {
                get {
                    return this.columnPasswordSet;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ServerStatus_IdColumn {
                get {
                    return this.columnServerStatus_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerInfoRow this[int index] {
                get {
                    return ((ServerInfoRow)(this.Rows[index]));
                }
            }
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowChanging;
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowChanged;
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowDeleting;
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServerInfoRow(ServerInfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerInfoRow AddServerInfoRow(string SoftwareVersion, string Description, string Hostname, string Cluster, string MessagingPort, string DTDFolder, string IsService, string Automation, string CopiesProduced, string CopiesRejected, string ImagesWritten, string ImagesRejected, string PasswordSet, ServerStatusRow parentServerStatusRowByServerStatus_ServerInfo) {
                ServerInfoRow rowServerInfoRow = ((ServerInfoRow)(this.NewRow()));
                rowServerInfoRow.ItemArray = new object[] {
                        SoftwareVersion,
                        Description,
                        Hostname,
                        Cluster,
                        MessagingPort,
                        DTDFolder,
                        IsService,
                        Automation,
                        CopiesProduced,
                        CopiesRejected,
                        ImagesWritten,
                        ImagesRejected,
                        PasswordSet,
                        parentServerStatusRowByServerStatus_ServerInfo[0]};
                this.Rows.Add(rowServerInfoRow);
                return rowServerInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ServerInfoDataTable cln = ((ServerInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ServerInfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSoftwareVersion = base.Columns["SoftwareVersion"];
                this.columnDescription = base.Columns["Description"];
                this.columnHostname = base.Columns["Hostname"];
                this.columnCluster = base.Columns["Cluster"];
                this.columnMessagingPort = base.Columns["MessagingPort"];
                this.columnDTDFolder = base.Columns["DTDFolder"];
                this.columnIsService = base.Columns["IsService"];
                this.columnAutomation = base.Columns["Automation"];
                this.columnCopiesProduced = base.Columns["CopiesProduced"];
                this.columnCopiesRejected = base.Columns["CopiesRejected"];
                this.columnImagesWritten = base.Columns["ImagesWritten"];
                this.columnImagesRejected = base.Columns["ImagesRejected"];
                this.columnPasswordSet = base.Columns["PasswordSet"];
                this.columnServerStatus_Id = base.Columns["ServerStatus_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSoftwareVersion = new System.Data.DataColumn("SoftwareVersion", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSoftwareVersion);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDescription);
                this.columnHostname = new System.Data.DataColumn("Hostname", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnHostname);
                this.columnCluster = new System.Data.DataColumn("Cluster", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCluster);
                this.columnMessagingPort = new System.Data.DataColumn("MessagingPort", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMessagingPort);
                this.columnDTDFolder = new System.Data.DataColumn("DTDFolder", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDTDFolder);
                this.columnIsService = new System.Data.DataColumn("IsService", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIsService);
                this.columnAutomation = new System.Data.DataColumn("Automation", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAutomation);
                this.columnCopiesProduced = new System.Data.DataColumn("CopiesProduced", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCopiesProduced);
                this.columnCopiesRejected = new System.Data.DataColumn("CopiesRejected", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCopiesRejected);
                this.columnImagesWritten = new System.Data.DataColumn("ImagesWritten", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnImagesWritten);
                this.columnImagesRejected = new System.Data.DataColumn("ImagesRejected", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnImagesRejected);
                this.columnPasswordSet = new System.Data.DataColumn("PasswordSet", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPasswordSet);
                this.columnServerStatus_Id = new System.Data.DataColumn("ServerStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnServerStatus_Id);
                this.columnSoftwareVersion.AllowDBNull = false;
                this.columnSoftwareVersion.Namespace = "";
                this.columnDescription.Namespace = "";
                this.columnHostname.AllowDBNull = false;
                this.columnHostname.Namespace = "";
                this.columnCluster.AllowDBNull = false;
                this.columnCluster.Namespace = "";
                this.columnMessagingPort.AllowDBNull = false;
                this.columnMessagingPort.Namespace = "";
                this.columnDTDFolder.AllowDBNull = false;
                this.columnDTDFolder.Namespace = "";
                this.columnIsService.Namespace = "";
                this.columnIsService.DefaultValue = ((string)("false"));
                this.columnAutomation.AllowDBNull = false;
                this.columnAutomation.Namespace = "";
                this.columnCopiesProduced.Namespace = "";
                this.columnCopiesRejected.Namespace = "";
                this.columnImagesWritten.Namespace = "";
                this.columnImagesRejected.Namespace = "";
                this.columnPasswordSet.AllowDBNull = false;
                this.columnPasswordSet.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerInfoRow NewServerInfoRow() {
                return ((ServerInfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ServerInfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ServerInfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerInfoRowChanged != null)) {
                    this.ServerInfoRowChanged(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerInfoRowChanging != null)) {
                    this.ServerInfoRowChanging(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerInfoRowDeleted != null)) {
                    this.ServerInfoRowDeleted(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerInfoRowDeleting != null)) {
                    this.ServerInfoRowDeleting(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServerInfoRow(ServerInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ServerReply ds = new ServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServerInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TimeStampsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnStart;
            
            private System.Data.DataColumn columnStatus;
            
            private System.Data.DataColumn columnServerStatus_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimeStampsDataTable() {
                this.TableName = "TimeStamps";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TimeStampsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TimeStampsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StartColumn {
                get {
                    return this.columnStart;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ServerStatus_IdColumn {
                get {
                    return this.columnServerStatus_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimeStampsRow this[int index] {
                get {
                    return ((TimeStampsRow)(this.Rows[index]));
                }
            }
            
            public event TimeStampsRowChangeEventHandler TimeStampsRowChanging;
            
            public event TimeStampsRowChangeEventHandler TimeStampsRowChanged;
            
            public event TimeStampsRowChangeEventHandler TimeStampsRowDeleting;
            
            public event TimeStampsRowChangeEventHandler TimeStampsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTimeStampsRow(TimeStampsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimeStampsRow AddTimeStampsRow(string Start, string Status, ServerStatusRow parentServerStatusRowByServerStatus_TimeStamps) {
                TimeStampsRow rowTimeStampsRow = ((TimeStampsRow)(this.NewRow()));
                rowTimeStampsRow.ItemArray = new object[] {
                        Start,
                        Status,
                        parentServerStatusRowByServerStatus_TimeStamps[0]};
                this.Rows.Add(rowTimeStampsRow);
                return rowTimeStampsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TimeStampsDataTable cln = ((TimeStampsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TimeStampsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStart = base.Columns["Start"];
                this.columnStatus = base.Columns["Status"];
                this.columnServerStatus_Id = base.Columns["ServerStatus_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStart = new System.Data.DataColumn("Start", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnStart);
                this.columnStatus = new System.Data.DataColumn("Status", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnStatus);
                this.columnServerStatus_Id = new System.Data.DataColumn("ServerStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnServerStatus_Id);
                this.columnStart.AllowDBNull = false;
                this.columnStart.Namespace = "";
                this.columnStatus.AllowDBNull = false;
                this.columnStatus.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimeStampsRow NewTimeStampsRow() {
                return ((TimeStampsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TimeStampsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TimeStampsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TimeStampsRowChanged != null)) {
                    this.TimeStampsRowChanged(this, new TimeStampsRowChangeEvent(((TimeStampsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TimeStampsRowChanging != null)) {
                    this.TimeStampsRowChanging(this, new TimeStampsRowChangeEvent(((TimeStampsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TimeStampsRowDeleted != null)) {
                    this.TimeStampsRowDeleted(this, new TimeStampsRowChangeEvent(((TimeStampsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TimeStampsRowDeleting != null)) {
                    this.TimeStampsRowDeleting(this, new TimeStampsRowChangeEvent(((TimeStampsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTimeStampsRow(TimeStampsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ServerReply ds = new ServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TimeStampsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SwitchesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnManufacturingTestMode;
            
            private System.Data.DataColumn columnVerifyOnlyMode;
            
            private System.Data.DataColumn columnNoLogLimit;
            
            private System.Data.DataColumn columnSetupMode;
            
            private System.Data.DataColumn columnDirectImaging;
            
            private System.Data.DataColumn columnSkipOrderUpdate;
            
            private System.Data.DataColumn columnAutoThroughPutMeasurement;
            
            private System.Data.DataColumn columnTimingLogged;
            
            private System.Data.DataColumn columnPreLoadBartender;
            
            private System.Data.DataColumn columnSkipCaching;
            
            private System.Data.DataColumn columnSkipOrderStatusUpdates;
            
            private System.Data.DataColumn columnPrintOnlyMode;
            
            private System.Data.DataColumn columnSkipAutoloaderScanning;
            
            private System.Data.DataColumn columnPrintBeforeRecording;
            
            private System.Data.DataColumn columnUseDriveLettersForRecorders;
            
            private System.Data.DataColumn columnTraceSCSICommands;
            
            private System.Data.DataColumn columnTraceReadWriteCommands;
            
            private System.Data.DataColumn columnTraceSerialCommands;
            
            private System.Data.DataColumn columnTraceLabelAndPrinting;
            
            private System.Data.DataColumn columnTraceXMLMessages;
            
            private System.Data.DataColumn columnLogSkippingOrder;
            
            private System.Data.DataColumn columnRunWithoutDevices;
            
            private System.Data.DataColumn columnDisablePreloadingRecorderAfterPrinterLoad;
            
            private System.Data.DataColumn columnDisableCacheLocking;
            
            private System.Data.DataColumn columnEnableCacheLimiting;
            
            private System.Data.DataColumn columnSkipSerialPortForAutoloader;
            
            private System.Data.DataColumn columnSkipDriveForReaderRecorderCache;
            
            private System.Data.DataColumn columnUseDelayBeforeMainWindow;
            
            private System.Data.DataColumn columnUserParallelPortForPrism;
            
            private System.Data.DataColumn columnDisableDriverNameInRendering;
            
            private System.Data.DataColumn columnDisableImageSizeChecking;
            
            private System.Data.DataColumn columnServerStatus_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SwitchesDataTable() {
                this.TableName = "Switches";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SwitchesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SwitchesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ManufacturingTestModeColumn {
                get {
                    return this.columnManufacturingTestMode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VerifyOnlyModeColumn {
                get {
                    return this.columnVerifyOnlyMode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NoLogLimitColumn {
                get {
                    return this.columnNoLogLimit;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SetupModeColumn {
                get {
                    return this.columnSetupMode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DirectImagingColumn {
                get {
                    return this.columnDirectImaging;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SkipOrderUpdateColumn {
                get {
                    return this.columnSkipOrderUpdate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AutoThroughPutMeasurementColumn {
                get {
                    return this.columnAutoThroughPutMeasurement;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimingLoggedColumn {
                get {
                    return this.columnTimingLogged;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PreLoadBartenderColumn {
                get {
                    return this.columnPreLoadBartender;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SkipCachingColumn {
                get {
                    return this.columnSkipCaching;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SkipOrderStatusUpdatesColumn {
                get {
                    return this.columnSkipOrderStatusUpdates;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PrintOnlyModeColumn {
                get {
                    return this.columnPrintOnlyMode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SkipAutoloaderScanningColumn {
                get {
                    return this.columnSkipAutoloaderScanning;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PrintBeforeRecordingColumn {
                get {
                    return this.columnPrintBeforeRecording;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UseDriveLettersForRecordersColumn {
                get {
                    return this.columnUseDriveLettersForRecorders;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TraceSCSICommandsColumn {
                get {
                    return this.columnTraceSCSICommands;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TraceReadWriteCommandsColumn {
                get {
                    return this.columnTraceReadWriteCommands;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TraceSerialCommandsColumn {
                get {
                    return this.columnTraceSerialCommands;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TraceLabelAndPrintingColumn {
                get {
                    return this.columnTraceLabelAndPrinting;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TraceXMLMessagesColumn {
                get {
                    return this.columnTraceXMLMessages;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LogSkippingOrderColumn {
                get {
                    return this.columnLogSkippingOrder;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RunWithoutDevicesColumn {
                get {
                    return this.columnRunWithoutDevices;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DisablePreloadingRecorderAfterPrinterLoadColumn {
                get {
                    return this.columnDisablePreloadingRecorderAfterPrinterLoad;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DisableCacheLockingColumn {
                get {
                    return this.columnDisableCacheLocking;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EnableCacheLimitingColumn {
                get {
                    return this.columnEnableCacheLimiting;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SkipSerialPortForAutoloaderColumn {
                get {
                    return this.columnSkipSerialPortForAutoloader;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SkipDriveForReaderRecorderCacheColumn {
                get {
                    return this.columnSkipDriveForReaderRecorderCache;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UseDelayBeforeMainWindowColumn {
                get {
                    return this.columnUseDelayBeforeMainWindow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserParallelPortForPrismColumn {
                get {
                    return this.columnUserParallelPortForPrism;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DisableDriverNameInRenderingColumn {
                get {
                    return this.columnDisableDriverNameInRendering;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DisableImageSizeCheckingColumn {
                get {
                    return this.columnDisableImageSizeChecking;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ServerStatus_IdColumn {
                get {
                    return this.columnServerStatus_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SwitchesRow this[int index] {
                get {
                    return ((SwitchesRow)(this.Rows[index]));
                }
            }
            
            public event SwitchesRowChangeEventHandler SwitchesRowChanging;
            
            public event SwitchesRowChangeEventHandler SwitchesRowChanged;
            
            public event SwitchesRowChangeEventHandler SwitchesRowDeleting;
            
            public event SwitchesRowChangeEventHandler SwitchesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSwitchesRow(SwitchesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SwitchesRow AddSwitchesRow(
                        string ManufacturingTestMode, 
                        string VerifyOnlyMode, 
                        string NoLogLimit, 
                        string SetupMode, 
                        string DirectImaging, 
                        string SkipOrderUpdate, 
                        string AutoThroughPutMeasurement, 
                        string TimingLogged, 
                        string PreLoadBartender, 
                        string SkipCaching, 
                        string SkipOrderStatusUpdates, 
                        string PrintOnlyMode, 
                        string SkipAutoloaderScanning, 
                        string PrintBeforeRecording, 
                        string UseDriveLettersForRecorders, 
                        string TraceSCSICommands, 
                        string TraceReadWriteCommands, 
                        string TraceSerialCommands, 
                        string TraceLabelAndPrinting, 
                        string TraceXMLMessages, 
                        string LogSkippingOrder, 
                        string RunWithoutDevices, 
                        string DisablePreloadingRecorderAfterPrinterLoad, 
                        string DisableCacheLocking, 
                        string EnableCacheLimiting, 
                        string SkipSerialPortForAutoloader, 
                        string SkipDriveForReaderRecorderCache, 
                        string UseDelayBeforeMainWindow, 
                        string UserParallelPortForPrism, 
                        string DisableDriverNameInRendering, 
                        string DisableImageSizeChecking, 
                        ServerStatusRow parentServerStatusRowByServerStatus_Switches) {
                SwitchesRow rowSwitchesRow = ((SwitchesRow)(this.NewRow()));
                rowSwitchesRow.ItemArray = new object[] {
                        ManufacturingTestMode,
                        VerifyOnlyMode,
                        NoLogLimit,
                        SetupMode,
                        DirectImaging,
                        SkipOrderUpdate,
                        AutoThroughPutMeasurement,
                        TimingLogged,
                        PreLoadBartender,
                        SkipCaching,
                        SkipOrderStatusUpdates,
                        PrintOnlyMode,
                        SkipAutoloaderScanning,
                        PrintBeforeRecording,
                        UseDriveLettersForRecorders,
                        TraceSCSICommands,
                        TraceReadWriteCommands,
                        TraceSerialCommands,
                        TraceLabelAndPrinting,
                        TraceXMLMessages,
                        LogSkippingOrder,
                        RunWithoutDevices,
                        DisablePreloadingRecorderAfterPrinterLoad,
                        DisableCacheLocking,
                        EnableCacheLimiting,
                        SkipSerialPortForAutoloader,
                        SkipDriveForReaderRecorderCache,
                        UseDelayBeforeMainWindow,
                        UserParallelPortForPrism,
                        DisableDriverNameInRendering,
                        DisableImageSizeChecking,
                        parentServerStatusRowByServerStatus_Switches[0]};
                this.Rows.Add(rowSwitchesRow);
                return rowSwitchesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SwitchesDataTable cln = ((SwitchesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SwitchesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnManufacturingTestMode = base.Columns["ManufacturingTestMode"];
                this.columnVerifyOnlyMode = base.Columns["VerifyOnlyMode"];
                this.columnNoLogLimit = base.Columns["NoLogLimit"];
                this.columnSetupMode = base.Columns["SetupMode"];
                this.columnDirectImaging = base.Columns["DirectImaging"];
                this.columnSkipOrderUpdate = base.Columns["SkipOrderUpdate"];
                this.columnAutoThroughPutMeasurement = base.Columns["AutoThroughPutMeasurement"];
                this.columnTimingLogged = base.Columns["TimingLogged"];
                this.columnPreLoadBartender = base.Columns["PreLoadBartender"];
                this.columnSkipCaching = base.Columns["SkipCaching"];
                this.columnSkipOrderStatusUpdates = base.Columns["SkipOrderStatusUpdates"];
                this.columnPrintOnlyMode = base.Columns["PrintOnlyMode"];
                this.columnSkipAutoloaderScanning = base.Columns["SkipAutoloaderScanning"];
                this.columnPrintBeforeRecording = base.Columns["PrintBeforeRecording"];
                this.columnUseDriveLettersForRecorders = base.Columns["UseDriveLettersForRecorders"];
                this.columnTraceSCSICommands = base.Columns["TraceSCSICommands"];
                this.columnTraceReadWriteCommands = base.Columns["TraceReadWriteCommands"];
                this.columnTraceSerialCommands = base.Columns["TraceSerialCommands"];
                this.columnTraceLabelAndPrinting = base.Columns["TraceLabelAndPrinting"];
                this.columnTraceXMLMessages = base.Columns["TraceXMLMessages"];
                this.columnLogSkippingOrder = base.Columns["LogSkippingOrder"];
                this.columnRunWithoutDevices = base.Columns["RunWithoutDevices"];
                this.columnDisablePreloadingRecorderAfterPrinterLoad = base.Columns["DisablePreloadingRecorderAfterPrinterLoad"];
                this.columnDisableCacheLocking = base.Columns["DisableCacheLocking"];
                this.columnEnableCacheLimiting = base.Columns["EnableCacheLimiting"];
                this.columnSkipSerialPortForAutoloader = base.Columns["SkipSerialPortForAutoloader"];
                this.columnSkipDriveForReaderRecorderCache = base.Columns["SkipDriveForReaderRecorderCache"];
                this.columnUseDelayBeforeMainWindow = base.Columns["UseDelayBeforeMainWindow"];
                this.columnUserParallelPortForPrism = base.Columns["UserParallelPortForPrism"];
                this.columnDisableDriverNameInRendering = base.Columns["DisableDriverNameInRendering"];
                this.columnDisableImageSizeChecking = base.Columns["DisableImageSizeChecking"];
                this.columnServerStatus_Id = base.Columns["ServerStatus_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnManufacturingTestMode = new System.Data.DataColumn("ManufacturingTestMode", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnManufacturingTestMode);
                this.columnVerifyOnlyMode = new System.Data.DataColumn("VerifyOnlyMode", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnVerifyOnlyMode);
                this.columnNoLogLimit = new System.Data.DataColumn("NoLogLimit", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNoLogLimit);
                this.columnSetupMode = new System.Data.DataColumn("SetupMode", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSetupMode);
                this.columnDirectImaging = new System.Data.DataColumn("DirectImaging", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDirectImaging);
                this.columnSkipOrderUpdate = new System.Data.DataColumn("SkipOrderUpdate", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSkipOrderUpdate);
                this.columnAutoThroughPutMeasurement = new System.Data.DataColumn("AutoThroughPutMeasurement", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAutoThroughPutMeasurement);
                this.columnTimingLogged = new System.Data.DataColumn("TimingLogged", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTimingLogged);
                this.columnPreLoadBartender = new System.Data.DataColumn("PreLoadBartender", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPreLoadBartender);
                this.columnSkipCaching = new System.Data.DataColumn("SkipCaching", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSkipCaching);
                this.columnSkipOrderStatusUpdates = new System.Data.DataColumn("SkipOrderStatusUpdates", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSkipOrderStatusUpdates);
                this.columnPrintOnlyMode = new System.Data.DataColumn("PrintOnlyMode", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPrintOnlyMode);
                this.columnSkipAutoloaderScanning = new System.Data.DataColumn("SkipAutoloaderScanning", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSkipAutoloaderScanning);
                this.columnPrintBeforeRecording = new System.Data.DataColumn("PrintBeforeRecording", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPrintBeforeRecording);
                this.columnUseDriveLettersForRecorders = new System.Data.DataColumn("UseDriveLettersForRecorders", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseDriveLettersForRecorders);
                this.columnTraceSCSICommands = new System.Data.DataColumn("TraceSCSICommands", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTraceSCSICommands);
                this.columnTraceReadWriteCommands = new System.Data.DataColumn("TraceReadWriteCommands", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTraceReadWriteCommands);
                this.columnTraceSerialCommands = new System.Data.DataColumn("TraceSerialCommands", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTraceSerialCommands);
                this.columnTraceLabelAndPrinting = new System.Data.DataColumn("TraceLabelAndPrinting", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTraceLabelAndPrinting);
                this.columnTraceXMLMessages = new System.Data.DataColumn("TraceXMLMessages", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTraceXMLMessages);
                this.columnLogSkippingOrder = new System.Data.DataColumn("LogSkippingOrder", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLogSkippingOrder);
                this.columnRunWithoutDevices = new System.Data.DataColumn("RunWithoutDevices", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRunWithoutDevices);
                this.columnDisablePreloadingRecorderAfterPrinterLoad = new System.Data.DataColumn("DisablePreloadingRecorderAfterPrinterLoad", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDisablePreloadingRecorderAfterPrinterLoad);
                this.columnDisableCacheLocking = new System.Data.DataColumn("DisableCacheLocking", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDisableCacheLocking);
                this.columnEnableCacheLimiting = new System.Data.DataColumn("EnableCacheLimiting", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEnableCacheLimiting);
                this.columnSkipSerialPortForAutoloader = new System.Data.DataColumn("SkipSerialPortForAutoloader", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSkipSerialPortForAutoloader);
                this.columnSkipDriveForReaderRecorderCache = new System.Data.DataColumn("SkipDriveForReaderRecorderCache", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSkipDriveForReaderRecorderCache);
                this.columnUseDelayBeforeMainWindow = new System.Data.DataColumn("UseDelayBeforeMainWindow", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseDelayBeforeMainWindow);
                this.columnUserParallelPortForPrism = new System.Data.DataColumn("UserParallelPortForPrism", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUserParallelPortForPrism);
                this.columnDisableDriverNameInRendering = new System.Data.DataColumn("DisableDriverNameInRendering", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDisableDriverNameInRendering);
                this.columnDisableImageSizeChecking = new System.Data.DataColumn("DisableImageSizeChecking", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDisableImageSizeChecking);
                this.columnServerStatus_Id = new System.Data.DataColumn("ServerStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnServerStatus_Id);
                this.columnManufacturingTestMode.Namespace = "";
                this.columnManufacturingTestMode.DefaultValue = ((string)("false"));
                this.columnVerifyOnlyMode.Namespace = "";
                this.columnVerifyOnlyMode.DefaultValue = ((string)("false"));
                this.columnNoLogLimit.Namespace = "";
                this.columnNoLogLimit.DefaultValue = ((string)("false"));
                this.columnSetupMode.Namespace = "";
                this.columnSetupMode.DefaultValue = ((string)("false"));
                this.columnDirectImaging.Namespace = "";
                this.columnDirectImaging.DefaultValue = ((string)("false"));
                this.columnSkipOrderUpdate.Namespace = "";
                this.columnSkipOrderUpdate.DefaultValue = ((string)("false"));
                this.columnAutoThroughPutMeasurement.Namespace = "";
                this.columnAutoThroughPutMeasurement.DefaultValue = ((string)("false"));
                this.columnTimingLogged.Namespace = "";
                this.columnTimingLogged.DefaultValue = ((string)("false"));
                this.columnPreLoadBartender.Namespace = "";
                this.columnPreLoadBartender.DefaultValue = ((string)("false"));
                this.columnSkipCaching.Namespace = "";
                this.columnSkipCaching.DefaultValue = ((string)("false"));
                this.columnSkipOrderStatusUpdates.Namespace = "";
                this.columnSkipOrderStatusUpdates.DefaultValue = ((string)("false"));
                this.columnPrintOnlyMode.Namespace = "";
                this.columnPrintOnlyMode.DefaultValue = ((string)("false"));
                this.columnSkipAutoloaderScanning.Namespace = "";
                this.columnSkipAutoloaderScanning.DefaultValue = ((string)("false"));
                this.columnPrintBeforeRecording.Namespace = "";
                this.columnPrintBeforeRecording.DefaultValue = ((string)("false"));
                this.columnUseDriveLettersForRecorders.Namespace = "";
                this.columnUseDriveLettersForRecorders.DefaultValue = ((string)("false"));
                this.columnTraceSCSICommands.Namespace = "";
                this.columnTraceSCSICommands.DefaultValue = ((string)("false"));
                this.columnTraceReadWriteCommands.Namespace = "";
                this.columnTraceReadWriteCommands.DefaultValue = ((string)("false"));
                this.columnTraceSerialCommands.Namespace = "";
                this.columnTraceSerialCommands.DefaultValue = ((string)("false"));
                this.columnTraceLabelAndPrinting.Namespace = "";
                this.columnTraceLabelAndPrinting.DefaultValue = ((string)("false"));
                this.columnTraceXMLMessages.Namespace = "";
                this.columnTraceXMLMessages.DefaultValue = ((string)("false"));
                this.columnLogSkippingOrder.Namespace = "";
                this.columnLogSkippingOrder.DefaultValue = ((string)("false"));
                this.columnRunWithoutDevices.Namespace = "";
                this.columnRunWithoutDevices.DefaultValue = ((string)("false"));
                this.columnDisablePreloadingRecorderAfterPrinterLoad.Namespace = "";
                this.columnDisablePreloadingRecorderAfterPrinterLoad.DefaultValue = ((string)("false"));
                this.columnDisableCacheLocking.Namespace = "";
                this.columnDisableCacheLocking.DefaultValue = ((string)("false"));
                this.columnEnableCacheLimiting.Namespace = "";
                this.columnEnableCacheLimiting.DefaultValue = ((string)("false"));
                this.columnSkipSerialPortForAutoloader.Namespace = "";
                this.columnSkipSerialPortForAutoloader.DefaultValue = ((string)("false"));
                this.columnSkipDriveForReaderRecorderCache.Namespace = "";
                this.columnSkipDriveForReaderRecorderCache.DefaultValue = ((string)("false"));
                this.columnUseDelayBeforeMainWindow.Namespace = "";
                this.columnUseDelayBeforeMainWindow.DefaultValue = ((string)("false"));
                this.columnUserParallelPortForPrism.Namespace = "";
                this.columnUserParallelPortForPrism.DefaultValue = ((string)("false"));
                this.columnDisableDriverNameInRendering.Namespace = "";
                this.columnDisableDriverNameInRendering.DefaultValue = ((string)("false"));
                this.columnDisableImageSizeChecking.Namespace = "";
                this.columnDisableImageSizeChecking.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SwitchesRow NewSwitchesRow() {
                return ((SwitchesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SwitchesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SwitchesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SwitchesRowChanged != null)) {
                    this.SwitchesRowChanged(this, new SwitchesRowChangeEvent(((SwitchesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SwitchesRowChanging != null)) {
                    this.SwitchesRowChanging(this, new SwitchesRowChangeEvent(((SwitchesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SwitchesRowDeleted != null)) {
                    this.SwitchesRowDeleted(this, new SwitchesRowChangeEvent(((SwitchesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SwitchesRowDeleting != null)) {
                    this.SwitchesRowDeleting(this, new SwitchesRowChangeEvent(((SwitchesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSwitchesRow(SwitchesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ServerReply ds = new ServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SwitchesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OrderListDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnAutomation;
            
            private System.Data.DataColumn columnCluster;
            
            private System.Data.DataColumn columnNumberOfOrders;
            
            private System.Data.DataColumn columnStatusTime;
            
            private System.Data.DataColumn columnOrderList_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderListDataTable() {
                this.TableName = "OrderList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OrderListDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OrderListDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AutomationColumn {
                get {
                    return this.columnAutomation;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClusterColumn {
                get {
                    return this.columnCluster;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberOfOrdersColumn {
                get {
                    return this.columnNumberOfOrders;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StatusTimeColumn {
                get {
                    return this.columnStatusTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrderList_IdColumn {
                get {
                    return this.columnOrderList_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderListRow this[int index] {
                get {
                    return ((OrderListRow)(this.Rows[index]));
                }
            }
            
            public event OrderListRowChangeEventHandler OrderListRowChanging;
            
            public event OrderListRowChangeEventHandler OrderListRowChanged;
            
            public event OrderListRowChangeEventHandler OrderListRowDeleting;
            
            public event OrderListRowChangeEventHandler OrderListRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOrderListRow(OrderListRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderListRow AddOrderListRow(string Automation, string Cluster, string NumberOfOrders, string StatusTime) {
                OrderListRow rowOrderListRow = ((OrderListRow)(this.NewRow()));
                rowOrderListRow.ItemArray = new object[] {
                        Automation,
                        Cluster,
                        NumberOfOrders,
                        StatusTime,
                        null};
                this.Rows.Add(rowOrderListRow);
                return rowOrderListRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                OrderListDataTable cln = ((OrderListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new OrderListDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAutomation = base.Columns["Automation"];
                this.columnCluster = base.Columns["Cluster"];
                this.columnNumberOfOrders = base.Columns["NumberOfOrders"];
                this.columnStatusTime = base.Columns["StatusTime"];
                this.columnOrderList_Id = base.Columns["OrderList_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAutomation = new System.Data.DataColumn("Automation", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAutomation);
                this.columnCluster = new System.Data.DataColumn("Cluster", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCluster);
                this.columnNumberOfOrders = new System.Data.DataColumn("NumberOfOrders", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNumberOfOrders);
                this.columnStatusTime = new System.Data.DataColumn("StatusTime", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnStatusTime);
                this.columnOrderList_Id = new System.Data.DataColumn("OrderList_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnOrderList_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnOrderList_Id}, true));
                this.columnAutomation.AllowDBNull = false;
                this.columnAutomation.Namespace = "";
                this.columnCluster.AllowDBNull = false;
                this.columnCluster.Namespace = "";
                this.columnNumberOfOrders.AllowDBNull = false;
                this.columnNumberOfOrders.Namespace = "";
                this.columnStatusTime.AllowDBNull = false;
                this.columnStatusTime.Namespace = "";
                this.columnOrderList_Id.AutoIncrement = true;
                this.columnOrderList_Id.AllowDBNull = false;
                this.columnOrderList_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderListRow NewOrderListRow() {
                return ((OrderListRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OrderListRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(OrderListRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OrderListRowChanged != null)) {
                    this.OrderListRowChanged(this, new OrderListRowChangeEvent(((OrderListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OrderListRowChanging != null)) {
                    this.OrderListRowChanging(this, new OrderListRowChangeEvent(((OrderListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OrderListRowDeleted != null)) {
                    this.OrderListRowDeleted(this, new OrderListRowChangeEvent(((OrderListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OrderListRowDeleting != null)) {
                    this.OrderListRowDeleting(this, new OrderListRowChangeEvent(((OrderListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOrderListRow(OrderListRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ServerReply ds = new ServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OrderListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProductionOrderDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnOrderId;
            
            private System.Data.DataColumn columnClientId;
            
            private System.Data.DataColumn columnOrderType;
            
            private System.Data.DataColumn columnMediaType;
            
            private System.Data.DataColumn columnMediaSize;
            
            private System.Data.DataColumn columnOrderState;
            
            private System.Data.DataColumn columnOrderStage;
            
            private System.Data.DataColumn columnCopiesRequested;
            
            private System.Data.DataColumn columnCopiesCompleted;
            
            private System.Data.DataColumn columnPercentCompleted;
            
            private System.Data.DataColumn columnOrderList_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionOrderDataTable() {
                this.TableName = "ProductionOrder";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductionOrderDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProductionOrderDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrderIdColumn {
                get {
                    return this.columnOrderId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClientIdColumn {
                get {
                    return this.columnClientId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrderTypeColumn {
                get {
                    return this.columnOrderType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MediaTypeColumn {
                get {
                    return this.columnMediaType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MediaSizeColumn {
                get {
                    return this.columnMediaSize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrderStateColumn {
                get {
                    return this.columnOrderState;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrderStageColumn {
                get {
                    return this.columnOrderStage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CopiesRequestedColumn {
                get {
                    return this.columnCopiesRequested;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CopiesCompletedColumn {
                get {
                    return this.columnCopiesCompleted;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PercentCompletedColumn {
                get {
                    return this.columnPercentCompleted;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrderList_IdColumn {
                get {
                    return this.columnOrderList_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionOrderRow this[int index] {
                get {
                    return ((ProductionOrderRow)(this.Rows[index]));
                }
            }
            
            public event ProductionOrderRowChangeEventHandler ProductionOrderRowChanging;
            
            public event ProductionOrderRowChangeEventHandler ProductionOrderRowChanged;
            
            public event ProductionOrderRowChangeEventHandler ProductionOrderRowDeleting;
            
            public event ProductionOrderRowChangeEventHandler ProductionOrderRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProductionOrderRow(ProductionOrderRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionOrderRow AddProductionOrderRow(string OrderId, string ClientId, string OrderType, string MediaType, string MediaSize, string OrderState, string OrderStage, string CopiesRequested, string CopiesCompleted, string PercentCompleted, OrderListRow parentOrderListRowByOrderList_ProductionOrder) {
                ProductionOrderRow rowProductionOrderRow = ((ProductionOrderRow)(this.NewRow()));
                rowProductionOrderRow.ItemArray = new object[] {
                        OrderId,
                        ClientId,
                        OrderType,
                        MediaType,
                        MediaSize,
                        OrderState,
                        OrderStage,
                        CopiesRequested,
                        CopiesCompleted,
                        PercentCompleted,
                        parentOrderListRowByOrderList_ProductionOrder[4]};
                this.Rows.Add(rowProductionOrderRow);
                return rowProductionOrderRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ProductionOrderDataTable cln = ((ProductionOrderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ProductionOrderDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOrderId = base.Columns["OrderId"];
                this.columnClientId = base.Columns["ClientId"];
                this.columnOrderType = base.Columns["OrderType"];
                this.columnMediaType = base.Columns["MediaType"];
                this.columnMediaSize = base.Columns["MediaSize"];
                this.columnOrderState = base.Columns["OrderState"];
                this.columnOrderStage = base.Columns["OrderStage"];
                this.columnCopiesRequested = base.Columns["CopiesRequested"];
                this.columnCopiesCompleted = base.Columns["CopiesCompleted"];
                this.columnPercentCompleted = base.Columns["PercentCompleted"];
                this.columnOrderList_Id = base.Columns["OrderList_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOrderId = new System.Data.DataColumn("OrderId", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOrderId);
                this.columnClientId = new System.Data.DataColumn("ClientId", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnClientId);
                this.columnOrderType = new System.Data.DataColumn("OrderType", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOrderType);
                this.columnMediaType = new System.Data.DataColumn("MediaType", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMediaType);
                this.columnMediaSize = new System.Data.DataColumn("MediaSize", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMediaSize);
                this.columnOrderState = new System.Data.DataColumn("OrderState", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOrderState);
                this.columnOrderStage = new System.Data.DataColumn("OrderStage", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOrderStage);
                this.columnCopiesRequested = new System.Data.DataColumn("CopiesRequested", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCopiesRequested);
                this.columnCopiesCompleted = new System.Data.DataColumn("CopiesCompleted", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCopiesCompleted);
                this.columnPercentCompleted = new System.Data.DataColumn("PercentCompleted", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPercentCompleted);
                this.columnOrderList_Id = new System.Data.DataColumn("OrderList_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnOrderList_Id);
                this.columnOrderId.AllowDBNull = false;
                this.columnOrderId.Namespace = "";
                this.columnClientId.AllowDBNull = false;
                this.columnClientId.Namespace = "";
                this.columnOrderType.Namespace = "";
                this.columnOrderType.DefaultValue = ((string)("Write"));
                this.columnMediaType.Namespace = "";
                this.columnMediaType.DefaultValue = ((string)("CDR"));
                this.columnMediaSize.Namespace = "";
                this.columnMediaSize.DefaultValue = ((string)("120mm"));
                this.columnOrderState.Namespace = "";
                this.columnOrderState.DefaultValue = ((string)("Waiting"));
                this.columnOrderStage.AllowDBNull = false;
                this.columnOrderStage.Namespace = "";
                this.columnCopiesRequested.AllowDBNull = false;
                this.columnCopiesRequested.Namespace = "";
                this.columnCopiesCompleted.AllowDBNull = false;
                this.columnCopiesCompleted.Namespace = "";
                this.columnPercentCompleted.AllowDBNull = false;
                this.columnPercentCompleted.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionOrderRow NewProductionOrderRow() {
                return ((ProductionOrderRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ProductionOrderRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ProductionOrderRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProductionOrderRowChanged != null)) {
                    this.ProductionOrderRowChanged(this, new ProductionOrderRowChangeEvent(((ProductionOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProductionOrderRowChanging != null)) {
                    this.ProductionOrderRowChanging(this, new ProductionOrderRowChangeEvent(((ProductionOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProductionOrderRowDeleted != null)) {
                    this.ProductionOrderRowDeleted(this, new ProductionOrderRowChangeEvent(((ProductionOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProductionOrderRowDeleting != null)) {
                    this.ProductionOrderRowDeleting(this, new ProductionOrderRowChangeEvent(((ProductionOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProductionOrderRow(ProductionOrderRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ServerReply ds = new ServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProductionOrderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ImagingOrderDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnOrderList_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagingOrderDataTable() {
                this.TableName = "ImagingOrder";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ImagingOrderDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ImagingOrderDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrderList_IdColumn {
                get {
                    return this.columnOrderList_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagingOrderRow this[int index] {
                get {
                    return ((ImagingOrderRow)(this.Rows[index]));
                }
            }
            
            public event ImagingOrderRowChangeEventHandler ImagingOrderRowChanging;
            
            public event ImagingOrderRowChangeEventHandler ImagingOrderRowChanged;
            
            public event ImagingOrderRowChangeEventHandler ImagingOrderRowDeleting;
            
            public event ImagingOrderRowChangeEventHandler ImagingOrderRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddImagingOrderRow(ImagingOrderRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagingOrderRow AddImagingOrderRow(OrderListRow parentOrderListRowByOrderList_ImagingOrder) {
                ImagingOrderRow rowImagingOrderRow = ((ImagingOrderRow)(this.NewRow()));
                rowImagingOrderRow.ItemArray = new object[] {
                        parentOrderListRowByOrderList_ImagingOrder[4]};
                this.Rows.Add(rowImagingOrderRow);
                return rowImagingOrderRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ImagingOrderDataTable cln = ((ImagingOrderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ImagingOrderDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOrderList_Id = base.Columns["OrderList_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOrderList_Id = new System.Data.DataColumn("OrderList_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnOrderList_Id);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagingOrderRow NewImagingOrderRow() {
                return ((ImagingOrderRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ImagingOrderRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ImagingOrderRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ImagingOrderRowChanged != null)) {
                    this.ImagingOrderRowChanged(this, new ImagingOrderRowChangeEvent(((ImagingOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ImagingOrderRowChanging != null)) {
                    this.ImagingOrderRowChanging(this, new ImagingOrderRowChangeEvent(((ImagingOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ImagingOrderRowDeleted != null)) {
                    this.ImagingOrderRowDeleted(this, new ImagingOrderRowChangeEvent(((ImagingOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ImagingOrderRowDeleting != null)) {
                    this.ImagingOrderRowDeleting(this, new ImagingOrderRowChangeEvent(((ImagingOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveImagingOrderRow(ImagingOrderRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ServerReply ds = new ServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ImagingOrderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SessionLogDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnNumberOfEntries;
            
            private System.Data.DataColumn columnSessionLog_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionLogDataTable() {
                this.TableName = "SessionLog";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SessionLogDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SessionLogDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberOfEntriesColumn {
                get {
                    return this.columnNumberOfEntries;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SessionLog_IdColumn {
                get {
                    return this.columnSessionLog_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionLogRow this[int index] {
                get {
                    return ((SessionLogRow)(this.Rows[index]));
                }
            }
            
            public event SessionLogRowChangeEventHandler SessionLogRowChanging;
            
            public event SessionLogRowChangeEventHandler SessionLogRowChanged;
            
            public event SessionLogRowChangeEventHandler SessionLogRowDeleting;
            
            public event SessionLogRowChangeEventHandler SessionLogRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSessionLogRow(SessionLogRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionLogRow AddSessionLogRow(string NumberOfEntries) {
                SessionLogRow rowSessionLogRow = ((SessionLogRow)(this.NewRow()));
                rowSessionLogRow.ItemArray = new object[] {
                        NumberOfEntries,
                        null};
                this.Rows.Add(rowSessionLogRow);
                return rowSessionLogRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SessionLogDataTable cln = ((SessionLogDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SessionLogDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNumberOfEntries = base.Columns["NumberOfEntries"];
                this.columnSessionLog_Id = base.Columns["SessionLog_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNumberOfEntries = new System.Data.DataColumn("NumberOfEntries", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNumberOfEntries);
                this.columnSessionLog_Id = new System.Data.DataColumn("SessionLog_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSessionLog_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnSessionLog_Id}, true));
                this.columnNumberOfEntries.AllowDBNull = false;
                this.columnNumberOfEntries.Namespace = "";
                this.columnSessionLog_Id.AutoIncrement = true;
                this.columnSessionLog_Id.AllowDBNull = false;
                this.columnSessionLog_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionLogRow NewSessionLogRow() {
                return ((SessionLogRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SessionLogRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SessionLogRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SessionLogRowChanged != null)) {
                    this.SessionLogRowChanged(this, new SessionLogRowChangeEvent(((SessionLogRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SessionLogRowChanging != null)) {
                    this.SessionLogRowChanging(this, new SessionLogRowChangeEvent(((SessionLogRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SessionLogRowDeleted != null)) {
                    this.SessionLogRowDeleted(this, new SessionLogRowChangeEvent(((SessionLogRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SessionLogRowDeleting != null)) {
                    this.SessionLogRowDeleting(this, new SessionLogRowChangeEvent(((SessionLogRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSessionLogRow(SessionLogRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ServerReply ds = new ServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SessionLogDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EntryDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnText;
            
            private System.Data.DataColumn columnTimestamp;
            
            private System.Data.DataColumn columnErrorcode;
            
            private System.Data.DataColumn columnSessionLog_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntryDataTable() {
                this.TableName = "Entry";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EntryDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EntryDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TextColumn {
                get {
                    return this.columnText;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimestampColumn {
                get {
                    return this.columnTimestamp;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ErrorcodeColumn {
                get {
                    return this.columnErrorcode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SessionLog_IdColumn {
                get {
                    return this.columnSessionLog_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntryRow this[int index] {
                get {
                    return ((EntryRow)(this.Rows[index]));
                }
            }
            
            public event EntryRowChangeEventHandler EntryRowChanging;
            
            public event EntryRowChangeEventHandler EntryRowChanged;
            
            public event EntryRowChangeEventHandler EntryRowDeleting;
            
            public event EntryRowChangeEventHandler EntryRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEntryRow(EntryRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntryRow AddEntryRow(string Text, string Timestamp, string Errorcode, SessionLogRow parentSessionLogRowBySessionLog_Entry) {
                EntryRow rowEntryRow = ((EntryRow)(this.NewRow()));
                rowEntryRow.ItemArray = new object[] {
                        Text,
                        Timestamp,
                        Errorcode,
                        parentSessionLogRowBySessionLog_Entry[1]};
                this.Rows.Add(rowEntryRow);
                return rowEntryRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EntryDataTable cln = ((EntryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EntryDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnText = base.Columns["Text"];
                this.columnTimestamp = base.Columns["Timestamp"];
                this.columnErrorcode = base.Columns["Errorcode"];
                this.columnSessionLog_Id = base.Columns["SessionLog_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnText = new System.Data.DataColumn("Text", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnText);
                this.columnTimestamp = new System.Data.DataColumn("Timestamp", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTimestamp);
                this.columnErrorcode = new System.Data.DataColumn("Errorcode", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnErrorcode);
                this.columnSessionLog_Id = new System.Data.DataColumn("SessionLog_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSessionLog_Id);
                this.columnText.AllowDBNull = false;
                this.columnText.Namespace = "";
                this.columnTimestamp.AllowDBNull = false;
                this.columnTimestamp.Namespace = "";
                this.columnErrorcode.AllowDBNull = false;
                this.columnErrorcode.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntryRow NewEntryRow() {
                return ((EntryRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EntryRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EntryRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EntryRowChanged != null)) {
                    this.EntryRowChanged(this, new EntryRowChangeEvent(((EntryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EntryRowChanging != null)) {
                    this.EntryRowChanging(this, new EntryRowChangeEvent(((EntryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EntryRowDeleted != null)) {
                    this.EntryRowDeleted(this, new EntryRowChangeEvent(((EntryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EntryRowDeleting != null)) {
                    this.EntryRowDeleting(this, new EntryRowChangeEvent(((EntryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEntryRow(EntryRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ServerReply ds = new ServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EntryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DialogActionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDialogId;
            
            private System.Data.DataColumn columnButton;
            
            private System.Data.DataColumn columnName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DialogActionDataTable() {
                this.TableName = "DialogAction";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DialogActionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DialogActionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DialogIdColumn {
                get {
                    return this.columnDialogId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ButtonColumn {
                get {
                    return this.columnButton;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DialogActionRow this[int index] {
                get {
                    return ((DialogActionRow)(this.Rows[index]));
                }
            }
            
            public event DialogActionRowChangeEventHandler DialogActionRowChanging;
            
            public event DialogActionRowChangeEventHandler DialogActionRowChanged;
            
            public event DialogActionRowChangeEventHandler DialogActionRowDeleting;
            
            public event DialogActionRowChangeEventHandler DialogActionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDialogActionRow(DialogActionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DialogActionRow AddDialogActionRow(string DialogId, string Button, string Name) {
                DialogActionRow rowDialogActionRow = ((DialogActionRow)(this.NewRow()));
                rowDialogActionRow.ItemArray = new object[] {
                        DialogId,
                        Button,
                        Name};
                this.Rows.Add(rowDialogActionRow);
                return rowDialogActionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DialogActionDataTable cln = ((DialogActionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DialogActionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDialogId = base.Columns["DialogId"];
                this.columnButton = base.Columns["Button"];
                this.columnName = base.Columns["Name"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDialogId = new System.Data.DataColumn("DialogId", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDialogId);
                this.columnButton = new System.Data.DataColumn("Button", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnButton);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnDialogId.AllowDBNull = false;
                this.columnDialogId.Namespace = "";
                this.columnButton.AllowDBNull = false;
                this.columnButton.Namespace = "";
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DialogActionRow NewDialogActionRow() {
                return ((DialogActionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DialogActionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DialogActionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DialogActionRowChanged != null)) {
                    this.DialogActionRowChanged(this, new DialogActionRowChangeEvent(((DialogActionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DialogActionRowChanging != null)) {
                    this.DialogActionRowChanging(this, new DialogActionRowChangeEvent(((DialogActionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DialogActionRowDeleted != null)) {
                    this.DialogActionRowDeleted(this, new DialogActionRowChangeEvent(((DialogActionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DialogActionRowDeleting != null)) {
                    this.DialogActionRowDeleting(this, new DialogActionRowChangeEvent(((DialogActionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDialogActionRow(DialogActionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ServerReply ds = new ServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DialogActionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProductionParameterSettingsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnProductionParameterSettings_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsDataTable() {
                this.TableName = "ProductionParameterSettings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductionParameterSettingsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProductionParameterSettingsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsRow this[int index] {
                get {
                    return ((ProductionParameterSettingsRow)(this.Rows[index]));
                }
            }
            
            public event ProductionParameterSettingsRowChangeEventHandler ProductionParameterSettingsRowChanging;
            
            public event ProductionParameterSettingsRowChangeEventHandler ProductionParameterSettingsRowChanged;
            
            public event ProductionParameterSettingsRowChangeEventHandler ProductionParameterSettingsRowDeleting;
            
            public event ProductionParameterSettingsRowChangeEventHandler ProductionParameterSettingsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProductionParameterSettingsRow(ProductionParameterSettingsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsRow AddProductionParameterSettingsRow() {
                ProductionParameterSettingsRow rowProductionParameterSettingsRow = ((ProductionParameterSettingsRow)(this.NewRow()));
                rowProductionParameterSettingsRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowProductionParameterSettingsRow);
                return rowProductionParameterSettingsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ProductionParameterSettingsDataTable cln = ((ProductionParameterSettingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ProductionParameterSettingsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProductionParameterSettings_Id = base.Columns["ProductionParameterSettings_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProductionParameterSettings_Id = new System.Data.DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProductionParameterSettings_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnProductionParameterSettings_Id}, true));
                this.columnProductionParameterSettings_Id.AutoIncrement = true;
                this.columnProductionParameterSettings_Id.AllowDBNull = false;
                this.columnProductionParameterSettings_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsRow NewProductionParameterSettingsRow() {
                return ((ProductionParameterSettingsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ProductionParameterSettingsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ProductionParameterSettingsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProductionParameterSettingsRowChanged != null)) {
                    this.ProductionParameterSettingsRowChanged(this, new ProductionParameterSettingsRowChangeEvent(((ProductionParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProductionParameterSettingsRowChanging != null)) {
                    this.ProductionParameterSettingsRowChanging(this, new ProductionParameterSettingsRowChangeEvent(((ProductionParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProductionParameterSettingsRowDeleted != null)) {
                    this.ProductionParameterSettingsRowDeleted(this, new ProductionParameterSettingsRowChangeEvent(((ProductionParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProductionParameterSettingsRowDeleting != null)) {
                    this.ProductionParameterSettingsRowDeleting(this, new ProductionParameterSettingsRowChangeEvent(((ProductionParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProductionParameterSettingsRow(ProductionParameterSettingsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ServerReply ds = new ServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProductionParameterSettingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServerDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDescription;
            
            private System.Data.DataColumn columnServerMode;
            
            private System.Data.DataColumn columnUseFIFO;
            
            private System.Data.DataColumn columnCluster;
            
            private System.Data.DataColumn columnProductionParameterSettings_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerDataTable() {
                this.TableName = "Server";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServerDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ServerModeColumn {
                get {
                    return this.columnServerMode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UseFIFOColumn {
                get {
                    return this.columnUseFIFO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClusterColumn {
                get {
                    return this.columnCluster;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerRow this[int index] {
                get {
                    return ((ServerRow)(this.Rows[index]));
                }
            }
            
            public event ServerRowChangeEventHandler ServerRowChanging;
            
            public event ServerRowChangeEventHandler ServerRowChanged;
            
            public event ServerRowChangeEventHandler ServerRowDeleting;
            
            public event ServerRowChangeEventHandler ServerRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServerRow(ServerRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerRow AddServerRow(string Description, string ServerMode, string UseFIFO, string Cluster, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Server) {
                ServerRow rowServerRow = ((ServerRow)(this.NewRow()));
                rowServerRow.ItemArray = new object[] {
                        Description,
                        ServerMode,
                        UseFIFO,
                        Cluster,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Server[0]};
                this.Rows.Add(rowServerRow);
                return rowServerRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ServerDataTable cln = ((ServerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ServerDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDescription = base.Columns["Description"];
                this.columnServerMode = base.Columns["ServerMode"];
                this.columnUseFIFO = base.Columns["UseFIFO"];
                this.columnCluster = base.Columns["Cluster"];
                this.columnProductionParameterSettings_Id = base.Columns["ProductionParameterSettings_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDescription);
                this.columnServerMode = new System.Data.DataColumn("ServerMode", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnServerMode);
                this.columnUseFIFO = new System.Data.DataColumn("UseFIFO", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseFIFO);
                this.columnCluster = new System.Data.DataColumn("Cluster", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCluster);
                this.columnProductionParameterSettings_Id = new System.Data.DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProductionParameterSettings_Id);
                this.columnDescription.Namespace = "";
                this.columnServerMode.Namespace = "";
                this.columnServerMode.DefaultValue = ((string)("Normal"));
                this.columnUseFIFO.Namespace = "";
                this.columnUseFIFO.DefaultValue = ((string)("false"));
                this.columnCluster.AllowDBNull = false;
                this.columnCluster.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerRow NewServerRow() {
                return ((ServerRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ServerRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ServerRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerRowChanged != null)) {
                    this.ServerRowChanged(this, new ServerRowChangeEvent(((ServerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerRowChanging != null)) {
                    this.ServerRowChanging(this, new ServerRowChangeEvent(((ServerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerRowDeleted != null)) {
                    this.ServerRowDeleted(this, new ServerRowChangeEvent(((ServerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerRowDeleting != null)) {
                    this.ServerRowDeleting(this, new ServerRowChangeEvent(((ServerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServerRow(ServerRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ServerReply ds = new ServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class VerifyDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUseVerify;
            
            private System.Data.DataColumn columnFrequency;
            
            private System.Data.DataColumn columnProductionParameterSettings_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyDataTable() {
                this.TableName = "Verify";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VerifyDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected VerifyDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UseVerifyColumn {
                get {
                    return this.columnUseVerify;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FrequencyColumn {
                get {
                    return this.columnFrequency;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyRow this[int index] {
                get {
                    return ((VerifyRow)(this.Rows[index]));
                }
            }
            
            public event VerifyRowChangeEventHandler VerifyRowChanging;
            
            public event VerifyRowChangeEventHandler VerifyRowChanged;
            
            public event VerifyRowChangeEventHandler VerifyRowDeleting;
            
            public event VerifyRowChangeEventHandler VerifyRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddVerifyRow(VerifyRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyRow AddVerifyRow(string UseVerify, string Frequency, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Verify) {
                VerifyRow rowVerifyRow = ((VerifyRow)(this.NewRow()));
                rowVerifyRow.ItemArray = new object[] {
                        UseVerify,
                        Frequency,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Verify[0]};
                this.Rows.Add(rowVerifyRow);
                return rowVerifyRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                VerifyDataTable cln = ((VerifyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new VerifyDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUseVerify = base.Columns["UseVerify"];
                this.columnFrequency = base.Columns["Frequency"];
                this.columnProductionParameterSettings_Id = base.Columns["ProductionParameterSettings_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUseVerify = new System.Data.DataColumn("UseVerify", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseVerify);
                this.columnFrequency = new System.Data.DataColumn("Frequency", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFrequency);
                this.columnProductionParameterSettings_Id = new System.Data.DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProductionParameterSettings_Id);
                this.columnUseVerify.Namespace = "";
                this.columnUseVerify.DefaultValue = ((string)("false"));
                this.columnFrequency.AllowDBNull = false;
                this.columnFrequency.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyRow NewVerifyRow() {
                return ((VerifyRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new VerifyRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(VerifyRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VerifyRowChanged != null)) {
                    this.VerifyRowChanged(this, new VerifyRowChangeEvent(((VerifyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VerifyRowChanging != null)) {
                    this.VerifyRowChanging(this, new VerifyRowChangeEvent(((VerifyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VerifyRowDeleted != null)) {
                    this.VerifyRowDeleted(this, new VerifyRowChangeEvent(((VerifyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VerifyRowDeleting != null)) {
                    this.VerifyRowDeleting(this, new VerifyRowChangeEvent(((VerifyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveVerifyRow(VerifyRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ServerReply ds = new ServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VerifyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RecordingDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnNewMedia;
            
            private System.Data.DataColumn columnMaxSpeed;
            
            private System.Data.DataColumn columnRejectNonISO;
            
            private System.Data.DataColumn columnAddPostgap;
            
            private System.Data.DataColumn columnDestroyRejects;
            
            private System.Data.DataColumn columnOverburn;
            
            private System.Data.DataColumn columnCacheDriveLetters;
            
            private System.Data.DataColumn columnProductionParameterSettings_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingDataTable() {
                this.TableName = "Recording";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RecordingDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RecordingDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NewMediaColumn {
                get {
                    return this.columnNewMedia;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MaxSpeedColumn {
                get {
                    return this.columnMaxSpeed;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RejectNonISOColumn {
                get {
                    return this.columnRejectNonISO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AddPostgapColumn {
                get {
                    return this.columnAddPostgap;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DestroyRejectsColumn {
                get {
                    return this.columnDestroyRejects;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OverburnColumn {
                get {
                    return this.columnOverburn;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CacheDriveLettersColumn {
                get {
                    return this.columnCacheDriveLetters;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingRow this[int index] {
                get {
                    return ((RecordingRow)(this.Rows[index]));
                }
            }
            
            public event RecordingRowChangeEventHandler RecordingRowChanging;
            
            public event RecordingRowChangeEventHandler RecordingRowChanged;
            
            public event RecordingRowChangeEventHandler RecordingRowDeleting;
            
            public event RecordingRowChangeEventHandler RecordingRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRecordingRow(RecordingRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingRow AddRecordingRow(string NewMedia, string MaxSpeed, string RejectNonISO, string AddPostgap, string DestroyRejects, string Overburn, string CacheDriveLetters, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Recording) {
                RecordingRow rowRecordingRow = ((RecordingRow)(this.NewRow()));
                rowRecordingRow.ItemArray = new object[] {
                        NewMedia,
                        MaxSpeed,
                        RejectNonISO,
                        AddPostgap,
                        DestroyRejects,
                        Overburn,
                        CacheDriveLetters,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Recording[0]};
                this.Rows.Add(rowRecordingRow);
                return rowRecordingRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RecordingDataTable cln = ((RecordingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RecordingDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNewMedia = base.Columns["NewMedia"];
                this.columnMaxSpeed = base.Columns["MaxSpeed"];
                this.columnRejectNonISO = base.Columns["RejectNonISO"];
                this.columnAddPostgap = base.Columns["AddPostgap"];
                this.columnDestroyRejects = base.Columns["DestroyRejects"];
                this.columnOverburn = base.Columns["Overburn"];
                this.columnCacheDriveLetters = base.Columns["CacheDriveLetters"];
                this.columnProductionParameterSettings_Id = base.Columns["ProductionParameterSettings_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNewMedia = new System.Data.DataColumn("NewMedia", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNewMedia);
                this.columnMaxSpeed = new System.Data.DataColumn("MaxSpeed", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMaxSpeed);
                this.columnRejectNonISO = new System.Data.DataColumn("RejectNonISO", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRejectNonISO);
                this.columnAddPostgap = new System.Data.DataColumn("AddPostgap", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAddPostgap);
                this.columnDestroyRejects = new System.Data.DataColumn("DestroyRejects", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDestroyRejects);
                this.columnOverburn = new System.Data.DataColumn("Overburn", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOverburn);
                this.columnCacheDriveLetters = new System.Data.DataColumn("CacheDriveLetters", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCacheDriveLetters);
                this.columnProductionParameterSettings_Id = new System.Data.DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProductionParameterSettings_Id);
                this.columnNewMedia.Namespace = "";
                this.columnNewMedia.DefaultValue = ((string)("false"));
                this.columnMaxSpeed.AllowDBNull = false;
                this.columnMaxSpeed.Namespace = "";
                this.columnRejectNonISO.Namespace = "";
                this.columnRejectNonISO.DefaultValue = ((string)("true"));
                this.columnAddPostgap.Namespace = "";
                this.columnAddPostgap.DefaultValue = ((string)("Disabled"));
                this.columnDestroyRejects.Namespace = "";
                this.columnDestroyRejects.DefaultValue = ((string)("false"));
                this.columnOverburn.Namespace = "";
                this.columnOverburn.DefaultValue = ((string)("false"));
                this.columnCacheDriveLetters.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingRow NewRecordingRow() {
                return ((RecordingRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RecordingRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RecordingRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RecordingRowChanged != null)) {
                    this.RecordingRowChanged(this, new RecordingRowChangeEvent(((RecordingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RecordingRowChanging != null)) {
                    this.RecordingRowChanging(this, new RecordingRowChangeEvent(((RecordingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RecordingRowDeleted != null)) {
                    this.RecordingRowDeleted(this, new RecordingRowChangeEvent(((RecordingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RecordingRowDeleting != null)) {
                    this.RecordingRowDeleting(this, new RecordingRowChangeEvent(((RecordingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRecordingRow(RecordingRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ServerReply ds = new ServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RecordingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrintingDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnRejectPattern;
            
            private System.Data.DataColumn columnProductionParameterSettings_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintingDataTable() {
                this.TableName = "Printing";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintingDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PrintingDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RejectPatternColumn {
                get {
                    return this.columnRejectPattern;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintingRow this[int index] {
                get {
                    return ((PrintingRow)(this.Rows[index]));
                }
            }
            
            public event PrintingRowChangeEventHandler PrintingRowChanging;
            
            public event PrintingRowChangeEventHandler PrintingRowChanged;
            
            public event PrintingRowChangeEventHandler PrintingRowDeleting;
            
            public event PrintingRowChangeEventHandler PrintingRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrintingRow(PrintingRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintingRow AddPrintingRow(string RejectPattern, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Printing) {
                PrintingRow rowPrintingRow = ((PrintingRow)(this.NewRow()));
                rowPrintingRow.ItemArray = new object[] {
                        RejectPattern,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Printing[0]};
                this.Rows.Add(rowPrintingRow);
                return rowPrintingRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PrintingDataTable cln = ((PrintingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PrintingDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRejectPattern = base.Columns["RejectPattern"];
                this.columnProductionParameterSettings_Id = base.Columns["ProductionParameterSettings_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRejectPattern = new System.Data.DataColumn("RejectPattern", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRejectPattern);
                this.columnProductionParameterSettings_Id = new System.Data.DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProductionParameterSettings_Id);
                this.columnRejectPattern.Namespace = "";
                this.columnRejectPattern.DefaultValue = ((string)("Disabled"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintingRow NewPrintingRow() {
                return ((PrintingRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PrintingRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PrintingRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrintingRowChanged != null)) {
                    this.PrintingRowChanged(this, new PrintingRowChangeEvent(((PrintingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrintingRowChanging != null)) {
                    this.PrintingRowChanging(this, new PrintingRowChangeEvent(((PrintingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrintingRowDeleted != null)) {
                    this.PrintingRowDeleted(this, new PrintingRowChangeEvent(((PrintingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrintingRowDeleting != null)) {
                    this.PrintingRowDeleting(this, new PrintingRowChangeEvent(((PrintingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrintingRow(PrintingRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ServerReply ds = new ServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrintingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AutoloaderDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnLoaderNumber;
            
            private System.Data.DataColumn columnMailboxUsage;
            
            private System.Data.DataColumn columnMediaSize;
            
            private System.Data.DataColumn columnMediaType;
            
            private System.Data.DataColumn columnAutoloader_Id;
            
            private System.Data.DataColumn columnProductionParameterSettings_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderDataTable() {
                this.TableName = "Autoloader";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AutoloaderDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AutoloaderDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LoaderNumberColumn {
                get {
                    return this.columnLoaderNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MailboxUsageColumn {
                get {
                    return this.columnMailboxUsage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MediaSizeColumn {
                get {
                    return this.columnMediaSize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MediaTypeColumn {
                get {
                    return this.columnMediaType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Autoloader_IdColumn {
                get {
                    return this.columnAutoloader_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderRow this[int index] {
                get {
                    return ((AutoloaderRow)(this.Rows[index]));
                }
            }
            
            public event AutoloaderRowChangeEventHandler AutoloaderRowChanging;
            
            public event AutoloaderRowChangeEventHandler AutoloaderRowChanged;
            
            public event AutoloaderRowChangeEventHandler AutoloaderRowDeleting;
            
            public event AutoloaderRowChangeEventHandler AutoloaderRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAutoloaderRow(AutoloaderRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderRow AddAutoloaderRow(string LoaderNumber, string MailboxUsage, string MediaSize, string MediaType, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Autoloader) {
                AutoloaderRow rowAutoloaderRow = ((AutoloaderRow)(this.NewRow()));
                rowAutoloaderRow.ItemArray = new object[] {
                        LoaderNumber,
                        MailboxUsage,
                        MediaSize,
                        MediaType,
                        null,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Autoloader[0]};
                this.Rows.Add(rowAutoloaderRow);
                return rowAutoloaderRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                AutoloaderDataTable cln = ((AutoloaderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new AutoloaderDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLoaderNumber = base.Columns["LoaderNumber"];
                this.columnMailboxUsage = base.Columns["MailboxUsage"];
                this.columnMediaSize = base.Columns["MediaSize"];
                this.columnMediaType = base.Columns["MediaType"];
                this.columnAutoloader_Id = base.Columns["Autoloader_Id"];
                this.columnProductionParameterSettings_Id = base.Columns["ProductionParameterSettings_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLoaderNumber = new System.Data.DataColumn("LoaderNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLoaderNumber);
                this.columnMailboxUsage = new System.Data.DataColumn("MailboxUsage", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMailboxUsage);
                this.columnMediaSize = new System.Data.DataColumn("MediaSize", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMediaSize);
                this.columnMediaType = new System.Data.DataColumn("MediaType", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMediaType);
                this.columnAutoloader_Id = new System.Data.DataColumn("Autoloader_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAutoloader_Id);
                this.columnProductionParameterSettings_Id = new System.Data.DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProductionParameterSettings_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnAutoloader_Id}, true));
                this.columnLoaderNumber.AllowDBNull = false;
                this.columnLoaderNumber.Namespace = "";
                this.columnMailboxUsage.AllowDBNull = false;
                this.columnMailboxUsage.Namespace = "";
                this.columnMediaSize.Namespace = "";
                this.columnMediaSize.DefaultValue = ((string)("120mm"));
                this.columnMediaType.Namespace = "";
                this.columnMediaType.DefaultValue = ((string)("CDR"));
                this.columnAutoloader_Id.AutoIncrement = true;
                this.columnAutoloader_Id.AllowDBNull = false;
                this.columnAutoloader_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderRow NewAutoloaderRow() {
                return ((AutoloaderRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AutoloaderRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(AutoloaderRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AutoloaderRowChanged != null)) {
                    this.AutoloaderRowChanged(this, new AutoloaderRowChangeEvent(((AutoloaderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AutoloaderRowChanging != null)) {
                    this.AutoloaderRowChanging(this, new AutoloaderRowChangeEvent(((AutoloaderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AutoloaderRowDeleted != null)) {
                    this.AutoloaderRowDeleted(this, new AutoloaderRowChangeEvent(((AutoloaderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AutoloaderRowDeleting != null)) {
                    this.AutoloaderRowDeleting(this, new AutoloaderRowChangeEvent(((AutoloaderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAutoloaderRow(AutoloaderRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ServerReply ds = new ServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AutoloaderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BinDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnBinNumber;
            
            private System.Data.DataColumn columnBinUsage;
            
            private System.Data.DataColumn columnAutoloader_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BinDataTable() {
                this.TableName = "Bin";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BinDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BinDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BinNumberColumn {
                get {
                    return this.columnBinNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BinUsageColumn {
                get {
                    return this.columnBinUsage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Autoloader_IdColumn {
                get {
                    return this.columnAutoloader_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BinRow this[int index] {
                get {
                    return ((BinRow)(this.Rows[index]));
                }
            }
            
            public event BinRowChangeEventHandler BinRowChanging;
            
            public event BinRowChangeEventHandler BinRowChanged;
            
            public event BinRowChangeEventHandler BinRowDeleting;
            
            public event BinRowChangeEventHandler BinRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBinRow(BinRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BinRow AddBinRow(string BinNumber, string BinUsage, AutoloaderRow parentAutoloaderRowByAutoloader_Bin) {
                BinRow rowBinRow = ((BinRow)(this.NewRow()));
                rowBinRow.ItemArray = new object[] {
                        BinNumber,
                        BinUsage,
                        parentAutoloaderRowByAutoloader_Bin[4]};
                this.Rows.Add(rowBinRow);
                return rowBinRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BinDataTable cln = ((BinDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BinDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBinNumber = base.Columns["BinNumber"];
                this.columnBinUsage = base.Columns["BinUsage"];
                this.columnAutoloader_Id = base.Columns["Autoloader_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBinNumber = new System.Data.DataColumn("BinNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnBinNumber);
                this.columnBinUsage = new System.Data.DataColumn("BinUsage", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnBinUsage);
                this.columnAutoloader_Id = new System.Data.DataColumn("Autoloader_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAutoloader_Id);
                this.columnBinNumber.AllowDBNull = false;
                this.columnBinNumber.Namespace = "";
                this.columnBinUsage.AllowDBNull = false;
                this.columnBinUsage.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BinRow NewBinRow() {
                return ((BinRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BinRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BinRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BinRowChanged != null)) {
                    this.BinRowChanged(this, new BinRowChangeEvent(((BinRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BinRowChanging != null)) {
                    this.BinRowChanging(this, new BinRowChangeEvent(((BinRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BinRowDeleted != null)) {
                    this.BinRowDeleted(this, new BinRowChangeEvent(((BinRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BinRowDeleting != null)) {
                    this.BinRowDeleting(this, new BinRowChangeEvent(((BinRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBinRow(BinRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ServerReply ds = new ServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BinDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReadingDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnAudioReadSpeed;
            
            private System.Data.DataColumn columnPreferredReader;
            
            private System.Data.DataColumn columnReading_Id;
            
            private System.Data.DataColumn columnProductionParameterSettings_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadingDataTable() {
                this.TableName = "Reading";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReadingDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReadingDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AudioReadSpeedColumn {
                get {
                    return this.columnAudioReadSpeed;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PreferredReaderColumn {
                get {
                    return this.columnPreferredReader;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Reading_IdColumn {
                get {
                    return this.columnReading_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadingRow this[int index] {
                get {
                    return ((ReadingRow)(this.Rows[index]));
                }
            }
            
            public event ReadingRowChangeEventHandler ReadingRowChanging;
            
            public event ReadingRowChangeEventHandler ReadingRowChanged;
            
            public event ReadingRowChangeEventHandler ReadingRowDeleting;
            
            public event ReadingRowChangeEventHandler ReadingRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReadingRow(ReadingRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadingRow AddReadingRow(string AudioReadSpeed, string PreferredReader, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Reading) {
                ReadingRow rowReadingRow = ((ReadingRow)(this.NewRow()));
                rowReadingRow.ItemArray = new object[] {
                        AudioReadSpeed,
                        PreferredReader,
                        null,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Reading[0]};
                this.Rows.Add(rowReadingRow);
                return rowReadingRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ReadingDataTable cln = ((ReadingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ReadingDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAudioReadSpeed = base.Columns["AudioReadSpeed"];
                this.columnPreferredReader = base.Columns["PreferredReader"];
                this.columnReading_Id = base.Columns["Reading_Id"];
                this.columnProductionParameterSettings_Id = base.Columns["ProductionParameterSettings_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAudioReadSpeed = new System.Data.DataColumn("AudioReadSpeed", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAudioReadSpeed);
                this.columnPreferredReader = new System.Data.DataColumn("PreferredReader", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPreferredReader);
                this.columnReading_Id = new System.Data.DataColumn("Reading_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnReading_Id);
                this.columnProductionParameterSettings_Id = new System.Data.DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProductionParameterSettings_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnReading_Id}, true));
                this.columnAudioReadSpeed.Namespace = "";
                this.columnAudioReadSpeed.DefaultValue = ((string)("Max"));
                this.columnPreferredReader.Namespace = "";
                this.columnPreferredReader.DefaultValue = ((string)("Recorders"));
                this.columnReading_Id.AutoIncrement = true;
                this.columnReading_Id.AllowDBNull = false;
                this.columnReading_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadingRow NewReadingRow() {
                return ((ReadingRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ReadingRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ReadingRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReadingRowChanged != null)) {
                    this.ReadingRowChanged(this, new ReadingRowChangeEvent(((ReadingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReadingRowChanging != null)) {
                    this.ReadingRowChanging(this, new ReadingRowChangeEvent(((ReadingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReadingRowDeleted != null)) {
                    this.ReadingRowDeleted(this, new ReadingRowChangeEvent(((ReadingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReadingRowDeleting != null)) {
                    this.ReadingRowDeleting(this, new ReadingRowChangeEvent(((ReadingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReadingRow(ReadingRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ServerReply ds = new ServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReadingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AutoBulkReadDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnBulkReadBaseFolder;
            
            private System.Data.DataColumn columnUseVolumeIDAsFolderName;
            
            private System.Data.DataColumn columnUseBarcodeAsFolderName;
            
            private System.Data.DataColumn columnExtractFoldersAndFiles;
            
            private System.Data.DataColumn columnActionForNonFixatedDiscs;
            
            private System.Data.DataColumn columnAudioImageType;
            
            private System.Data.DataColumn columnUseISRCAsFilenameForAudioTracks;
            
            private System.Data.DataColumn columnRejectFailures;
            
            private System.Data.DataColumn columnFIFOUnloading;
            
            private System.Data.DataColumn columnBarcodePort;
            
            private System.Data.DataColumn columnBarcodeAngle;
            
            private System.Data.DataColumn columnUseBarcodeIndex;
            
            private System.Data.DataColumn columnReading_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoBulkReadDataTable() {
                this.TableName = "AutoBulkRead";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AutoBulkReadDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AutoBulkReadDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BulkReadBaseFolderColumn {
                get {
                    return this.columnBulkReadBaseFolder;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UseVolumeIDAsFolderNameColumn {
                get {
                    return this.columnUseVolumeIDAsFolderName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UseBarcodeAsFolderNameColumn {
                get {
                    return this.columnUseBarcodeAsFolderName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExtractFoldersAndFilesColumn {
                get {
                    return this.columnExtractFoldersAndFiles;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ActionForNonFixatedDiscsColumn {
                get {
                    return this.columnActionForNonFixatedDiscs;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AudioImageTypeColumn {
                get {
                    return this.columnAudioImageType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UseISRCAsFilenameForAudioTracksColumn {
                get {
                    return this.columnUseISRCAsFilenameForAudioTracks;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RejectFailuresColumn {
                get {
                    return this.columnRejectFailures;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FIFOUnloadingColumn {
                get {
                    return this.columnFIFOUnloading;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BarcodePortColumn {
                get {
                    return this.columnBarcodePort;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BarcodeAngleColumn {
                get {
                    return this.columnBarcodeAngle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UseBarcodeIndexColumn {
                get {
                    return this.columnUseBarcodeIndex;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Reading_IdColumn {
                get {
                    return this.columnReading_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoBulkReadRow this[int index] {
                get {
                    return ((AutoBulkReadRow)(this.Rows[index]));
                }
            }
            
            public event AutoBulkReadRowChangeEventHandler AutoBulkReadRowChanging;
            
            public event AutoBulkReadRowChangeEventHandler AutoBulkReadRowChanged;
            
            public event AutoBulkReadRowChangeEventHandler AutoBulkReadRowDeleting;
            
            public event AutoBulkReadRowChangeEventHandler AutoBulkReadRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAutoBulkReadRow(AutoBulkReadRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoBulkReadRow AddAutoBulkReadRow(string BulkReadBaseFolder, string UseVolumeIDAsFolderName, string UseBarcodeAsFolderName, string ExtractFoldersAndFiles, string ActionForNonFixatedDiscs, string AudioImageType, string UseISRCAsFilenameForAudioTracks, string RejectFailures, string FIFOUnloading, string BarcodePort, string BarcodeAngle, string UseBarcodeIndex, ReadingRow parentReadingRowByReading_AutoBulkRead) {
                AutoBulkReadRow rowAutoBulkReadRow = ((AutoBulkReadRow)(this.NewRow()));
                rowAutoBulkReadRow.ItemArray = new object[] {
                        BulkReadBaseFolder,
                        UseVolumeIDAsFolderName,
                        UseBarcodeAsFolderName,
                        ExtractFoldersAndFiles,
                        ActionForNonFixatedDiscs,
                        AudioImageType,
                        UseISRCAsFilenameForAudioTracks,
                        RejectFailures,
                        FIFOUnloading,
                        BarcodePort,
                        BarcodeAngle,
                        UseBarcodeIndex,
                        parentReadingRowByReading_AutoBulkRead[2]};
                this.Rows.Add(rowAutoBulkReadRow);
                return rowAutoBulkReadRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                AutoBulkReadDataTable cln = ((AutoBulkReadDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new AutoBulkReadDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBulkReadBaseFolder = base.Columns["BulkReadBaseFolder"];
                this.columnUseVolumeIDAsFolderName = base.Columns["UseVolumeIDAsFolderName"];
                this.columnUseBarcodeAsFolderName = base.Columns["UseBarcodeAsFolderName"];
                this.columnExtractFoldersAndFiles = base.Columns["ExtractFoldersAndFiles"];
                this.columnActionForNonFixatedDiscs = base.Columns["ActionForNonFixatedDiscs"];
                this.columnAudioImageType = base.Columns["AudioImageType"];
                this.columnUseISRCAsFilenameForAudioTracks = base.Columns["UseISRCAsFilenameForAudioTracks"];
                this.columnRejectFailures = base.Columns["RejectFailures"];
                this.columnFIFOUnloading = base.Columns["FIFOUnloading"];
                this.columnBarcodePort = base.Columns["BarcodePort"];
                this.columnBarcodeAngle = base.Columns["BarcodeAngle"];
                this.columnUseBarcodeIndex = base.Columns["UseBarcodeIndex"];
                this.columnReading_Id = base.Columns["Reading_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBulkReadBaseFolder = new System.Data.DataColumn("BulkReadBaseFolder", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnBulkReadBaseFolder);
                this.columnUseVolumeIDAsFolderName = new System.Data.DataColumn("UseVolumeIDAsFolderName", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseVolumeIDAsFolderName);
                this.columnUseBarcodeAsFolderName = new System.Data.DataColumn("UseBarcodeAsFolderName", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseBarcodeAsFolderName);
                this.columnExtractFoldersAndFiles = new System.Data.DataColumn("ExtractFoldersAndFiles", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnExtractFoldersAndFiles);
                this.columnActionForNonFixatedDiscs = new System.Data.DataColumn("ActionForNonFixatedDiscs", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnActionForNonFixatedDiscs);
                this.columnAudioImageType = new System.Data.DataColumn("AudioImageType", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAudioImageType);
                this.columnUseISRCAsFilenameForAudioTracks = new System.Data.DataColumn("UseISRCAsFilenameForAudioTracks", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseISRCAsFilenameForAudioTracks);
                this.columnRejectFailures = new System.Data.DataColumn("RejectFailures", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRejectFailures);
                this.columnFIFOUnloading = new System.Data.DataColumn("FIFOUnloading", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFIFOUnloading);
                this.columnBarcodePort = new System.Data.DataColumn("BarcodePort", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnBarcodePort);
                this.columnBarcodeAngle = new System.Data.DataColumn("BarcodeAngle", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnBarcodeAngle);
                this.columnUseBarcodeIndex = new System.Data.DataColumn("UseBarcodeIndex", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseBarcodeIndex);
                this.columnReading_Id = new System.Data.DataColumn("Reading_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnReading_Id);
                this.columnBulkReadBaseFolder.AllowDBNull = false;
                this.columnBulkReadBaseFolder.Namespace = "";
                this.columnUseVolumeIDAsFolderName.Namespace = "";
                this.columnUseVolumeIDAsFolderName.DefaultValue = ((string)("false"));
                this.columnUseBarcodeAsFolderName.Namespace = "";
                this.columnUseBarcodeAsFolderName.DefaultValue = ((string)("false"));
                this.columnExtractFoldersAndFiles.Namespace = "";
                this.columnExtractFoldersAndFiles.DefaultValue = ((string)("false"));
                this.columnActionForNonFixatedDiscs.Namespace = "";
                this.columnActionForNonFixatedDiscs.DefaultValue = ((string)("None"));
                this.columnAudioImageType.Namespace = "";
                this.columnAudioImageType.DefaultValue = ((string)("PCM"));
                this.columnUseISRCAsFilenameForAudioTracks.Namespace = "";
                this.columnUseISRCAsFilenameForAudioTracks.DefaultValue = ((string)("false"));
                this.columnRejectFailures.Namespace = "";
                this.columnRejectFailures.DefaultValue = ((string)("false"));
                this.columnFIFOUnloading.Namespace = "";
                this.columnFIFOUnloading.DefaultValue = ((string)("false"));
                this.columnBarcodePort.Namespace = "";
                this.columnBarcodePort.DefaultValue = ((string)("None"));
                this.columnBarcodeAngle.AllowDBNull = false;
                this.columnBarcodeAngle.Namespace = "";
                this.columnUseBarcodeIndex.Namespace = "";
                this.columnUseBarcodeIndex.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoBulkReadRow NewAutoBulkReadRow() {
                return ((AutoBulkReadRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AutoBulkReadRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(AutoBulkReadRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AutoBulkReadRowChanged != null)) {
                    this.AutoBulkReadRowChanged(this, new AutoBulkReadRowChangeEvent(((AutoBulkReadRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AutoBulkReadRowChanging != null)) {
                    this.AutoBulkReadRowChanging(this, new AutoBulkReadRowChangeEvent(((AutoBulkReadRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AutoBulkReadRowDeleted != null)) {
                    this.AutoBulkReadRowDeleted(this, new AutoBulkReadRowChangeEvent(((AutoBulkReadRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AutoBulkReadRowDeleting != null)) {
                    this.AutoBulkReadRowDeleting(this, new AutoBulkReadRowChangeEvent(((AutoBulkReadRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAutoBulkReadRow(AutoBulkReadRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ServerReply ds = new ServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AutoBulkReadDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class KioskModeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUseKiosk;
            
            private System.Data.DataColumn columnAutoStart;
            
            private System.Data.DataColumn columnRecoverOrders;
            
            private System.Data.DataColumn columnRunNoPrinter;
            
            private System.Data.DataColumn columnAutoloaderRecovery;
            
            private System.Data.DataColumn columnPrinterRecover;
            
            private System.Data.DataColumn columnProductionParameterSettings_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KioskModeDataTable() {
                this.TableName = "KioskMode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KioskModeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected KioskModeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UseKioskColumn {
                get {
                    return this.columnUseKiosk;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AutoStartColumn {
                get {
                    return this.columnAutoStart;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RecoverOrdersColumn {
                get {
                    return this.columnRecoverOrders;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RunNoPrinterColumn {
                get {
                    return this.columnRunNoPrinter;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AutoloaderRecoveryColumn {
                get {
                    return this.columnAutoloaderRecovery;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PrinterRecoverColumn {
                get {
                    return this.columnPrinterRecover;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KioskModeRow this[int index] {
                get {
                    return ((KioskModeRow)(this.Rows[index]));
                }
            }
            
            public event KioskModeRowChangeEventHandler KioskModeRowChanging;
            
            public event KioskModeRowChangeEventHandler KioskModeRowChanged;
            
            public event KioskModeRowChangeEventHandler KioskModeRowDeleting;
            
            public event KioskModeRowChangeEventHandler KioskModeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddKioskModeRow(KioskModeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KioskModeRow AddKioskModeRow(string UseKiosk, string AutoStart, string RecoverOrders, string RunNoPrinter, string AutoloaderRecovery, string PrinterRecover, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_KioskMode) {
                KioskModeRow rowKioskModeRow = ((KioskModeRow)(this.NewRow()));
                rowKioskModeRow.ItemArray = new object[] {
                        UseKiosk,
                        AutoStart,
                        RecoverOrders,
                        RunNoPrinter,
                        AutoloaderRecovery,
                        PrinterRecover,
                        parentProductionParameterSettingsRowByProductionParameterSettings_KioskMode[0]};
                this.Rows.Add(rowKioskModeRow);
                return rowKioskModeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                KioskModeDataTable cln = ((KioskModeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new KioskModeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUseKiosk = base.Columns["UseKiosk"];
                this.columnAutoStart = base.Columns["AutoStart"];
                this.columnRecoverOrders = base.Columns["RecoverOrders"];
                this.columnRunNoPrinter = base.Columns["RunNoPrinter"];
                this.columnAutoloaderRecovery = base.Columns["AutoloaderRecovery"];
                this.columnPrinterRecover = base.Columns["PrinterRecover"];
                this.columnProductionParameterSettings_Id = base.Columns["ProductionParameterSettings_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUseKiosk = new System.Data.DataColumn("UseKiosk", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseKiosk);
                this.columnAutoStart = new System.Data.DataColumn("AutoStart", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAutoStart);
                this.columnRecoverOrders = new System.Data.DataColumn("RecoverOrders", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRecoverOrders);
                this.columnRunNoPrinter = new System.Data.DataColumn("RunNoPrinter", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRunNoPrinter);
                this.columnAutoloaderRecovery = new System.Data.DataColumn("AutoloaderRecovery", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAutoloaderRecovery);
                this.columnPrinterRecover = new System.Data.DataColumn("PrinterRecover", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPrinterRecover);
                this.columnProductionParameterSettings_Id = new System.Data.DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProductionParameterSettings_Id);
                this.columnUseKiosk.Namespace = "";
                this.columnUseKiosk.DefaultValue = ((string)("false"));
                this.columnAutoStart.Namespace = "";
                this.columnAutoStart.DefaultValue = ((string)("true"));
                this.columnRecoverOrders.Namespace = "";
                this.columnRecoverOrders.DefaultValue = ((string)("true"));
                this.columnRunNoPrinter.Namespace = "";
                this.columnRunNoPrinter.DefaultValue = ((string)("false"));
                this.columnAutoloaderRecovery.Namespace = "";
                this.columnAutoloaderRecovery.DefaultValue = ((string)("Retry"));
                this.columnPrinterRecover.Namespace = "";
                this.columnPrinterRecover.DefaultValue = ((string)("Retry"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KioskModeRow NewKioskModeRow() {
                return ((KioskModeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new KioskModeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(KioskModeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.KioskModeRowChanged != null)) {
                    this.KioskModeRowChanged(this, new KioskModeRowChangeEvent(((KioskModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.KioskModeRowChanging != null)) {
                    this.KioskModeRowChanging(this, new KioskModeRowChangeEvent(((KioskModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.KioskModeRowDeleted != null)) {
                    this.KioskModeRowDeleted(this, new KioskModeRowChangeEvent(((KioskModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.KioskModeRowDeleting != null)) {
                    this.KioskModeRowDeleting(this, new KioskModeRowChangeEvent(((KioskModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveKioskModeRow(KioskModeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ServerReply ds = new ServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "KioskModeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MessagingDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnOrderStatusUpdateInterval;
            
            private System.Data.DataColumn columnProductionParameterSettings_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessagingDataTable() {
                this.TableName = "Messaging";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MessagingDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MessagingDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrderStatusUpdateIntervalColumn {
                get {
                    return this.columnOrderStatusUpdateInterval;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessagingRow this[int index] {
                get {
                    return ((MessagingRow)(this.Rows[index]));
                }
            }
            
            public event MessagingRowChangeEventHandler MessagingRowChanging;
            
            public event MessagingRowChangeEventHandler MessagingRowChanged;
            
            public event MessagingRowChangeEventHandler MessagingRowDeleting;
            
            public event MessagingRowChangeEventHandler MessagingRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMessagingRow(MessagingRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessagingRow AddMessagingRow(string OrderStatusUpdateInterval, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Messaging) {
                MessagingRow rowMessagingRow = ((MessagingRow)(this.NewRow()));
                rowMessagingRow.ItemArray = new object[] {
                        OrderStatusUpdateInterval,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Messaging[0]};
                this.Rows.Add(rowMessagingRow);
                return rowMessagingRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MessagingDataTable cln = ((MessagingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MessagingDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOrderStatusUpdateInterval = base.Columns["OrderStatusUpdateInterval"];
                this.columnProductionParameterSettings_Id = base.Columns["ProductionParameterSettings_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOrderStatusUpdateInterval = new System.Data.DataColumn("OrderStatusUpdateInterval", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOrderStatusUpdateInterval);
                this.columnProductionParameterSettings_Id = new System.Data.DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProductionParameterSettings_Id);
                this.columnOrderStatusUpdateInterval.AllowDBNull = false;
                this.columnOrderStatusUpdateInterval.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessagingRow NewMessagingRow() {
                return ((MessagingRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MessagingRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MessagingRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MessagingRowChanged != null)) {
                    this.MessagingRowChanged(this, new MessagingRowChangeEvent(((MessagingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MessagingRowChanging != null)) {
                    this.MessagingRowChanging(this, new MessagingRowChangeEvent(((MessagingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MessagingRowDeleted != null)) {
                    this.MessagingRowDeleted(this, new MessagingRowChangeEvent(((MessagingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MessagingRowDeleting != null)) {
                    this.MessagingRowDeleting(this, new MessagingRowChangeEvent(((MessagingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMessagingRow(MessagingRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ServerReply ds = new ServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MessagingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ImagingParameterSettingsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagingParameterSettingsDataTable() {
                this.TableName = "ImagingParameterSettings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ImagingParameterSettingsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ImagingParameterSettingsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagingParameterSettingsRow this[int index] {
                get {
                    return ((ImagingParameterSettingsRow)(this.Rows[index]));
                }
            }
            
            public event ImagingParameterSettingsRowChangeEventHandler ImagingParameterSettingsRowChanging;
            
            public event ImagingParameterSettingsRowChangeEventHandler ImagingParameterSettingsRowChanged;
            
            public event ImagingParameterSettingsRowChangeEventHandler ImagingParameterSettingsRowDeleting;
            
            public event ImagingParameterSettingsRowChangeEventHandler ImagingParameterSettingsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddImagingParameterSettingsRow(ImagingParameterSettingsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagingParameterSettingsRow AddImagingParameterSettingsRow() {
                ImagingParameterSettingsRow rowImagingParameterSettingsRow = ((ImagingParameterSettingsRow)(this.NewRow()));
                rowImagingParameterSettingsRow.ItemArray = new object[0];
                this.Rows.Add(rowImagingParameterSettingsRow);
                return rowImagingParameterSettingsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ImagingParameterSettingsDataTable cln = ((ImagingParameterSettingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ImagingParameterSettingsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagingParameterSettingsRow NewImagingParameterSettingsRow() {
                return ((ImagingParameterSettingsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ImagingParameterSettingsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ImagingParameterSettingsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ImagingParameterSettingsRowChanged != null)) {
                    this.ImagingParameterSettingsRowChanged(this, new ImagingParameterSettingsRowChangeEvent(((ImagingParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ImagingParameterSettingsRowChanging != null)) {
                    this.ImagingParameterSettingsRowChanging(this, new ImagingParameterSettingsRowChangeEvent(((ImagingParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ImagingParameterSettingsRowDeleted != null)) {
                    this.ImagingParameterSettingsRowDeleted(this, new ImagingParameterSettingsRowChangeEvent(((ImagingParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ImagingParameterSettingsRowDeleting != null)) {
                    this.ImagingParameterSettingsRowDeleting(this, new ImagingParameterSettingsRowChangeEvent(((ImagingParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveImagingParameterSettingsRow(ImagingParameterSettingsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ServerReply ds = new ServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ImagingParameterSettingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AckOnlyRow : System.Data.DataRow {
            
            private AckOnlyDataTable tableAckOnly;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AckOnlyRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAckOnly = ((AckOnlyDataTable)(this.Table));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServerStatusRow : System.Data.DataRow {
            
            private ServerStatusDataTable tableServerStatus;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerStatusRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerStatus = ((ServerStatusDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServerStatus_Id {
                get {
                    return ((int)(this[this.tableServerStatus.ServerStatus_IdColumn]));
                }
                set {
                    this[this.tableServerStatus.ServerStatus_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerInfoRow[] GetServerInfoRows() {
                return ((ServerInfoRow[])(base.GetChildRows(this.Table.ChildRelations["ServerStatus_ServerInfo"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimeStampsRow[] GetTimeStampsRows() {
                return ((TimeStampsRow[])(base.GetChildRows(this.Table.ChildRelations["ServerStatus_TimeStamps"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SwitchesRow[] GetSwitchesRows() {
                return ((SwitchesRow[])(base.GetChildRows(this.Table.ChildRelations["ServerStatus_Switches"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServerInfoRow : System.Data.DataRow {
            
            private ServerInfoDataTable tableServerInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerInfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerInfo = ((ServerInfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SoftwareVersion {
                get {
                    return ((string)(this[this.tableServerInfo.SoftwareVersionColumn]));
                }
                set {
                    this[this.tableServerInfo.SoftwareVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableServerInfo.DescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'ServerInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Hostname {
                get {
                    return ((string)(this[this.tableServerInfo.HostnameColumn]));
                }
                set {
                    this[this.tableServerInfo.HostnameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cluster {
                get {
                    return ((string)(this[this.tableServerInfo.ClusterColumn]));
                }
                set {
                    this[this.tableServerInfo.ClusterColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MessagingPort {
                get {
                    return ((string)(this[this.tableServerInfo.MessagingPortColumn]));
                }
                set {
                    this[this.tableServerInfo.MessagingPortColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DTDFolder {
                get {
                    return ((string)(this[this.tableServerInfo.DTDFolderColumn]));
                }
                set {
                    this[this.tableServerInfo.DTDFolderColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsService {
                get {
                    try {
                        return ((string)(this[this.tableServerInfo.IsServiceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IsService\' in table \'ServerInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.IsServiceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Automation {
                get {
                    return ((string)(this[this.tableServerInfo.AutomationColumn]));
                }
                set {
                    this[this.tableServerInfo.AutomationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CopiesProduced {
                get {
                    try {
                        return ((string)(this[this.tableServerInfo.CopiesProducedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CopiesProduced\' in table \'ServerInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.CopiesProducedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CopiesRejected {
                get {
                    try {
                        return ((string)(this[this.tableServerInfo.CopiesRejectedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CopiesRejected\' in table \'ServerInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.CopiesRejectedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImagesWritten {
                get {
                    try {
                        return ((string)(this[this.tableServerInfo.ImagesWrittenColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ImagesWritten\' in table \'ServerInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.ImagesWrittenColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImagesRejected {
                get {
                    try {
                        return ((string)(this[this.tableServerInfo.ImagesRejectedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ImagesRejected\' in table \'ServerInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.ImagesRejectedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PasswordSet {
                get {
                    return ((string)(this[this.tableServerInfo.PasswordSetColumn]));
                }
                set {
                    this[this.tableServerInfo.PasswordSetColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServerStatus_Id {
                get {
                    try {
                        return ((int)(this[this.tableServerInfo.ServerStatus_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ServerStatus_Id\' in table \'ServerInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.ServerStatus_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerStatusRow ServerStatusRow {
                get {
                    return ((ServerStatusRow)(this.GetParentRow(this.Table.ParentRelations["ServerStatus_ServerInfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ServerStatus_ServerInfo"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableServerInfo.DescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableServerInfo.DescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsServiceNull() {
                return this.IsNull(this.tableServerInfo.IsServiceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsServiceNull() {
                this[this.tableServerInfo.IsServiceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCopiesProducedNull() {
                return this.IsNull(this.tableServerInfo.CopiesProducedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCopiesProducedNull() {
                this[this.tableServerInfo.CopiesProducedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCopiesRejectedNull() {
                return this.IsNull(this.tableServerInfo.CopiesRejectedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCopiesRejectedNull() {
                this[this.tableServerInfo.CopiesRejectedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImagesWrittenNull() {
                return this.IsNull(this.tableServerInfo.ImagesWrittenColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImagesWrittenNull() {
                this[this.tableServerInfo.ImagesWrittenColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImagesRejectedNull() {
                return this.IsNull(this.tableServerInfo.ImagesRejectedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImagesRejectedNull() {
                this[this.tableServerInfo.ImagesRejectedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServerStatus_IdNull() {
                return this.IsNull(this.tableServerInfo.ServerStatus_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServerStatus_IdNull() {
                this[this.tableServerInfo.ServerStatus_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TimeStampsRow : System.Data.DataRow {
            
            private TimeStampsDataTable tableTimeStamps;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TimeStampsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTimeStamps = ((TimeStampsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Start {
                get {
                    return ((string)(this[this.tableTimeStamps.StartColumn]));
                }
                set {
                    this[this.tableTimeStamps.StartColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    return ((string)(this[this.tableTimeStamps.StatusColumn]));
                }
                set {
                    this[this.tableTimeStamps.StatusColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServerStatus_Id {
                get {
                    try {
                        return ((int)(this[this.tableTimeStamps.ServerStatus_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ServerStatus_Id\' in table \'TimeStamps\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTimeStamps.ServerStatus_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerStatusRow ServerStatusRow {
                get {
                    return ((ServerStatusRow)(this.GetParentRow(this.Table.ParentRelations["ServerStatus_TimeStamps"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ServerStatus_TimeStamps"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServerStatus_IdNull() {
                return this.IsNull(this.tableTimeStamps.ServerStatus_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServerStatus_IdNull() {
                this[this.tableTimeStamps.ServerStatus_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SwitchesRow : System.Data.DataRow {
            
            private SwitchesDataTable tableSwitches;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SwitchesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSwitches = ((SwitchesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ManufacturingTestMode {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.ManufacturingTestModeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ManufacturingTestMode\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.ManufacturingTestModeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VerifyOnlyMode {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.VerifyOnlyModeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'VerifyOnlyMode\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.VerifyOnlyModeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NoLogLimit {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.NoLogLimitColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NoLogLimit\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.NoLogLimitColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SetupMode {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SetupModeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SetupMode\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.SetupModeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DirectImaging {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.DirectImagingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DirectImaging\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.DirectImagingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SkipOrderUpdate {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SkipOrderUpdateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SkipOrderUpdate\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.SkipOrderUpdateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AutoThroughPutMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.AutoThroughPutMeasurementColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AutoThroughPutMeasurement\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.AutoThroughPutMeasurementColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TimingLogged {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.TimingLoggedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TimingLogged\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.TimingLoggedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PreLoadBartender {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.PreLoadBartenderColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PreLoadBartender\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.PreLoadBartenderColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SkipCaching {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SkipCachingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SkipCaching\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.SkipCachingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SkipOrderStatusUpdates {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SkipOrderStatusUpdatesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SkipOrderStatusUpdates\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.SkipOrderStatusUpdatesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrintOnlyMode {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.PrintOnlyModeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PrintOnlyMode\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.PrintOnlyModeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SkipAutoloaderScanning {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SkipAutoloaderScanningColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SkipAutoloaderScanning\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.SkipAutoloaderScanningColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrintBeforeRecording {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.PrintBeforeRecordingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PrintBeforeRecording\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.PrintBeforeRecordingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseDriveLettersForRecorders {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.UseDriveLettersForRecordersColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UseDriveLettersForRecorders\' in table \'Switches\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableSwitches.UseDriveLettersForRecordersColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TraceSCSICommands {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.TraceSCSICommandsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TraceSCSICommands\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.TraceSCSICommandsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TraceReadWriteCommands {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.TraceReadWriteCommandsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TraceReadWriteCommands\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.TraceReadWriteCommandsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TraceSerialCommands {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.TraceSerialCommandsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TraceSerialCommands\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.TraceSerialCommandsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TraceLabelAndPrinting {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.TraceLabelAndPrintingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TraceLabelAndPrinting\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.TraceLabelAndPrintingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TraceXMLMessages {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.TraceXMLMessagesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TraceXMLMessages\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.TraceXMLMessagesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LogSkippingOrder {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.LogSkippingOrderColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LogSkippingOrder\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.LogSkippingOrderColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RunWithoutDevices {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.RunWithoutDevicesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RunWithoutDevices\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.RunWithoutDevicesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DisablePreloadingRecorderAfterPrinterLoad {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.DisablePreloadingRecorderAfterPrinterLoadColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DisablePreloadingRecorderAfterPrinterLoad\' in table \'Switch" +
                                "es\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.DisablePreloadingRecorderAfterPrinterLoadColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DisableCacheLocking {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.DisableCacheLockingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DisableCacheLocking\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.DisableCacheLockingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EnableCacheLimiting {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.EnableCacheLimitingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EnableCacheLimiting\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.EnableCacheLimitingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SkipSerialPortForAutoloader {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SkipSerialPortForAutoloaderColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SkipSerialPortForAutoloader\' in table \'Switches\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableSwitches.SkipSerialPortForAutoloaderColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SkipDriveForReaderRecorderCache {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SkipDriveForReaderRecorderCacheColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SkipDriveForReaderRecorderCache\' in table \'Switches\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.SkipDriveForReaderRecorderCacheColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseDelayBeforeMainWindow {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.UseDelayBeforeMainWindowColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UseDelayBeforeMainWindow\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.UseDelayBeforeMainWindowColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserParallelPortForPrism {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.UserParallelPortForPrismColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UserParallelPortForPrism\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.UserParallelPortForPrismColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DisableDriverNameInRendering {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.DisableDriverNameInRenderingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DisableDriverNameInRendering\' in table \'Switches\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableSwitches.DisableDriverNameInRenderingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DisableImageSizeChecking {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.DisableImageSizeCheckingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DisableImageSizeChecking\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.DisableImageSizeCheckingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServerStatus_Id {
                get {
                    try {
                        return ((int)(this[this.tableSwitches.ServerStatus_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ServerStatus_Id\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.ServerStatus_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerStatusRow ServerStatusRow {
                get {
                    return ((ServerStatusRow)(this.GetParentRow(this.Table.ParentRelations["ServerStatus_Switches"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ServerStatus_Switches"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufacturingTestModeNull() {
                return this.IsNull(this.tableSwitches.ManufacturingTestModeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufacturingTestModeNull() {
                this[this.tableSwitches.ManufacturingTestModeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVerifyOnlyModeNull() {
                return this.IsNull(this.tableSwitches.VerifyOnlyModeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVerifyOnlyModeNull() {
                this[this.tableSwitches.VerifyOnlyModeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoLogLimitNull() {
                return this.IsNull(this.tableSwitches.NoLogLimitColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoLogLimitNull() {
                this[this.tableSwitches.NoLogLimitColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetupModeNull() {
                return this.IsNull(this.tableSwitches.SetupModeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetupModeNull() {
                this[this.tableSwitches.SetupModeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDirectImagingNull() {
                return this.IsNull(this.tableSwitches.DirectImagingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDirectImagingNull() {
                this[this.tableSwitches.DirectImagingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSkipOrderUpdateNull() {
                return this.IsNull(this.tableSwitches.SkipOrderUpdateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSkipOrderUpdateNull() {
                this[this.tableSwitches.SkipOrderUpdateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoThroughPutMeasurementNull() {
                return this.IsNull(this.tableSwitches.AutoThroughPutMeasurementColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAutoThroughPutMeasurementNull() {
                this[this.tableSwitches.AutoThroughPutMeasurementColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimingLoggedNull() {
                return this.IsNull(this.tableSwitches.TimingLoggedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimingLoggedNull() {
                this[this.tableSwitches.TimingLoggedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreLoadBartenderNull() {
                return this.IsNull(this.tableSwitches.PreLoadBartenderColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreLoadBartenderNull() {
                this[this.tableSwitches.PreLoadBartenderColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSkipCachingNull() {
                return this.IsNull(this.tableSwitches.SkipCachingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSkipCachingNull() {
                this[this.tableSwitches.SkipCachingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSkipOrderStatusUpdatesNull() {
                return this.IsNull(this.tableSwitches.SkipOrderStatusUpdatesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSkipOrderStatusUpdatesNull() {
                this[this.tableSwitches.SkipOrderStatusUpdatesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrintOnlyModeNull() {
                return this.IsNull(this.tableSwitches.PrintOnlyModeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrintOnlyModeNull() {
                this[this.tableSwitches.PrintOnlyModeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSkipAutoloaderScanningNull() {
                return this.IsNull(this.tableSwitches.SkipAutoloaderScanningColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSkipAutoloaderScanningNull() {
                this[this.tableSwitches.SkipAutoloaderScanningColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrintBeforeRecordingNull() {
                return this.IsNull(this.tableSwitches.PrintBeforeRecordingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrintBeforeRecordingNull() {
                this[this.tableSwitches.PrintBeforeRecordingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseDriveLettersForRecordersNull() {
                return this.IsNull(this.tableSwitches.UseDriveLettersForRecordersColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseDriveLettersForRecordersNull() {
                this[this.tableSwitches.UseDriveLettersForRecordersColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTraceSCSICommandsNull() {
                return this.IsNull(this.tableSwitches.TraceSCSICommandsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTraceSCSICommandsNull() {
                this[this.tableSwitches.TraceSCSICommandsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTraceReadWriteCommandsNull() {
                return this.IsNull(this.tableSwitches.TraceReadWriteCommandsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTraceReadWriteCommandsNull() {
                this[this.tableSwitches.TraceReadWriteCommandsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTraceSerialCommandsNull() {
                return this.IsNull(this.tableSwitches.TraceSerialCommandsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTraceSerialCommandsNull() {
                this[this.tableSwitches.TraceSerialCommandsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTraceLabelAndPrintingNull() {
                return this.IsNull(this.tableSwitches.TraceLabelAndPrintingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTraceLabelAndPrintingNull() {
                this[this.tableSwitches.TraceLabelAndPrintingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTraceXMLMessagesNull() {
                return this.IsNull(this.tableSwitches.TraceXMLMessagesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTraceXMLMessagesNull() {
                this[this.tableSwitches.TraceXMLMessagesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogSkippingOrderNull() {
                return this.IsNull(this.tableSwitches.LogSkippingOrderColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogSkippingOrderNull() {
                this[this.tableSwitches.LogSkippingOrderColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRunWithoutDevicesNull() {
                return this.IsNull(this.tableSwitches.RunWithoutDevicesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRunWithoutDevicesNull() {
                this[this.tableSwitches.RunWithoutDevicesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDisablePreloadingRecorderAfterPrinterLoadNull() {
                return this.IsNull(this.tableSwitches.DisablePreloadingRecorderAfterPrinterLoadColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDisablePreloadingRecorderAfterPrinterLoadNull() {
                this[this.tableSwitches.DisablePreloadingRecorderAfterPrinterLoadColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDisableCacheLockingNull() {
                return this.IsNull(this.tableSwitches.DisableCacheLockingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDisableCacheLockingNull() {
                this[this.tableSwitches.DisableCacheLockingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnableCacheLimitingNull() {
                return this.IsNull(this.tableSwitches.EnableCacheLimitingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEnableCacheLimitingNull() {
                this[this.tableSwitches.EnableCacheLimitingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSkipSerialPortForAutoloaderNull() {
                return this.IsNull(this.tableSwitches.SkipSerialPortForAutoloaderColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSkipSerialPortForAutoloaderNull() {
                this[this.tableSwitches.SkipSerialPortForAutoloaderColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSkipDriveForReaderRecorderCacheNull() {
                return this.IsNull(this.tableSwitches.SkipDriveForReaderRecorderCacheColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSkipDriveForReaderRecorderCacheNull() {
                this[this.tableSwitches.SkipDriveForReaderRecorderCacheColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseDelayBeforeMainWindowNull() {
                return this.IsNull(this.tableSwitches.UseDelayBeforeMainWindowColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseDelayBeforeMainWindowNull() {
                this[this.tableSwitches.UseDelayBeforeMainWindowColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserParallelPortForPrismNull() {
                return this.IsNull(this.tableSwitches.UserParallelPortForPrismColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserParallelPortForPrismNull() {
                this[this.tableSwitches.UserParallelPortForPrismColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDisableDriverNameInRenderingNull() {
                return this.IsNull(this.tableSwitches.DisableDriverNameInRenderingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDisableDriverNameInRenderingNull() {
                this[this.tableSwitches.DisableDriverNameInRenderingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDisableImageSizeCheckingNull() {
                return this.IsNull(this.tableSwitches.DisableImageSizeCheckingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDisableImageSizeCheckingNull() {
                this[this.tableSwitches.DisableImageSizeCheckingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServerStatus_IdNull() {
                return this.IsNull(this.tableSwitches.ServerStatus_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServerStatus_IdNull() {
                this[this.tableSwitches.ServerStatus_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OrderListRow : System.Data.DataRow {
            
            private OrderListDataTable tableOrderList;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OrderListRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOrderList = ((OrderListDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Automation {
                get {
                    return ((string)(this[this.tableOrderList.AutomationColumn]));
                }
                set {
                    this[this.tableOrderList.AutomationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cluster {
                get {
                    return ((string)(this[this.tableOrderList.ClusterColumn]));
                }
                set {
                    this[this.tableOrderList.ClusterColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NumberOfOrders {
                get {
                    return ((string)(this[this.tableOrderList.NumberOfOrdersColumn]));
                }
                set {
                    this[this.tableOrderList.NumberOfOrdersColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StatusTime {
                get {
                    return ((string)(this[this.tableOrderList.StatusTimeColumn]));
                }
                set {
                    this[this.tableOrderList.StatusTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OrderList_Id {
                get {
                    return ((int)(this[this.tableOrderList.OrderList_IdColumn]));
                }
                set {
                    this[this.tableOrderList.OrderList_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionOrderRow[] GetProductionOrderRows() {
                return ((ProductionOrderRow[])(base.GetChildRows(this.Table.ChildRelations["OrderList_ProductionOrder"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagingOrderRow[] GetImagingOrderRows() {
                return ((ImagingOrderRow[])(base.GetChildRows(this.Table.ChildRelations["OrderList_ImagingOrder"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProductionOrderRow : System.Data.DataRow {
            
            private ProductionOrderDataTable tableProductionOrder;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductionOrderRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProductionOrder = ((ProductionOrderDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrderId {
                get {
                    return ((string)(this[this.tableProductionOrder.OrderIdColumn]));
                }
                set {
                    this[this.tableProductionOrder.OrderIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientId {
                get {
                    return ((string)(this[this.tableProductionOrder.ClientIdColumn]));
                }
                set {
                    this[this.tableProductionOrder.ClientIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrderType {
                get {
                    try {
                        return ((string)(this[this.tableProductionOrder.OrderTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OrderType\' in table \'ProductionOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProductionOrder.OrderTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MediaType {
                get {
                    try {
                        return ((string)(this[this.tableProductionOrder.MediaTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MediaType\' in table \'ProductionOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProductionOrder.MediaTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MediaSize {
                get {
                    try {
                        return ((string)(this[this.tableProductionOrder.MediaSizeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MediaSize\' in table \'ProductionOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProductionOrder.MediaSizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrderState {
                get {
                    try {
                        return ((string)(this[this.tableProductionOrder.OrderStateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OrderState\' in table \'ProductionOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProductionOrder.OrderStateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrderStage {
                get {
                    return ((string)(this[this.tableProductionOrder.OrderStageColumn]));
                }
                set {
                    this[this.tableProductionOrder.OrderStageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CopiesRequested {
                get {
                    return ((string)(this[this.tableProductionOrder.CopiesRequestedColumn]));
                }
                set {
                    this[this.tableProductionOrder.CopiesRequestedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CopiesCompleted {
                get {
                    return ((string)(this[this.tableProductionOrder.CopiesCompletedColumn]));
                }
                set {
                    this[this.tableProductionOrder.CopiesCompletedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PercentCompleted {
                get {
                    return ((string)(this[this.tableProductionOrder.PercentCompletedColumn]));
                }
                set {
                    this[this.tableProductionOrder.PercentCompletedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OrderList_Id {
                get {
                    try {
                        return ((int)(this[this.tableProductionOrder.OrderList_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OrderList_Id\' in table \'ProductionOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProductionOrder.OrderList_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderListRow OrderListRow {
                get {
                    return ((OrderListRow)(this.GetParentRow(this.Table.ParentRelations["OrderList_ProductionOrder"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["OrderList_ProductionOrder"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderTypeNull() {
                return this.IsNull(this.tableProductionOrder.OrderTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderTypeNull() {
                this[this.tableProductionOrder.OrderTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMediaTypeNull() {
                return this.IsNull(this.tableProductionOrder.MediaTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMediaTypeNull() {
                this[this.tableProductionOrder.MediaTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMediaSizeNull() {
                return this.IsNull(this.tableProductionOrder.MediaSizeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMediaSizeNull() {
                this[this.tableProductionOrder.MediaSizeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderStateNull() {
                return this.IsNull(this.tableProductionOrder.OrderStateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderStateNull() {
                this[this.tableProductionOrder.OrderStateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderList_IdNull() {
                return this.IsNull(this.tableProductionOrder.OrderList_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderList_IdNull() {
                this[this.tableProductionOrder.OrderList_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ImagingOrderRow : System.Data.DataRow {
            
            private ImagingOrderDataTable tableImagingOrder;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ImagingOrderRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableImagingOrder = ((ImagingOrderDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OrderList_Id {
                get {
                    try {
                        return ((int)(this[this.tableImagingOrder.OrderList_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OrderList_Id\' in table \'ImagingOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableImagingOrder.OrderList_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderListRow OrderListRow {
                get {
                    return ((OrderListRow)(this.GetParentRow(this.Table.ParentRelations["OrderList_ImagingOrder"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["OrderList_ImagingOrder"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderList_IdNull() {
                return this.IsNull(this.tableImagingOrder.OrderList_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderList_IdNull() {
                this[this.tableImagingOrder.OrderList_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SessionLogRow : System.Data.DataRow {
            
            private SessionLogDataTable tableSessionLog;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SessionLogRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSessionLog = ((SessionLogDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NumberOfEntries {
                get {
                    return ((string)(this[this.tableSessionLog.NumberOfEntriesColumn]));
                }
                set {
                    this[this.tableSessionLog.NumberOfEntriesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SessionLog_Id {
                get {
                    return ((int)(this[this.tableSessionLog.SessionLog_IdColumn]));
                }
                set {
                    this[this.tableSessionLog.SessionLog_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntryRow[] GetEntryRows() {
                return ((EntryRow[])(base.GetChildRows(this.Table.ChildRelations["SessionLog_Entry"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EntryRow : System.Data.DataRow {
            
            private EntryDataTable tableEntry;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EntryRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEntry = ((EntryDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text {
                get {
                    return ((string)(this[this.tableEntry.TextColumn]));
                }
                set {
                    this[this.tableEntry.TextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Timestamp {
                get {
                    return ((string)(this[this.tableEntry.TimestampColumn]));
                }
                set {
                    this[this.tableEntry.TimestampColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Errorcode {
                get {
                    return ((string)(this[this.tableEntry.ErrorcodeColumn]));
                }
                set {
                    this[this.tableEntry.ErrorcodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SessionLog_Id {
                get {
                    try {
                        return ((int)(this[this.tableEntry.SessionLog_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SessionLog_Id\' in table \'Entry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntry.SessionLog_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionLogRow SessionLogRow {
                get {
                    return ((SessionLogRow)(this.GetParentRow(this.Table.ParentRelations["SessionLog_Entry"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SessionLog_Entry"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSessionLog_IdNull() {
                return this.IsNull(this.tableEntry.SessionLog_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSessionLog_IdNull() {
                this[this.tableEntry.SessionLog_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DialogActionRow : System.Data.DataRow {
            
            private DialogActionDataTable tableDialogAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DialogActionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDialogAction = ((DialogActionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DialogId {
                get {
                    return ((string)(this[this.tableDialogAction.DialogIdColumn]));
                }
                set {
                    this[this.tableDialogAction.DialogIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Button {
                get {
                    return ((string)(this[this.tableDialogAction.ButtonColumn]));
                }
                set {
                    this[this.tableDialogAction.ButtonColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableDialogAction.NameColumn]));
                }
                set {
                    this[this.tableDialogAction.NameColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProductionParameterSettingsRow : System.Data.DataRow {
            
            private ProductionParameterSettingsDataTable tableProductionParameterSettings;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductionParameterSettingsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProductionParameterSettings = ((ProductionParameterSettingsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductionParameterSettings_Id {
                get {
                    return ((int)(this[this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn]));
                }
                set {
                    this[this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerRow[] GetServerRows() {
                return ((ServerRow[])(base.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Server"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyRow[] GetVerifyRows() {
                return ((VerifyRow[])(base.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Verify"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingRow[] GetRecordingRows() {
                return ((RecordingRow[])(base.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Recording"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintingRow[] GetPrintingRows() {
                return ((PrintingRow[])(base.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Printing"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderRow[] GetAutoloaderRows() {
                return ((AutoloaderRow[])(base.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Autoloader"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadingRow[] GetReadingRows() {
                return ((ReadingRow[])(base.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Reading"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KioskModeRow[] GetKioskModeRows() {
                return ((KioskModeRow[])(base.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_KioskMode"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessagingRow[] GetMessagingRows() {
                return ((MessagingRow[])(base.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Messaging"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServerRow : System.Data.DataRow {
            
            private ServerDataTable tableServer;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServer = ((ServerDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableServer.DescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'Server\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServer.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServerMode {
                get {
                    try {
                        return ((string)(this[this.tableServer.ServerModeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ServerMode\' in table \'Server\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServer.ServerModeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseFIFO {
                get {
                    try {
                        return ((string)(this[this.tableServer.UseFIFOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UseFIFO\' in table \'Server\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServer.UseFIFOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cluster {
                get {
                    return ((string)(this[this.tableServer.ClusterColumn]));
                }
                set {
                    this[this.tableServer.ClusterColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductionParameterSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tableServer.ProductionParameterSettings_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductionParameterSettings_Id\' in table \'Server\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableServer.ProductionParameterSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Server"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Server"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableServer.DescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableServer.DescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServerModeNull() {
                return this.IsNull(this.tableServer.ServerModeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServerModeNull() {
                this[this.tableServer.ServerModeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseFIFONull() {
                return this.IsNull(this.tableServer.UseFIFOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseFIFONull() {
                this[this.tableServer.UseFIFOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductionParameterSettings_IdNull() {
                return this.IsNull(this.tableServer.ProductionParameterSettings_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductionParameterSettings_IdNull() {
                this[this.tableServer.ProductionParameterSettings_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class VerifyRow : System.Data.DataRow {
            
            private VerifyDataTable tableVerify;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VerifyRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVerify = ((VerifyDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseVerify {
                get {
                    try {
                        return ((string)(this[this.tableVerify.UseVerifyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UseVerify\' in table \'Verify\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVerify.UseVerifyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Frequency {
                get {
                    return ((string)(this[this.tableVerify.FrequencyColumn]));
                }
                set {
                    this[this.tableVerify.FrequencyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductionParameterSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tableVerify.ProductionParameterSettings_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductionParameterSettings_Id\' in table \'Verify\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableVerify.ProductionParameterSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Verify"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Verify"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseVerifyNull() {
                return this.IsNull(this.tableVerify.UseVerifyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseVerifyNull() {
                this[this.tableVerify.UseVerifyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductionParameterSettings_IdNull() {
                return this.IsNull(this.tableVerify.ProductionParameterSettings_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductionParameterSettings_IdNull() {
                this[this.tableVerify.ProductionParameterSettings_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RecordingRow : System.Data.DataRow {
            
            private RecordingDataTable tableRecording;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RecordingRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRecording = ((RecordingDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NewMedia {
                get {
                    try {
                        return ((string)(this[this.tableRecording.NewMediaColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NewMedia\' in table \'Recording\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecording.NewMediaColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaxSpeed {
                get {
                    return ((string)(this[this.tableRecording.MaxSpeedColumn]));
                }
                set {
                    this[this.tableRecording.MaxSpeedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RejectNonISO {
                get {
                    try {
                        return ((string)(this[this.tableRecording.RejectNonISOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RejectNonISO\' in table \'Recording\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecording.RejectNonISOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AddPostgap {
                get {
                    try {
                        return ((string)(this[this.tableRecording.AddPostgapColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AddPostgap\' in table \'Recording\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecording.AddPostgapColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DestroyRejects {
                get {
                    try {
                        return ((string)(this[this.tableRecording.DestroyRejectsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DestroyRejects\' in table \'Recording\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecording.DestroyRejectsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Overburn {
                get {
                    try {
                        return ((string)(this[this.tableRecording.OverburnColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Overburn\' in table \'Recording\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecording.OverburnColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CacheDriveLetters {
                get {
                    try {
                        return ((string)(this[this.tableRecording.CacheDriveLettersColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CacheDriveLetters\' in table \'Recording\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecording.CacheDriveLettersColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductionParameterSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tableRecording.ProductionParameterSettings_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductionParameterSettings_Id\' in table \'Recording\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableRecording.ProductionParameterSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Recording"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Recording"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewMediaNull() {
                return this.IsNull(this.tableRecording.NewMediaColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNewMediaNull() {
                this[this.tableRecording.NewMediaColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRejectNonISONull() {
                return this.IsNull(this.tableRecording.RejectNonISOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRejectNonISONull() {
                this[this.tableRecording.RejectNonISOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddPostgapNull() {
                return this.IsNull(this.tableRecording.AddPostgapColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddPostgapNull() {
                this[this.tableRecording.AddPostgapColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestroyRejectsNull() {
                return this.IsNull(this.tableRecording.DestroyRejectsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestroyRejectsNull() {
                this[this.tableRecording.DestroyRejectsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverburnNull() {
                return this.IsNull(this.tableRecording.OverburnColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverburnNull() {
                this[this.tableRecording.OverburnColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCacheDriveLettersNull() {
                return this.IsNull(this.tableRecording.CacheDriveLettersColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCacheDriveLettersNull() {
                this[this.tableRecording.CacheDriveLettersColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductionParameterSettings_IdNull() {
                return this.IsNull(this.tableRecording.ProductionParameterSettings_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductionParameterSettings_IdNull() {
                this[this.tableRecording.ProductionParameterSettings_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PrintingRow : System.Data.DataRow {
            
            private PrintingDataTable tablePrinting;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintingRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrinting = ((PrintingDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RejectPattern {
                get {
                    try {
                        return ((string)(this[this.tablePrinting.RejectPatternColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RejectPattern\' in table \'Printing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrinting.RejectPatternColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductionParameterSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tablePrinting.ProductionParameterSettings_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductionParameterSettings_Id\' in table \'Printing\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePrinting.ProductionParameterSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Printing"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Printing"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRejectPatternNull() {
                return this.IsNull(this.tablePrinting.RejectPatternColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRejectPatternNull() {
                this[this.tablePrinting.RejectPatternColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductionParameterSettings_IdNull() {
                return this.IsNull(this.tablePrinting.ProductionParameterSettings_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductionParameterSettings_IdNull() {
                this[this.tablePrinting.ProductionParameterSettings_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AutoloaderRow : System.Data.DataRow {
            
            private AutoloaderDataTable tableAutoloader;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AutoloaderRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAutoloader = ((AutoloaderDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LoaderNumber {
                get {
                    return ((string)(this[this.tableAutoloader.LoaderNumberColumn]));
                }
                set {
                    this[this.tableAutoloader.LoaderNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MailboxUsage {
                get {
                    return ((string)(this[this.tableAutoloader.MailboxUsageColumn]));
                }
                set {
                    this[this.tableAutoloader.MailboxUsageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MediaSize {
                get {
                    try {
                        return ((string)(this[this.tableAutoloader.MediaSizeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MediaSize\' in table \'Autoloader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoloader.MediaSizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MediaType {
                get {
                    try {
                        return ((string)(this[this.tableAutoloader.MediaTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MediaType\' in table \'Autoloader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoloader.MediaTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Autoloader_Id {
                get {
                    return ((int)(this[this.tableAutoloader.Autoloader_IdColumn]));
                }
                set {
                    this[this.tableAutoloader.Autoloader_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductionParameterSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tableAutoloader.ProductionParameterSettings_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductionParameterSettings_Id\' in table \'Autoloader\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableAutoloader.ProductionParameterSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Autoloader"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Autoloader"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMediaSizeNull() {
                return this.IsNull(this.tableAutoloader.MediaSizeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMediaSizeNull() {
                this[this.tableAutoloader.MediaSizeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMediaTypeNull() {
                return this.IsNull(this.tableAutoloader.MediaTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMediaTypeNull() {
                this[this.tableAutoloader.MediaTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductionParameterSettings_IdNull() {
                return this.IsNull(this.tableAutoloader.ProductionParameterSettings_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductionParameterSettings_IdNull() {
                this[this.tableAutoloader.ProductionParameterSettings_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BinRow[] GetBinRows() {
                return ((BinRow[])(base.GetChildRows(this.Table.ChildRelations["Autoloader_Bin"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BinRow : System.Data.DataRow {
            
            private BinDataTable tableBin;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BinRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBin = ((BinDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BinNumber {
                get {
                    return ((string)(this[this.tableBin.BinNumberColumn]));
                }
                set {
                    this[this.tableBin.BinNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BinUsage {
                get {
                    return ((string)(this[this.tableBin.BinUsageColumn]));
                }
                set {
                    this[this.tableBin.BinUsageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Autoloader_Id {
                get {
                    try {
                        return ((int)(this[this.tableBin.Autoloader_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Autoloader_Id\' in table \'Bin\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBin.Autoloader_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderRow AutoloaderRow {
                get {
                    return ((AutoloaderRow)(this.GetParentRow(this.Table.ParentRelations["Autoloader_Bin"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Autoloader_Bin"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoloader_IdNull() {
                return this.IsNull(this.tableBin.Autoloader_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAutoloader_IdNull() {
                this[this.tableBin.Autoloader_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReadingRow : System.Data.DataRow {
            
            private ReadingDataTable tableReading;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReadingRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReading = ((ReadingDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AudioReadSpeed {
                get {
                    try {
                        return ((string)(this[this.tableReading.AudioReadSpeedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AudioReadSpeed\' in table \'Reading\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReading.AudioReadSpeedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PreferredReader {
                get {
                    try {
                        return ((string)(this[this.tableReading.PreferredReaderColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PreferredReader\' in table \'Reading\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReading.PreferredReaderColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Reading_Id {
                get {
                    return ((int)(this[this.tableReading.Reading_IdColumn]));
                }
                set {
                    this[this.tableReading.Reading_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductionParameterSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tableReading.ProductionParameterSettings_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductionParameterSettings_Id\' in table \'Reading\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableReading.ProductionParameterSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Reading"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Reading"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAudioReadSpeedNull() {
                return this.IsNull(this.tableReading.AudioReadSpeedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAudioReadSpeedNull() {
                this[this.tableReading.AudioReadSpeedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreferredReaderNull() {
                return this.IsNull(this.tableReading.PreferredReaderColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreferredReaderNull() {
                this[this.tableReading.PreferredReaderColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductionParameterSettings_IdNull() {
                return this.IsNull(this.tableReading.ProductionParameterSettings_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductionParameterSettings_IdNull() {
                this[this.tableReading.ProductionParameterSettings_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoBulkReadRow[] GetAutoBulkReadRows() {
                return ((AutoBulkReadRow[])(base.GetChildRows(this.Table.ChildRelations["Reading_AutoBulkRead"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AutoBulkReadRow : System.Data.DataRow {
            
            private AutoBulkReadDataTable tableAutoBulkRead;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AutoBulkReadRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAutoBulkRead = ((AutoBulkReadDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BulkReadBaseFolder {
                get {
                    return ((string)(this[this.tableAutoBulkRead.BulkReadBaseFolderColumn]));
                }
                set {
                    this[this.tableAutoBulkRead.BulkReadBaseFolderColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseVolumeIDAsFolderName {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.UseVolumeIDAsFolderNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UseVolumeIDAsFolderName\' in table \'AutoBulkRead\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.UseVolumeIDAsFolderNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseBarcodeAsFolderName {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.UseBarcodeAsFolderNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UseBarcodeAsFolderName\' in table \'AutoBulkRead\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.UseBarcodeAsFolderNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExtractFoldersAndFiles {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.ExtractFoldersAndFilesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ExtractFoldersAndFiles\' in table \'AutoBulkRead\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.ExtractFoldersAndFilesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ActionForNonFixatedDiscs {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.ActionForNonFixatedDiscsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ActionForNonFixatedDiscs\' in table \'AutoBulkRead\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.ActionForNonFixatedDiscsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AudioImageType {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.AudioImageTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AudioImageType\' in table \'AutoBulkRead\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.AudioImageTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseISRCAsFilenameForAudioTracks {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.UseISRCAsFilenameForAudioTracksColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UseISRCAsFilenameForAudioTracks\' in table \'AutoBulkRead\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.UseISRCAsFilenameForAudioTracksColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RejectFailures {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.RejectFailuresColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RejectFailures\' in table \'AutoBulkRead\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.RejectFailuresColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FIFOUnloading {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.FIFOUnloadingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FIFOUnloading\' in table \'AutoBulkRead\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.FIFOUnloadingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BarcodePort {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.BarcodePortColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BarcodePort\' in table \'AutoBulkRead\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.BarcodePortColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BarcodeAngle {
                get {
                    return ((string)(this[this.tableAutoBulkRead.BarcodeAngleColumn]));
                }
                set {
                    this[this.tableAutoBulkRead.BarcodeAngleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseBarcodeIndex {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.UseBarcodeIndexColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UseBarcodeIndex\' in table \'AutoBulkRead\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.UseBarcodeIndexColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Reading_Id {
                get {
                    try {
                        return ((int)(this[this.tableAutoBulkRead.Reading_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Reading_Id\' in table \'AutoBulkRead\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.Reading_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadingRow ReadingRow {
                get {
                    return ((ReadingRow)(this.GetParentRow(this.Table.ParentRelations["Reading_AutoBulkRead"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Reading_AutoBulkRead"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseVolumeIDAsFolderNameNull() {
                return this.IsNull(this.tableAutoBulkRead.UseVolumeIDAsFolderNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseVolumeIDAsFolderNameNull() {
                this[this.tableAutoBulkRead.UseVolumeIDAsFolderNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseBarcodeAsFolderNameNull() {
                return this.IsNull(this.tableAutoBulkRead.UseBarcodeAsFolderNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseBarcodeAsFolderNameNull() {
                this[this.tableAutoBulkRead.UseBarcodeAsFolderNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExtractFoldersAndFilesNull() {
                return this.IsNull(this.tableAutoBulkRead.ExtractFoldersAndFilesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExtractFoldersAndFilesNull() {
                this[this.tableAutoBulkRead.ExtractFoldersAndFilesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActionForNonFixatedDiscsNull() {
                return this.IsNull(this.tableAutoBulkRead.ActionForNonFixatedDiscsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActionForNonFixatedDiscsNull() {
                this[this.tableAutoBulkRead.ActionForNonFixatedDiscsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAudioImageTypeNull() {
                return this.IsNull(this.tableAutoBulkRead.AudioImageTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAudioImageTypeNull() {
                this[this.tableAutoBulkRead.AudioImageTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseISRCAsFilenameForAudioTracksNull() {
                return this.IsNull(this.tableAutoBulkRead.UseISRCAsFilenameForAudioTracksColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseISRCAsFilenameForAudioTracksNull() {
                this[this.tableAutoBulkRead.UseISRCAsFilenameForAudioTracksColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRejectFailuresNull() {
                return this.IsNull(this.tableAutoBulkRead.RejectFailuresColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRejectFailuresNull() {
                this[this.tableAutoBulkRead.RejectFailuresColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFIFOUnloadingNull() {
                return this.IsNull(this.tableAutoBulkRead.FIFOUnloadingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFIFOUnloadingNull() {
                this[this.tableAutoBulkRead.FIFOUnloadingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBarcodePortNull() {
                return this.IsNull(this.tableAutoBulkRead.BarcodePortColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBarcodePortNull() {
                this[this.tableAutoBulkRead.BarcodePortColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseBarcodeIndexNull() {
                return this.IsNull(this.tableAutoBulkRead.UseBarcodeIndexColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseBarcodeIndexNull() {
                this[this.tableAutoBulkRead.UseBarcodeIndexColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReading_IdNull() {
                return this.IsNull(this.tableAutoBulkRead.Reading_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReading_IdNull() {
                this[this.tableAutoBulkRead.Reading_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class KioskModeRow : System.Data.DataRow {
            
            private KioskModeDataTable tableKioskMode;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KioskModeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableKioskMode = ((KioskModeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseKiosk {
                get {
                    try {
                        return ((string)(this[this.tableKioskMode.UseKioskColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UseKiosk\' in table \'KioskMode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKioskMode.UseKioskColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AutoStart {
                get {
                    try {
                        return ((string)(this[this.tableKioskMode.AutoStartColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AutoStart\' in table \'KioskMode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKioskMode.AutoStartColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RecoverOrders {
                get {
                    try {
                        return ((string)(this[this.tableKioskMode.RecoverOrdersColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RecoverOrders\' in table \'KioskMode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKioskMode.RecoverOrdersColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RunNoPrinter {
                get {
                    try {
                        return ((string)(this[this.tableKioskMode.RunNoPrinterColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RunNoPrinter\' in table \'KioskMode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKioskMode.RunNoPrinterColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AutoloaderRecovery {
                get {
                    try {
                        return ((string)(this[this.tableKioskMode.AutoloaderRecoveryColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AutoloaderRecovery\' in table \'KioskMode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKioskMode.AutoloaderRecoveryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrinterRecover {
                get {
                    try {
                        return ((string)(this[this.tableKioskMode.PrinterRecoverColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PrinterRecover\' in table \'KioskMode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKioskMode.PrinterRecoverColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductionParameterSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tableKioskMode.ProductionParameterSettings_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductionParameterSettings_Id\' in table \'KioskMode\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableKioskMode.ProductionParameterSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_KioskMode"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_KioskMode"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseKioskNull() {
                return this.IsNull(this.tableKioskMode.UseKioskColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseKioskNull() {
                this[this.tableKioskMode.UseKioskColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoStartNull() {
                return this.IsNull(this.tableKioskMode.AutoStartColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAutoStartNull() {
                this[this.tableKioskMode.AutoStartColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecoverOrdersNull() {
                return this.IsNull(this.tableKioskMode.RecoverOrdersColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecoverOrdersNull() {
                this[this.tableKioskMode.RecoverOrdersColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRunNoPrinterNull() {
                return this.IsNull(this.tableKioskMode.RunNoPrinterColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRunNoPrinterNull() {
                this[this.tableKioskMode.RunNoPrinterColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoloaderRecoveryNull() {
                return this.IsNull(this.tableKioskMode.AutoloaderRecoveryColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAutoloaderRecoveryNull() {
                this[this.tableKioskMode.AutoloaderRecoveryColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrinterRecoverNull() {
                return this.IsNull(this.tableKioskMode.PrinterRecoverColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrinterRecoverNull() {
                this[this.tableKioskMode.PrinterRecoverColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductionParameterSettings_IdNull() {
                return this.IsNull(this.tableKioskMode.ProductionParameterSettings_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductionParameterSettings_IdNull() {
                this[this.tableKioskMode.ProductionParameterSettings_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MessagingRow : System.Data.DataRow {
            
            private MessagingDataTable tableMessaging;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MessagingRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMessaging = ((MessagingDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrderStatusUpdateInterval {
                get {
                    return ((string)(this[this.tableMessaging.OrderStatusUpdateIntervalColumn]));
                }
                set {
                    this[this.tableMessaging.OrderStatusUpdateIntervalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductionParameterSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tableMessaging.ProductionParameterSettings_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductionParameterSettings_Id\' in table \'Messaging\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableMessaging.ProductionParameterSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Messaging"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Messaging"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductionParameterSettings_IdNull() {
                return this.IsNull(this.tableMessaging.ProductionParameterSettings_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductionParameterSettings_IdNull() {
                this[this.tableMessaging.ProductionParameterSettings_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ImagingParameterSettingsRow : System.Data.DataRow {
            
            private ImagingParameterSettingsDataTable tableImagingParameterSettings;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ImagingParameterSettingsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableImagingParameterSettings = ((ImagingParameterSettingsDataTable)(this.Table));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AckOnlyRowChangeEvent : System.EventArgs {
            
            private AckOnlyRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AckOnlyRowChangeEvent(AckOnlyRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AckOnlyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServerStatusRowChangeEvent : System.EventArgs {
            
            private ServerStatusRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerStatusRowChangeEvent(ServerStatusRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerStatusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServerInfoRowChangeEvent : System.EventArgs {
            
            private ServerInfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerInfoRowChangeEvent(ServerInfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TimeStampsRowChangeEvent : System.EventArgs {
            
            private TimeStampsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimeStampsRowChangeEvent(TimeStampsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TimeStampsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SwitchesRowChangeEvent : System.EventArgs {
            
            private SwitchesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SwitchesRowChangeEvent(SwitchesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SwitchesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OrderListRowChangeEvent : System.EventArgs {
            
            private OrderListRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderListRowChangeEvent(OrderListRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProductionOrderRowChangeEvent : System.EventArgs {
            
            private ProductionOrderRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionOrderRowChangeEvent(ProductionOrderRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionOrderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ImagingOrderRowChangeEvent : System.EventArgs {
            
            private ImagingOrderRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagingOrderRowChangeEvent(ImagingOrderRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagingOrderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SessionLogRowChangeEvent : System.EventArgs {
            
            private SessionLogRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionLogRowChangeEvent(SessionLogRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionLogRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EntryRowChangeEvent : System.EventArgs {
            
            private EntryRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntryRowChangeEvent(EntryRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DialogActionRowChangeEvent : System.EventArgs {
            
            private DialogActionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DialogActionRowChangeEvent(DialogActionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DialogActionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProductionParameterSettingsRowChangeEvent : System.EventArgs {
            
            private ProductionParameterSettingsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsRowChangeEvent(ProductionParameterSettingsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServerRowChangeEvent : System.EventArgs {
            
            private ServerRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerRowChangeEvent(ServerRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class VerifyRowChangeEvent : System.EventArgs {
            
            private VerifyRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyRowChangeEvent(VerifyRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RecordingRowChangeEvent : System.EventArgs {
            
            private RecordingRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingRowChangeEvent(RecordingRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PrintingRowChangeEvent : System.EventArgs {
            
            private PrintingRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintingRowChangeEvent(PrintingRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AutoloaderRowChangeEvent : System.EventArgs {
            
            private AutoloaderRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderRowChangeEvent(AutoloaderRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BinRowChangeEvent : System.EventArgs {
            
            private BinRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BinRowChangeEvent(BinRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BinRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReadingRowChangeEvent : System.EventArgs {
            
            private ReadingRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadingRowChangeEvent(ReadingRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AutoBulkReadRowChangeEvent : System.EventArgs {
            
            private AutoBulkReadRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoBulkReadRowChangeEvent(AutoBulkReadRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoBulkReadRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class KioskModeRowChangeEvent : System.EventArgs {
            
            private KioskModeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KioskModeRowChangeEvent(KioskModeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KioskModeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MessagingRowChangeEvent : System.EventArgs {
            
            private MessagingRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessagingRowChangeEvent(MessagingRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MessagingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ImagingParameterSettingsRowChangeEvent : System.EventArgs {
            
            private ImagingParameterSettingsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagingParameterSettingsRowChangeEvent(ImagingParameterSettingsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagingParameterSettingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591