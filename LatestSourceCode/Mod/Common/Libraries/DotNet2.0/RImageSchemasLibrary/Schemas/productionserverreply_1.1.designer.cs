//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace RImageSchemas.Schemas {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("ProductionServerReply")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ProductionServerReply : System.Data.DataSet {
        
        private AckOnlyDataTable tableAckOnly;
        
        private ServerStatusDataTable tableServerStatus;
        
        private ServerInfoDataTable tableServerInfo;
        
        private ProductionCountDataTable tableProductionCount;
        
        private SwitchesDataTable tableSwitches;
        
        private AutoloaderStatusDataTable tableAutoloaderStatus;
        
        private BinDataTable tableBin;
        
        private PrinterDataTable tablePrinter;
        
        private RecorderDataTable tableRecorder;
        
        private ActivationInfoDataTable tableActivationInfo;
        
        private BaseDataTable tableBase;
        
        private RawModeDataTable tableRawMode;
        
        private SmarteCDDataTable tableSmarteCD;
        
        private VideoCDDataTable tableVideoCD;
        
        private OrderListDataTable tableOrderList;
        
        private ProductionOrderDataTable tableProductionOrder;
        
        private SessionLogDataTable tableSessionLog;
        
        private EntryDataTable tableEntry;
        
        private DialogActionDataTable tableDialogAction;
        
        private ProductionParameterSettingsDataTable tableProductionParameterSettings;
        
        private ServerDataTable tableServer;
        
        private ModesDataTable tableModes;
        
        private CachingDataTable tableCaching;
        
        private RecordingDataTable tableRecording;
        
        private VerifyDataTable tableVerify;
        
        private PrintingDataTable tablePrinting;
        
        private AutoloaderDataTable tableAutoloader;
        
        private BinSettingDataTable tableBinSetting;
        
        private ReadingDataTable tableReading;
        
        private AutoBulkReadDataTable tableAutoBulkRead;
        
        private MediaCodesDataTable tableMediaCodes;
        
        private MediaCodeDataTable tableMediaCode;
        
        private KioskModeDataTable tableKioskMode;
        
        private UnlockingCodesDataTable tableUnlockingCodes;
        
        private System.Data.DataRelation relationServerStatus_ServerInfo;
        
        private System.Data.DataRelation relationServerStatus_ProductionCount;
        
        private System.Data.DataRelation relationServerStatus_Switches;
        
        private System.Data.DataRelation relationServerStatus_AutoloaderStatus;
        
        private System.Data.DataRelation relationAutoloaderStatus_Bin;
        
        private System.Data.DataRelation relationAutoloaderStatus_Printer;
        
        private System.Data.DataRelation relationAutoloaderStatus_Recorder;
        
        private System.Data.DataRelation relationServerStatus_ActivationInfo;
        
        private System.Data.DataRelation relationActivationInfo_Base;
        
        private System.Data.DataRelation relationActivationInfo_RawMode;
        
        private System.Data.DataRelation relationActivationInfo_SmarteCD;
        
        private System.Data.DataRelation relationActivationInfo_VideoCD;
        
        private System.Data.DataRelation relationOrderList_ProductionOrder;
        
        private System.Data.DataRelation relationSessionLog_Entry;
        
        private System.Data.DataRelation relationProductionParameterSettings_Server;
        
        private System.Data.DataRelation relationProductionParameterSettings_Modes;
        
        private System.Data.DataRelation relationProductionParameterSettings_Caching;
        
        private System.Data.DataRelation relationProductionParameterSettings_Recording;
        
        private System.Data.DataRelation relationProductionParameterSettings_Verify;
        
        private System.Data.DataRelation relationProductionParameterSettings_Printing;
        
        private System.Data.DataRelation relationProductionParameterSettings_Autoloader;
        
        private System.Data.DataRelation relationAutoloader_BinSetting;
        
        private System.Data.DataRelation relationProductionParameterSettings_Reading;
        
        private System.Data.DataRelation relationReading_AutoBulkRead;
        
        private System.Data.DataRelation relationProductionParameterSettings_MediaCodes;
        
        private System.Data.DataRelation relationMediaCodes_MediaCode;
        
        private System.Data.DataRelation relationProductionParameterSettings_KioskMode;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProductionServerReply() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ProductionServerReply(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["AckOnly"] != null)) {
                    base.Tables.Add(new AckOnlyDataTable(ds.Tables["AckOnly"]));
                }
                if ((ds.Tables["ServerStatus"] != null)) {
                    base.Tables.Add(new ServerStatusDataTable(ds.Tables["ServerStatus"]));
                }
                if ((ds.Tables["ServerInfo"] != null)) {
                    base.Tables.Add(new ServerInfoDataTable(ds.Tables["ServerInfo"]));
                }
                if ((ds.Tables["ProductionCount"] != null)) {
                    base.Tables.Add(new ProductionCountDataTable(ds.Tables["ProductionCount"]));
                }
                if ((ds.Tables["Switches"] != null)) {
                    base.Tables.Add(new SwitchesDataTable(ds.Tables["Switches"]));
                }
                if ((ds.Tables["AutoloaderStatus"] != null)) {
                    base.Tables.Add(new AutoloaderStatusDataTable(ds.Tables["AutoloaderStatus"]));
                }
                if ((ds.Tables["Bin"] != null)) {
                    base.Tables.Add(new BinDataTable(ds.Tables["Bin"]));
                }
                if ((ds.Tables["Printer"] != null)) {
                    base.Tables.Add(new PrinterDataTable(ds.Tables["Printer"]));
                }
                if ((ds.Tables["Recorder"] != null)) {
                    base.Tables.Add(new RecorderDataTable(ds.Tables["Recorder"]));
                }
                if ((ds.Tables["ActivationInfo"] != null)) {
                    base.Tables.Add(new ActivationInfoDataTable(ds.Tables["ActivationInfo"]));
                }
                if ((ds.Tables["Base"] != null)) {
                    base.Tables.Add(new BaseDataTable(ds.Tables["Base"]));
                }
                if ((ds.Tables["RawMode"] != null)) {
                    base.Tables.Add(new RawModeDataTable(ds.Tables["RawMode"]));
                }
                if ((ds.Tables["SmarteCD"] != null)) {
                    base.Tables.Add(new SmarteCDDataTable(ds.Tables["SmarteCD"]));
                }
                if ((ds.Tables["VideoCD"] != null)) {
                    base.Tables.Add(new VideoCDDataTable(ds.Tables["VideoCD"]));
                }
                if ((ds.Tables["OrderList"] != null)) {
                    base.Tables.Add(new OrderListDataTable(ds.Tables["OrderList"]));
                }
                if ((ds.Tables["ProductionOrder"] != null)) {
                    base.Tables.Add(new ProductionOrderDataTable(ds.Tables["ProductionOrder"]));
                }
                if ((ds.Tables["SessionLog"] != null)) {
                    base.Tables.Add(new SessionLogDataTable(ds.Tables["SessionLog"]));
                }
                if ((ds.Tables["Entry"] != null)) {
                    base.Tables.Add(new EntryDataTable(ds.Tables["Entry"]));
                }
                if ((ds.Tables["DialogAction"] != null)) {
                    base.Tables.Add(new DialogActionDataTable(ds.Tables["DialogAction"]));
                }
                if ((ds.Tables["ProductionParameterSettings"] != null)) {
                    base.Tables.Add(new ProductionParameterSettingsDataTable(ds.Tables["ProductionParameterSettings"]));
                }
                if ((ds.Tables["Server"] != null)) {
                    base.Tables.Add(new ServerDataTable(ds.Tables["Server"]));
                }
                if ((ds.Tables["Modes"] != null)) {
                    base.Tables.Add(new ModesDataTable(ds.Tables["Modes"]));
                }
                if ((ds.Tables["Caching"] != null)) {
                    base.Tables.Add(new CachingDataTable(ds.Tables["Caching"]));
                }
                if ((ds.Tables["Recording"] != null)) {
                    base.Tables.Add(new RecordingDataTable(ds.Tables["Recording"]));
                }
                if ((ds.Tables["Verify"] != null)) {
                    base.Tables.Add(new VerifyDataTable(ds.Tables["Verify"]));
                }
                if ((ds.Tables["Printing"] != null)) {
                    base.Tables.Add(new PrintingDataTable(ds.Tables["Printing"]));
                }
                if ((ds.Tables["Autoloader"] != null)) {
                    base.Tables.Add(new AutoloaderDataTable(ds.Tables["Autoloader"]));
                }
                if ((ds.Tables["BinSetting"] != null)) {
                    base.Tables.Add(new BinSettingDataTable(ds.Tables["BinSetting"]));
                }
                if ((ds.Tables["Reading"] != null)) {
                    base.Tables.Add(new ReadingDataTable(ds.Tables["Reading"]));
                }
                if ((ds.Tables["AutoBulkRead"] != null)) {
                    base.Tables.Add(new AutoBulkReadDataTable(ds.Tables["AutoBulkRead"]));
                }
                if ((ds.Tables["MediaCodes"] != null)) {
                    base.Tables.Add(new MediaCodesDataTable(ds.Tables["MediaCodes"]));
                }
                if ((ds.Tables["MediaCode"] != null)) {
                    base.Tables.Add(new MediaCodeDataTable(ds.Tables["MediaCode"]));
                }
                if ((ds.Tables["KioskMode"] != null)) {
                    base.Tables.Add(new KioskModeDataTable(ds.Tables["KioskMode"]));
                }
                if ((ds.Tables["UnlockingCodes"] != null)) {
                    base.Tables.Add(new UnlockingCodesDataTable(ds.Tables["UnlockingCodes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AckOnlyDataTable AckOnly {
            get {
                return this.tableAckOnly;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerStatusDataTable ServerStatus {
            get {
                return this.tableServerStatus;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerInfoDataTable ServerInfo {
            get {
                return this.tableServerInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProductionCountDataTable ProductionCount {
            get {
                return this.tableProductionCount;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SwitchesDataTable Switches {
            get {
                return this.tableSwitches;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AutoloaderStatusDataTable AutoloaderStatus {
            get {
                return this.tableAutoloaderStatus;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BinDataTable Bin {
            get {
                return this.tableBin;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrinterDataTable Printer {
            get {
                return this.tablePrinter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RecorderDataTable Recorder {
            get {
                return this.tableRecorder;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ActivationInfoDataTable ActivationInfo {
            get {
                return this.tableActivationInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BaseDataTable Base {
            get {
                return this.tableBase;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RawModeDataTable RawMode {
            get {
                return this.tableRawMode;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SmarteCDDataTable SmarteCD {
            get {
                return this.tableSmarteCD;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VideoCDDataTable VideoCD {
            get {
                return this.tableVideoCD;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OrderListDataTable OrderList {
            get {
                return this.tableOrderList;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProductionOrderDataTable ProductionOrder {
            get {
                return this.tableProductionOrder;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SessionLogDataTable SessionLog {
            get {
                return this.tableSessionLog;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EntryDataTable Entry {
            get {
                return this.tableEntry;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DialogActionDataTable DialogAction {
            get {
                return this.tableDialogAction;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProductionParameterSettingsDataTable ProductionParameterSettings {
            get {
                return this.tableProductionParameterSettings;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerDataTable Server {
            get {
                return this.tableServer;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ModesDataTable Modes {
            get {
                return this.tableModes;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CachingDataTable Caching {
            get {
                return this.tableCaching;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RecordingDataTable Recording {
            get {
                return this.tableRecording;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VerifyDataTable Verify {
            get {
                return this.tableVerify;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrintingDataTable Printing {
            get {
                return this.tablePrinting;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AutoloaderDataTable Autoloader {
            get {
                return this.tableAutoloader;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BinSettingDataTable BinSetting {
            get {
                return this.tableBinSetting;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReadingDataTable Reading {
            get {
                return this.tableReading;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AutoBulkReadDataTable AutoBulkRead {
            get {
                return this.tableAutoBulkRead;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MediaCodesDataTable MediaCodes {
            get {
                return this.tableMediaCodes;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MediaCodeDataTable MediaCode {
            get {
                return this.tableMediaCode;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public KioskModeDataTable KioskMode {
            get {
                return this.tableKioskMode;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UnlockingCodesDataTable UnlockingCodes {
            get {
                return this.tableUnlockingCodes;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            ProductionServerReply cln = ((ProductionServerReply)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["AckOnly"] != null)) {
                    base.Tables.Add(new AckOnlyDataTable(ds.Tables["AckOnly"]));
                }
                if ((ds.Tables["ServerStatus"] != null)) {
                    base.Tables.Add(new ServerStatusDataTable(ds.Tables["ServerStatus"]));
                }
                if ((ds.Tables["ServerInfo"] != null)) {
                    base.Tables.Add(new ServerInfoDataTable(ds.Tables["ServerInfo"]));
                }
                if ((ds.Tables["ProductionCount"] != null)) {
                    base.Tables.Add(new ProductionCountDataTable(ds.Tables["ProductionCount"]));
                }
                if ((ds.Tables["Switches"] != null)) {
                    base.Tables.Add(new SwitchesDataTable(ds.Tables["Switches"]));
                }
                if ((ds.Tables["AutoloaderStatus"] != null)) {
                    base.Tables.Add(new AutoloaderStatusDataTable(ds.Tables["AutoloaderStatus"]));
                }
                if ((ds.Tables["Bin"] != null)) {
                    base.Tables.Add(new BinDataTable(ds.Tables["Bin"]));
                }
                if ((ds.Tables["Printer"] != null)) {
                    base.Tables.Add(new PrinterDataTable(ds.Tables["Printer"]));
                }
                if ((ds.Tables["Recorder"] != null)) {
                    base.Tables.Add(new RecorderDataTable(ds.Tables["Recorder"]));
                }
                if ((ds.Tables["ActivationInfo"] != null)) {
                    base.Tables.Add(new ActivationInfoDataTable(ds.Tables["ActivationInfo"]));
                }
                if ((ds.Tables["Base"] != null)) {
                    base.Tables.Add(new BaseDataTable(ds.Tables["Base"]));
                }
                if ((ds.Tables["RawMode"] != null)) {
                    base.Tables.Add(new RawModeDataTable(ds.Tables["RawMode"]));
                }
                if ((ds.Tables["SmarteCD"] != null)) {
                    base.Tables.Add(new SmarteCDDataTable(ds.Tables["SmarteCD"]));
                }
                if ((ds.Tables["VideoCD"] != null)) {
                    base.Tables.Add(new VideoCDDataTable(ds.Tables["VideoCD"]));
                }
                if ((ds.Tables["OrderList"] != null)) {
                    base.Tables.Add(new OrderListDataTable(ds.Tables["OrderList"]));
                }
                if ((ds.Tables["ProductionOrder"] != null)) {
                    base.Tables.Add(new ProductionOrderDataTable(ds.Tables["ProductionOrder"]));
                }
                if ((ds.Tables["SessionLog"] != null)) {
                    base.Tables.Add(new SessionLogDataTable(ds.Tables["SessionLog"]));
                }
                if ((ds.Tables["Entry"] != null)) {
                    base.Tables.Add(new EntryDataTable(ds.Tables["Entry"]));
                }
                if ((ds.Tables["DialogAction"] != null)) {
                    base.Tables.Add(new DialogActionDataTable(ds.Tables["DialogAction"]));
                }
                if ((ds.Tables["ProductionParameterSettings"] != null)) {
                    base.Tables.Add(new ProductionParameterSettingsDataTable(ds.Tables["ProductionParameterSettings"]));
                }
                if ((ds.Tables["Server"] != null)) {
                    base.Tables.Add(new ServerDataTable(ds.Tables["Server"]));
                }
                if ((ds.Tables["Modes"] != null)) {
                    base.Tables.Add(new ModesDataTable(ds.Tables["Modes"]));
                }
                if ((ds.Tables["Caching"] != null)) {
                    base.Tables.Add(new CachingDataTable(ds.Tables["Caching"]));
                }
                if ((ds.Tables["Recording"] != null)) {
                    base.Tables.Add(new RecordingDataTable(ds.Tables["Recording"]));
                }
                if ((ds.Tables["Verify"] != null)) {
                    base.Tables.Add(new VerifyDataTable(ds.Tables["Verify"]));
                }
                if ((ds.Tables["Printing"] != null)) {
                    base.Tables.Add(new PrintingDataTable(ds.Tables["Printing"]));
                }
                if ((ds.Tables["Autoloader"] != null)) {
                    base.Tables.Add(new AutoloaderDataTable(ds.Tables["Autoloader"]));
                }
                if ((ds.Tables["BinSetting"] != null)) {
                    base.Tables.Add(new BinSettingDataTable(ds.Tables["BinSetting"]));
                }
                if ((ds.Tables["Reading"] != null)) {
                    base.Tables.Add(new ReadingDataTable(ds.Tables["Reading"]));
                }
                if ((ds.Tables["AutoBulkRead"] != null)) {
                    base.Tables.Add(new AutoBulkReadDataTable(ds.Tables["AutoBulkRead"]));
                }
                if ((ds.Tables["MediaCodes"] != null)) {
                    base.Tables.Add(new MediaCodesDataTable(ds.Tables["MediaCodes"]));
                }
                if ((ds.Tables["MediaCode"] != null)) {
                    base.Tables.Add(new MediaCodeDataTable(ds.Tables["MediaCode"]));
                }
                if ((ds.Tables["KioskMode"] != null)) {
                    base.Tables.Add(new KioskModeDataTable(ds.Tables["KioskMode"]));
                }
                if ((ds.Tables["UnlockingCodes"] != null)) {
                    base.Tables.Add(new UnlockingCodesDataTable(ds.Tables["UnlockingCodes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableAckOnly = ((AckOnlyDataTable)(base.Tables["AckOnly"]));
            if ((initTable == true)) {
                if ((this.tableAckOnly != null)) {
                    this.tableAckOnly.InitVars();
                }
            }
            this.tableServerStatus = ((ServerStatusDataTable)(base.Tables["ServerStatus"]));
            if ((initTable == true)) {
                if ((this.tableServerStatus != null)) {
                    this.tableServerStatus.InitVars();
                }
            }
            this.tableServerInfo = ((ServerInfoDataTable)(base.Tables["ServerInfo"]));
            if ((initTable == true)) {
                if ((this.tableServerInfo != null)) {
                    this.tableServerInfo.InitVars();
                }
            }
            this.tableProductionCount = ((ProductionCountDataTable)(base.Tables["ProductionCount"]));
            if ((initTable == true)) {
                if ((this.tableProductionCount != null)) {
                    this.tableProductionCount.InitVars();
                }
            }
            this.tableSwitches = ((SwitchesDataTable)(base.Tables["Switches"]));
            if ((initTable == true)) {
                if ((this.tableSwitches != null)) {
                    this.tableSwitches.InitVars();
                }
            }
            this.tableAutoloaderStatus = ((AutoloaderStatusDataTable)(base.Tables["AutoloaderStatus"]));
            if ((initTable == true)) {
                if ((this.tableAutoloaderStatus != null)) {
                    this.tableAutoloaderStatus.InitVars();
                }
            }
            this.tableBin = ((BinDataTable)(base.Tables["Bin"]));
            if ((initTable == true)) {
                if ((this.tableBin != null)) {
                    this.tableBin.InitVars();
                }
            }
            this.tablePrinter = ((PrinterDataTable)(base.Tables["Printer"]));
            if ((initTable == true)) {
                if ((this.tablePrinter != null)) {
                    this.tablePrinter.InitVars();
                }
            }
            this.tableRecorder = ((RecorderDataTable)(base.Tables["Recorder"]));
            if ((initTable == true)) {
                if ((this.tableRecorder != null)) {
                    this.tableRecorder.InitVars();
                }
            }
            this.tableActivationInfo = ((ActivationInfoDataTable)(base.Tables["ActivationInfo"]));
            if ((initTable == true)) {
                if ((this.tableActivationInfo != null)) {
                    this.tableActivationInfo.InitVars();
                }
            }
            this.tableBase = ((BaseDataTable)(base.Tables["Base"]));
            if ((initTable == true)) {
                if ((this.tableBase != null)) {
                    this.tableBase.InitVars();
                }
            }
            this.tableRawMode = ((RawModeDataTable)(base.Tables["RawMode"]));
            if ((initTable == true)) {
                if ((this.tableRawMode != null)) {
                    this.tableRawMode.InitVars();
                }
            }
            this.tableSmarteCD = ((SmarteCDDataTable)(base.Tables["SmarteCD"]));
            if ((initTable == true)) {
                if ((this.tableSmarteCD != null)) {
                    this.tableSmarteCD.InitVars();
                }
            }
            this.tableVideoCD = ((VideoCDDataTable)(base.Tables["VideoCD"]));
            if ((initTable == true)) {
                if ((this.tableVideoCD != null)) {
                    this.tableVideoCD.InitVars();
                }
            }
            this.tableOrderList = ((OrderListDataTable)(base.Tables["OrderList"]));
            if ((initTable == true)) {
                if ((this.tableOrderList != null)) {
                    this.tableOrderList.InitVars();
                }
            }
            this.tableProductionOrder = ((ProductionOrderDataTable)(base.Tables["ProductionOrder"]));
            if ((initTable == true)) {
                if ((this.tableProductionOrder != null)) {
                    this.tableProductionOrder.InitVars();
                }
            }
            this.tableSessionLog = ((SessionLogDataTable)(base.Tables["SessionLog"]));
            if ((initTable == true)) {
                if ((this.tableSessionLog != null)) {
                    this.tableSessionLog.InitVars();
                }
            }
            this.tableEntry = ((EntryDataTable)(base.Tables["Entry"]));
            if ((initTable == true)) {
                if ((this.tableEntry != null)) {
                    this.tableEntry.InitVars();
                }
            }
            this.tableDialogAction = ((DialogActionDataTable)(base.Tables["DialogAction"]));
            if ((initTable == true)) {
                if ((this.tableDialogAction != null)) {
                    this.tableDialogAction.InitVars();
                }
            }
            this.tableProductionParameterSettings = ((ProductionParameterSettingsDataTable)(base.Tables["ProductionParameterSettings"]));
            if ((initTable == true)) {
                if ((this.tableProductionParameterSettings != null)) {
                    this.tableProductionParameterSettings.InitVars();
                }
            }
            this.tableServer = ((ServerDataTable)(base.Tables["Server"]));
            if ((initTable == true)) {
                if ((this.tableServer != null)) {
                    this.tableServer.InitVars();
                }
            }
            this.tableModes = ((ModesDataTable)(base.Tables["Modes"]));
            if ((initTable == true)) {
                if ((this.tableModes != null)) {
                    this.tableModes.InitVars();
                }
            }
            this.tableCaching = ((CachingDataTable)(base.Tables["Caching"]));
            if ((initTable == true)) {
                if ((this.tableCaching != null)) {
                    this.tableCaching.InitVars();
                }
            }
            this.tableRecording = ((RecordingDataTable)(base.Tables["Recording"]));
            if ((initTable == true)) {
                if ((this.tableRecording != null)) {
                    this.tableRecording.InitVars();
                }
            }
            this.tableVerify = ((VerifyDataTable)(base.Tables["Verify"]));
            if ((initTable == true)) {
                if ((this.tableVerify != null)) {
                    this.tableVerify.InitVars();
                }
            }
            this.tablePrinting = ((PrintingDataTable)(base.Tables["Printing"]));
            if ((initTable == true)) {
                if ((this.tablePrinting != null)) {
                    this.tablePrinting.InitVars();
                }
            }
            this.tableAutoloader = ((AutoloaderDataTable)(base.Tables["Autoloader"]));
            if ((initTable == true)) {
                if ((this.tableAutoloader != null)) {
                    this.tableAutoloader.InitVars();
                }
            }
            this.tableBinSetting = ((BinSettingDataTable)(base.Tables["BinSetting"]));
            if ((initTable == true)) {
                if ((this.tableBinSetting != null)) {
                    this.tableBinSetting.InitVars();
                }
            }
            this.tableReading = ((ReadingDataTable)(base.Tables["Reading"]));
            if ((initTable == true)) {
                if ((this.tableReading != null)) {
                    this.tableReading.InitVars();
                }
            }
            this.tableAutoBulkRead = ((AutoBulkReadDataTable)(base.Tables["AutoBulkRead"]));
            if ((initTable == true)) {
                if ((this.tableAutoBulkRead != null)) {
                    this.tableAutoBulkRead.InitVars();
                }
            }
            this.tableMediaCodes = ((MediaCodesDataTable)(base.Tables["MediaCodes"]));
            if ((initTable == true)) {
                if ((this.tableMediaCodes != null)) {
                    this.tableMediaCodes.InitVars();
                }
            }
            this.tableMediaCode = ((MediaCodeDataTable)(base.Tables["MediaCode"]));
            if ((initTable == true)) {
                if ((this.tableMediaCode != null)) {
                    this.tableMediaCode.InitVars();
                }
            }
            this.tableKioskMode = ((KioskModeDataTable)(base.Tables["KioskMode"]));
            if ((initTable == true)) {
                if ((this.tableKioskMode != null)) {
                    this.tableKioskMode.InitVars();
                }
            }
            this.tableUnlockingCodes = ((UnlockingCodesDataTable)(base.Tables["UnlockingCodes"]));
            if ((initTable == true)) {
                if ((this.tableUnlockingCodes != null)) {
                    this.tableUnlockingCodes.InitVars();
                }
            }
            this.relationServerStatus_ServerInfo = this.Relations["ServerStatus_ServerInfo"];
            this.relationServerStatus_ProductionCount = this.Relations["ServerStatus_ProductionCount"];
            this.relationServerStatus_Switches = this.Relations["ServerStatus_Switches"];
            this.relationServerStatus_AutoloaderStatus = this.Relations["ServerStatus_AutoloaderStatus"];
            this.relationAutoloaderStatus_Bin = this.Relations["AutoloaderStatus_Bin"];
            this.relationAutoloaderStatus_Printer = this.Relations["AutoloaderStatus_Printer"];
            this.relationAutoloaderStatus_Recorder = this.Relations["AutoloaderStatus_Recorder"];
            this.relationServerStatus_ActivationInfo = this.Relations["ServerStatus_ActivationInfo"];
            this.relationActivationInfo_Base = this.Relations["ActivationInfo_Base"];
            this.relationActivationInfo_RawMode = this.Relations["ActivationInfo_RawMode"];
            this.relationActivationInfo_SmarteCD = this.Relations["ActivationInfo_SmarteCD"];
            this.relationActivationInfo_VideoCD = this.Relations["ActivationInfo_VideoCD"];
            this.relationOrderList_ProductionOrder = this.Relations["OrderList_ProductionOrder"];
            this.relationSessionLog_Entry = this.Relations["SessionLog_Entry"];
            this.relationProductionParameterSettings_Server = this.Relations["ProductionParameterSettings_Server"];
            this.relationProductionParameterSettings_Modes = this.Relations["ProductionParameterSettings_Modes"];
            this.relationProductionParameterSettings_Caching = this.Relations["ProductionParameterSettings_Caching"];
            this.relationProductionParameterSettings_Recording = this.Relations["ProductionParameterSettings_Recording"];
            this.relationProductionParameterSettings_Verify = this.Relations["ProductionParameterSettings_Verify"];
            this.relationProductionParameterSettings_Printing = this.Relations["ProductionParameterSettings_Printing"];
            this.relationProductionParameterSettings_Autoloader = this.Relations["ProductionParameterSettings_Autoloader"];
            this.relationAutoloader_BinSetting = this.Relations["Autoloader_BinSetting"];
            this.relationProductionParameterSettings_Reading = this.Relations["ProductionParameterSettings_Reading"];
            this.relationReading_AutoBulkRead = this.Relations["Reading_AutoBulkRead"];
            this.relationProductionParameterSettings_MediaCodes = this.Relations["ProductionParameterSettings_MediaCodes"];
            this.relationMediaCodes_MediaCode = this.Relations["MediaCodes_MediaCode"];
            this.relationProductionParameterSettings_KioskMode = this.Relations["ProductionParameterSettings_KioskMode"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ProductionServerReply";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableAckOnly = new AckOnlyDataTable();
            base.Tables.Add(this.tableAckOnly);
            this.tableServerStatus = new ServerStatusDataTable();
            base.Tables.Add(this.tableServerStatus);
            this.tableServerInfo = new ServerInfoDataTable();
            base.Tables.Add(this.tableServerInfo);
            this.tableProductionCount = new ProductionCountDataTable();
            base.Tables.Add(this.tableProductionCount);
            this.tableSwitches = new SwitchesDataTable();
            base.Tables.Add(this.tableSwitches);
            this.tableAutoloaderStatus = new AutoloaderStatusDataTable();
            base.Tables.Add(this.tableAutoloaderStatus);
            this.tableBin = new BinDataTable();
            base.Tables.Add(this.tableBin);
            this.tablePrinter = new PrinterDataTable();
            base.Tables.Add(this.tablePrinter);
            this.tableRecorder = new RecorderDataTable();
            base.Tables.Add(this.tableRecorder);
            this.tableActivationInfo = new ActivationInfoDataTable();
            base.Tables.Add(this.tableActivationInfo);
            this.tableBase = new BaseDataTable();
            base.Tables.Add(this.tableBase);
            this.tableRawMode = new RawModeDataTable();
            base.Tables.Add(this.tableRawMode);
            this.tableSmarteCD = new SmarteCDDataTable();
            base.Tables.Add(this.tableSmarteCD);
            this.tableVideoCD = new VideoCDDataTable();
            base.Tables.Add(this.tableVideoCD);
            this.tableOrderList = new OrderListDataTable();
            base.Tables.Add(this.tableOrderList);
            this.tableProductionOrder = new ProductionOrderDataTable();
            base.Tables.Add(this.tableProductionOrder);
            this.tableSessionLog = new SessionLogDataTable();
            base.Tables.Add(this.tableSessionLog);
            this.tableEntry = new EntryDataTable();
            base.Tables.Add(this.tableEntry);
            this.tableDialogAction = new DialogActionDataTable();
            base.Tables.Add(this.tableDialogAction);
            this.tableProductionParameterSettings = new ProductionParameterSettingsDataTable();
            base.Tables.Add(this.tableProductionParameterSettings);
            this.tableServer = new ServerDataTable();
            base.Tables.Add(this.tableServer);
            this.tableModes = new ModesDataTable();
            base.Tables.Add(this.tableModes);
            this.tableCaching = new CachingDataTable();
            base.Tables.Add(this.tableCaching);
            this.tableRecording = new RecordingDataTable();
            base.Tables.Add(this.tableRecording);
            this.tableVerify = new VerifyDataTable();
            base.Tables.Add(this.tableVerify);
            this.tablePrinting = new PrintingDataTable();
            base.Tables.Add(this.tablePrinting);
            this.tableAutoloader = new AutoloaderDataTable();
            base.Tables.Add(this.tableAutoloader);
            this.tableBinSetting = new BinSettingDataTable();
            base.Tables.Add(this.tableBinSetting);
            this.tableReading = new ReadingDataTable();
            base.Tables.Add(this.tableReading);
            this.tableAutoBulkRead = new AutoBulkReadDataTable();
            base.Tables.Add(this.tableAutoBulkRead);
            this.tableMediaCodes = new MediaCodesDataTable();
            base.Tables.Add(this.tableMediaCodes);
            this.tableMediaCode = new MediaCodeDataTable();
            base.Tables.Add(this.tableMediaCode);
            this.tableKioskMode = new KioskModeDataTable();
            base.Tables.Add(this.tableKioskMode);
            this.tableUnlockingCodes = new UnlockingCodesDataTable();
            base.Tables.Add(this.tableUnlockingCodes);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("ServerStatus_ServerInfo", new System.Data.DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerInfo.ServerStatus_IdColumn});
            this.tableServerInfo.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ServerStatus_ProductionCount", new System.Data.DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new System.Data.DataColumn[] {
                        this.tableProductionCount.ServerStatus_IdColumn});
            this.tableProductionCount.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ServerStatus_Switches", new System.Data.DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new System.Data.DataColumn[] {
                        this.tableSwitches.ServerStatus_IdColumn});
            this.tableSwitches.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ServerStatus_AutoloaderStatus", new System.Data.DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new System.Data.DataColumn[] {
                        this.tableAutoloaderStatus.ServerStatus_IdColumn});
            this.tableAutoloaderStatus.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("AutoloaderStatus_Bin", new System.Data.DataColumn[] {
                        this.tableAutoloaderStatus.AutoloaderStatus_IdColumn}, new System.Data.DataColumn[] {
                        this.tableBin.AutoloaderStatus_IdColumn});
            this.tableBin.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("AutoloaderStatus_Printer", new System.Data.DataColumn[] {
                        this.tableAutoloaderStatus.AutoloaderStatus_IdColumn}, new System.Data.DataColumn[] {
                        this.tablePrinter.AutoloaderStatus_IdColumn});
            this.tablePrinter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("AutoloaderStatus_Recorder", new System.Data.DataColumn[] {
                        this.tableAutoloaderStatus.AutoloaderStatus_IdColumn}, new System.Data.DataColumn[] {
                        this.tableRecorder.AutoloaderStatus_IdColumn});
            this.tableRecorder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ServerStatus_ActivationInfo", new System.Data.DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new System.Data.DataColumn[] {
                        this.tableActivationInfo.ServerStatus_IdColumn});
            this.tableActivationInfo.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ActivationInfo_Base", new System.Data.DataColumn[] {
                        this.tableActivationInfo.ActivationInfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tableBase.ActivationInfo_IdColumn});
            this.tableBase.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ActivationInfo_RawMode", new System.Data.DataColumn[] {
                        this.tableActivationInfo.ActivationInfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tableRawMode.ActivationInfo_IdColumn});
            this.tableRawMode.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ActivationInfo_SmarteCD", new System.Data.DataColumn[] {
                        this.tableActivationInfo.ActivationInfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tableSmarteCD.ActivationInfo_IdColumn});
            this.tableSmarteCD.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ActivationInfo_VideoCD", new System.Data.DataColumn[] {
                        this.tableActivationInfo.ActivationInfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tableVideoCD.ActivationInfo_IdColumn});
            this.tableVideoCD.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("OrderList_ProductionOrder", new System.Data.DataColumn[] {
                        this.tableOrderList.OrderList_IdColumn}, new System.Data.DataColumn[] {
                        this.tableProductionOrder.OrderList_IdColumn});
            this.tableProductionOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("SessionLog_Entry", new System.Data.DataColumn[] {
                        this.tableSessionLog.SessionLog_IdColumn}, new System.Data.DataColumn[] {
                        this.tableEntry.SessionLog_IdColumn});
            this.tableEntry.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ProductionParameterSettings_Server", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServer.ProductionParameterSettings_IdColumn});
            this.tableServer.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ProductionParameterSettings_Modes", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableModes.ProductionParameterSettings_IdColumn});
            this.tableModes.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ProductionParameterSettings_Caching", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableCaching.ProductionParameterSettings_IdColumn});
            this.tableCaching.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ProductionParameterSettings_Recording", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableRecording.ProductionParameterSettings_IdColumn});
            this.tableRecording.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ProductionParameterSettings_Verify", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableVerify.ProductionParameterSettings_IdColumn});
            this.tableVerify.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ProductionParameterSettings_Printing", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tablePrinting.ProductionParameterSettings_IdColumn});
            this.tablePrinting.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ProductionParameterSettings_Autoloader", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableAutoloader.ProductionParameterSettings_IdColumn});
            this.tableAutoloader.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Autoloader_BinSetting", new System.Data.DataColumn[] {
                        this.tableAutoloader.Autoloader_IdColumn}, new System.Data.DataColumn[] {
                        this.tableBinSetting.Autoloader_IdColumn});
            this.tableBinSetting.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ProductionParameterSettings_Reading", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableReading.ProductionParameterSettings_IdColumn});
            this.tableReading.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Reading_AutoBulkRead", new System.Data.DataColumn[] {
                        this.tableReading.Reading_IdColumn}, new System.Data.DataColumn[] {
                        this.tableAutoBulkRead.Reading_IdColumn});
            this.tableAutoBulkRead.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ProductionParameterSettings_MediaCodes", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableMediaCodes.ProductionParameterSettings_IdColumn});
            this.tableMediaCodes.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("MediaCodes_MediaCode", new System.Data.DataColumn[] {
                        this.tableMediaCodes.MediaCodes_IdColumn}, new System.Data.DataColumn[] {
                        this.tableMediaCode.MediaCodes_IdColumn});
            this.tableMediaCode.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ProductionParameterSettings_KioskMode", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableKioskMode.ProductionParameterSettings_IdColumn});
            this.tableKioskMode.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationServerStatus_ServerInfo = new System.Data.DataRelation("ServerStatus_ServerInfo", new System.Data.DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerInfo.ServerStatus_IdColumn}, false);
            this.relationServerStatus_ServerInfo.Nested = true;
            this.Relations.Add(this.relationServerStatus_ServerInfo);
            this.relationServerStatus_ProductionCount = new System.Data.DataRelation("ServerStatus_ProductionCount", new System.Data.DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new System.Data.DataColumn[] {
                        this.tableProductionCount.ServerStatus_IdColumn}, false);
            this.relationServerStatus_ProductionCount.Nested = true;
            this.Relations.Add(this.relationServerStatus_ProductionCount);
            this.relationServerStatus_Switches = new System.Data.DataRelation("ServerStatus_Switches", new System.Data.DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new System.Data.DataColumn[] {
                        this.tableSwitches.ServerStatus_IdColumn}, false);
            this.relationServerStatus_Switches.Nested = true;
            this.Relations.Add(this.relationServerStatus_Switches);
            this.relationServerStatus_AutoloaderStatus = new System.Data.DataRelation("ServerStatus_AutoloaderStatus", new System.Data.DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new System.Data.DataColumn[] {
                        this.tableAutoloaderStatus.ServerStatus_IdColumn}, false);
            this.relationServerStatus_AutoloaderStatus.Nested = true;
            this.Relations.Add(this.relationServerStatus_AutoloaderStatus);
            this.relationAutoloaderStatus_Bin = new System.Data.DataRelation("AutoloaderStatus_Bin", new System.Data.DataColumn[] {
                        this.tableAutoloaderStatus.AutoloaderStatus_IdColumn}, new System.Data.DataColumn[] {
                        this.tableBin.AutoloaderStatus_IdColumn}, false);
            this.relationAutoloaderStatus_Bin.Nested = true;
            this.Relations.Add(this.relationAutoloaderStatus_Bin);
            this.relationAutoloaderStatus_Printer = new System.Data.DataRelation("AutoloaderStatus_Printer", new System.Data.DataColumn[] {
                        this.tableAutoloaderStatus.AutoloaderStatus_IdColumn}, new System.Data.DataColumn[] {
                        this.tablePrinter.AutoloaderStatus_IdColumn}, false);
            this.relationAutoloaderStatus_Printer.Nested = true;
            this.Relations.Add(this.relationAutoloaderStatus_Printer);
            this.relationAutoloaderStatus_Recorder = new System.Data.DataRelation("AutoloaderStatus_Recorder", new System.Data.DataColumn[] {
                        this.tableAutoloaderStatus.AutoloaderStatus_IdColumn}, new System.Data.DataColumn[] {
                        this.tableRecorder.AutoloaderStatus_IdColumn}, false);
            this.relationAutoloaderStatus_Recorder.Nested = true;
            this.Relations.Add(this.relationAutoloaderStatus_Recorder);
            this.relationServerStatus_ActivationInfo = new System.Data.DataRelation("ServerStatus_ActivationInfo", new System.Data.DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new System.Data.DataColumn[] {
                        this.tableActivationInfo.ServerStatus_IdColumn}, false);
            this.relationServerStatus_ActivationInfo.Nested = true;
            this.Relations.Add(this.relationServerStatus_ActivationInfo);
            this.relationActivationInfo_Base = new System.Data.DataRelation("ActivationInfo_Base", new System.Data.DataColumn[] {
                        this.tableActivationInfo.ActivationInfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tableBase.ActivationInfo_IdColumn}, false);
            this.relationActivationInfo_Base.Nested = true;
            this.Relations.Add(this.relationActivationInfo_Base);
            this.relationActivationInfo_RawMode = new System.Data.DataRelation("ActivationInfo_RawMode", new System.Data.DataColumn[] {
                        this.tableActivationInfo.ActivationInfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tableRawMode.ActivationInfo_IdColumn}, false);
            this.relationActivationInfo_RawMode.Nested = true;
            this.Relations.Add(this.relationActivationInfo_RawMode);
            this.relationActivationInfo_SmarteCD = new System.Data.DataRelation("ActivationInfo_SmarteCD", new System.Data.DataColumn[] {
                        this.tableActivationInfo.ActivationInfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tableSmarteCD.ActivationInfo_IdColumn}, false);
            this.relationActivationInfo_SmarteCD.Nested = true;
            this.Relations.Add(this.relationActivationInfo_SmarteCD);
            this.relationActivationInfo_VideoCD = new System.Data.DataRelation("ActivationInfo_VideoCD", new System.Data.DataColumn[] {
                        this.tableActivationInfo.ActivationInfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tableVideoCD.ActivationInfo_IdColumn}, false);
            this.relationActivationInfo_VideoCD.Nested = true;
            this.Relations.Add(this.relationActivationInfo_VideoCD);
            this.relationOrderList_ProductionOrder = new System.Data.DataRelation("OrderList_ProductionOrder", new System.Data.DataColumn[] {
                        this.tableOrderList.OrderList_IdColumn}, new System.Data.DataColumn[] {
                        this.tableProductionOrder.OrderList_IdColumn}, false);
            this.relationOrderList_ProductionOrder.Nested = true;
            this.Relations.Add(this.relationOrderList_ProductionOrder);
            this.relationSessionLog_Entry = new System.Data.DataRelation("SessionLog_Entry", new System.Data.DataColumn[] {
                        this.tableSessionLog.SessionLog_IdColumn}, new System.Data.DataColumn[] {
                        this.tableEntry.SessionLog_IdColumn}, false);
            this.relationSessionLog_Entry.Nested = true;
            this.Relations.Add(this.relationSessionLog_Entry);
            this.relationProductionParameterSettings_Server = new System.Data.DataRelation("ProductionParameterSettings_Server", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServer.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Server.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Server);
            this.relationProductionParameterSettings_Modes = new System.Data.DataRelation("ProductionParameterSettings_Modes", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableModes.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Modes.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Modes);
            this.relationProductionParameterSettings_Caching = new System.Data.DataRelation("ProductionParameterSettings_Caching", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableCaching.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Caching.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Caching);
            this.relationProductionParameterSettings_Recording = new System.Data.DataRelation("ProductionParameterSettings_Recording", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableRecording.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Recording.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Recording);
            this.relationProductionParameterSettings_Verify = new System.Data.DataRelation("ProductionParameterSettings_Verify", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableVerify.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Verify.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Verify);
            this.relationProductionParameterSettings_Printing = new System.Data.DataRelation("ProductionParameterSettings_Printing", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tablePrinting.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Printing.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Printing);
            this.relationProductionParameterSettings_Autoloader = new System.Data.DataRelation("ProductionParameterSettings_Autoloader", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableAutoloader.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Autoloader.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Autoloader);
            this.relationAutoloader_BinSetting = new System.Data.DataRelation("Autoloader_BinSetting", new System.Data.DataColumn[] {
                        this.tableAutoloader.Autoloader_IdColumn}, new System.Data.DataColumn[] {
                        this.tableBinSetting.Autoloader_IdColumn}, false);
            this.relationAutoloader_BinSetting.Nested = true;
            this.Relations.Add(this.relationAutoloader_BinSetting);
            this.relationProductionParameterSettings_Reading = new System.Data.DataRelation("ProductionParameterSettings_Reading", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableReading.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Reading.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Reading);
            this.relationReading_AutoBulkRead = new System.Data.DataRelation("Reading_AutoBulkRead", new System.Data.DataColumn[] {
                        this.tableReading.Reading_IdColumn}, new System.Data.DataColumn[] {
                        this.tableAutoBulkRead.Reading_IdColumn}, false);
            this.relationReading_AutoBulkRead.Nested = true;
            this.Relations.Add(this.relationReading_AutoBulkRead);
            this.relationProductionParameterSettings_MediaCodes = new System.Data.DataRelation("ProductionParameterSettings_MediaCodes", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableMediaCodes.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_MediaCodes.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_MediaCodes);
            this.relationMediaCodes_MediaCode = new System.Data.DataRelation("MediaCodes_MediaCode", new System.Data.DataColumn[] {
                        this.tableMediaCodes.MediaCodes_IdColumn}, new System.Data.DataColumn[] {
                        this.tableMediaCode.MediaCodes_IdColumn}, false);
            this.relationMediaCodes_MediaCode.Nested = true;
            this.Relations.Add(this.relationMediaCodes_MediaCode);
            this.relationProductionParameterSettings_KioskMode = new System.Data.DataRelation("ProductionParameterSettings_KioskMode", new System.Data.DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableKioskMode.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_KioskMode.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_KioskMode);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAckOnly() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServerStatus() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServerInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProductionCount() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSwitches() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAutoloaderStatus() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBin() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrinter() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRecorder() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeActivationInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBase() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRawMode() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSmarteCD() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeVideoCD() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOrderList() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProductionOrder() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSessionLog() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEntry() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDialogAction() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProductionParameterSettings() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServer() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeModes() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCaching() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRecording() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeVerify() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrinting() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAutoloader() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBinSetting() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReading() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAutoBulkRead() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMediaCodes() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMediaCode() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeKioskMode() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUnlockingCodes() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            ProductionServerReply ds = new ProductionServerReply();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void AckOnlyRowChangeEventHandler(object sender, AckOnlyRowChangeEvent e);
        
        public delegate void ServerStatusRowChangeEventHandler(object sender, ServerStatusRowChangeEvent e);
        
        public delegate void ServerInfoRowChangeEventHandler(object sender, ServerInfoRowChangeEvent e);
        
        public delegate void ProductionCountRowChangeEventHandler(object sender, ProductionCountRowChangeEvent e);
        
        public delegate void SwitchesRowChangeEventHandler(object sender, SwitchesRowChangeEvent e);
        
        public delegate void AutoloaderStatusRowChangeEventHandler(object sender, AutoloaderStatusRowChangeEvent e);
        
        public delegate void BinRowChangeEventHandler(object sender, BinRowChangeEvent e);
        
        public delegate void PrinterRowChangeEventHandler(object sender, PrinterRowChangeEvent e);
        
        public delegate void RecorderRowChangeEventHandler(object sender, RecorderRowChangeEvent e);
        
        public delegate void ActivationInfoRowChangeEventHandler(object sender, ActivationInfoRowChangeEvent e);
        
        public delegate void BaseRowChangeEventHandler(object sender, BaseRowChangeEvent e);
        
        public delegate void RawModeRowChangeEventHandler(object sender, RawModeRowChangeEvent e);
        
        public delegate void SmarteCDRowChangeEventHandler(object sender, SmarteCDRowChangeEvent e);
        
        public delegate void VideoCDRowChangeEventHandler(object sender, VideoCDRowChangeEvent e);
        
        public delegate void OrderListRowChangeEventHandler(object sender, OrderListRowChangeEvent e);
        
        public delegate void ProductionOrderRowChangeEventHandler(object sender, ProductionOrderRowChangeEvent e);
        
        public delegate void SessionLogRowChangeEventHandler(object sender, SessionLogRowChangeEvent e);
        
        public delegate void EntryRowChangeEventHandler(object sender, EntryRowChangeEvent e);
        
        public delegate void DialogActionRowChangeEventHandler(object sender, DialogActionRowChangeEvent e);
        
        public delegate void ProductionParameterSettingsRowChangeEventHandler(object sender, ProductionParameterSettingsRowChangeEvent e);
        
        public delegate void ServerRowChangeEventHandler(object sender, ServerRowChangeEvent e);
        
        public delegate void ModesRowChangeEventHandler(object sender, ModesRowChangeEvent e);
        
        public delegate void CachingRowChangeEventHandler(object sender, CachingRowChangeEvent e);
        
        public delegate void RecordingRowChangeEventHandler(object sender, RecordingRowChangeEvent e);
        
        public delegate void VerifyRowChangeEventHandler(object sender, VerifyRowChangeEvent e);
        
        public delegate void PrintingRowChangeEventHandler(object sender, PrintingRowChangeEvent e);
        
        public delegate void AutoloaderRowChangeEventHandler(object sender, AutoloaderRowChangeEvent e);
        
        public delegate void BinSettingRowChangeEventHandler(object sender, BinSettingRowChangeEvent e);
        
        public delegate void ReadingRowChangeEventHandler(object sender, ReadingRowChangeEvent e);
        
        public delegate void AutoBulkReadRowChangeEventHandler(object sender, AutoBulkReadRowChangeEvent e);
        
        public delegate void MediaCodesRowChangeEventHandler(object sender, MediaCodesRowChangeEvent e);
        
        public delegate void MediaCodeRowChangeEventHandler(object sender, MediaCodeRowChangeEvent e);
        
        public delegate void KioskModeRowChangeEventHandler(object sender, KioskModeRowChangeEvent e);
        
        public delegate void UnlockingCodesRowChangeEventHandler(object sender, UnlockingCodesRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AckOnlyDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AckOnlyDataTable() {
                this.TableName = "AckOnly";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AckOnlyDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AckOnlyDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AckOnlyRow this[int index] {
                get {
                    return ((AckOnlyRow)(this.Rows[index]));
                }
            }
            
            public event AckOnlyRowChangeEventHandler AckOnlyRowChanging;
            
            public event AckOnlyRowChangeEventHandler AckOnlyRowChanged;
            
            public event AckOnlyRowChangeEventHandler AckOnlyRowDeleting;
            
            public event AckOnlyRowChangeEventHandler AckOnlyRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAckOnlyRow(AckOnlyRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AckOnlyRow AddAckOnlyRow() {
                AckOnlyRow rowAckOnlyRow = ((AckOnlyRow)(this.NewRow()));
                rowAckOnlyRow.ItemArray = new object[0];
                this.Rows.Add(rowAckOnlyRow);
                return rowAckOnlyRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                AckOnlyDataTable cln = ((AckOnlyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new AckOnlyDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AckOnlyRow NewAckOnlyRow() {
                return ((AckOnlyRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AckOnlyRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(AckOnlyRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AckOnlyRowChanged != null)) {
                    this.AckOnlyRowChanged(this, new AckOnlyRowChangeEvent(((AckOnlyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AckOnlyRowChanging != null)) {
                    this.AckOnlyRowChanging(this, new AckOnlyRowChangeEvent(((AckOnlyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AckOnlyRowDeleted != null)) {
                    this.AckOnlyRowDeleted(this, new AckOnlyRowChangeEvent(((AckOnlyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AckOnlyRowDeleting != null)) {
                    this.AckOnlyRowDeleting(this, new AckOnlyRowChangeEvent(((AckOnlyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAckOnlyRow(AckOnlyRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AckOnlyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServerStatusDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnServerStatus_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerStatusDataTable() {
                this.TableName = "ServerStatus";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerStatusDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServerStatusDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ServerStatus_IdColumn {
                get {
                    return this.columnServerStatus_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerStatusRow this[int index] {
                get {
                    return ((ServerStatusRow)(this.Rows[index]));
                }
            }
            
            public event ServerStatusRowChangeEventHandler ServerStatusRowChanging;
            
            public event ServerStatusRowChangeEventHandler ServerStatusRowChanged;
            
            public event ServerStatusRowChangeEventHandler ServerStatusRowDeleting;
            
            public event ServerStatusRowChangeEventHandler ServerStatusRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServerStatusRow(ServerStatusRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerStatusRow AddServerStatusRow() {
                ServerStatusRow rowServerStatusRow = ((ServerStatusRow)(this.NewRow()));
                rowServerStatusRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowServerStatusRow);
                return rowServerStatusRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ServerStatusDataTable cln = ((ServerStatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ServerStatusDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnServerStatus_Id = base.Columns["ServerStatus_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnServerStatus_Id = new System.Data.DataColumn("ServerStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnServerStatus_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnServerStatus_Id}, true));
                this.columnServerStatus_Id.AutoIncrement = true;
                this.columnServerStatus_Id.AllowDBNull = false;
                this.columnServerStatus_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerStatusRow NewServerStatusRow() {
                return ((ServerStatusRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ServerStatusRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ServerStatusRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerStatusRowChanged != null)) {
                    this.ServerStatusRowChanged(this, new ServerStatusRowChangeEvent(((ServerStatusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerStatusRowChanging != null)) {
                    this.ServerStatusRowChanging(this, new ServerStatusRowChangeEvent(((ServerStatusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerStatusRowDeleted != null)) {
                    this.ServerStatusRowDeleted(this, new ServerStatusRowChangeEvent(((ServerStatusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerStatusRowDeleting != null)) {
                    this.ServerStatusRowDeleting(this, new ServerStatusRowChangeEvent(((ServerStatusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServerStatusRow(ServerStatusRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServerStatusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServerInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSoftwareVersion;
            
            private System.Data.DataColumn columnDescription;
            
            private System.Data.DataColumn columnHostname;
            
            private System.Data.DataColumn columnCluster;
            
            private System.Data.DataColumn columnMessagingPort;
            
            private System.Data.DataColumn columnSystemFolder;
            
            private System.Data.DataColumn columnIsService;
            
            private System.Data.DataColumn columnPasswordSet;
            
            private System.Data.DataColumn columnServerStatus_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerInfoDataTable() {
                this.TableName = "ServerInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerInfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServerInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SoftwareVersionColumn {
                get {
                    return this.columnSoftwareVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HostnameColumn {
                get {
                    return this.columnHostname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClusterColumn {
                get {
                    return this.columnCluster;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MessagingPortColumn {
                get {
                    return this.columnMessagingPort;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SystemFolderColumn {
                get {
                    return this.columnSystemFolder;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsServiceColumn {
                get {
                    return this.columnIsService;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PasswordSetColumn {
                get {
                    return this.columnPasswordSet;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ServerStatus_IdColumn {
                get {
                    return this.columnServerStatus_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerInfoRow this[int index] {
                get {
                    return ((ServerInfoRow)(this.Rows[index]));
                }
            }
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowChanging;
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowChanged;
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowDeleting;
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServerInfoRow(ServerInfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerInfoRow AddServerInfoRow(string SoftwareVersion, string Description, string Hostname, string Cluster, string MessagingPort, string SystemFolder, string IsService, string PasswordSet, ServerStatusRow parentServerStatusRowByServerStatus_ServerInfo) {
                ServerInfoRow rowServerInfoRow = ((ServerInfoRow)(this.NewRow()));
                rowServerInfoRow.ItemArray = new object[] {
                        SoftwareVersion,
                        Description,
                        Hostname,
                        Cluster,
                        MessagingPort,
                        SystemFolder,
                        IsService,
                        PasswordSet,
                        parentServerStatusRowByServerStatus_ServerInfo[0]};
                this.Rows.Add(rowServerInfoRow);
                return rowServerInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ServerInfoDataTable cln = ((ServerInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ServerInfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSoftwareVersion = base.Columns["SoftwareVersion"];
                this.columnDescription = base.Columns["Description"];
                this.columnHostname = base.Columns["Hostname"];
                this.columnCluster = base.Columns["Cluster"];
                this.columnMessagingPort = base.Columns["MessagingPort"];
                this.columnSystemFolder = base.Columns["SystemFolder"];
                this.columnIsService = base.Columns["IsService"];
                this.columnPasswordSet = base.Columns["PasswordSet"];
                this.columnServerStatus_Id = base.Columns["ServerStatus_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSoftwareVersion = new System.Data.DataColumn("SoftwareVersion", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSoftwareVersion);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDescription);
                this.columnHostname = new System.Data.DataColumn("Hostname", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnHostname);
                this.columnCluster = new System.Data.DataColumn("Cluster", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCluster);
                this.columnMessagingPort = new System.Data.DataColumn("MessagingPort", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMessagingPort);
                this.columnSystemFolder = new System.Data.DataColumn("SystemFolder", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSystemFolder);
                this.columnIsService = new System.Data.DataColumn("IsService", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIsService);
                this.columnPasswordSet = new System.Data.DataColumn("PasswordSet", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPasswordSet);
                this.columnServerStatus_Id = new System.Data.DataColumn("ServerStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnServerStatus_Id);
                this.columnSoftwareVersion.AllowDBNull = false;
                this.columnSoftwareVersion.Namespace = "";
                this.columnDescription.Namespace = "";
                this.columnHostname.AllowDBNull = false;
                this.columnHostname.Namespace = "";
                this.columnCluster.AllowDBNull = false;
                this.columnCluster.Namespace = "";
                this.columnMessagingPort.AllowDBNull = false;
                this.columnMessagingPort.Namespace = "";
                this.columnSystemFolder.AllowDBNull = false;
                this.columnSystemFolder.Namespace = "";
                this.columnIsService.Namespace = "";
                this.columnIsService.DefaultValue = ((string)("false"));
                this.columnPasswordSet.AllowDBNull = false;
                this.columnPasswordSet.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerInfoRow NewServerInfoRow() {
                return ((ServerInfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ServerInfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ServerInfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerInfoRowChanged != null)) {
                    this.ServerInfoRowChanged(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerInfoRowChanging != null)) {
                    this.ServerInfoRowChanging(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerInfoRowDeleted != null)) {
                    this.ServerInfoRowDeleted(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerInfoRowDeleting != null)) {
                    this.ServerInfoRowDeleting(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServerInfoRow(ServerInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServerInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProductionCountDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCopiesProduced;
            
            private System.Data.DataColumn columnCopiesRejected;
            
            private System.Data.DataColumn columnServerStatus_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionCountDataTable() {
                this.TableName = "ProductionCount";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductionCountDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProductionCountDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CopiesProducedColumn {
                get {
                    return this.columnCopiesProduced;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CopiesRejectedColumn {
                get {
                    return this.columnCopiesRejected;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ServerStatus_IdColumn {
                get {
                    return this.columnServerStatus_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionCountRow this[int index] {
                get {
                    return ((ProductionCountRow)(this.Rows[index]));
                }
            }
            
            public event ProductionCountRowChangeEventHandler ProductionCountRowChanging;
            
            public event ProductionCountRowChangeEventHandler ProductionCountRowChanged;
            
            public event ProductionCountRowChangeEventHandler ProductionCountRowDeleting;
            
            public event ProductionCountRowChangeEventHandler ProductionCountRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProductionCountRow(ProductionCountRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionCountRow AddProductionCountRow(string CopiesProduced, string CopiesRejected, ServerStatusRow parentServerStatusRowByServerStatus_ProductionCount) {
                ProductionCountRow rowProductionCountRow = ((ProductionCountRow)(this.NewRow()));
                rowProductionCountRow.ItemArray = new object[] {
                        CopiesProduced,
                        CopiesRejected,
                        parentServerStatusRowByServerStatus_ProductionCount[0]};
                this.Rows.Add(rowProductionCountRow);
                return rowProductionCountRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ProductionCountDataTable cln = ((ProductionCountDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ProductionCountDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCopiesProduced = base.Columns["CopiesProduced"];
                this.columnCopiesRejected = base.Columns["CopiesRejected"];
                this.columnServerStatus_Id = base.Columns["ServerStatus_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCopiesProduced = new System.Data.DataColumn("CopiesProduced", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCopiesProduced);
                this.columnCopiesRejected = new System.Data.DataColumn("CopiesRejected", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCopiesRejected);
                this.columnServerStatus_Id = new System.Data.DataColumn("ServerStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnServerStatus_Id);
                this.columnCopiesProduced.AllowDBNull = false;
                this.columnCopiesProduced.Namespace = "";
                this.columnCopiesRejected.AllowDBNull = false;
                this.columnCopiesRejected.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionCountRow NewProductionCountRow() {
                return ((ProductionCountRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ProductionCountRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ProductionCountRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProductionCountRowChanged != null)) {
                    this.ProductionCountRowChanged(this, new ProductionCountRowChangeEvent(((ProductionCountRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProductionCountRowChanging != null)) {
                    this.ProductionCountRowChanging(this, new ProductionCountRowChangeEvent(((ProductionCountRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProductionCountRowDeleted != null)) {
                    this.ProductionCountRowDeleted(this, new ProductionCountRowChangeEvent(((ProductionCountRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProductionCountRowDeleting != null)) {
                    this.ProductionCountRowDeleting(this, new ProductionCountRowChangeEvent(((ProductionCountRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProductionCountRow(ProductionCountRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProductionCountDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SwitchesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnManufacturingTestMode;
            
            private System.Data.DataColumn columnVerifyOnlyMode;
            
            private System.Data.DataColumn columnSlugsMode;
            
            private System.Data.DataColumn columnNoLogLimit;
            
            private System.Data.DataColumn columnSimulateFixate;
            
            private System.Data.DataColumn columnSetupMode;
            
            private System.Data.DataColumn columnDirectImaging;
            
            private System.Data.DataColumn columnAutoThroughPutMeasurement;
            
            private System.Data.DataColumn columnTimingLogged;
            
            private System.Data.DataColumn columnSkipOrderStatusUpdates;
            
            private System.Data.DataColumn columnPrintOnlyMode;
            
            private System.Data.DataColumn columnSkipAutoloaderScanning;
            
            private System.Data.DataColumn columnPrintBeforeRecording;
            
            private System.Data.DataColumn columnUseDriveLettersForRecorders;
            
            private System.Data.DataColumn columnTraceSCSICommands;
            
            private System.Data.DataColumn columnTraceReadWriteCommands;
            
            private System.Data.DataColumn columnTraceSerialCommands;
            
            private System.Data.DataColumn columnTraceLabelAndPrinting;
            
            private System.Data.DataColumn columnTraceXMLMessages;
            
            private System.Data.DataColumn columnLogSkippingOrder;
            
            private System.Data.DataColumn columnRunWithoutDevices;
            
            private System.Data.DataColumn columnDisablePreloadingRecorderAfterPrinterLoad;
            
            private System.Data.DataColumn columnDisableCacheLocking;
            
            private System.Data.DataColumn columnEnableCacheLimiting;
            
            private System.Data.DataColumn columnSkipSerialPortsForAutoloader;
            
            private System.Data.DataColumn columnSkipDrivesForReaderRecorderCache;
            
            private System.Data.DataColumn columnSecondsDelayBeforeMainWindow;
            
            private System.Data.DataColumn columnUseParallelPortForPrism;
            
            private System.Data.DataColumn columnDisableDriverNameInRendering;
            
            private System.Data.DataColumn columnEraseCDRWBeforeRecording;
            
            private System.Data.DataColumn columnStrictWaveFileChecking;
            
            private System.Data.DataColumn columnServerStatus_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SwitchesDataTable() {
                this.TableName = "Switches";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SwitchesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SwitchesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ManufacturingTestModeColumn {
                get {
                    return this.columnManufacturingTestMode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VerifyOnlyModeColumn {
                get {
                    return this.columnVerifyOnlyMode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SlugsModeColumn {
                get {
                    return this.columnSlugsMode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NoLogLimitColumn {
                get {
                    return this.columnNoLogLimit;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SimulateFixateColumn {
                get {
                    return this.columnSimulateFixate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SetupModeColumn {
                get {
                    return this.columnSetupMode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DirectImagingColumn {
                get {
                    return this.columnDirectImaging;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AutoThroughPutMeasurementColumn {
                get {
                    return this.columnAutoThroughPutMeasurement;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimingLoggedColumn {
                get {
                    return this.columnTimingLogged;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SkipOrderStatusUpdatesColumn {
                get {
                    return this.columnSkipOrderStatusUpdates;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PrintOnlyModeColumn {
                get {
                    return this.columnPrintOnlyMode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SkipAutoloaderScanningColumn {
                get {
                    return this.columnSkipAutoloaderScanning;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PrintBeforeRecordingColumn {
                get {
                    return this.columnPrintBeforeRecording;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UseDriveLettersForRecordersColumn {
                get {
                    return this.columnUseDriveLettersForRecorders;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TraceSCSICommandsColumn {
                get {
                    return this.columnTraceSCSICommands;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TraceReadWriteCommandsColumn {
                get {
                    return this.columnTraceReadWriteCommands;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TraceSerialCommandsColumn {
                get {
                    return this.columnTraceSerialCommands;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TraceLabelAndPrintingColumn {
                get {
                    return this.columnTraceLabelAndPrinting;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TraceXMLMessagesColumn {
                get {
                    return this.columnTraceXMLMessages;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LogSkippingOrderColumn {
                get {
                    return this.columnLogSkippingOrder;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RunWithoutDevicesColumn {
                get {
                    return this.columnRunWithoutDevices;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DisablePreloadingRecorderAfterPrinterLoadColumn {
                get {
                    return this.columnDisablePreloadingRecorderAfterPrinterLoad;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DisableCacheLockingColumn {
                get {
                    return this.columnDisableCacheLocking;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EnableCacheLimitingColumn {
                get {
                    return this.columnEnableCacheLimiting;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SkipSerialPortsForAutoloaderColumn {
                get {
                    return this.columnSkipSerialPortsForAutoloader;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SkipDrivesForReaderRecorderCacheColumn {
                get {
                    return this.columnSkipDrivesForReaderRecorderCache;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SecondsDelayBeforeMainWindowColumn {
                get {
                    return this.columnSecondsDelayBeforeMainWindow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UseParallelPortForPrismColumn {
                get {
                    return this.columnUseParallelPortForPrism;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DisableDriverNameInRenderingColumn {
                get {
                    return this.columnDisableDriverNameInRendering;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EraseCDRWBeforeRecordingColumn {
                get {
                    return this.columnEraseCDRWBeforeRecording;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StrictWaveFileCheckingColumn {
                get {
                    return this.columnStrictWaveFileChecking;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ServerStatus_IdColumn {
                get {
                    return this.columnServerStatus_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SwitchesRow this[int index] {
                get {
                    return ((SwitchesRow)(this.Rows[index]));
                }
            }
            
            public event SwitchesRowChangeEventHandler SwitchesRowChanging;
            
            public event SwitchesRowChangeEventHandler SwitchesRowChanged;
            
            public event SwitchesRowChangeEventHandler SwitchesRowDeleting;
            
            public event SwitchesRowChangeEventHandler SwitchesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSwitchesRow(SwitchesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SwitchesRow AddSwitchesRow(
                        string ManufacturingTestMode, 
                        string VerifyOnlyMode, 
                        string SlugsMode, 
                        string NoLogLimit, 
                        string SimulateFixate, 
                        string SetupMode, 
                        string DirectImaging, 
                        string AutoThroughPutMeasurement, 
                        string TimingLogged, 
                        string SkipOrderStatusUpdates, 
                        string PrintOnlyMode, 
                        string SkipAutoloaderScanning, 
                        string PrintBeforeRecording, 
                        string UseDriveLettersForRecorders, 
                        string TraceSCSICommands, 
                        string TraceReadWriteCommands, 
                        string TraceSerialCommands, 
                        string TraceLabelAndPrinting, 
                        string TraceXMLMessages, 
                        string LogSkippingOrder, 
                        string RunWithoutDevices, 
                        string DisablePreloadingRecorderAfterPrinterLoad, 
                        string DisableCacheLocking, 
                        string EnableCacheLimiting, 
                        string SkipSerialPortsForAutoloader, 
                        string SkipDrivesForReaderRecorderCache, 
                        string SecondsDelayBeforeMainWindow, 
                        string UseParallelPortForPrism, 
                        string DisableDriverNameInRendering, 
                        string EraseCDRWBeforeRecording, 
                        string StrictWaveFileChecking, 
                        ServerStatusRow parentServerStatusRowByServerStatus_Switches) {
                SwitchesRow rowSwitchesRow = ((SwitchesRow)(this.NewRow()));
                rowSwitchesRow.ItemArray = new object[] {
                        ManufacturingTestMode,
                        VerifyOnlyMode,
                        SlugsMode,
                        NoLogLimit,
                        SimulateFixate,
                        SetupMode,
                        DirectImaging,
                        AutoThroughPutMeasurement,
                        TimingLogged,
                        SkipOrderStatusUpdates,
                        PrintOnlyMode,
                        SkipAutoloaderScanning,
                        PrintBeforeRecording,
                        UseDriveLettersForRecorders,
                        TraceSCSICommands,
                        TraceReadWriteCommands,
                        TraceSerialCommands,
                        TraceLabelAndPrinting,
                        TraceXMLMessages,
                        LogSkippingOrder,
                        RunWithoutDevices,
                        DisablePreloadingRecorderAfterPrinterLoad,
                        DisableCacheLocking,
                        EnableCacheLimiting,
                        SkipSerialPortsForAutoloader,
                        SkipDrivesForReaderRecorderCache,
                        SecondsDelayBeforeMainWindow,
                        UseParallelPortForPrism,
                        DisableDriverNameInRendering,
                        EraseCDRWBeforeRecording,
                        StrictWaveFileChecking,
                        parentServerStatusRowByServerStatus_Switches[0]};
                this.Rows.Add(rowSwitchesRow);
                return rowSwitchesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SwitchesDataTable cln = ((SwitchesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SwitchesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnManufacturingTestMode = base.Columns["ManufacturingTestMode"];
                this.columnVerifyOnlyMode = base.Columns["VerifyOnlyMode"];
                this.columnSlugsMode = base.Columns["SlugsMode"];
                this.columnNoLogLimit = base.Columns["NoLogLimit"];
                this.columnSimulateFixate = base.Columns["SimulateFixate"];
                this.columnSetupMode = base.Columns["SetupMode"];
                this.columnDirectImaging = base.Columns["DirectImaging"];
                this.columnAutoThroughPutMeasurement = base.Columns["AutoThroughPutMeasurement"];
                this.columnTimingLogged = base.Columns["TimingLogged"];
                this.columnSkipOrderStatusUpdates = base.Columns["SkipOrderStatusUpdates"];
                this.columnPrintOnlyMode = base.Columns["PrintOnlyMode"];
                this.columnSkipAutoloaderScanning = base.Columns["SkipAutoloaderScanning"];
                this.columnPrintBeforeRecording = base.Columns["PrintBeforeRecording"];
                this.columnUseDriveLettersForRecorders = base.Columns["UseDriveLettersForRecorders"];
                this.columnTraceSCSICommands = base.Columns["TraceSCSICommands"];
                this.columnTraceReadWriteCommands = base.Columns["TraceReadWriteCommands"];
                this.columnTraceSerialCommands = base.Columns["TraceSerialCommands"];
                this.columnTraceLabelAndPrinting = base.Columns["TraceLabelAndPrinting"];
                this.columnTraceXMLMessages = base.Columns["TraceXMLMessages"];
                this.columnLogSkippingOrder = base.Columns["LogSkippingOrder"];
                this.columnRunWithoutDevices = base.Columns["RunWithoutDevices"];
                this.columnDisablePreloadingRecorderAfterPrinterLoad = base.Columns["DisablePreloadingRecorderAfterPrinterLoad"];
                this.columnDisableCacheLocking = base.Columns["DisableCacheLocking"];
                this.columnEnableCacheLimiting = base.Columns["EnableCacheLimiting"];
                this.columnSkipSerialPortsForAutoloader = base.Columns["SkipSerialPortsForAutoloader"];
                this.columnSkipDrivesForReaderRecorderCache = base.Columns["SkipDrivesForReaderRecorderCache"];
                this.columnSecondsDelayBeforeMainWindow = base.Columns["SecondsDelayBeforeMainWindow"];
                this.columnUseParallelPortForPrism = base.Columns["UseParallelPortForPrism"];
                this.columnDisableDriverNameInRendering = base.Columns["DisableDriverNameInRendering"];
                this.columnEraseCDRWBeforeRecording = base.Columns["EraseCDRWBeforeRecording"];
                this.columnStrictWaveFileChecking = base.Columns["StrictWaveFileChecking"];
                this.columnServerStatus_Id = base.Columns["ServerStatus_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnManufacturingTestMode = new System.Data.DataColumn("ManufacturingTestMode", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnManufacturingTestMode);
                this.columnVerifyOnlyMode = new System.Data.DataColumn("VerifyOnlyMode", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnVerifyOnlyMode);
                this.columnSlugsMode = new System.Data.DataColumn("SlugsMode", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSlugsMode);
                this.columnNoLogLimit = new System.Data.DataColumn("NoLogLimit", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNoLogLimit);
                this.columnSimulateFixate = new System.Data.DataColumn("SimulateFixate", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSimulateFixate);
                this.columnSetupMode = new System.Data.DataColumn("SetupMode", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSetupMode);
                this.columnDirectImaging = new System.Data.DataColumn("DirectImaging", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDirectImaging);
                this.columnAutoThroughPutMeasurement = new System.Data.DataColumn("AutoThroughPutMeasurement", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAutoThroughPutMeasurement);
                this.columnTimingLogged = new System.Data.DataColumn("TimingLogged", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTimingLogged);
                this.columnSkipOrderStatusUpdates = new System.Data.DataColumn("SkipOrderStatusUpdates", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSkipOrderStatusUpdates);
                this.columnPrintOnlyMode = new System.Data.DataColumn("PrintOnlyMode", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPrintOnlyMode);
                this.columnSkipAutoloaderScanning = new System.Data.DataColumn("SkipAutoloaderScanning", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSkipAutoloaderScanning);
                this.columnPrintBeforeRecording = new System.Data.DataColumn("PrintBeforeRecording", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPrintBeforeRecording);
                this.columnUseDriveLettersForRecorders = new System.Data.DataColumn("UseDriveLettersForRecorders", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseDriveLettersForRecorders);
                this.columnTraceSCSICommands = new System.Data.DataColumn("TraceSCSICommands", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTraceSCSICommands);
                this.columnTraceReadWriteCommands = new System.Data.DataColumn("TraceReadWriteCommands", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTraceReadWriteCommands);
                this.columnTraceSerialCommands = new System.Data.DataColumn("TraceSerialCommands", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTraceSerialCommands);
                this.columnTraceLabelAndPrinting = new System.Data.DataColumn("TraceLabelAndPrinting", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTraceLabelAndPrinting);
                this.columnTraceXMLMessages = new System.Data.DataColumn("TraceXMLMessages", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTraceXMLMessages);
                this.columnLogSkippingOrder = new System.Data.DataColumn("LogSkippingOrder", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLogSkippingOrder);
                this.columnRunWithoutDevices = new System.Data.DataColumn("RunWithoutDevices", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRunWithoutDevices);
                this.columnDisablePreloadingRecorderAfterPrinterLoad = new System.Data.DataColumn("DisablePreloadingRecorderAfterPrinterLoad", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDisablePreloadingRecorderAfterPrinterLoad);
                this.columnDisableCacheLocking = new System.Data.DataColumn("DisableCacheLocking", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDisableCacheLocking);
                this.columnEnableCacheLimiting = new System.Data.DataColumn("EnableCacheLimiting", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEnableCacheLimiting);
                this.columnSkipSerialPortsForAutoloader = new System.Data.DataColumn("SkipSerialPortsForAutoloader", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSkipSerialPortsForAutoloader);
                this.columnSkipDrivesForReaderRecorderCache = new System.Data.DataColumn("SkipDrivesForReaderRecorderCache", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSkipDrivesForReaderRecorderCache);
                this.columnSecondsDelayBeforeMainWindow = new System.Data.DataColumn("SecondsDelayBeforeMainWindow", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSecondsDelayBeforeMainWindow);
                this.columnUseParallelPortForPrism = new System.Data.DataColumn("UseParallelPortForPrism", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseParallelPortForPrism);
                this.columnDisableDriverNameInRendering = new System.Data.DataColumn("DisableDriverNameInRendering", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDisableDriverNameInRendering);
                this.columnEraseCDRWBeforeRecording = new System.Data.DataColumn("EraseCDRWBeforeRecording", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEraseCDRWBeforeRecording);
                this.columnStrictWaveFileChecking = new System.Data.DataColumn("StrictWaveFileChecking", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnStrictWaveFileChecking);
                this.columnServerStatus_Id = new System.Data.DataColumn("ServerStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnServerStatus_Id);
                this.columnManufacturingTestMode.Namespace = "";
                this.columnManufacturingTestMode.DefaultValue = ((string)("false"));
                this.columnVerifyOnlyMode.Namespace = "";
                this.columnVerifyOnlyMode.DefaultValue = ((string)("false"));
                this.columnSlugsMode.Namespace = "";
                this.columnSlugsMode.DefaultValue = ((string)("false"));
                this.columnNoLogLimit.Namespace = "";
                this.columnNoLogLimit.DefaultValue = ((string)("false"));
                this.columnSimulateFixate.Namespace = "";
                this.columnSimulateFixate.DefaultValue = ((string)("false"));
                this.columnSetupMode.Namespace = "";
                this.columnSetupMode.DefaultValue = ((string)("false"));
                this.columnDirectImaging.Namespace = "";
                this.columnDirectImaging.DefaultValue = ((string)("false"));
                this.columnAutoThroughPutMeasurement.Namespace = "";
                this.columnAutoThroughPutMeasurement.DefaultValue = ((string)("false"));
                this.columnTimingLogged.Namespace = "";
                this.columnTimingLogged.DefaultValue = ((string)("false"));
                this.columnSkipOrderStatusUpdates.Namespace = "";
                this.columnSkipOrderStatusUpdates.DefaultValue = ((string)("false"));
                this.columnPrintOnlyMode.Namespace = "";
                this.columnPrintOnlyMode.DefaultValue = ((string)("false"));
                this.columnSkipAutoloaderScanning.Namespace = "";
                this.columnSkipAutoloaderScanning.DefaultValue = ((string)("false"));
                this.columnPrintBeforeRecording.Namespace = "";
                this.columnPrintBeforeRecording.DefaultValue = ((string)("false"));
                this.columnUseDriveLettersForRecorders.Namespace = "";
                this.columnUseDriveLettersForRecorders.DefaultValue = ((string)("false"));
                this.columnTraceSCSICommands.Namespace = "";
                this.columnTraceSCSICommands.DefaultValue = ((string)("false"));
                this.columnTraceReadWriteCommands.Namespace = "";
                this.columnTraceReadWriteCommands.DefaultValue = ((string)("false"));
                this.columnTraceSerialCommands.Namespace = "";
                this.columnTraceSerialCommands.DefaultValue = ((string)("false"));
                this.columnTraceLabelAndPrinting.Namespace = "";
                this.columnTraceLabelAndPrinting.DefaultValue = ((string)("false"));
                this.columnTraceXMLMessages.Namespace = "";
                this.columnTraceXMLMessages.DefaultValue = ((string)("false"));
                this.columnLogSkippingOrder.Namespace = "";
                this.columnLogSkippingOrder.DefaultValue = ((string)("false"));
                this.columnRunWithoutDevices.Namespace = "";
                this.columnRunWithoutDevices.DefaultValue = ((string)("false"));
                this.columnDisablePreloadingRecorderAfterPrinterLoad.Namespace = "";
                this.columnDisablePreloadingRecorderAfterPrinterLoad.DefaultValue = ((string)("false"));
                this.columnDisableCacheLocking.Namespace = "";
                this.columnDisableCacheLocking.DefaultValue = ((string)("false"));
                this.columnEnableCacheLimiting.Namespace = "";
                this.columnEnableCacheLimiting.DefaultValue = ((string)("false"));
                this.columnSkipSerialPortsForAutoloader.Namespace = "";
                this.columnSkipDrivesForReaderRecorderCache.Namespace = "";
                this.columnSecondsDelayBeforeMainWindow.Namespace = "";
                this.columnUseParallelPortForPrism.Namespace = "";
                this.columnUseParallelPortForPrism.DefaultValue = ((string)("false"));
                this.columnDisableDriverNameInRendering.Namespace = "";
                this.columnDisableDriverNameInRendering.DefaultValue = ((string)("false"));
                this.columnEraseCDRWBeforeRecording.Namespace = "";
                this.columnEraseCDRWBeforeRecording.DefaultValue = ((string)("false"));
                this.columnStrictWaveFileChecking.Namespace = "";
                this.columnStrictWaveFileChecking.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SwitchesRow NewSwitchesRow() {
                return ((SwitchesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SwitchesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SwitchesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SwitchesRowChanged != null)) {
                    this.SwitchesRowChanged(this, new SwitchesRowChangeEvent(((SwitchesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SwitchesRowChanging != null)) {
                    this.SwitchesRowChanging(this, new SwitchesRowChangeEvent(((SwitchesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SwitchesRowDeleted != null)) {
                    this.SwitchesRowDeleted(this, new SwitchesRowChangeEvent(((SwitchesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SwitchesRowDeleting != null)) {
                    this.SwitchesRowDeleting(this, new SwitchesRowChangeEvent(((SwitchesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSwitchesRow(SwitchesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SwitchesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AutoloaderStatusDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnLoaderNumber;
            
            private System.Data.DataColumn columnOffline;
            
            private System.Data.DataColumn columnMailslotLevel;
            
            private System.Data.DataColumn columnAutoloaderStatus_Id;
            
            private System.Data.DataColumn columnServerStatus_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderStatusDataTable() {
                this.TableName = "AutoloaderStatus";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AutoloaderStatusDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AutoloaderStatusDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LoaderNumberColumn {
                get {
                    return this.columnLoaderNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OfflineColumn {
                get {
                    return this.columnOffline;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MailslotLevelColumn {
                get {
                    return this.columnMailslotLevel;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AutoloaderStatus_IdColumn {
                get {
                    return this.columnAutoloaderStatus_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ServerStatus_IdColumn {
                get {
                    return this.columnServerStatus_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderStatusRow this[int index] {
                get {
                    return ((AutoloaderStatusRow)(this.Rows[index]));
                }
            }
            
            public event AutoloaderStatusRowChangeEventHandler AutoloaderStatusRowChanging;
            
            public event AutoloaderStatusRowChangeEventHandler AutoloaderStatusRowChanged;
            
            public event AutoloaderStatusRowChangeEventHandler AutoloaderStatusRowDeleting;
            
            public event AutoloaderStatusRowChangeEventHandler AutoloaderStatusRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAutoloaderStatusRow(AutoloaderStatusRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderStatusRow AddAutoloaderStatusRow(string LoaderNumber, string Offline, string MailslotLevel, ServerStatusRow parentServerStatusRowByServerStatus_AutoloaderStatus) {
                AutoloaderStatusRow rowAutoloaderStatusRow = ((AutoloaderStatusRow)(this.NewRow()));
                rowAutoloaderStatusRow.ItemArray = new object[] {
                        LoaderNumber,
                        Offline,
                        MailslotLevel,
                        null,
                        parentServerStatusRowByServerStatus_AutoloaderStatus[0]};
                this.Rows.Add(rowAutoloaderStatusRow);
                return rowAutoloaderStatusRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                AutoloaderStatusDataTable cln = ((AutoloaderStatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new AutoloaderStatusDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLoaderNumber = base.Columns["LoaderNumber"];
                this.columnOffline = base.Columns["Offline"];
                this.columnMailslotLevel = base.Columns["MailslotLevel"];
                this.columnAutoloaderStatus_Id = base.Columns["AutoloaderStatus_Id"];
                this.columnServerStatus_Id = base.Columns["ServerStatus_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLoaderNumber = new System.Data.DataColumn("LoaderNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLoaderNumber);
                this.columnOffline = new System.Data.DataColumn("Offline", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOffline);
                this.columnMailslotLevel = new System.Data.DataColumn("MailslotLevel", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMailslotLevel);
                this.columnAutoloaderStatus_Id = new System.Data.DataColumn("AutoloaderStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAutoloaderStatus_Id);
                this.columnServerStatus_Id = new System.Data.DataColumn("ServerStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnServerStatus_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnAutoloaderStatus_Id}, true));
                this.columnLoaderNumber.AllowDBNull = false;
                this.columnLoaderNumber.Namespace = "";
                this.columnOffline.AllowDBNull = false;
                this.columnOffline.Namespace = "";
                this.columnMailslotLevel.Namespace = "";
                this.columnAutoloaderStatus_Id.AutoIncrement = true;
                this.columnAutoloaderStatus_Id.AllowDBNull = false;
                this.columnAutoloaderStatus_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderStatusRow NewAutoloaderStatusRow() {
                return ((AutoloaderStatusRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AutoloaderStatusRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(AutoloaderStatusRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AutoloaderStatusRowChanged != null)) {
                    this.AutoloaderStatusRowChanged(this, new AutoloaderStatusRowChangeEvent(((AutoloaderStatusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AutoloaderStatusRowChanging != null)) {
                    this.AutoloaderStatusRowChanging(this, new AutoloaderStatusRowChangeEvent(((AutoloaderStatusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AutoloaderStatusRowDeleted != null)) {
                    this.AutoloaderStatusRowDeleted(this, new AutoloaderStatusRowChangeEvent(((AutoloaderStatusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AutoloaderStatusRowDeleting != null)) {
                    this.AutoloaderStatusRowDeleting(this, new AutoloaderStatusRowChangeEvent(((AutoloaderStatusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAutoloaderStatusRow(AutoloaderStatusRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AutoloaderStatusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BinDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnNumber;
            
            private System.Data.DataColumn columnLevel;
            
            private System.Data.DataColumn columnUsage;
            
            private System.Data.DataColumn columnAutoloaderStatus_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BinDataTable() {
                this.TableName = "Bin";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BinDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BinDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LevelColumn {
                get {
                    return this.columnLevel;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UsageColumn {
                get {
                    return this.columnUsage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AutoloaderStatus_IdColumn {
                get {
                    return this.columnAutoloaderStatus_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BinRow this[int index] {
                get {
                    return ((BinRow)(this.Rows[index]));
                }
            }
            
            public event BinRowChangeEventHandler BinRowChanging;
            
            public event BinRowChangeEventHandler BinRowChanged;
            
            public event BinRowChangeEventHandler BinRowDeleting;
            
            public event BinRowChangeEventHandler BinRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBinRow(BinRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BinRow AddBinRow(string Number, string Level, string Usage, AutoloaderStatusRow parentAutoloaderStatusRowByAutoloaderStatus_Bin) {
                BinRow rowBinRow = ((BinRow)(this.NewRow()));
                rowBinRow.ItemArray = new object[] {
                        Number,
                        Level,
                        Usage,
                        parentAutoloaderStatusRowByAutoloaderStatus_Bin[3]};
                this.Rows.Add(rowBinRow);
                return rowBinRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BinDataTable cln = ((BinDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BinDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNumber = base.Columns["Number"];
                this.columnLevel = base.Columns["Level"];
                this.columnUsage = base.Columns["Usage"];
                this.columnAutoloaderStatus_Id = base.Columns["AutoloaderStatus_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNumber = new System.Data.DataColumn("Number", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNumber);
                this.columnLevel = new System.Data.DataColumn("Level", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLevel);
                this.columnUsage = new System.Data.DataColumn("Usage", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUsage);
                this.columnAutoloaderStatus_Id = new System.Data.DataColumn("AutoloaderStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAutoloaderStatus_Id);
                this.columnNumber.AllowDBNull = false;
                this.columnNumber.Namespace = "";
                this.columnLevel.Namespace = "";
                this.columnUsage.AllowDBNull = false;
                this.columnUsage.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BinRow NewBinRow() {
                return ((BinRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BinRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BinRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BinRowChanged != null)) {
                    this.BinRowChanged(this, new BinRowChangeEvent(((BinRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BinRowChanging != null)) {
                    this.BinRowChanging(this, new BinRowChangeEvent(((BinRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BinRowDeleted != null)) {
                    this.BinRowDeleted(this, new BinRowChangeEvent(((BinRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BinRowDeleting != null)) {
                    this.BinRowDeleting(this, new BinRowChangeEvent(((BinRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBinRow(BinRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BinDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrinterDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnNumber;
            
            private System.Data.DataColumn columnOffline;
            
            private System.Data.DataColumn columnLabelsRemaining;
            
            private System.Data.DataColumn columnDiscCount;
            
            private System.Data.DataColumn columnAutoloaderStatus_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrinterDataTable() {
                this.TableName = "Printer";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrinterDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PrinterDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OfflineColumn {
                get {
                    return this.columnOffline;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LabelsRemainingColumn {
                get {
                    return this.columnLabelsRemaining;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DiscCountColumn {
                get {
                    return this.columnDiscCount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AutoloaderStatus_IdColumn {
                get {
                    return this.columnAutoloaderStatus_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrinterRow this[int index] {
                get {
                    return ((PrinterRow)(this.Rows[index]));
                }
            }
            
            public event PrinterRowChangeEventHandler PrinterRowChanging;
            
            public event PrinterRowChangeEventHandler PrinterRowChanged;
            
            public event PrinterRowChangeEventHandler PrinterRowDeleting;
            
            public event PrinterRowChangeEventHandler PrinterRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrinterRow(PrinterRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrinterRow AddPrinterRow(string Number, string Offline, string LabelsRemaining, string DiscCount, AutoloaderStatusRow parentAutoloaderStatusRowByAutoloaderStatus_Printer) {
                PrinterRow rowPrinterRow = ((PrinterRow)(this.NewRow()));
                rowPrinterRow.ItemArray = new object[] {
                        Number,
                        Offline,
                        LabelsRemaining,
                        DiscCount,
                        parentAutoloaderStatusRowByAutoloaderStatus_Printer[3]};
                this.Rows.Add(rowPrinterRow);
                return rowPrinterRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PrinterDataTable cln = ((PrinterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PrinterDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNumber = base.Columns["Number"];
                this.columnOffline = base.Columns["Offline"];
                this.columnLabelsRemaining = base.Columns["LabelsRemaining"];
                this.columnDiscCount = base.Columns["DiscCount"];
                this.columnAutoloaderStatus_Id = base.Columns["AutoloaderStatus_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNumber = new System.Data.DataColumn("Number", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNumber);
                this.columnOffline = new System.Data.DataColumn("Offline", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOffline);
                this.columnLabelsRemaining = new System.Data.DataColumn("LabelsRemaining", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLabelsRemaining);
                this.columnDiscCount = new System.Data.DataColumn("DiscCount", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDiscCount);
                this.columnAutoloaderStatus_Id = new System.Data.DataColumn("AutoloaderStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAutoloaderStatus_Id);
                this.columnNumber.AllowDBNull = false;
                this.columnNumber.Namespace = "";
                this.columnOffline.AllowDBNull = false;
                this.columnOffline.Namespace = "";
                this.columnLabelsRemaining.Namespace = "";
                this.columnDiscCount.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrinterRow NewPrinterRow() {
                return ((PrinterRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PrinterRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PrinterRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrinterRowChanged != null)) {
                    this.PrinterRowChanged(this, new PrinterRowChangeEvent(((PrinterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrinterRowChanging != null)) {
                    this.PrinterRowChanging(this, new PrinterRowChangeEvent(((PrinterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrinterRowDeleted != null)) {
                    this.PrinterRowDeleted(this, new PrinterRowChangeEvent(((PrinterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrinterRowDeleting != null)) {
                    this.PrinterRowDeleting(this, new PrinterRowChangeEvent(((PrinterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrinterRow(PrinterRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrinterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RecorderDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnNumber;
            
            private System.Data.DataColumn columnOffline;
            
            private System.Data.DataColumn columnDiscCount;
            
            private System.Data.DataColumn columnAutoloaderStatus_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecorderDataTable() {
                this.TableName = "Recorder";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RecorderDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RecorderDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OfflineColumn {
                get {
                    return this.columnOffline;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DiscCountColumn {
                get {
                    return this.columnDiscCount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AutoloaderStatus_IdColumn {
                get {
                    return this.columnAutoloaderStatus_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecorderRow this[int index] {
                get {
                    return ((RecorderRow)(this.Rows[index]));
                }
            }
            
            public event RecorderRowChangeEventHandler RecorderRowChanging;
            
            public event RecorderRowChangeEventHandler RecorderRowChanged;
            
            public event RecorderRowChangeEventHandler RecorderRowDeleting;
            
            public event RecorderRowChangeEventHandler RecorderRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRecorderRow(RecorderRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecorderRow AddRecorderRow(string Number, string Offline, string DiscCount, AutoloaderStatusRow parentAutoloaderStatusRowByAutoloaderStatus_Recorder) {
                RecorderRow rowRecorderRow = ((RecorderRow)(this.NewRow()));
                rowRecorderRow.ItemArray = new object[] {
                        Number,
                        Offline,
                        DiscCount,
                        parentAutoloaderStatusRowByAutoloaderStatus_Recorder[3]};
                this.Rows.Add(rowRecorderRow);
                return rowRecorderRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RecorderDataTable cln = ((RecorderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RecorderDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNumber = base.Columns["Number"];
                this.columnOffline = base.Columns["Offline"];
                this.columnDiscCount = base.Columns["DiscCount"];
                this.columnAutoloaderStatus_Id = base.Columns["AutoloaderStatus_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNumber = new System.Data.DataColumn("Number", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNumber);
                this.columnOffline = new System.Data.DataColumn("Offline", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOffline);
                this.columnDiscCount = new System.Data.DataColumn("DiscCount", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDiscCount);
                this.columnAutoloaderStatus_Id = new System.Data.DataColumn("AutoloaderStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAutoloaderStatus_Id);
                this.columnNumber.AllowDBNull = false;
                this.columnNumber.Namespace = "";
                this.columnOffline.AllowDBNull = false;
                this.columnOffline.Namespace = "";
                this.columnDiscCount.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecorderRow NewRecorderRow() {
                return ((RecorderRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RecorderRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RecorderRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RecorderRowChanged != null)) {
                    this.RecorderRowChanged(this, new RecorderRowChangeEvent(((RecorderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RecorderRowChanging != null)) {
                    this.RecorderRowChanging(this, new RecorderRowChangeEvent(((RecorderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RecorderRowDeleted != null)) {
                    this.RecorderRowDeleted(this, new RecorderRowChangeEvent(((RecorderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RecorderRowDeleting != null)) {
                    this.RecorderRowDeleting(this, new RecorderRowChangeEvent(((RecorderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRecorderRow(RecorderRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RecorderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ActivationInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnActivationInfo_Id;
            
            private System.Data.DataColumn columnServerStatus_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivationInfoDataTable() {
                this.TableName = "ActivationInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ActivationInfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ActivationInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ActivationInfo_IdColumn {
                get {
                    return this.columnActivationInfo_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ServerStatus_IdColumn {
                get {
                    return this.columnServerStatus_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivationInfoRow this[int index] {
                get {
                    return ((ActivationInfoRow)(this.Rows[index]));
                }
            }
            
            public event ActivationInfoRowChangeEventHandler ActivationInfoRowChanging;
            
            public event ActivationInfoRowChangeEventHandler ActivationInfoRowChanged;
            
            public event ActivationInfoRowChangeEventHandler ActivationInfoRowDeleting;
            
            public event ActivationInfoRowChangeEventHandler ActivationInfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddActivationInfoRow(ActivationInfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivationInfoRow AddActivationInfoRow(ServerStatusRow parentServerStatusRowByServerStatus_ActivationInfo) {
                ActivationInfoRow rowActivationInfoRow = ((ActivationInfoRow)(this.NewRow()));
                rowActivationInfoRow.ItemArray = new object[] {
                        null,
                        parentServerStatusRowByServerStatus_ActivationInfo[0]};
                this.Rows.Add(rowActivationInfoRow);
                return rowActivationInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ActivationInfoDataTable cln = ((ActivationInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ActivationInfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnActivationInfo_Id = base.Columns["ActivationInfo_Id"];
                this.columnServerStatus_Id = base.Columns["ServerStatus_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnActivationInfo_Id = new System.Data.DataColumn("ActivationInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnActivationInfo_Id);
                this.columnServerStatus_Id = new System.Data.DataColumn("ServerStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnServerStatus_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnActivationInfo_Id}, true));
                this.columnActivationInfo_Id.AutoIncrement = true;
                this.columnActivationInfo_Id.AllowDBNull = false;
                this.columnActivationInfo_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivationInfoRow NewActivationInfoRow() {
                return ((ActivationInfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ActivationInfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ActivationInfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ActivationInfoRowChanged != null)) {
                    this.ActivationInfoRowChanged(this, new ActivationInfoRowChangeEvent(((ActivationInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ActivationInfoRowChanging != null)) {
                    this.ActivationInfoRowChanging(this, new ActivationInfoRowChangeEvent(((ActivationInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ActivationInfoRowDeleted != null)) {
                    this.ActivationInfoRowDeleted(this, new ActivationInfoRowChangeEvent(((ActivationInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ActivationInfoRowDeleting != null)) {
                    this.ActivationInfoRowDeleting(this, new ActivationInfoRowChangeEvent(((ActivationInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveActivationInfoRow(ActivationInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ActivationInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BaseDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnStatus;
            
            private System.Data.DataColumn columnDaysRemaining;
            
            private System.Data.DataColumn columnActivationInfo_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseDataTable() {
                this.TableName = "Base";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BaseDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BaseDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DaysRemainingColumn {
                get {
                    return this.columnDaysRemaining;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ActivationInfo_IdColumn {
                get {
                    return this.columnActivationInfo_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseRow this[int index] {
                get {
                    return ((BaseRow)(this.Rows[index]));
                }
            }
            
            public event BaseRowChangeEventHandler BaseRowChanging;
            
            public event BaseRowChangeEventHandler BaseRowChanged;
            
            public event BaseRowChangeEventHandler BaseRowDeleting;
            
            public event BaseRowChangeEventHandler BaseRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBaseRow(BaseRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseRow AddBaseRow(string Status, string DaysRemaining, ActivationInfoRow parentActivationInfoRowByActivationInfo_Base) {
                BaseRow rowBaseRow = ((BaseRow)(this.NewRow()));
                rowBaseRow.ItemArray = new object[] {
                        Status,
                        DaysRemaining,
                        parentActivationInfoRowByActivationInfo_Base[0]};
                this.Rows.Add(rowBaseRow);
                return rowBaseRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BaseDataTable cln = ((BaseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BaseDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStatus = base.Columns["Status"];
                this.columnDaysRemaining = base.Columns["DaysRemaining"];
                this.columnActivationInfo_Id = base.Columns["ActivationInfo_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStatus = new System.Data.DataColumn("Status", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnStatus);
                this.columnDaysRemaining = new System.Data.DataColumn("DaysRemaining", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDaysRemaining);
                this.columnActivationInfo_Id = new System.Data.DataColumn("ActivationInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnActivationInfo_Id);
                this.columnStatus.Namespace = "";
                this.columnStatus.DefaultValue = ((string)("Trial"));
                this.columnDaysRemaining.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseRow NewBaseRow() {
                return ((BaseRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BaseRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BaseRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BaseRowChanged != null)) {
                    this.BaseRowChanged(this, new BaseRowChangeEvent(((BaseRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BaseRowChanging != null)) {
                    this.BaseRowChanging(this, new BaseRowChangeEvent(((BaseRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BaseRowDeleted != null)) {
                    this.BaseRowDeleted(this, new BaseRowChangeEvent(((BaseRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BaseRowDeleting != null)) {
                    this.BaseRowDeleting(this, new BaseRowChangeEvent(((BaseRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBaseRow(BaseRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BaseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RawModeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnStatus;
            
            private System.Data.DataColumn columnDaysRemaining;
            
            private System.Data.DataColumn columnActivationInfo_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RawModeDataTable() {
                this.TableName = "RawMode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RawModeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RawModeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DaysRemainingColumn {
                get {
                    return this.columnDaysRemaining;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ActivationInfo_IdColumn {
                get {
                    return this.columnActivationInfo_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RawModeRow this[int index] {
                get {
                    return ((RawModeRow)(this.Rows[index]));
                }
            }
            
            public event RawModeRowChangeEventHandler RawModeRowChanging;
            
            public event RawModeRowChangeEventHandler RawModeRowChanged;
            
            public event RawModeRowChangeEventHandler RawModeRowDeleting;
            
            public event RawModeRowChangeEventHandler RawModeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRawModeRow(RawModeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RawModeRow AddRawModeRow(string Status, string DaysRemaining, ActivationInfoRow parentActivationInfoRowByActivationInfo_RawMode) {
                RawModeRow rowRawModeRow = ((RawModeRow)(this.NewRow()));
                rowRawModeRow.ItemArray = new object[] {
                        Status,
                        DaysRemaining,
                        parentActivationInfoRowByActivationInfo_RawMode[0]};
                this.Rows.Add(rowRawModeRow);
                return rowRawModeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RawModeDataTable cln = ((RawModeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RawModeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStatus = base.Columns["Status"];
                this.columnDaysRemaining = base.Columns["DaysRemaining"];
                this.columnActivationInfo_Id = base.Columns["ActivationInfo_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStatus = new System.Data.DataColumn("Status", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnStatus);
                this.columnDaysRemaining = new System.Data.DataColumn("DaysRemaining", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDaysRemaining);
                this.columnActivationInfo_Id = new System.Data.DataColumn("ActivationInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnActivationInfo_Id);
                this.columnStatus.Namespace = "";
                this.columnStatus.DefaultValue = ((string)("Trial"));
                this.columnDaysRemaining.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RawModeRow NewRawModeRow() {
                return ((RawModeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RawModeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RawModeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RawModeRowChanged != null)) {
                    this.RawModeRowChanged(this, new RawModeRowChangeEvent(((RawModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RawModeRowChanging != null)) {
                    this.RawModeRowChanging(this, new RawModeRowChangeEvent(((RawModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RawModeRowDeleted != null)) {
                    this.RawModeRowDeleted(this, new RawModeRowChangeEvent(((RawModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RawModeRowDeleting != null)) {
                    this.RawModeRowDeleting(this, new RawModeRowChangeEvent(((RawModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRawModeRow(RawModeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RawModeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SmarteCDDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnStatus;
            
            private System.Data.DataColumn columnDaysRemaining;
            
            private System.Data.DataColumn columnActivationInfo_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SmarteCDDataTable() {
                this.TableName = "SmarteCD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SmarteCDDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SmarteCDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DaysRemainingColumn {
                get {
                    return this.columnDaysRemaining;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ActivationInfo_IdColumn {
                get {
                    return this.columnActivationInfo_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SmarteCDRow this[int index] {
                get {
                    return ((SmarteCDRow)(this.Rows[index]));
                }
            }
            
            public event SmarteCDRowChangeEventHandler SmarteCDRowChanging;
            
            public event SmarteCDRowChangeEventHandler SmarteCDRowChanged;
            
            public event SmarteCDRowChangeEventHandler SmarteCDRowDeleting;
            
            public event SmarteCDRowChangeEventHandler SmarteCDRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSmarteCDRow(SmarteCDRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SmarteCDRow AddSmarteCDRow(string Status, string DaysRemaining, ActivationInfoRow parentActivationInfoRowByActivationInfo_SmarteCD) {
                SmarteCDRow rowSmarteCDRow = ((SmarteCDRow)(this.NewRow()));
                rowSmarteCDRow.ItemArray = new object[] {
                        Status,
                        DaysRemaining,
                        parentActivationInfoRowByActivationInfo_SmarteCD[0]};
                this.Rows.Add(rowSmarteCDRow);
                return rowSmarteCDRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SmarteCDDataTable cln = ((SmarteCDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SmarteCDDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStatus = base.Columns["Status"];
                this.columnDaysRemaining = base.Columns["DaysRemaining"];
                this.columnActivationInfo_Id = base.Columns["ActivationInfo_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStatus = new System.Data.DataColumn("Status", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnStatus);
                this.columnDaysRemaining = new System.Data.DataColumn("DaysRemaining", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDaysRemaining);
                this.columnActivationInfo_Id = new System.Data.DataColumn("ActivationInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnActivationInfo_Id);
                this.columnStatus.Namespace = "";
                this.columnStatus.DefaultValue = ((string)("Trial"));
                this.columnDaysRemaining.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SmarteCDRow NewSmarteCDRow() {
                return ((SmarteCDRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SmarteCDRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SmarteCDRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SmarteCDRowChanged != null)) {
                    this.SmarteCDRowChanged(this, new SmarteCDRowChangeEvent(((SmarteCDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SmarteCDRowChanging != null)) {
                    this.SmarteCDRowChanging(this, new SmarteCDRowChangeEvent(((SmarteCDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SmarteCDRowDeleted != null)) {
                    this.SmarteCDRowDeleted(this, new SmarteCDRowChangeEvent(((SmarteCDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SmarteCDRowDeleting != null)) {
                    this.SmarteCDRowDeleting(this, new SmarteCDRowChangeEvent(((SmarteCDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSmarteCDRow(SmarteCDRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SmarteCDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class VideoCDDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnStatus;
            
            private System.Data.DataColumn columnDaysRemaining;
            
            private System.Data.DataColumn columnActivationInfo_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VideoCDDataTable() {
                this.TableName = "VideoCD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VideoCDDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected VideoCDDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DaysRemainingColumn {
                get {
                    return this.columnDaysRemaining;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ActivationInfo_IdColumn {
                get {
                    return this.columnActivationInfo_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VideoCDRow this[int index] {
                get {
                    return ((VideoCDRow)(this.Rows[index]));
                }
            }
            
            public event VideoCDRowChangeEventHandler VideoCDRowChanging;
            
            public event VideoCDRowChangeEventHandler VideoCDRowChanged;
            
            public event VideoCDRowChangeEventHandler VideoCDRowDeleting;
            
            public event VideoCDRowChangeEventHandler VideoCDRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddVideoCDRow(VideoCDRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VideoCDRow AddVideoCDRow(string Status, string DaysRemaining, ActivationInfoRow parentActivationInfoRowByActivationInfo_VideoCD) {
                VideoCDRow rowVideoCDRow = ((VideoCDRow)(this.NewRow()));
                rowVideoCDRow.ItemArray = new object[] {
                        Status,
                        DaysRemaining,
                        parentActivationInfoRowByActivationInfo_VideoCD[0]};
                this.Rows.Add(rowVideoCDRow);
                return rowVideoCDRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                VideoCDDataTable cln = ((VideoCDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new VideoCDDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStatus = base.Columns["Status"];
                this.columnDaysRemaining = base.Columns["DaysRemaining"];
                this.columnActivationInfo_Id = base.Columns["ActivationInfo_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStatus = new System.Data.DataColumn("Status", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnStatus);
                this.columnDaysRemaining = new System.Data.DataColumn("DaysRemaining", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDaysRemaining);
                this.columnActivationInfo_Id = new System.Data.DataColumn("ActivationInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnActivationInfo_Id);
                this.columnStatus.Namespace = "";
                this.columnStatus.DefaultValue = ((string)("Trial"));
                this.columnDaysRemaining.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VideoCDRow NewVideoCDRow() {
                return ((VideoCDRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new VideoCDRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(VideoCDRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VideoCDRowChanged != null)) {
                    this.VideoCDRowChanged(this, new VideoCDRowChangeEvent(((VideoCDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VideoCDRowChanging != null)) {
                    this.VideoCDRowChanging(this, new VideoCDRowChangeEvent(((VideoCDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VideoCDRowDeleted != null)) {
                    this.VideoCDRowDeleted(this, new VideoCDRowChangeEvent(((VideoCDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VideoCDRowDeleting != null)) {
                    this.VideoCDRowDeleting(this, new VideoCDRowChangeEvent(((VideoCDRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveVideoCDRow(VideoCDRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VideoCDDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OrderListDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCluster;
            
            private System.Data.DataColumn columnNumberOfOrders;
            
            private System.Data.DataColumn columnOrderList_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderListDataTable() {
                this.TableName = "OrderList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OrderListDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OrderListDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClusterColumn {
                get {
                    return this.columnCluster;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberOfOrdersColumn {
                get {
                    return this.columnNumberOfOrders;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrderList_IdColumn {
                get {
                    return this.columnOrderList_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderListRow this[int index] {
                get {
                    return ((OrderListRow)(this.Rows[index]));
                }
            }
            
            public event OrderListRowChangeEventHandler OrderListRowChanging;
            
            public event OrderListRowChangeEventHandler OrderListRowChanged;
            
            public event OrderListRowChangeEventHandler OrderListRowDeleting;
            
            public event OrderListRowChangeEventHandler OrderListRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOrderListRow(OrderListRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderListRow AddOrderListRow(string Cluster, string NumberOfOrders) {
                OrderListRow rowOrderListRow = ((OrderListRow)(this.NewRow()));
                rowOrderListRow.ItemArray = new object[] {
                        Cluster,
                        NumberOfOrders,
                        null};
                this.Rows.Add(rowOrderListRow);
                return rowOrderListRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                OrderListDataTable cln = ((OrderListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new OrderListDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCluster = base.Columns["Cluster"];
                this.columnNumberOfOrders = base.Columns["NumberOfOrders"];
                this.columnOrderList_Id = base.Columns["OrderList_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCluster = new System.Data.DataColumn("Cluster", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCluster);
                this.columnNumberOfOrders = new System.Data.DataColumn("NumberOfOrders", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNumberOfOrders);
                this.columnOrderList_Id = new System.Data.DataColumn("OrderList_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnOrderList_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnOrderList_Id}, true));
                this.columnCluster.AllowDBNull = false;
                this.columnCluster.Namespace = "";
                this.columnNumberOfOrders.AllowDBNull = false;
                this.columnNumberOfOrders.Namespace = "";
                this.columnOrderList_Id.AutoIncrement = true;
                this.columnOrderList_Id.AllowDBNull = false;
                this.columnOrderList_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderListRow NewOrderListRow() {
                return ((OrderListRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OrderListRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(OrderListRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OrderListRowChanged != null)) {
                    this.OrderListRowChanged(this, new OrderListRowChangeEvent(((OrderListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OrderListRowChanging != null)) {
                    this.OrderListRowChanging(this, new OrderListRowChangeEvent(((OrderListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OrderListRowDeleted != null)) {
                    this.OrderListRowDeleted(this, new OrderListRowChangeEvent(((OrderListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OrderListRowDeleting != null)) {
                    this.OrderListRowDeleting(this, new OrderListRowChangeEvent(((OrderListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOrderListRow(OrderListRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OrderListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProductionOrderDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnOrderId;
            
            private System.Data.DataColumn columnClientId;
            
            private System.Data.DataColumn columnOrderType;
            
            private System.Data.DataColumn columnOrderState;
            
            private System.Data.DataColumn columnOrderStage;
            
            private System.Data.DataColumn columnOrderStageEx;
            
            private System.Data.DataColumn columnCopiesRequested;
            
            private System.Data.DataColumn columnCopiesCompleted;
            
            private System.Data.DataColumn columnPercentCompleted;
            
            private System.Data.DataColumn columnOriginalOrder;
            
            private System.Data.DataColumn columnOrderList_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionOrderDataTable() {
                this.TableName = "ProductionOrder";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductionOrderDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProductionOrderDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrderIdColumn {
                get {
                    return this.columnOrderId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClientIdColumn {
                get {
                    return this.columnClientId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrderTypeColumn {
                get {
                    return this.columnOrderType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrderStateColumn {
                get {
                    return this.columnOrderState;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrderStageColumn {
                get {
                    return this.columnOrderStage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrderStageExColumn {
                get {
                    return this.columnOrderStageEx;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CopiesRequestedColumn {
                get {
                    return this.columnCopiesRequested;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CopiesCompletedColumn {
                get {
                    return this.columnCopiesCompleted;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PercentCompletedColumn {
                get {
                    return this.columnPercentCompleted;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OriginalOrderColumn {
                get {
                    return this.columnOriginalOrder;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrderList_IdColumn {
                get {
                    return this.columnOrderList_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionOrderRow this[int index] {
                get {
                    return ((ProductionOrderRow)(this.Rows[index]));
                }
            }
            
            public event ProductionOrderRowChangeEventHandler ProductionOrderRowChanging;
            
            public event ProductionOrderRowChangeEventHandler ProductionOrderRowChanged;
            
            public event ProductionOrderRowChangeEventHandler ProductionOrderRowDeleting;
            
            public event ProductionOrderRowChangeEventHandler ProductionOrderRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProductionOrderRow(ProductionOrderRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionOrderRow AddProductionOrderRow(string OrderId, string ClientId, string OrderType, string OrderState, string OrderStage, string OrderStageEx, string CopiesRequested, string CopiesCompleted, string PercentCompleted, string OriginalOrder, OrderListRow parentOrderListRowByOrderList_ProductionOrder) {
                ProductionOrderRow rowProductionOrderRow = ((ProductionOrderRow)(this.NewRow()));
                rowProductionOrderRow.ItemArray = new object[] {
                        OrderId,
                        ClientId,
                        OrderType,
                        OrderState,
                        OrderStage,
                        OrderStageEx,
                        CopiesRequested,
                        CopiesCompleted,
                        PercentCompleted,
                        OriginalOrder,
                        parentOrderListRowByOrderList_ProductionOrder[2]};
                this.Rows.Add(rowProductionOrderRow);
                return rowProductionOrderRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ProductionOrderDataTable cln = ((ProductionOrderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ProductionOrderDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOrderId = base.Columns["OrderId"];
                this.columnClientId = base.Columns["ClientId"];
                this.columnOrderType = base.Columns["OrderType"];
                this.columnOrderState = base.Columns["OrderState"];
                this.columnOrderStage = base.Columns["OrderStage"];
                this.columnOrderStageEx = base.Columns["OrderStageEx"];
                this.columnCopiesRequested = base.Columns["CopiesRequested"];
                this.columnCopiesCompleted = base.Columns["CopiesCompleted"];
                this.columnPercentCompleted = base.Columns["PercentCompleted"];
                this.columnOriginalOrder = base.Columns["OriginalOrder"];
                this.columnOrderList_Id = base.Columns["OrderList_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOrderId = new System.Data.DataColumn("OrderId", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOrderId);
                this.columnClientId = new System.Data.DataColumn("ClientId", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnClientId);
                this.columnOrderType = new System.Data.DataColumn("OrderType", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOrderType);
                this.columnOrderState = new System.Data.DataColumn("OrderState", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOrderState);
                this.columnOrderStage = new System.Data.DataColumn("OrderStage", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOrderStage);
                this.columnOrderStageEx = new System.Data.DataColumn("OrderStageEx", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOrderStageEx);
                this.columnCopiesRequested = new System.Data.DataColumn("CopiesRequested", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCopiesRequested);
                this.columnCopiesCompleted = new System.Data.DataColumn("CopiesCompleted", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCopiesCompleted);
                this.columnPercentCompleted = new System.Data.DataColumn("PercentCompleted", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPercentCompleted);
                this.columnOriginalOrder = new System.Data.DataColumn("OriginalOrder", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOriginalOrder);
                this.columnOrderList_Id = new System.Data.DataColumn("OrderList_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnOrderList_Id);
                this.columnOrderId.AllowDBNull = false;
                this.columnOrderId.Namespace = "";
                this.columnClientId.AllowDBNull = false;
                this.columnClientId.Namespace = "";
                this.columnOrderType.Namespace = "";
                this.columnOrderType.DefaultValue = ((string)("Record"));
                this.columnOrderState.Namespace = "";
                this.columnOrderState.DefaultValue = ((string)("IN_PROCESS"));
                this.columnOrderStage.AllowDBNull = false;
                this.columnOrderStage.Namespace = "";
                this.columnOrderStageEx.Namespace = "";
                this.columnCopiesRequested.AllowDBNull = false;
                this.columnCopiesRequested.Namespace = "";
                this.columnCopiesCompleted.AllowDBNull = false;
                this.columnCopiesCompleted.Namespace = "";
                this.columnPercentCompleted.AllowDBNull = false;
                this.columnPercentCompleted.Namespace = "";
                this.columnOriginalOrder.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionOrderRow NewProductionOrderRow() {
                return ((ProductionOrderRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ProductionOrderRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ProductionOrderRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProductionOrderRowChanged != null)) {
                    this.ProductionOrderRowChanged(this, new ProductionOrderRowChangeEvent(((ProductionOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProductionOrderRowChanging != null)) {
                    this.ProductionOrderRowChanging(this, new ProductionOrderRowChangeEvent(((ProductionOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProductionOrderRowDeleted != null)) {
                    this.ProductionOrderRowDeleted(this, new ProductionOrderRowChangeEvent(((ProductionOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProductionOrderRowDeleting != null)) {
                    this.ProductionOrderRowDeleting(this, new ProductionOrderRowChangeEvent(((ProductionOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProductionOrderRow(ProductionOrderRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProductionOrderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SessionLogDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnNumberOfEntries;
            
            private System.Data.DataColumn columnSessionLog_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionLogDataTable() {
                this.TableName = "SessionLog";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SessionLogDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SessionLogDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberOfEntriesColumn {
                get {
                    return this.columnNumberOfEntries;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SessionLog_IdColumn {
                get {
                    return this.columnSessionLog_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionLogRow this[int index] {
                get {
                    return ((SessionLogRow)(this.Rows[index]));
                }
            }
            
            public event SessionLogRowChangeEventHandler SessionLogRowChanging;
            
            public event SessionLogRowChangeEventHandler SessionLogRowChanged;
            
            public event SessionLogRowChangeEventHandler SessionLogRowDeleting;
            
            public event SessionLogRowChangeEventHandler SessionLogRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSessionLogRow(SessionLogRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionLogRow AddSessionLogRow(string NumberOfEntries) {
                SessionLogRow rowSessionLogRow = ((SessionLogRow)(this.NewRow()));
                rowSessionLogRow.ItemArray = new object[] {
                        NumberOfEntries,
                        null};
                this.Rows.Add(rowSessionLogRow);
                return rowSessionLogRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SessionLogDataTable cln = ((SessionLogDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SessionLogDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNumberOfEntries = base.Columns["NumberOfEntries"];
                this.columnSessionLog_Id = base.Columns["SessionLog_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNumberOfEntries = new System.Data.DataColumn("NumberOfEntries", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNumberOfEntries);
                this.columnSessionLog_Id = new System.Data.DataColumn("SessionLog_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSessionLog_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnSessionLog_Id}, true));
                this.columnNumberOfEntries.AllowDBNull = false;
                this.columnNumberOfEntries.Namespace = "";
                this.columnSessionLog_Id.AutoIncrement = true;
                this.columnSessionLog_Id.AllowDBNull = false;
                this.columnSessionLog_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionLogRow NewSessionLogRow() {
                return ((SessionLogRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SessionLogRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SessionLogRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SessionLogRowChanged != null)) {
                    this.SessionLogRowChanged(this, new SessionLogRowChangeEvent(((SessionLogRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SessionLogRowChanging != null)) {
                    this.SessionLogRowChanging(this, new SessionLogRowChangeEvent(((SessionLogRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SessionLogRowDeleted != null)) {
                    this.SessionLogRowDeleted(this, new SessionLogRowChangeEvent(((SessionLogRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SessionLogRowDeleting != null)) {
                    this.SessionLogRowDeleting(this, new SessionLogRowChangeEvent(((SessionLogRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSessionLogRow(SessionLogRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SessionLogDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EntryDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnText;
            
            private System.Data.DataColumn columnTimestamp;
            
            private System.Data.DataColumn columnMessageId;
            
            private System.Data.DataColumn columnSessionLog_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntryDataTable() {
                this.TableName = "Entry";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EntryDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EntryDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TextColumn {
                get {
                    return this.columnText;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimestampColumn {
                get {
                    return this.columnTimestamp;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MessageIdColumn {
                get {
                    return this.columnMessageId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SessionLog_IdColumn {
                get {
                    return this.columnSessionLog_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntryRow this[int index] {
                get {
                    return ((EntryRow)(this.Rows[index]));
                }
            }
            
            public event EntryRowChangeEventHandler EntryRowChanging;
            
            public event EntryRowChangeEventHandler EntryRowChanged;
            
            public event EntryRowChangeEventHandler EntryRowDeleting;
            
            public event EntryRowChangeEventHandler EntryRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEntryRow(EntryRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntryRow AddEntryRow(string Text, string Timestamp, string MessageId, SessionLogRow parentSessionLogRowBySessionLog_Entry) {
                EntryRow rowEntryRow = ((EntryRow)(this.NewRow()));
                rowEntryRow.ItemArray = new object[] {
                        Text,
                        Timestamp,
                        MessageId,
                        parentSessionLogRowBySessionLog_Entry[1]};
                this.Rows.Add(rowEntryRow);
                return rowEntryRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EntryDataTable cln = ((EntryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EntryDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnText = base.Columns["Text"];
                this.columnTimestamp = base.Columns["Timestamp"];
                this.columnMessageId = base.Columns["MessageId"];
                this.columnSessionLog_Id = base.Columns["SessionLog_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnText = new System.Data.DataColumn("Text", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnText);
                this.columnTimestamp = new System.Data.DataColumn("Timestamp", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTimestamp);
                this.columnMessageId = new System.Data.DataColumn("MessageId", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMessageId);
                this.columnSessionLog_Id = new System.Data.DataColumn("SessionLog_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSessionLog_Id);
                this.columnText.AllowDBNull = false;
                this.columnText.Namespace = "";
                this.columnTimestamp.AllowDBNull = false;
                this.columnTimestamp.Namespace = "";
                this.columnMessageId.AllowDBNull = false;
                this.columnMessageId.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntryRow NewEntryRow() {
                return ((EntryRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EntryRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EntryRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EntryRowChanged != null)) {
                    this.EntryRowChanged(this, new EntryRowChangeEvent(((EntryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EntryRowChanging != null)) {
                    this.EntryRowChanging(this, new EntryRowChangeEvent(((EntryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EntryRowDeleted != null)) {
                    this.EntryRowDeleted(this, new EntryRowChangeEvent(((EntryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EntryRowDeleting != null)) {
                    this.EntryRowDeleting(this, new EntryRowChangeEvent(((EntryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEntryRow(EntryRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EntryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DialogActionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDialogId;
            
            private System.Data.DataColumn columnButton;
            
            private System.Data.DataColumn columnName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DialogActionDataTable() {
                this.TableName = "DialogAction";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DialogActionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DialogActionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DialogIdColumn {
                get {
                    return this.columnDialogId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ButtonColumn {
                get {
                    return this.columnButton;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DialogActionRow this[int index] {
                get {
                    return ((DialogActionRow)(this.Rows[index]));
                }
            }
            
            public event DialogActionRowChangeEventHandler DialogActionRowChanging;
            
            public event DialogActionRowChangeEventHandler DialogActionRowChanged;
            
            public event DialogActionRowChangeEventHandler DialogActionRowDeleting;
            
            public event DialogActionRowChangeEventHandler DialogActionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDialogActionRow(DialogActionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DialogActionRow AddDialogActionRow(string DialogId, string Button, string Name) {
                DialogActionRow rowDialogActionRow = ((DialogActionRow)(this.NewRow()));
                rowDialogActionRow.ItemArray = new object[] {
                        DialogId,
                        Button,
                        Name};
                this.Rows.Add(rowDialogActionRow);
                return rowDialogActionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DialogActionDataTable cln = ((DialogActionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DialogActionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDialogId = base.Columns["DialogId"];
                this.columnButton = base.Columns["Button"];
                this.columnName = base.Columns["Name"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDialogId = new System.Data.DataColumn("DialogId", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDialogId);
                this.columnButton = new System.Data.DataColumn("Button", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnButton);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnDialogId.AllowDBNull = false;
                this.columnDialogId.Namespace = "";
                this.columnButton.AllowDBNull = false;
                this.columnButton.Namespace = "";
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DialogActionRow NewDialogActionRow() {
                return ((DialogActionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DialogActionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DialogActionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DialogActionRowChanged != null)) {
                    this.DialogActionRowChanged(this, new DialogActionRowChangeEvent(((DialogActionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DialogActionRowChanging != null)) {
                    this.DialogActionRowChanging(this, new DialogActionRowChangeEvent(((DialogActionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DialogActionRowDeleted != null)) {
                    this.DialogActionRowDeleted(this, new DialogActionRowChangeEvent(((DialogActionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DialogActionRowDeleting != null)) {
                    this.DialogActionRowDeleting(this, new DialogActionRowChangeEvent(((DialogActionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDialogActionRow(DialogActionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DialogActionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProductionParameterSettingsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnProductionParameterSettings_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsDataTable() {
                this.TableName = "ProductionParameterSettings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductionParameterSettingsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProductionParameterSettingsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsRow this[int index] {
                get {
                    return ((ProductionParameterSettingsRow)(this.Rows[index]));
                }
            }
            
            public event ProductionParameterSettingsRowChangeEventHandler ProductionParameterSettingsRowChanging;
            
            public event ProductionParameterSettingsRowChangeEventHandler ProductionParameterSettingsRowChanged;
            
            public event ProductionParameterSettingsRowChangeEventHandler ProductionParameterSettingsRowDeleting;
            
            public event ProductionParameterSettingsRowChangeEventHandler ProductionParameterSettingsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProductionParameterSettingsRow(ProductionParameterSettingsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsRow AddProductionParameterSettingsRow() {
                ProductionParameterSettingsRow rowProductionParameterSettingsRow = ((ProductionParameterSettingsRow)(this.NewRow()));
                rowProductionParameterSettingsRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowProductionParameterSettingsRow);
                return rowProductionParameterSettingsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ProductionParameterSettingsDataTable cln = ((ProductionParameterSettingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ProductionParameterSettingsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProductionParameterSettings_Id = base.Columns["ProductionParameterSettings_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProductionParameterSettings_Id = new System.Data.DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProductionParameterSettings_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnProductionParameterSettings_Id}, true));
                this.columnProductionParameterSettings_Id.AutoIncrement = true;
                this.columnProductionParameterSettings_Id.AllowDBNull = false;
                this.columnProductionParameterSettings_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsRow NewProductionParameterSettingsRow() {
                return ((ProductionParameterSettingsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ProductionParameterSettingsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ProductionParameterSettingsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProductionParameterSettingsRowChanged != null)) {
                    this.ProductionParameterSettingsRowChanged(this, new ProductionParameterSettingsRowChangeEvent(((ProductionParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProductionParameterSettingsRowChanging != null)) {
                    this.ProductionParameterSettingsRowChanging(this, new ProductionParameterSettingsRowChangeEvent(((ProductionParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProductionParameterSettingsRowDeleted != null)) {
                    this.ProductionParameterSettingsRowDeleted(this, new ProductionParameterSettingsRowChangeEvent(((ProductionParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProductionParameterSettingsRowDeleting != null)) {
                    this.ProductionParameterSettingsRowDeleting(this, new ProductionParameterSettingsRowChangeEvent(((ProductionParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProductionParameterSettingsRow(ProductionParameterSettingsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProductionParameterSettingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServerDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDescription;
            
            private System.Data.DataColumn columnOrderStatusUpdateInterval;
            
            private System.Data.DataColumn columnProductionParameterSettings_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerDataTable() {
                this.TableName = "Server";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServerDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrderStatusUpdateIntervalColumn {
                get {
                    return this.columnOrderStatusUpdateInterval;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerRow this[int index] {
                get {
                    return ((ServerRow)(this.Rows[index]));
                }
            }
            
            public event ServerRowChangeEventHandler ServerRowChanging;
            
            public event ServerRowChangeEventHandler ServerRowChanged;
            
            public event ServerRowChangeEventHandler ServerRowDeleting;
            
            public event ServerRowChangeEventHandler ServerRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServerRow(ServerRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerRow AddServerRow(string Description, string OrderStatusUpdateInterval, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Server) {
                ServerRow rowServerRow = ((ServerRow)(this.NewRow()));
                rowServerRow.ItemArray = new object[] {
                        Description,
                        OrderStatusUpdateInterval,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Server[0]};
                this.Rows.Add(rowServerRow);
                return rowServerRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ServerDataTable cln = ((ServerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ServerDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDescription = base.Columns["Description"];
                this.columnOrderStatusUpdateInterval = base.Columns["OrderStatusUpdateInterval"];
                this.columnProductionParameterSettings_Id = base.Columns["ProductionParameterSettings_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDescription);
                this.columnOrderStatusUpdateInterval = new System.Data.DataColumn("OrderStatusUpdateInterval", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOrderStatusUpdateInterval);
                this.columnProductionParameterSettings_Id = new System.Data.DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProductionParameterSettings_Id);
                this.columnDescription.Namespace = "";
                this.columnOrderStatusUpdateInterval.AllowDBNull = false;
                this.columnOrderStatusUpdateInterval.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerRow NewServerRow() {
                return ((ServerRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ServerRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ServerRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerRowChanged != null)) {
                    this.ServerRowChanged(this, new ServerRowChangeEvent(((ServerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerRowChanging != null)) {
                    this.ServerRowChanging(this, new ServerRowChangeEvent(((ServerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerRowDeleted != null)) {
                    this.ServerRowDeleted(this, new ServerRowChangeEvent(((ServerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerRowDeleting != null)) {
                    this.ServerRowDeleting(this, new ServerRowChangeEvent(((ServerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServerRow(ServerRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ModesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnServerMode;
            
            private System.Data.DataColumn columnOperatingMode;
            
            private System.Data.DataColumn columnUseFIFOMode;
            
            private System.Data.DataColumn columnProductionParameterSettings_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModesDataTable() {
                this.TableName = "Modes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ModesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ModesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ServerModeColumn {
                get {
                    return this.columnServerMode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OperatingModeColumn {
                get {
                    return this.columnOperatingMode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UseFIFOModeColumn {
                get {
                    return this.columnUseFIFOMode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModesRow this[int index] {
                get {
                    return ((ModesRow)(this.Rows[index]));
                }
            }
            
            public event ModesRowChangeEventHandler ModesRowChanging;
            
            public event ModesRowChangeEventHandler ModesRowChanged;
            
            public event ModesRowChangeEventHandler ModesRowDeleting;
            
            public event ModesRowChangeEventHandler ModesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddModesRow(ModesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModesRow AddModesRow(string ServerMode, string OperatingMode, string UseFIFOMode, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Modes) {
                ModesRow rowModesRow = ((ModesRow)(this.NewRow()));
                rowModesRow.ItemArray = new object[] {
                        ServerMode,
                        OperatingMode,
                        UseFIFOMode,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Modes[0]};
                this.Rows.Add(rowModesRow);
                return rowModesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ModesDataTable cln = ((ModesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ModesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnServerMode = base.Columns["ServerMode"];
                this.columnOperatingMode = base.Columns["OperatingMode"];
                this.columnUseFIFOMode = base.Columns["UseFIFOMode"];
                this.columnProductionParameterSettings_Id = base.Columns["ProductionParameterSettings_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnServerMode = new System.Data.DataColumn("ServerMode", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnServerMode);
                this.columnOperatingMode = new System.Data.DataColumn("OperatingMode", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOperatingMode);
                this.columnUseFIFOMode = new System.Data.DataColumn("UseFIFOMode", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseFIFOMode);
                this.columnProductionParameterSettings_Id = new System.Data.DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProductionParameterSettings_Id);
                this.columnServerMode.Namespace = "";
                this.columnServerMode.DefaultValue = ((string)("Attended"));
                this.columnOperatingMode.Namespace = "";
                this.columnOperatingMode.DefaultValue = ((string)("Normal"));
                this.columnUseFIFOMode.Namespace = "";
                this.columnUseFIFOMode.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModesRow NewModesRow() {
                return ((ModesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ModesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ModesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ModesRowChanged != null)) {
                    this.ModesRowChanged(this, new ModesRowChangeEvent(((ModesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ModesRowChanging != null)) {
                    this.ModesRowChanging(this, new ModesRowChangeEvent(((ModesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ModesRowDeleted != null)) {
                    this.ModesRowDeleted(this, new ModesRowChangeEvent(((ModesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ModesRowDeleting != null)) {
                    this.ModesRowDeleting(this, new ModesRowChangeEvent(((ModesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveModesRow(ModesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ModesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CachingDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUseStaticCaching;
            
            private System.Data.DataColumn columnCacheDriveLetters;
            
            private System.Data.DataColumn columnProductionParameterSettings_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CachingDataTable() {
                this.TableName = "Caching";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CachingDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CachingDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UseStaticCachingColumn {
                get {
                    return this.columnUseStaticCaching;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CacheDriveLettersColumn {
                get {
                    return this.columnCacheDriveLetters;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CachingRow this[int index] {
                get {
                    return ((CachingRow)(this.Rows[index]));
                }
            }
            
            public event CachingRowChangeEventHandler CachingRowChanging;
            
            public event CachingRowChangeEventHandler CachingRowChanged;
            
            public event CachingRowChangeEventHandler CachingRowDeleting;
            
            public event CachingRowChangeEventHandler CachingRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCachingRow(CachingRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CachingRow AddCachingRow(string UseStaticCaching, string CacheDriveLetters, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Caching) {
                CachingRow rowCachingRow = ((CachingRow)(this.NewRow()));
                rowCachingRow.ItemArray = new object[] {
                        UseStaticCaching,
                        CacheDriveLetters,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Caching[0]};
                this.Rows.Add(rowCachingRow);
                return rowCachingRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CachingDataTable cln = ((CachingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CachingDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUseStaticCaching = base.Columns["UseStaticCaching"];
                this.columnCacheDriveLetters = base.Columns["CacheDriveLetters"];
                this.columnProductionParameterSettings_Id = base.Columns["ProductionParameterSettings_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUseStaticCaching = new System.Data.DataColumn("UseStaticCaching", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseStaticCaching);
                this.columnCacheDriveLetters = new System.Data.DataColumn("CacheDriveLetters", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCacheDriveLetters);
                this.columnProductionParameterSettings_Id = new System.Data.DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProductionParameterSettings_Id);
                this.columnUseStaticCaching.Namespace = "";
                this.columnUseStaticCaching.DefaultValue = ((string)("false"));
                this.columnCacheDriveLetters.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CachingRow NewCachingRow() {
                return ((CachingRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CachingRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CachingRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CachingRowChanged != null)) {
                    this.CachingRowChanged(this, new CachingRowChangeEvent(((CachingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CachingRowChanging != null)) {
                    this.CachingRowChanging(this, new CachingRowChangeEvent(((CachingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CachingRowDeleted != null)) {
                    this.CachingRowDeleted(this, new CachingRowChangeEvent(((CachingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CachingRowDeleting != null)) {
                    this.CachingRowDeleting(this, new CachingRowChangeEvent(((CachingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCachingRow(CachingRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CachingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RecordingDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSimulateRecording;
            
            private System.Data.DataColumn columnUseNewMediaOnly;
            
            private System.Data.DataColumn columnMaxRecordingSpeed;
            
            private System.Data.DataColumn columnMaxDVDRecordingSpeed;
            
            private System.Data.DataColumn columnRejectNonISO;
            
            private System.Data.DataColumn columnDisableISOExtentFixups;
            
            private System.Data.DataColumn columnAddPostgapToISO;
            
            private System.Data.DataColumn columnEnableUsing90_100MinuteCDRs;
            
            private System.Data.DataColumn columnDestroyFailedRecordings;
            
            private System.Data.DataColumn columnProductionParameterSettings_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingDataTable() {
                this.TableName = "Recording";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RecordingDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RecordingDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SimulateRecordingColumn {
                get {
                    return this.columnSimulateRecording;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UseNewMediaOnlyColumn {
                get {
                    return this.columnUseNewMediaOnly;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MaxRecordingSpeedColumn {
                get {
                    return this.columnMaxRecordingSpeed;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MaxDVDRecordingSpeedColumn {
                get {
                    return this.columnMaxDVDRecordingSpeed;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RejectNonISOColumn {
                get {
                    return this.columnRejectNonISO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DisableISOExtentFixupsColumn {
                get {
                    return this.columnDisableISOExtentFixups;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AddPostgapToISOColumn {
                get {
                    return this.columnAddPostgapToISO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EnableUsing90_100MinuteCDRsColumn {
                get {
                    return this.columnEnableUsing90_100MinuteCDRs;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DestroyFailedRecordingsColumn {
                get {
                    return this.columnDestroyFailedRecordings;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingRow this[int index] {
                get {
                    return ((RecordingRow)(this.Rows[index]));
                }
            }
            
            public event RecordingRowChangeEventHandler RecordingRowChanging;
            
            public event RecordingRowChangeEventHandler RecordingRowChanged;
            
            public event RecordingRowChangeEventHandler RecordingRowDeleting;
            
            public event RecordingRowChangeEventHandler RecordingRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRecordingRow(RecordingRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingRow AddRecordingRow(string SimulateRecording, string UseNewMediaOnly, string MaxRecordingSpeed, string MaxDVDRecordingSpeed, string RejectNonISO, string DisableISOExtentFixups, string AddPostgapToISO, string EnableUsing90_100MinuteCDRs, string DestroyFailedRecordings, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Recording) {
                RecordingRow rowRecordingRow = ((RecordingRow)(this.NewRow()));
                rowRecordingRow.ItemArray = new object[] {
                        SimulateRecording,
                        UseNewMediaOnly,
                        MaxRecordingSpeed,
                        MaxDVDRecordingSpeed,
                        RejectNonISO,
                        DisableISOExtentFixups,
                        AddPostgapToISO,
                        EnableUsing90_100MinuteCDRs,
                        DestroyFailedRecordings,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Recording[0]};
                this.Rows.Add(rowRecordingRow);
                return rowRecordingRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RecordingDataTable cln = ((RecordingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RecordingDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSimulateRecording = base.Columns["SimulateRecording"];
                this.columnUseNewMediaOnly = base.Columns["UseNewMediaOnly"];
                this.columnMaxRecordingSpeed = base.Columns["MaxRecordingSpeed"];
                this.columnMaxDVDRecordingSpeed = base.Columns["MaxDVDRecordingSpeed"];
                this.columnRejectNonISO = base.Columns["RejectNonISO"];
                this.columnDisableISOExtentFixups = base.Columns["DisableISOExtentFixups"];
                this.columnAddPostgapToISO = base.Columns["AddPostgapToISO"];
                this.columnEnableUsing90_100MinuteCDRs = base.Columns["EnableUsing90_100MinuteCDRs"];
                this.columnDestroyFailedRecordings = base.Columns["DestroyFailedRecordings"];
                this.columnProductionParameterSettings_Id = base.Columns["ProductionParameterSettings_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSimulateRecording = new System.Data.DataColumn("SimulateRecording", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSimulateRecording);
                this.columnUseNewMediaOnly = new System.Data.DataColumn("UseNewMediaOnly", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseNewMediaOnly);
                this.columnMaxRecordingSpeed = new System.Data.DataColumn("MaxRecordingSpeed", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMaxRecordingSpeed);
                this.columnMaxDVDRecordingSpeed = new System.Data.DataColumn("MaxDVDRecordingSpeed", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMaxDVDRecordingSpeed);
                this.columnRejectNonISO = new System.Data.DataColumn("RejectNonISO", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRejectNonISO);
                this.columnDisableISOExtentFixups = new System.Data.DataColumn("DisableISOExtentFixups", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDisableISOExtentFixups);
                this.columnAddPostgapToISO = new System.Data.DataColumn("AddPostgapToISO", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAddPostgapToISO);
                this.columnEnableUsing90_100MinuteCDRs = new System.Data.DataColumn("EnableUsing90_100MinuteCDRs", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEnableUsing90_100MinuteCDRs);
                this.columnDestroyFailedRecordings = new System.Data.DataColumn("DestroyFailedRecordings", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDestroyFailedRecordings);
                this.columnProductionParameterSettings_Id = new System.Data.DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProductionParameterSettings_Id);
                this.columnSimulateRecording.Namespace = "";
                this.columnSimulateRecording.DefaultValue = ((string)("false"));
                this.columnUseNewMediaOnly.Namespace = "";
                this.columnUseNewMediaOnly.DefaultValue = ((string)("false"));
                this.columnMaxRecordingSpeed.AllowDBNull = false;
                this.columnMaxRecordingSpeed.Namespace = "";
                this.columnMaxDVDRecordingSpeed.AllowDBNull = false;
                this.columnMaxDVDRecordingSpeed.Namespace = "";
                this.columnRejectNonISO.Namespace = "";
                this.columnRejectNonISO.DefaultValue = ((string)("true"));
                this.columnDisableISOExtentFixups.Namespace = "";
                this.columnDisableISOExtentFixups.DefaultValue = ((string)("false"));
                this.columnAddPostgapToISO.Namespace = "";
                this.columnAddPostgapToISO.DefaultValue = ((string)("Disabled"));
                this.columnEnableUsing90_100MinuteCDRs.Namespace = "";
                this.columnEnableUsing90_100MinuteCDRs.DefaultValue = ((string)("false"));
                this.columnDestroyFailedRecordings.Namespace = "";
                this.columnDestroyFailedRecordings.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingRow NewRecordingRow() {
                return ((RecordingRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RecordingRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RecordingRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RecordingRowChanged != null)) {
                    this.RecordingRowChanged(this, new RecordingRowChangeEvent(((RecordingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RecordingRowChanging != null)) {
                    this.RecordingRowChanging(this, new RecordingRowChangeEvent(((RecordingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RecordingRowDeleted != null)) {
                    this.RecordingRowDeleted(this, new RecordingRowChangeEvent(((RecordingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RecordingRowDeleting != null)) {
                    this.RecordingRowDeleting(this, new RecordingRowChangeEvent(((RecordingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRecordingRow(RecordingRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RecordingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class VerifyDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUseVerify;
            
            private System.Data.DataColumn columnFrequency;
            
            private System.Data.DataColumn columnIsChecksumDLLReady;
            
            private System.Data.DataColumn columnUseChecksumDLL;
            
            private System.Data.DataColumn columnChecksumDLLId;
            
            private System.Data.DataColumn columnProductionParameterSettings_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyDataTable() {
                this.TableName = "Verify";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VerifyDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected VerifyDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UseVerifyColumn {
                get {
                    return this.columnUseVerify;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FrequencyColumn {
                get {
                    return this.columnFrequency;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsChecksumDLLReadyColumn {
                get {
                    return this.columnIsChecksumDLLReady;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UseChecksumDLLColumn {
                get {
                    return this.columnUseChecksumDLL;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ChecksumDLLIdColumn {
                get {
                    return this.columnChecksumDLLId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyRow this[int index] {
                get {
                    return ((VerifyRow)(this.Rows[index]));
                }
            }
            
            public event VerifyRowChangeEventHandler VerifyRowChanging;
            
            public event VerifyRowChangeEventHandler VerifyRowChanged;
            
            public event VerifyRowChangeEventHandler VerifyRowDeleting;
            
            public event VerifyRowChangeEventHandler VerifyRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddVerifyRow(VerifyRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyRow AddVerifyRow(string UseVerify, string Frequency, string IsChecksumDLLReady, string UseChecksumDLL, string ChecksumDLLId, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Verify) {
                VerifyRow rowVerifyRow = ((VerifyRow)(this.NewRow()));
                rowVerifyRow.ItemArray = new object[] {
                        UseVerify,
                        Frequency,
                        IsChecksumDLLReady,
                        UseChecksumDLL,
                        ChecksumDLLId,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Verify[0]};
                this.Rows.Add(rowVerifyRow);
                return rowVerifyRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                VerifyDataTable cln = ((VerifyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new VerifyDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUseVerify = base.Columns["UseVerify"];
                this.columnFrequency = base.Columns["Frequency"];
                this.columnIsChecksumDLLReady = base.Columns["IsChecksumDLLReady"];
                this.columnUseChecksumDLL = base.Columns["UseChecksumDLL"];
                this.columnChecksumDLLId = base.Columns["ChecksumDLLId"];
                this.columnProductionParameterSettings_Id = base.Columns["ProductionParameterSettings_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUseVerify = new System.Data.DataColumn("UseVerify", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseVerify);
                this.columnFrequency = new System.Data.DataColumn("Frequency", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFrequency);
                this.columnIsChecksumDLLReady = new System.Data.DataColumn("IsChecksumDLLReady", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIsChecksumDLLReady);
                this.columnUseChecksumDLL = new System.Data.DataColumn("UseChecksumDLL", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseChecksumDLL);
                this.columnChecksumDLLId = new System.Data.DataColumn("ChecksumDLLId", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnChecksumDLLId);
                this.columnProductionParameterSettings_Id = new System.Data.DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProductionParameterSettings_Id);
                this.columnUseVerify.Namespace = "";
                this.columnUseVerify.DefaultValue = ((string)("false"));
                this.columnFrequency.AllowDBNull = false;
                this.columnFrequency.Namespace = "";
                this.columnIsChecksumDLLReady.Namespace = "";
                this.columnIsChecksumDLLReady.DefaultValue = ((string)("false"));
                this.columnUseChecksumDLL.Namespace = "";
                this.columnUseChecksumDLL.DefaultValue = ((string)("false"));
                this.columnChecksumDLLId.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyRow NewVerifyRow() {
                return ((VerifyRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new VerifyRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(VerifyRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VerifyRowChanged != null)) {
                    this.VerifyRowChanged(this, new VerifyRowChangeEvent(((VerifyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VerifyRowChanging != null)) {
                    this.VerifyRowChanging(this, new VerifyRowChangeEvent(((VerifyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VerifyRowDeleted != null)) {
                    this.VerifyRowDeleted(this, new VerifyRowChangeEvent(((VerifyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VerifyRowDeleting != null)) {
                    this.VerifyRowDeleting(this, new VerifyRowChangeEvent(((VerifyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveVerifyRow(VerifyRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VerifyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrintingDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSimulatePrinting;
            
            private System.Data.DataColumn columnRejectPattern;
            
            private System.Data.DataColumn columnTakeOrdersWithLabelWithoutPrinter;
            
            private System.Data.DataColumn columnErrorOnLowInkLevel;
            
            private System.Data.DataColumn columnLowInkPercentage;
            
            private System.Data.DataColumn columnProductionParameterSettings_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintingDataTable() {
                this.TableName = "Printing";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintingDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PrintingDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SimulatePrintingColumn {
                get {
                    return this.columnSimulatePrinting;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RejectPatternColumn {
                get {
                    return this.columnRejectPattern;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TakeOrdersWithLabelWithoutPrinterColumn {
                get {
                    return this.columnTakeOrdersWithLabelWithoutPrinter;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ErrorOnLowInkLevelColumn {
                get {
                    return this.columnErrorOnLowInkLevel;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LowInkPercentageColumn {
                get {
                    return this.columnLowInkPercentage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintingRow this[int index] {
                get {
                    return ((PrintingRow)(this.Rows[index]));
                }
            }
            
            public event PrintingRowChangeEventHandler PrintingRowChanging;
            
            public event PrintingRowChangeEventHandler PrintingRowChanged;
            
            public event PrintingRowChangeEventHandler PrintingRowDeleting;
            
            public event PrintingRowChangeEventHandler PrintingRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrintingRow(PrintingRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintingRow AddPrintingRow(string SimulatePrinting, string RejectPattern, string TakeOrdersWithLabelWithoutPrinter, string ErrorOnLowInkLevel, string LowInkPercentage, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Printing) {
                PrintingRow rowPrintingRow = ((PrintingRow)(this.NewRow()));
                rowPrintingRow.ItemArray = new object[] {
                        SimulatePrinting,
                        RejectPattern,
                        TakeOrdersWithLabelWithoutPrinter,
                        ErrorOnLowInkLevel,
                        LowInkPercentage,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Printing[0]};
                this.Rows.Add(rowPrintingRow);
                return rowPrintingRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PrintingDataTable cln = ((PrintingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PrintingDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSimulatePrinting = base.Columns["SimulatePrinting"];
                this.columnRejectPattern = base.Columns["RejectPattern"];
                this.columnTakeOrdersWithLabelWithoutPrinter = base.Columns["TakeOrdersWithLabelWithoutPrinter"];
                this.columnErrorOnLowInkLevel = base.Columns["ErrorOnLowInkLevel"];
                this.columnLowInkPercentage = base.Columns["LowInkPercentage"];
                this.columnProductionParameterSettings_Id = base.Columns["ProductionParameterSettings_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSimulatePrinting = new System.Data.DataColumn("SimulatePrinting", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSimulatePrinting);
                this.columnRejectPattern = new System.Data.DataColumn("RejectPattern", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRejectPattern);
                this.columnTakeOrdersWithLabelWithoutPrinter = new System.Data.DataColumn("TakeOrdersWithLabelWithoutPrinter", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTakeOrdersWithLabelWithoutPrinter);
                this.columnErrorOnLowInkLevel = new System.Data.DataColumn("ErrorOnLowInkLevel", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnErrorOnLowInkLevel);
                this.columnLowInkPercentage = new System.Data.DataColumn("LowInkPercentage", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLowInkPercentage);
                this.columnProductionParameterSettings_Id = new System.Data.DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProductionParameterSettings_Id);
                this.columnSimulatePrinting.Namespace = "";
                this.columnSimulatePrinting.DefaultValue = ((string)("false"));
                this.columnRejectPattern.Namespace = "";
                this.columnRejectPattern.DefaultValue = ((string)("Disabled"));
                this.columnTakeOrdersWithLabelWithoutPrinter.Namespace = "";
                this.columnTakeOrdersWithLabelWithoutPrinter.DefaultValue = ((string)("true"));
                this.columnErrorOnLowInkLevel.Namespace = "";
                this.columnErrorOnLowInkLevel.DefaultValue = ((string)("false"));
                this.columnLowInkPercentage.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintingRow NewPrintingRow() {
                return ((PrintingRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PrintingRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PrintingRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrintingRowChanged != null)) {
                    this.PrintingRowChanged(this, new PrintingRowChangeEvent(((PrintingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrintingRowChanging != null)) {
                    this.PrintingRowChanging(this, new PrintingRowChangeEvent(((PrintingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrintingRowDeleted != null)) {
                    this.PrintingRowDeleted(this, new PrintingRowChangeEvent(((PrintingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrintingRowDeleting != null)) {
                    this.PrintingRowDeleting(this, new PrintingRowChangeEvent(((PrintingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrintingRow(PrintingRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrintingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AutoloaderDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnLoaderNumber;
            
            private System.Data.DataColumn columnMailslotSetting;
            
            private System.Data.DataColumn columnAvailableMailslotSettings;
            
            private System.Data.DataColumn columnMediaSize;
            
            private System.Data.DataColumn columnAvailableMediaSizes;
            
            private System.Data.DataColumn columnMediaType;
            
            private System.Data.DataColumn columnAvailableMediaTypes;
            
            private System.Data.DataColumn columnAvailableMediaTypes2;
            
            private System.Data.DataColumn columnAutoloader_Id;
            
            private System.Data.DataColumn columnProductionParameterSettings_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderDataTable() {
                this.TableName = "Autoloader";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AutoloaderDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AutoloaderDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LoaderNumberColumn {
                get {
                    return this.columnLoaderNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MailslotSettingColumn {
                get {
                    return this.columnMailslotSetting;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AvailableMailslotSettingsColumn {
                get {
                    return this.columnAvailableMailslotSettings;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MediaSizeColumn {
                get {
                    return this.columnMediaSize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AvailableMediaSizesColumn {
                get {
                    return this.columnAvailableMediaSizes;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MediaTypeColumn {
                get {
                    return this.columnMediaType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AvailableMediaTypesColumn {
                get {
                    return this.columnAvailableMediaTypes;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AvailableMediaTypes2Column {
                get {
                    return this.columnAvailableMediaTypes2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Autoloader_IdColumn {
                get {
                    return this.columnAutoloader_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderRow this[int index] {
                get {
                    return ((AutoloaderRow)(this.Rows[index]));
                }
            }
            
            public event AutoloaderRowChangeEventHandler AutoloaderRowChanging;
            
            public event AutoloaderRowChangeEventHandler AutoloaderRowChanged;
            
            public event AutoloaderRowChangeEventHandler AutoloaderRowDeleting;
            
            public event AutoloaderRowChangeEventHandler AutoloaderRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAutoloaderRow(AutoloaderRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderRow AddAutoloaderRow(string LoaderNumber, string MailslotSetting, string AvailableMailslotSettings, string MediaSize, string AvailableMediaSizes, string MediaType, string AvailableMediaTypes, string AvailableMediaTypes2, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Autoloader) {
                AutoloaderRow rowAutoloaderRow = ((AutoloaderRow)(this.NewRow()));
                rowAutoloaderRow.ItemArray = new object[] {
                        LoaderNumber,
                        MailslotSetting,
                        AvailableMailslotSettings,
                        MediaSize,
                        AvailableMediaSizes,
                        MediaType,
                        AvailableMediaTypes,
                        AvailableMediaTypes2,
                        null,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Autoloader[0]};
                this.Rows.Add(rowAutoloaderRow);
                return rowAutoloaderRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                AutoloaderDataTable cln = ((AutoloaderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new AutoloaderDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLoaderNumber = base.Columns["LoaderNumber"];
                this.columnMailslotSetting = base.Columns["MailslotSetting"];
                this.columnAvailableMailslotSettings = base.Columns["AvailableMailslotSettings"];
                this.columnMediaSize = base.Columns["MediaSize"];
                this.columnAvailableMediaSizes = base.Columns["AvailableMediaSizes"];
                this.columnMediaType = base.Columns["MediaType"];
                this.columnAvailableMediaTypes = base.Columns["AvailableMediaTypes"];
                this.columnAvailableMediaTypes2 = base.Columns["AvailableMediaTypes2"];
                this.columnAutoloader_Id = base.Columns["Autoloader_Id"];
                this.columnProductionParameterSettings_Id = base.Columns["ProductionParameterSettings_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLoaderNumber = new System.Data.DataColumn("LoaderNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLoaderNumber);
                this.columnMailslotSetting = new System.Data.DataColumn("MailslotSetting", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMailslotSetting);
                this.columnAvailableMailslotSettings = new System.Data.DataColumn("AvailableMailslotSettings", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAvailableMailslotSettings);
                this.columnMediaSize = new System.Data.DataColumn("MediaSize", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMediaSize);
                this.columnAvailableMediaSizes = new System.Data.DataColumn("AvailableMediaSizes", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAvailableMediaSizes);
                this.columnMediaType = new System.Data.DataColumn("MediaType", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMediaType);
                this.columnAvailableMediaTypes = new System.Data.DataColumn("AvailableMediaTypes", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAvailableMediaTypes);
                this.columnAvailableMediaTypes2 = new System.Data.DataColumn("AvailableMediaTypes2", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAvailableMediaTypes2);
                this.columnAutoloader_Id = new System.Data.DataColumn("Autoloader_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAutoloader_Id);
                this.columnProductionParameterSettings_Id = new System.Data.DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProductionParameterSettings_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnAutoloader_Id}, true));
                this.columnLoaderNumber.AllowDBNull = false;
                this.columnLoaderNumber.Namespace = "";
                this.columnMailslotSetting.AllowDBNull = false;
                this.columnMailslotSetting.Namespace = "";
                this.columnAvailableMailslotSettings.AllowDBNull = false;
                this.columnAvailableMailslotSettings.Namespace = "";
                this.columnMediaSize.Namespace = "";
                this.columnMediaSize.DefaultValue = ((string)("120mm"));
                this.columnAvailableMediaSizes.AllowDBNull = false;
                this.columnAvailableMediaSizes.Namespace = "";
                this.columnMediaType.Namespace = "";
                this.columnMediaType.DefaultValue = ((string)("CDR"));
                this.columnAvailableMediaTypes.Namespace = "";
                this.columnAvailableMediaTypes.DefaultValue = ((string)("CDR"));
                this.columnAvailableMediaTypes2.Namespace = "";
                this.columnAutoloader_Id.AutoIncrement = true;
                this.columnAutoloader_Id.AllowDBNull = false;
                this.columnAutoloader_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderRow NewAutoloaderRow() {
                return ((AutoloaderRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AutoloaderRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(AutoloaderRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AutoloaderRowChanged != null)) {
                    this.AutoloaderRowChanged(this, new AutoloaderRowChangeEvent(((AutoloaderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AutoloaderRowChanging != null)) {
                    this.AutoloaderRowChanging(this, new AutoloaderRowChangeEvent(((AutoloaderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AutoloaderRowDeleted != null)) {
                    this.AutoloaderRowDeleted(this, new AutoloaderRowChangeEvent(((AutoloaderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AutoloaderRowDeleting != null)) {
                    this.AutoloaderRowDeleting(this, new AutoloaderRowChangeEvent(((AutoloaderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAutoloaderRow(AutoloaderRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AutoloaderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BinSettingDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnBinNumber;
            
            private System.Data.DataColumn columnSetting;
            
            private System.Data.DataColumn columnAvailableBinSettings;
            
            private System.Data.DataColumn columnAutoloader_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BinSettingDataTable() {
                this.TableName = "BinSetting";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BinSettingDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BinSettingDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BinNumberColumn {
                get {
                    return this.columnBinNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SettingColumn {
                get {
                    return this.columnSetting;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AvailableBinSettingsColumn {
                get {
                    return this.columnAvailableBinSettings;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Autoloader_IdColumn {
                get {
                    return this.columnAutoloader_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BinSettingRow this[int index] {
                get {
                    return ((BinSettingRow)(this.Rows[index]));
                }
            }
            
            public event BinSettingRowChangeEventHandler BinSettingRowChanging;
            
            public event BinSettingRowChangeEventHandler BinSettingRowChanged;
            
            public event BinSettingRowChangeEventHandler BinSettingRowDeleting;
            
            public event BinSettingRowChangeEventHandler BinSettingRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBinSettingRow(BinSettingRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BinSettingRow AddBinSettingRow(string BinNumber, string Setting, string AvailableBinSettings, AutoloaderRow parentAutoloaderRowByAutoloader_BinSetting) {
                BinSettingRow rowBinSettingRow = ((BinSettingRow)(this.NewRow()));
                rowBinSettingRow.ItemArray = new object[] {
                        BinNumber,
                        Setting,
                        AvailableBinSettings,
                        parentAutoloaderRowByAutoloader_BinSetting[8]};
                this.Rows.Add(rowBinSettingRow);
                return rowBinSettingRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BinSettingDataTable cln = ((BinSettingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BinSettingDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBinNumber = base.Columns["BinNumber"];
                this.columnSetting = base.Columns["Setting"];
                this.columnAvailableBinSettings = base.Columns["AvailableBinSettings"];
                this.columnAutoloader_Id = base.Columns["Autoloader_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBinNumber = new System.Data.DataColumn("BinNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnBinNumber);
                this.columnSetting = new System.Data.DataColumn("Setting", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSetting);
                this.columnAvailableBinSettings = new System.Data.DataColumn("AvailableBinSettings", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAvailableBinSettings);
                this.columnAutoloader_Id = new System.Data.DataColumn("Autoloader_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAutoloader_Id);
                this.columnBinNumber.AllowDBNull = false;
                this.columnBinNumber.Namespace = "";
                this.columnSetting.AllowDBNull = false;
                this.columnSetting.Namespace = "";
                this.columnAvailableBinSettings.AllowDBNull = false;
                this.columnAvailableBinSettings.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BinSettingRow NewBinSettingRow() {
                return ((BinSettingRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BinSettingRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BinSettingRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BinSettingRowChanged != null)) {
                    this.BinSettingRowChanged(this, new BinSettingRowChangeEvent(((BinSettingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BinSettingRowChanging != null)) {
                    this.BinSettingRowChanging(this, new BinSettingRowChangeEvent(((BinSettingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BinSettingRowDeleted != null)) {
                    this.BinSettingRowDeleted(this, new BinSettingRowChangeEvent(((BinSettingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BinSettingRowDeleting != null)) {
                    this.BinSettingRowDeleting(this, new BinSettingRowChangeEvent(((BinSettingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBinSettingRow(BinSettingRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BinSettingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReadingDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnAudioReadSpeed;
            
            private System.Data.DataColumn columnPreferredReader;
            
            private System.Data.DataColumn columnBarcodePort;
            
            private System.Data.DataColumn columnBarcodeAngle;
            
            private System.Data.DataColumn columnUseBarcodeIndex;
            
            private System.Data.DataColumn columnReading_Id;
            
            private System.Data.DataColumn columnProductionParameterSettings_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadingDataTable() {
                this.TableName = "Reading";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReadingDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReadingDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AudioReadSpeedColumn {
                get {
                    return this.columnAudioReadSpeed;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PreferredReaderColumn {
                get {
                    return this.columnPreferredReader;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BarcodePortColumn {
                get {
                    return this.columnBarcodePort;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BarcodeAngleColumn {
                get {
                    return this.columnBarcodeAngle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UseBarcodeIndexColumn {
                get {
                    return this.columnUseBarcodeIndex;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Reading_IdColumn {
                get {
                    return this.columnReading_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadingRow this[int index] {
                get {
                    return ((ReadingRow)(this.Rows[index]));
                }
            }
            
            public event ReadingRowChangeEventHandler ReadingRowChanging;
            
            public event ReadingRowChangeEventHandler ReadingRowChanged;
            
            public event ReadingRowChangeEventHandler ReadingRowDeleting;
            
            public event ReadingRowChangeEventHandler ReadingRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReadingRow(ReadingRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadingRow AddReadingRow(string AudioReadSpeed, string PreferredReader, string BarcodePort, string BarcodeAngle, string UseBarcodeIndex, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Reading) {
                ReadingRow rowReadingRow = ((ReadingRow)(this.NewRow()));
                rowReadingRow.ItemArray = new object[] {
                        AudioReadSpeed,
                        PreferredReader,
                        BarcodePort,
                        BarcodeAngle,
                        UseBarcodeIndex,
                        null,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Reading[0]};
                this.Rows.Add(rowReadingRow);
                return rowReadingRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ReadingDataTable cln = ((ReadingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ReadingDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAudioReadSpeed = base.Columns["AudioReadSpeed"];
                this.columnPreferredReader = base.Columns["PreferredReader"];
                this.columnBarcodePort = base.Columns["BarcodePort"];
                this.columnBarcodeAngle = base.Columns["BarcodeAngle"];
                this.columnUseBarcodeIndex = base.Columns["UseBarcodeIndex"];
                this.columnReading_Id = base.Columns["Reading_Id"];
                this.columnProductionParameterSettings_Id = base.Columns["ProductionParameterSettings_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAudioReadSpeed = new System.Data.DataColumn("AudioReadSpeed", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAudioReadSpeed);
                this.columnPreferredReader = new System.Data.DataColumn("PreferredReader", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPreferredReader);
                this.columnBarcodePort = new System.Data.DataColumn("BarcodePort", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnBarcodePort);
                this.columnBarcodeAngle = new System.Data.DataColumn("BarcodeAngle", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnBarcodeAngle);
                this.columnUseBarcodeIndex = new System.Data.DataColumn("UseBarcodeIndex", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseBarcodeIndex);
                this.columnReading_Id = new System.Data.DataColumn("Reading_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnReading_Id);
                this.columnProductionParameterSettings_Id = new System.Data.DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProductionParameterSettings_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnReading_Id}, true));
                this.columnAudioReadSpeed.Namespace = "";
                this.columnAudioReadSpeed.DefaultValue = ((string)("Max"));
                this.columnPreferredReader.Namespace = "";
                this.columnPreferredReader.DefaultValue = ((string)("Recorders"));
                this.columnBarcodePort.Namespace = "";
                this.columnBarcodePort.DefaultValue = ((string)("None"));
                this.columnBarcodeAngle.AllowDBNull = false;
                this.columnBarcodeAngle.Namespace = "";
                this.columnUseBarcodeIndex.Namespace = "";
                this.columnUseBarcodeIndex.DefaultValue = ((string)("false"));
                this.columnReading_Id.AutoIncrement = true;
                this.columnReading_Id.AllowDBNull = false;
                this.columnReading_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadingRow NewReadingRow() {
                return ((ReadingRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ReadingRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ReadingRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReadingRowChanged != null)) {
                    this.ReadingRowChanged(this, new ReadingRowChangeEvent(((ReadingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReadingRowChanging != null)) {
                    this.ReadingRowChanging(this, new ReadingRowChangeEvent(((ReadingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReadingRowDeleted != null)) {
                    this.ReadingRowDeleted(this, new ReadingRowChangeEvent(((ReadingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReadingRowDeleting != null)) {
                    this.ReadingRowDeleting(this, new ReadingRowChangeEvent(((ReadingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReadingRow(ReadingRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReadingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AutoBulkReadDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnBaseFolderForImages;
            
            private System.Data.DataColumn columnUseVolumeIDAsFolderName;
            
            private System.Data.DataColumn columnUseBarcodeAsFolderName;
            
            private System.Data.DataColumn columnExtractISOImagesToFoldersAndFiles;
            
            private System.Data.DataColumn columnImageTypeForAudioTracks;
            
            private System.Data.DataColumn columnUseISRCAsFilenameForAudioTracks;
            
            private System.Data.DataColumn columnPutFailuresToRejectBin;
            
            private System.Data.DataColumn columnReading_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoBulkReadDataTable() {
                this.TableName = "AutoBulkRead";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AutoBulkReadDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AutoBulkReadDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BaseFolderForImagesColumn {
                get {
                    return this.columnBaseFolderForImages;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UseVolumeIDAsFolderNameColumn {
                get {
                    return this.columnUseVolumeIDAsFolderName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UseBarcodeAsFolderNameColumn {
                get {
                    return this.columnUseBarcodeAsFolderName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ExtractISOImagesToFoldersAndFilesColumn {
                get {
                    return this.columnExtractISOImagesToFoldersAndFiles;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ImageTypeForAudioTracksColumn {
                get {
                    return this.columnImageTypeForAudioTracks;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UseISRCAsFilenameForAudioTracksColumn {
                get {
                    return this.columnUseISRCAsFilenameForAudioTracks;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PutFailuresToRejectBinColumn {
                get {
                    return this.columnPutFailuresToRejectBin;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Reading_IdColumn {
                get {
                    return this.columnReading_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoBulkReadRow this[int index] {
                get {
                    return ((AutoBulkReadRow)(this.Rows[index]));
                }
            }
            
            public event AutoBulkReadRowChangeEventHandler AutoBulkReadRowChanging;
            
            public event AutoBulkReadRowChangeEventHandler AutoBulkReadRowChanged;
            
            public event AutoBulkReadRowChangeEventHandler AutoBulkReadRowDeleting;
            
            public event AutoBulkReadRowChangeEventHandler AutoBulkReadRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAutoBulkReadRow(AutoBulkReadRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoBulkReadRow AddAutoBulkReadRow(string BaseFolderForImages, string UseVolumeIDAsFolderName, string UseBarcodeAsFolderName, string ExtractISOImagesToFoldersAndFiles, string ImageTypeForAudioTracks, string UseISRCAsFilenameForAudioTracks, string PutFailuresToRejectBin, ReadingRow parentReadingRowByReading_AutoBulkRead) {
                AutoBulkReadRow rowAutoBulkReadRow = ((AutoBulkReadRow)(this.NewRow()));
                rowAutoBulkReadRow.ItemArray = new object[] {
                        BaseFolderForImages,
                        UseVolumeIDAsFolderName,
                        UseBarcodeAsFolderName,
                        ExtractISOImagesToFoldersAndFiles,
                        ImageTypeForAudioTracks,
                        UseISRCAsFilenameForAudioTracks,
                        PutFailuresToRejectBin,
                        parentReadingRowByReading_AutoBulkRead[5]};
                this.Rows.Add(rowAutoBulkReadRow);
                return rowAutoBulkReadRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                AutoBulkReadDataTable cln = ((AutoBulkReadDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new AutoBulkReadDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBaseFolderForImages = base.Columns["BaseFolderForImages"];
                this.columnUseVolumeIDAsFolderName = base.Columns["UseVolumeIDAsFolderName"];
                this.columnUseBarcodeAsFolderName = base.Columns["UseBarcodeAsFolderName"];
                this.columnExtractISOImagesToFoldersAndFiles = base.Columns["ExtractISOImagesToFoldersAndFiles"];
                this.columnImageTypeForAudioTracks = base.Columns["ImageTypeForAudioTracks"];
                this.columnUseISRCAsFilenameForAudioTracks = base.Columns["UseISRCAsFilenameForAudioTracks"];
                this.columnPutFailuresToRejectBin = base.Columns["PutFailuresToRejectBin"];
                this.columnReading_Id = base.Columns["Reading_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBaseFolderForImages = new System.Data.DataColumn("BaseFolderForImages", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnBaseFolderForImages);
                this.columnUseVolumeIDAsFolderName = new System.Data.DataColumn("UseVolumeIDAsFolderName", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseVolumeIDAsFolderName);
                this.columnUseBarcodeAsFolderName = new System.Data.DataColumn("UseBarcodeAsFolderName", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseBarcodeAsFolderName);
                this.columnExtractISOImagesToFoldersAndFiles = new System.Data.DataColumn("ExtractISOImagesToFoldersAndFiles", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnExtractISOImagesToFoldersAndFiles);
                this.columnImageTypeForAudioTracks = new System.Data.DataColumn("ImageTypeForAudioTracks", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnImageTypeForAudioTracks);
                this.columnUseISRCAsFilenameForAudioTracks = new System.Data.DataColumn("UseISRCAsFilenameForAudioTracks", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseISRCAsFilenameForAudioTracks);
                this.columnPutFailuresToRejectBin = new System.Data.DataColumn("PutFailuresToRejectBin", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPutFailuresToRejectBin);
                this.columnReading_Id = new System.Data.DataColumn("Reading_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnReading_Id);
                this.columnBaseFolderForImages.AllowDBNull = false;
                this.columnBaseFolderForImages.Namespace = "";
                this.columnUseVolumeIDAsFolderName.Namespace = "";
                this.columnUseVolumeIDAsFolderName.DefaultValue = ((string)("false"));
                this.columnUseBarcodeAsFolderName.Namespace = "";
                this.columnUseBarcodeAsFolderName.DefaultValue = ((string)("false"));
                this.columnExtractISOImagesToFoldersAndFiles.Namespace = "";
                this.columnExtractISOImagesToFoldersAndFiles.DefaultValue = ((string)("false"));
                this.columnImageTypeForAudioTracks.Namespace = "";
                this.columnImageTypeForAudioTracks.DefaultValue = ((string)("PCM"));
                this.columnUseISRCAsFilenameForAudioTracks.Namespace = "";
                this.columnUseISRCAsFilenameForAudioTracks.DefaultValue = ((string)("false"));
                this.columnPutFailuresToRejectBin.Namespace = "";
                this.columnPutFailuresToRejectBin.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoBulkReadRow NewAutoBulkReadRow() {
                return ((AutoBulkReadRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AutoBulkReadRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(AutoBulkReadRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AutoBulkReadRowChanged != null)) {
                    this.AutoBulkReadRowChanged(this, new AutoBulkReadRowChangeEvent(((AutoBulkReadRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AutoBulkReadRowChanging != null)) {
                    this.AutoBulkReadRowChanging(this, new AutoBulkReadRowChangeEvent(((AutoBulkReadRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AutoBulkReadRowDeleted != null)) {
                    this.AutoBulkReadRowDeleted(this, new AutoBulkReadRowChangeEvent(((AutoBulkReadRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AutoBulkReadRowDeleting != null)) {
                    this.AutoBulkReadRowDeleting(this, new AutoBulkReadRowChangeEvent(((AutoBulkReadRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAutoBulkReadRow(AutoBulkReadRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AutoBulkReadDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MediaCodesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUseMediaCodes;
            
            private System.Data.DataColumn columnMediaCodes_Id;
            
            private System.Data.DataColumn columnProductionParameterSettings_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodesDataTable() {
                this.TableName = "MediaCodes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MediaCodesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MediaCodesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UseMediaCodesColumn {
                get {
                    return this.columnUseMediaCodes;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MediaCodes_IdColumn {
                get {
                    return this.columnMediaCodes_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodesRow this[int index] {
                get {
                    return ((MediaCodesRow)(this.Rows[index]));
                }
            }
            
            public event MediaCodesRowChangeEventHandler MediaCodesRowChanging;
            
            public event MediaCodesRowChangeEventHandler MediaCodesRowChanged;
            
            public event MediaCodesRowChangeEventHandler MediaCodesRowDeleting;
            
            public event MediaCodesRowChangeEventHandler MediaCodesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMediaCodesRow(MediaCodesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodesRow AddMediaCodesRow(string UseMediaCodes, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_MediaCodes) {
                MediaCodesRow rowMediaCodesRow = ((MediaCodesRow)(this.NewRow()));
                rowMediaCodesRow.ItemArray = new object[] {
                        UseMediaCodes,
                        null,
                        parentProductionParameterSettingsRowByProductionParameterSettings_MediaCodes[0]};
                this.Rows.Add(rowMediaCodesRow);
                return rowMediaCodesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MediaCodesDataTable cln = ((MediaCodesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MediaCodesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUseMediaCodes = base.Columns["UseMediaCodes"];
                this.columnMediaCodes_Id = base.Columns["MediaCodes_Id"];
                this.columnProductionParameterSettings_Id = base.Columns["ProductionParameterSettings_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUseMediaCodes = new System.Data.DataColumn("UseMediaCodes", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUseMediaCodes);
                this.columnMediaCodes_Id = new System.Data.DataColumn("MediaCodes_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMediaCodes_Id);
                this.columnProductionParameterSettings_Id = new System.Data.DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProductionParameterSettings_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnMediaCodes_Id}, true));
                this.columnUseMediaCodes.Namespace = "";
                this.columnUseMediaCodes.DefaultValue = ((string)("false"));
                this.columnMediaCodes_Id.AutoIncrement = true;
                this.columnMediaCodes_Id.AllowDBNull = false;
                this.columnMediaCodes_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodesRow NewMediaCodesRow() {
                return ((MediaCodesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MediaCodesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MediaCodesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MediaCodesRowChanged != null)) {
                    this.MediaCodesRowChanged(this, new MediaCodesRowChangeEvent(((MediaCodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MediaCodesRowChanging != null)) {
                    this.MediaCodesRowChanging(this, new MediaCodesRowChangeEvent(((MediaCodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MediaCodesRowDeleted != null)) {
                    this.MediaCodesRowDeleted(this, new MediaCodesRowChangeEvent(((MediaCodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MediaCodesRowDeleting != null)) {
                    this.MediaCodesRowDeleting(this, new MediaCodesRowChangeEvent(((MediaCodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMediaCodesRow(MediaCodesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MediaCodesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MediaCodeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnMediaCodes_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodeDataTable() {
                this.TableName = "MediaCode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MediaCodeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MediaCodeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MediaCodes_IdColumn {
                get {
                    return this.columnMediaCodes_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodeRow this[int index] {
                get {
                    return ((MediaCodeRow)(this.Rows[index]));
                }
            }
            
            public event MediaCodeRowChangeEventHandler MediaCodeRowChanging;
            
            public event MediaCodeRowChangeEventHandler MediaCodeRowChanged;
            
            public event MediaCodeRowChangeEventHandler MediaCodeRowDeleting;
            
            public event MediaCodeRowChangeEventHandler MediaCodeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMediaCodeRow(MediaCodeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodeRow AddMediaCodeRow(string Value, MediaCodesRow parentMediaCodesRowByMediaCodes_MediaCode) {
                MediaCodeRow rowMediaCodeRow = ((MediaCodeRow)(this.NewRow()));
                rowMediaCodeRow.ItemArray = new object[] {
                        Value,
                        parentMediaCodesRowByMediaCodes_MediaCode[1]};
                this.Rows.Add(rowMediaCodeRow);
                return rowMediaCodeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MediaCodeDataTable cln = ((MediaCodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MediaCodeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnMediaCodes_Id = base.Columns["MediaCodes_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnMediaCodes_Id = new System.Data.DataColumn("MediaCodes_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMediaCodes_Id);
                this.columnValue.AllowDBNull = false;
                this.columnValue.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodeRow NewMediaCodeRow() {
                return ((MediaCodeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MediaCodeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MediaCodeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MediaCodeRowChanged != null)) {
                    this.MediaCodeRowChanged(this, new MediaCodeRowChangeEvent(((MediaCodeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MediaCodeRowChanging != null)) {
                    this.MediaCodeRowChanging(this, new MediaCodeRowChangeEvent(((MediaCodeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MediaCodeRowDeleted != null)) {
                    this.MediaCodeRowDeleted(this, new MediaCodeRowChangeEvent(((MediaCodeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MediaCodeRowDeleting != null)) {
                    this.MediaCodeRowDeleting(this, new MediaCodeRowChangeEvent(((MediaCodeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMediaCodeRow(MediaCodeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MediaCodeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class KioskModeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnRecoverOrders;
            
            private System.Data.DataColumn columnRunNoPrinter;
            
            private System.Data.DataColumn columnAutoloaderRecovery;
            
            private System.Data.DataColumn columnPrinterRecovery;
            
            private System.Data.DataColumn columnAutoRespondOnStartup;
            
            private System.Data.DataColumn columnProductionParameterSettings_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KioskModeDataTable() {
                this.TableName = "KioskMode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KioskModeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected KioskModeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RecoverOrdersColumn {
                get {
                    return this.columnRecoverOrders;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RunNoPrinterColumn {
                get {
                    return this.columnRunNoPrinter;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AutoloaderRecoveryColumn {
                get {
                    return this.columnAutoloaderRecovery;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PrinterRecoveryColumn {
                get {
                    return this.columnPrinterRecovery;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AutoRespondOnStartupColumn {
                get {
                    return this.columnAutoRespondOnStartup;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KioskModeRow this[int index] {
                get {
                    return ((KioskModeRow)(this.Rows[index]));
                }
            }
            
            public event KioskModeRowChangeEventHandler KioskModeRowChanging;
            
            public event KioskModeRowChangeEventHandler KioskModeRowChanged;
            
            public event KioskModeRowChangeEventHandler KioskModeRowDeleting;
            
            public event KioskModeRowChangeEventHandler KioskModeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddKioskModeRow(KioskModeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KioskModeRow AddKioskModeRow(string RecoverOrders, string RunNoPrinter, string AutoloaderRecovery, string PrinterRecovery, string AutoRespondOnStartup, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_KioskMode) {
                KioskModeRow rowKioskModeRow = ((KioskModeRow)(this.NewRow()));
                rowKioskModeRow.ItemArray = new object[] {
                        RecoverOrders,
                        RunNoPrinter,
                        AutoloaderRecovery,
                        PrinterRecovery,
                        AutoRespondOnStartup,
                        parentProductionParameterSettingsRowByProductionParameterSettings_KioskMode[0]};
                this.Rows.Add(rowKioskModeRow);
                return rowKioskModeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                KioskModeDataTable cln = ((KioskModeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new KioskModeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRecoverOrders = base.Columns["RecoverOrders"];
                this.columnRunNoPrinter = base.Columns["RunNoPrinter"];
                this.columnAutoloaderRecovery = base.Columns["AutoloaderRecovery"];
                this.columnPrinterRecovery = base.Columns["PrinterRecovery"];
                this.columnAutoRespondOnStartup = base.Columns["AutoRespondOnStartup"];
                this.columnProductionParameterSettings_Id = base.Columns["ProductionParameterSettings_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRecoverOrders = new System.Data.DataColumn("RecoverOrders", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRecoverOrders);
                this.columnRunNoPrinter = new System.Data.DataColumn("RunNoPrinter", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRunNoPrinter);
                this.columnAutoloaderRecovery = new System.Data.DataColumn("AutoloaderRecovery", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAutoloaderRecovery);
                this.columnPrinterRecovery = new System.Data.DataColumn("PrinterRecovery", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPrinterRecovery);
                this.columnAutoRespondOnStartup = new System.Data.DataColumn("AutoRespondOnStartup", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAutoRespondOnStartup);
                this.columnProductionParameterSettings_Id = new System.Data.DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProductionParameterSettings_Id);
                this.columnRecoverOrders.Namespace = "";
                this.columnRecoverOrders.DefaultValue = ((string)("true"));
                this.columnRunNoPrinter.Namespace = "";
                this.columnRunNoPrinter.DefaultValue = ((string)("false"));
                this.columnAutoloaderRecovery.Namespace = "";
                this.columnAutoloaderRecovery.DefaultValue = ((string)("Retry"));
                this.columnPrinterRecovery.Namespace = "";
                this.columnPrinterRecovery.DefaultValue = ((string)("Retry"));
                this.columnAutoRespondOnStartup.Namespace = "";
                this.columnAutoRespondOnStartup.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KioskModeRow NewKioskModeRow() {
                return ((KioskModeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new KioskModeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(KioskModeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.KioskModeRowChanged != null)) {
                    this.KioskModeRowChanged(this, new KioskModeRowChangeEvent(((KioskModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.KioskModeRowChanging != null)) {
                    this.KioskModeRowChanging(this, new KioskModeRowChangeEvent(((KioskModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.KioskModeRowDeleted != null)) {
                    this.KioskModeRowDeleted(this, new KioskModeRowChangeEvent(((KioskModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.KioskModeRowDeleting != null)) {
                    this.KioskModeRowDeleting(this, new KioskModeRowChangeEvent(((KioskModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveKioskModeRow(KioskModeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "KioskModeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UnlockingCodesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFeature;
            
            private System.Data.DataColumn columnSessionCode;
            
            private System.Data.DataColumn columnComputerCode;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnlockingCodesDataTable() {
                this.TableName = "UnlockingCodes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnlockingCodesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UnlockingCodesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FeatureColumn {
                get {
                    return this.columnFeature;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SessionCodeColumn {
                get {
                    return this.columnSessionCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ComputerCodeColumn {
                get {
                    return this.columnComputerCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnlockingCodesRow this[int index] {
                get {
                    return ((UnlockingCodesRow)(this.Rows[index]));
                }
            }
            
            public event UnlockingCodesRowChangeEventHandler UnlockingCodesRowChanging;
            
            public event UnlockingCodesRowChangeEventHandler UnlockingCodesRowChanged;
            
            public event UnlockingCodesRowChangeEventHandler UnlockingCodesRowDeleting;
            
            public event UnlockingCodesRowChangeEventHandler UnlockingCodesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUnlockingCodesRow(UnlockingCodesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnlockingCodesRow AddUnlockingCodesRow(string Feature, string SessionCode, string ComputerCode) {
                UnlockingCodesRow rowUnlockingCodesRow = ((UnlockingCodesRow)(this.NewRow()));
                rowUnlockingCodesRow.ItemArray = new object[] {
                        Feature,
                        SessionCode,
                        ComputerCode};
                this.Rows.Add(rowUnlockingCodesRow);
                return rowUnlockingCodesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UnlockingCodesDataTable cln = ((UnlockingCodesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UnlockingCodesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFeature = base.Columns["Feature"];
                this.columnSessionCode = base.Columns["SessionCode"];
                this.columnComputerCode = base.Columns["ComputerCode"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFeature = new System.Data.DataColumn("Feature", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFeature);
                this.columnSessionCode = new System.Data.DataColumn("SessionCode", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSessionCode);
                this.columnComputerCode = new System.Data.DataColumn("ComputerCode", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnComputerCode);
                this.columnFeature.Namespace = "";
                this.columnFeature.DefaultValue = ((string)("Base"));
                this.columnSessionCode.AllowDBNull = false;
                this.columnSessionCode.Namespace = "";
                this.columnComputerCode.AllowDBNull = false;
                this.columnComputerCode.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnlockingCodesRow NewUnlockingCodesRow() {
                return ((UnlockingCodesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UnlockingCodesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UnlockingCodesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UnlockingCodesRowChanged != null)) {
                    this.UnlockingCodesRowChanged(this, new UnlockingCodesRowChangeEvent(((UnlockingCodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UnlockingCodesRowChanging != null)) {
                    this.UnlockingCodesRowChanging(this, new UnlockingCodesRowChangeEvent(((UnlockingCodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UnlockingCodesRowDeleted != null)) {
                    this.UnlockingCodesRowDeleted(this, new UnlockingCodesRowChangeEvent(((UnlockingCodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UnlockingCodesRowDeleting != null)) {
                    this.UnlockingCodesRowDeleting(this, new UnlockingCodesRowChangeEvent(((UnlockingCodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUnlockingCodesRow(UnlockingCodesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerReply ds = new ProductionServerReply();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UnlockingCodesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AckOnlyRow : System.Data.DataRow {
            
            private AckOnlyDataTable tableAckOnly;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AckOnlyRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAckOnly = ((AckOnlyDataTable)(this.Table));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServerStatusRow : System.Data.DataRow {
            
            private ServerStatusDataTable tableServerStatus;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerStatusRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerStatus = ((ServerStatusDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServerStatus_Id {
                get {
                    return ((int)(this[this.tableServerStatus.ServerStatus_IdColumn]));
                }
                set {
                    this[this.tableServerStatus.ServerStatus_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerInfoRow[] GetServerInfoRows() {
                return ((ServerInfoRow[])(base.GetChildRows(this.Table.ChildRelations["ServerStatus_ServerInfo"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionCountRow[] GetProductionCountRows() {
                return ((ProductionCountRow[])(base.GetChildRows(this.Table.ChildRelations["ServerStatus_ProductionCount"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SwitchesRow[] GetSwitchesRows() {
                return ((SwitchesRow[])(base.GetChildRows(this.Table.ChildRelations["ServerStatus_Switches"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderStatusRow[] GetAutoloaderStatusRows() {
                return ((AutoloaderStatusRow[])(base.GetChildRows(this.Table.ChildRelations["ServerStatus_AutoloaderStatus"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivationInfoRow[] GetActivationInfoRows() {
                return ((ActivationInfoRow[])(base.GetChildRows(this.Table.ChildRelations["ServerStatus_ActivationInfo"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServerInfoRow : System.Data.DataRow {
            
            private ServerInfoDataTable tableServerInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerInfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerInfo = ((ServerInfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SoftwareVersion {
                get {
                    return ((string)(this[this.tableServerInfo.SoftwareVersionColumn]));
                }
                set {
                    this[this.tableServerInfo.SoftwareVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableServerInfo.DescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'ServerInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Hostname {
                get {
                    return ((string)(this[this.tableServerInfo.HostnameColumn]));
                }
                set {
                    this[this.tableServerInfo.HostnameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cluster {
                get {
                    return ((string)(this[this.tableServerInfo.ClusterColumn]));
                }
                set {
                    this[this.tableServerInfo.ClusterColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MessagingPort {
                get {
                    return ((string)(this[this.tableServerInfo.MessagingPortColumn]));
                }
                set {
                    this[this.tableServerInfo.MessagingPortColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SystemFolder {
                get {
                    return ((string)(this[this.tableServerInfo.SystemFolderColumn]));
                }
                set {
                    this[this.tableServerInfo.SystemFolderColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsService {
                get {
                    try {
                        return ((string)(this[this.tableServerInfo.IsServiceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IsService\' in table \'ServerInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.IsServiceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PasswordSet {
                get {
                    return ((string)(this[this.tableServerInfo.PasswordSetColumn]));
                }
                set {
                    this[this.tableServerInfo.PasswordSetColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServerStatus_Id {
                get {
                    try {
                        return ((int)(this[this.tableServerInfo.ServerStatus_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ServerStatus_Id\' in table \'ServerInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.ServerStatus_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerStatusRow ServerStatusRow {
                get {
                    return ((ServerStatusRow)(this.GetParentRow(this.Table.ParentRelations["ServerStatus_ServerInfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ServerStatus_ServerInfo"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableServerInfo.DescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableServerInfo.DescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsServiceNull() {
                return this.IsNull(this.tableServerInfo.IsServiceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsServiceNull() {
                this[this.tableServerInfo.IsServiceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServerStatus_IdNull() {
                return this.IsNull(this.tableServerInfo.ServerStatus_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServerStatus_IdNull() {
                this[this.tableServerInfo.ServerStatus_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProductionCountRow : System.Data.DataRow {
            
            private ProductionCountDataTable tableProductionCount;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductionCountRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProductionCount = ((ProductionCountDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CopiesProduced {
                get {
                    return ((string)(this[this.tableProductionCount.CopiesProducedColumn]));
                }
                set {
                    this[this.tableProductionCount.CopiesProducedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CopiesRejected {
                get {
                    return ((string)(this[this.tableProductionCount.CopiesRejectedColumn]));
                }
                set {
                    this[this.tableProductionCount.CopiesRejectedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServerStatus_Id {
                get {
                    try {
                        return ((int)(this[this.tableProductionCount.ServerStatus_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ServerStatus_Id\' in table \'ProductionCount\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProductionCount.ServerStatus_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerStatusRow ServerStatusRow {
                get {
                    return ((ServerStatusRow)(this.GetParentRow(this.Table.ParentRelations["ServerStatus_ProductionCount"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ServerStatus_ProductionCount"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServerStatus_IdNull() {
                return this.IsNull(this.tableProductionCount.ServerStatus_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServerStatus_IdNull() {
                this[this.tableProductionCount.ServerStatus_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SwitchesRow : System.Data.DataRow {
            
            private SwitchesDataTable tableSwitches;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SwitchesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSwitches = ((SwitchesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ManufacturingTestMode {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.ManufacturingTestModeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ManufacturingTestMode\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.ManufacturingTestModeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VerifyOnlyMode {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.VerifyOnlyModeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'VerifyOnlyMode\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.VerifyOnlyModeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SlugsMode {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SlugsModeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SlugsMode\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.SlugsModeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NoLogLimit {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.NoLogLimitColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NoLogLimit\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.NoLogLimitColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SimulateFixate {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SimulateFixateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SimulateFixate\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.SimulateFixateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SetupMode {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SetupModeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SetupMode\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.SetupModeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DirectImaging {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.DirectImagingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DirectImaging\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.DirectImagingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AutoThroughPutMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.AutoThroughPutMeasurementColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AutoThroughPutMeasurement\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.AutoThroughPutMeasurementColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TimingLogged {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.TimingLoggedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TimingLogged\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.TimingLoggedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SkipOrderStatusUpdates {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SkipOrderStatusUpdatesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SkipOrderStatusUpdates\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.SkipOrderStatusUpdatesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrintOnlyMode {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.PrintOnlyModeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PrintOnlyMode\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.PrintOnlyModeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SkipAutoloaderScanning {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SkipAutoloaderScanningColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SkipAutoloaderScanning\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.SkipAutoloaderScanningColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrintBeforeRecording {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.PrintBeforeRecordingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PrintBeforeRecording\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.PrintBeforeRecordingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseDriveLettersForRecorders {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.UseDriveLettersForRecordersColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UseDriveLettersForRecorders\' in table \'Switches\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableSwitches.UseDriveLettersForRecordersColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TraceSCSICommands {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.TraceSCSICommandsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TraceSCSICommands\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.TraceSCSICommandsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TraceReadWriteCommands {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.TraceReadWriteCommandsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TraceReadWriteCommands\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.TraceReadWriteCommandsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TraceSerialCommands {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.TraceSerialCommandsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TraceSerialCommands\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.TraceSerialCommandsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TraceLabelAndPrinting {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.TraceLabelAndPrintingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TraceLabelAndPrinting\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.TraceLabelAndPrintingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TraceXMLMessages {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.TraceXMLMessagesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TraceXMLMessages\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.TraceXMLMessagesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LogSkippingOrder {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.LogSkippingOrderColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LogSkippingOrder\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.LogSkippingOrderColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RunWithoutDevices {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.RunWithoutDevicesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RunWithoutDevices\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.RunWithoutDevicesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DisablePreloadingRecorderAfterPrinterLoad {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.DisablePreloadingRecorderAfterPrinterLoadColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DisablePreloadingRecorderAfterPrinterLoad\' in table \'Switch" +
                                "es\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.DisablePreloadingRecorderAfterPrinterLoadColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DisableCacheLocking {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.DisableCacheLockingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DisableCacheLocking\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.DisableCacheLockingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EnableCacheLimiting {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.EnableCacheLimitingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EnableCacheLimiting\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.EnableCacheLimitingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SkipSerialPortsForAutoloader {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SkipSerialPortsForAutoloaderColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SkipSerialPortsForAutoloader\' in table \'Switches\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableSwitches.SkipSerialPortsForAutoloaderColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SkipDrivesForReaderRecorderCache {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SkipDrivesForReaderRecorderCacheColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SkipDrivesForReaderRecorderCache\' in table \'Switches\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableSwitches.SkipDrivesForReaderRecorderCacheColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SecondsDelayBeforeMainWindow {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SecondsDelayBeforeMainWindowColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SecondsDelayBeforeMainWindow\' in table \'Switches\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableSwitches.SecondsDelayBeforeMainWindowColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseParallelPortForPrism {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.UseParallelPortForPrismColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UseParallelPortForPrism\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.UseParallelPortForPrismColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DisableDriverNameInRendering {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.DisableDriverNameInRenderingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DisableDriverNameInRendering\' in table \'Switches\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableSwitches.DisableDriverNameInRenderingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EraseCDRWBeforeRecording {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.EraseCDRWBeforeRecordingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EraseCDRWBeforeRecording\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.EraseCDRWBeforeRecordingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StrictWaveFileChecking {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.StrictWaveFileCheckingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'StrictWaveFileChecking\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.StrictWaveFileCheckingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServerStatus_Id {
                get {
                    try {
                        return ((int)(this[this.tableSwitches.ServerStatus_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ServerStatus_Id\' in table \'Switches\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.ServerStatus_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerStatusRow ServerStatusRow {
                get {
                    return ((ServerStatusRow)(this.GetParentRow(this.Table.ParentRelations["ServerStatus_Switches"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ServerStatus_Switches"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufacturingTestModeNull() {
                return this.IsNull(this.tableSwitches.ManufacturingTestModeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufacturingTestModeNull() {
                this[this.tableSwitches.ManufacturingTestModeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVerifyOnlyModeNull() {
                return this.IsNull(this.tableSwitches.VerifyOnlyModeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVerifyOnlyModeNull() {
                this[this.tableSwitches.VerifyOnlyModeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSlugsModeNull() {
                return this.IsNull(this.tableSwitches.SlugsModeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSlugsModeNull() {
                this[this.tableSwitches.SlugsModeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoLogLimitNull() {
                return this.IsNull(this.tableSwitches.NoLogLimitColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoLogLimitNull() {
                this[this.tableSwitches.NoLogLimitColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSimulateFixateNull() {
                return this.IsNull(this.tableSwitches.SimulateFixateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSimulateFixateNull() {
                this[this.tableSwitches.SimulateFixateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetupModeNull() {
                return this.IsNull(this.tableSwitches.SetupModeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetupModeNull() {
                this[this.tableSwitches.SetupModeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDirectImagingNull() {
                return this.IsNull(this.tableSwitches.DirectImagingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDirectImagingNull() {
                this[this.tableSwitches.DirectImagingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoThroughPutMeasurementNull() {
                return this.IsNull(this.tableSwitches.AutoThroughPutMeasurementColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAutoThroughPutMeasurementNull() {
                this[this.tableSwitches.AutoThroughPutMeasurementColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimingLoggedNull() {
                return this.IsNull(this.tableSwitches.TimingLoggedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimingLoggedNull() {
                this[this.tableSwitches.TimingLoggedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSkipOrderStatusUpdatesNull() {
                return this.IsNull(this.tableSwitches.SkipOrderStatusUpdatesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSkipOrderStatusUpdatesNull() {
                this[this.tableSwitches.SkipOrderStatusUpdatesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrintOnlyModeNull() {
                return this.IsNull(this.tableSwitches.PrintOnlyModeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrintOnlyModeNull() {
                this[this.tableSwitches.PrintOnlyModeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSkipAutoloaderScanningNull() {
                return this.IsNull(this.tableSwitches.SkipAutoloaderScanningColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSkipAutoloaderScanningNull() {
                this[this.tableSwitches.SkipAutoloaderScanningColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrintBeforeRecordingNull() {
                return this.IsNull(this.tableSwitches.PrintBeforeRecordingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrintBeforeRecordingNull() {
                this[this.tableSwitches.PrintBeforeRecordingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseDriveLettersForRecordersNull() {
                return this.IsNull(this.tableSwitches.UseDriveLettersForRecordersColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseDriveLettersForRecordersNull() {
                this[this.tableSwitches.UseDriveLettersForRecordersColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTraceSCSICommandsNull() {
                return this.IsNull(this.tableSwitches.TraceSCSICommandsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTraceSCSICommandsNull() {
                this[this.tableSwitches.TraceSCSICommandsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTraceReadWriteCommandsNull() {
                return this.IsNull(this.tableSwitches.TraceReadWriteCommandsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTraceReadWriteCommandsNull() {
                this[this.tableSwitches.TraceReadWriteCommandsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTraceSerialCommandsNull() {
                return this.IsNull(this.tableSwitches.TraceSerialCommandsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTraceSerialCommandsNull() {
                this[this.tableSwitches.TraceSerialCommandsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTraceLabelAndPrintingNull() {
                return this.IsNull(this.tableSwitches.TraceLabelAndPrintingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTraceLabelAndPrintingNull() {
                this[this.tableSwitches.TraceLabelAndPrintingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTraceXMLMessagesNull() {
                return this.IsNull(this.tableSwitches.TraceXMLMessagesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTraceXMLMessagesNull() {
                this[this.tableSwitches.TraceXMLMessagesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogSkippingOrderNull() {
                return this.IsNull(this.tableSwitches.LogSkippingOrderColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogSkippingOrderNull() {
                this[this.tableSwitches.LogSkippingOrderColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRunWithoutDevicesNull() {
                return this.IsNull(this.tableSwitches.RunWithoutDevicesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRunWithoutDevicesNull() {
                this[this.tableSwitches.RunWithoutDevicesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDisablePreloadingRecorderAfterPrinterLoadNull() {
                return this.IsNull(this.tableSwitches.DisablePreloadingRecorderAfterPrinterLoadColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDisablePreloadingRecorderAfterPrinterLoadNull() {
                this[this.tableSwitches.DisablePreloadingRecorderAfterPrinterLoadColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDisableCacheLockingNull() {
                return this.IsNull(this.tableSwitches.DisableCacheLockingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDisableCacheLockingNull() {
                this[this.tableSwitches.DisableCacheLockingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnableCacheLimitingNull() {
                return this.IsNull(this.tableSwitches.EnableCacheLimitingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEnableCacheLimitingNull() {
                this[this.tableSwitches.EnableCacheLimitingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSkipSerialPortsForAutoloaderNull() {
                return this.IsNull(this.tableSwitches.SkipSerialPortsForAutoloaderColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSkipSerialPortsForAutoloaderNull() {
                this[this.tableSwitches.SkipSerialPortsForAutoloaderColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSkipDrivesForReaderRecorderCacheNull() {
                return this.IsNull(this.tableSwitches.SkipDrivesForReaderRecorderCacheColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSkipDrivesForReaderRecorderCacheNull() {
                this[this.tableSwitches.SkipDrivesForReaderRecorderCacheColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSecondsDelayBeforeMainWindowNull() {
                return this.IsNull(this.tableSwitches.SecondsDelayBeforeMainWindowColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSecondsDelayBeforeMainWindowNull() {
                this[this.tableSwitches.SecondsDelayBeforeMainWindowColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseParallelPortForPrismNull() {
                return this.IsNull(this.tableSwitches.UseParallelPortForPrismColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseParallelPortForPrismNull() {
                this[this.tableSwitches.UseParallelPortForPrismColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDisableDriverNameInRenderingNull() {
                return this.IsNull(this.tableSwitches.DisableDriverNameInRenderingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDisableDriverNameInRenderingNull() {
                this[this.tableSwitches.DisableDriverNameInRenderingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEraseCDRWBeforeRecordingNull() {
                return this.IsNull(this.tableSwitches.EraseCDRWBeforeRecordingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEraseCDRWBeforeRecordingNull() {
                this[this.tableSwitches.EraseCDRWBeforeRecordingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStrictWaveFileCheckingNull() {
                return this.IsNull(this.tableSwitches.StrictWaveFileCheckingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStrictWaveFileCheckingNull() {
                this[this.tableSwitches.StrictWaveFileCheckingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServerStatus_IdNull() {
                return this.IsNull(this.tableSwitches.ServerStatus_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServerStatus_IdNull() {
                this[this.tableSwitches.ServerStatus_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AutoloaderStatusRow : System.Data.DataRow {
            
            private AutoloaderStatusDataTable tableAutoloaderStatus;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AutoloaderStatusRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAutoloaderStatus = ((AutoloaderStatusDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LoaderNumber {
                get {
                    return ((string)(this[this.tableAutoloaderStatus.LoaderNumberColumn]));
                }
                set {
                    this[this.tableAutoloaderStatus.LoaderNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Offline {
                get {
                    return ((string)(this[this.tableAutoloaderStatus.OfflineColumn]));
                }
                set {
                    this[this.tableAutoloaderStatus.OfflineColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MailslotLevel {
                get {
                    try {
                        return ((string)(this[this.tableAutoloaderStatus.MailslotLevelColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MailslotLevel\' in table \'AutoloaderStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoloaderStatus.MailslotLevelColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AutoloaderStatus_Id {
                get {
                    return ((int)(this[this.tableAutoloaderStatus.AutoloaderStatus_IdColumn]));
                }
                set {
                    this[this.tableAutoloaderStatus.AutoloaderStatus_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServerStatus_Id {
                get {
                    try {
                        return ((int)(this[this.tableAutoloaderStatus.ServerStatus_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ServerStatus_Id\' in table \'AutoloaderStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoloaderStatus.ServerStatus_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerStatusRow ServerStatusRow {
                get {
                    return ((ServerStatusRow)(this.GetParentRow(this.Table.ParentRelations["ServerStatus_AutoloaderStatus"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ServerStatus_AutoloaderStatus"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMailslotLevelNull() {
                return this.IsNull(this.tableAutoloaderStatus.MailslotLevelColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMailslotLevelNull() {
                this[this.tableAutoloaderStatus.MailslotLevelColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServerStatus_IdNull() {
                return this.IsNull(this.tableAutoloaderStatus.ServerStatus_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServerStatus_IdNull() {
                this[this.tableAutoloaderStatus.ServerStatus_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BinRow[] GetBinRows() {
                return ((BinRow[])(base.GetChildRows(this.Table.ChildRelations["AutoloaderStatus_Bin"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrinterRow[] GetPrinterRows() {
                return ((PrinterRow[])(base.GetChildRows(this.Table.ChildRelations["AutoloaderStatus_Printer"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecorderRow[] GetRecorderRows() {
                return ((RecorderRow[])(base.GetChildRows(this.Table.ChildRelations["AutoloaderStatus_Recorder"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BinRow : System.Data.DataRow {
            
            private BinDataTable tableBin;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BinRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBin = ((BinDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Number {
                get {
                    return ((string)(this[this.tableBin.NumberColumn]));
                }
                set {
                    this[this.tableBin.NumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Level {
                get {
                    try {
                        return ((string)(this[this.tableBin.LevelColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Level\' in table \'Bin\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBin.LevelColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Usage {
                get {
                    return ((string)(this[this.tableBin.UsageColumn]));
                }
                set {
                    this[this.tableBin.UsageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AutoloaderStatus_Id {
                get {
                    try {
                        return ((int)(this[this.tableBin.AutoloaderStatus_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AutoloaderStatus_Id\' in table \'Bin\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBin.AutoloaderStatus_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderStatusRow AutoloaderStatusRow {
                get {
                    return ((AutoloaderStatusRow)(this.GetParentRow(this.Table.ParentRelations["AutoloaderStatus_Bin"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AutoloaderStatus_Bin"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLevelNull() {
                return this.IsNull(this.tableBin.LevelColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLevelNull() {
                this[this.tableBin.LevelColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoloaderStatus_IdNull() {
                return this.IsNull(this.tableBin.AutoloaderStatus_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAutoloaderStatus_IdNull() {
                this[this.tableBin.AutoloaderStatus_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PrinterRow : System.Data.DataRow {
            
            private PrinterDataTable tablePrinter;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrinterRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrinter = ((PrinterDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Number {
                get {
                    return ((string)(this[this.tablePrinter.NumberColumn]));
                }
                set {
                    this[this.tablePrinter.NumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Offline {
                get {
                    return ((string)(this[this.tablePrinter.OfflineColumn]));
                }
                set {
                    this[this.tablePrinter.OfflineColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LabelsRemaining {
                get {
                    try {
                        return ((string)(this[this.tablePrinter.LabelsRemainingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LabelsRemaining\' in table \'Printer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrinter.LabelsRemainingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DiscCount {
                get {
                    try {
                        return ((string)(this[this.tablePrinter.DiscCountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DiscCount\' in table \'Printer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrinter.DiscCountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AutoloaderStatus_Id {
                get {
                    try {
                        return ((int)(this[this.tablePrinter.AutoloaderStatus_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AutoloaderStatus_Id\' in table \'Printer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrinter.AutoloaderStatus_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderStatusRow AutoloaderStatusRow {
                get {
                    return ((AutoloaderStatusRow)(this.GetParentRow(this.Table.ParentRelations["AutoloaderStatus_Printer"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AutoloaderStatus_Printer"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabelsRemainingNull() {
                return this.IsNull(this.tablePrinter.LabelsRemainingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabelsRemainingNull() {
                this[this.tablePrinter.LabelsRemainingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiscCountNull() {
                return this.IsNull(this.tablePrinter.DiscCountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiscCountNull() {
                this[this.tablePrinter.DiscCountColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoloaderStatus_IdNull() {
                return this.IsNull(this.tablePrinter.AutoloaderStatus_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAutoloaderStatus_IdNull() {
                this[this.tablePrinter.AutoloaderStatus_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RecorderRow : System.Data.DataRow {
            
            private RecorderDataTable tableRecorder;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RecorderRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRecorder = ((RecorderDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Number {
                get {
                    return ((string)(this[this.tableRecorder.NumberColumn]));
                }
                set {
                    this[this.tableRecorder.NumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Offline {
                get {
                    return ((string)(this[this.tableRecorder.OfflineColumn]));
                }
                set {
                    this[this.tableRecorder.OfflineColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DiscCount {
                get {
                    try {
                        return ((string)(this[this.tableRecorder.DiscCountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DiscCount\' in table \'Recorder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecorder.DiscCountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AutoloaderStatus_Id {
                get {
                    try {
                        return ((int)(this[this.tableRecorder.AutoloaderStatus_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AutoloaderStatus_Id\' in table \'Recorder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecorder.AutoloaderStatus_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderStatusRow AutoloaderStatusRow {
                get {
                    return ((AutoloaderStatusRow)(this.GetParentRow(this.Table.ParentRelations["AutoloaderStatus_Recorder"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AutoloaderStatus_Recorder"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiscCountNull() {
                return this.IsNull(this.tableRecorder.DiscCountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiscCountNull() {
                this[this.tableRecorder.DiscCountColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoloaderStatus_IdNull() {
                return this.IsNull(this.tableRecorder.AutoloaderStatus_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAutoloaderStatus_IdNull() {
                this[this.tableRecorder.AutoloaderStatus_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ActivationInfoRow : System.Data.DataRow {
            
            private ActivationInfoDataTable tableActivationInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ActivationInfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableActivationInfo = ((ActivationInfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ActivationInfo_Id {
                get {
                    return ((int)(this[this.tableActivationInfo.ActivationInfo_IdColumn]));
                }
                set {
                    this[this.tableActivationInfo.ActivationInfo_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServerStatus_Id {
                get {
                    try {
                        return ((int)(this[this.tableActivationInfo.ServerStatus_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ServerStatus_Id\' in table \'ActivationInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActivationInfo.ServerStatus_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerStatusRow ServerStatusRow {
                get {
                    return ((ServerStatusRow)(this.GetParentRow(this.Table.ParentRelations["ServerStatus_ActivationInfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ServerStatus_ActivationInfo"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServerStatus_IdNull() {
                return this.IsNull(this.tableActivationInfo.ServerStatus_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServerStatus_IdNull() {
                this[this.tableActivationInfo.ServerStatus_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseRow[] GetBaseRows() {
                return ((BaseRow[])(base.GetChildRows(this.Table.ChildRelations["ActivationInfo_Base"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RawModeRow[] GetRawModeRows() {
                return ((RawModeRow[])(base.GetChildRows(this.Table.ChildRelations["ActivationInfo_RawMode"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SmarteCDRow[] GetSmarteCDRows() {
                return ((SmarteCDRow[])(base.GetChildRows(this.Table.ChildRelations["ActivationInfo_SmarteCD"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VideoCDRow[] GetVideoCDRows() {
                return ((VideoCDRow[])(base.GetChildRows(this.Table.ChildRelations["ActivationInfo_VideoCD"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BaseRow : System.Data.DataRow {
            
            private BaseDataTable tableBase;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BaseRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBase = ((BaseDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableBase.StatusColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Status\' in table \'Base\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBase.StatusColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DaysRemaining {
                get {
                    try {
                        return ((string)(this[this.tableBase.DaysRemainingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DaysRemaining\' in table \'Base\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBase.DaysRemainingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ActivationInfo_Id {
                get {
                    try {
                        return ((int)(this[this.tableBase.ActivationInfo_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ActivationInfo_Id\' in table \'Base\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBase.ActivationInfo_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivationInfoRow ActivationInfoRow {
                get {
                    return ((ActivationInfoRow)(this.GetParentRow(this.Table.ParentRelations["ActivationInfo_Base"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ActivationInfo_Base"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableBase.StatusColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableBase.StatusColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDaysRemainingNull() {
                return this.IsNull(this.tableBase.DaysRemainingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDaysRemainingNull() {
                this[this.tableBase.DaysRemainingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActivationInfo_IdNull() {
                return this.IsNull(this.tableBase.ActivationInfo_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActivationInfo_IdNull() {
                this[this.tableBase.ActivationInfo_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RawModeRow : System.Data.DataRow {
            
            private RawModeDataTable tableRawMode;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RawModeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRawMode = ((RawModeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableRawMode.StatusColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Status\' in table \'RawMode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRawMode.StatusColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DaysRemaining {
                get {
                    try {
                        return ((string)(this[this.tableRawMode.DaysRemainingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DaysRemaining\' in table \'RawMode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRawMode.DaysRemainingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ActivationInfo_Id {
                get {
                    try {
                        return ((int)(this[this.tableRawMode.ActivationInfo_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ActivationInfo_Id\' in table \'RawMode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRawMode.ActivationInfo_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivationInfoRow ActivationInfoRow {
                get {
                    return ((ActivationInfoRow)(this.GetParentRow(this.Table.ParentRelations["ActivationInfo_RawMode"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ActivationInfo_RawMode"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableRawMode.StatusColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableRawMode.StatusColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDaysRemainingNull() {
                return this.IsNull(this.tableRawMode.DaysRemainingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDaysRemainingNull() {
                this[this.tableRawMode.DaysRemainingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActivationInfo_IdNull() {
                return this.IsNull(this.tableRawMode.ActivationInfo_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActivationInfo_IdNull() {
                this[this.tableRawMode.ActivationInfo_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SmarteCDRow : System.Data.DataRow {
            
            private SmarteCDDataTable tableSmarteCD;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SmarteCDRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSmarteCD = ((SmarteCDDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableSmarteCD.StatusColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Status\' in table \'SmarteCD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSmarteCD.StatusColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DaysRemaining {
                get {
                    try {
                        return ((string)(this[this.tableSmarteCD.DaysRemainingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DaysRemaining\' in table \'SmarteCD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSmarteCD.DaysRemainingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ActivationInfo_Id {
                get {
                    try {
                        return ((int)(this[this.tableSmarteCD.ActivationInfo_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ActivationInfo_Id\' in table \'SmarteCD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSmarteCD.ActivationInfo_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivationInfoRow ActivationInfoRow {
                get {
                    return ((ActivationInfoRow)(this.GetParentRow(this.Table.ParentRelations["ActivationInfo_SmarteCD"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ActivationInfo_SmarteCD"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableSmarteCD.StatusColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableSmarteCD.StatusColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDaysRemainingNull() {
                return this.IsNull(this.tableSmarteCD.DaysRemainingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDaysRemainingNull() {
                this[this.tableSmarteCD.DaysRemainingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActivationInfo_IdNull() {
                return this.IsNull(this.tableSmarteCD.ActivationInfo_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActivationInfo_IdNull() {
                this[this.tableSmarteCD.ActivationInfo_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class VideoCDRow : System.Data.DataRow {
            
            private VideoCDDataTable tableVideoCD;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VideoCDRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVideoCD = ((VideoCDDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableVideoCD.StatusColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Status\' in table \'VideoCD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVideoCD.StatusColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DaysRemaining {
                get {
                    try {
                        return ((string)(this[this.tableVideoCD.DaysRemainingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DaysRemaining\' in table \'VideoCD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVideoCD.DaysRemainingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ActivationInfo_Id {
                get {
                    try {
                        return ((int)(this[this.tableVideoCD.ActivationInfo_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ActivationInfo_Id\' in table \'VideoCD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVideoCD.ActivationInfo_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivationInfoRow ActivationInfoRow {
                get {
                    return ((ActivationInfoRow)(this.GetParentRow(this.Table.ParentRelations["ActivationInfo_VideoCD"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ActivationInfo_VideoCD"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableVideoCD.StatusColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableVideoCD.StatusColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDaysRemainingNull() {
                return this.IsNull(this.tableVideoCD.DaysRemainingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDaysRemainingNull() {
                this[this.tableVideoCD.DaysRemainingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActivationInfo_IdNull() {
                return this.IsNull(this.tableVideoCD.ActivationInfo_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActivationInfo_IdNull() {
                this[this.tableVideoCD.ActivationInfo_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OrderListRow : System.Data.DataRow {
            
            private OrderListDataTable tableOrderList;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OrderListRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOrderList = ((OrderListDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cluster {
                get {
                    return ((string)(this[this.tableOrderList.ClusterColumn]));
                }
                set {
                    this[this.tableOrderList.ClusterColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NumberOfOrders {
                get {
                    return ((string)(this[this.tableOrderList.NumberOfOrdersColumn]));
                }
                set {
                    this[this.tableOrderList.NumberOfOrdersColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OrderList_Id {
                get {
                    return ((int)(this[this.tableOrderList.OrderList_IdColumn]));
                }
                set {
                    this[this.tableOrderList.OrderList_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionOrderRow[] GetProductionOrderRows() {
                return ((ProductionOrderRow[])(base.GetChildRows(this.Table.ChildRelations["OrderList_ProductionOrder"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProductionOrderRow : System.Data.DataRow {
            
            private ProductionOrderDataTable tableProductionOrder;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductionOrderRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProductionOrder = ((ProductionOrderDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrderId {
                get {
                    return ((string)(this[this.tableProductionOrder.OrderIdColumn]));
                }
                set {
                    this[this.tableProductionOrder.OrderIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientId {
                get {
                    return ((string)(this[this.tableProductionOrder.ClientIdColumn]));
                }
                set {
                    this[this.tableProductionOrder.ClientIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrderType {
                get {
                    try {
                        return ((string)(this[this.tableProductionOrder.OrderTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OrderType\' in table \'ProductionOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProductionOrder.OrderTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrderState {
                get {
                    try {
                        return ((string)(this[this.tableProductionOrder.OrderStateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OrderState\' in table \'ProductionOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProductionOrder.OrderStateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrderStage {
                get {
                    return ((string)(this[this.tableProductionOrder.OrderStageColumn]));
                }
                set {
                    this[this.tableProductionOrder.OrderStageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrderStageEx {
                get {
                    try {
                        return ((string)(this[this.tableProductionOrder.OrderStageExColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OrderStageEx\' in table \'ProductionOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProductionOrder.OrderStageExColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CopiesRequested {
                get {
                    return ((string)(this[this.tableProductionOrder.CopiesRequestedColumn]));
                }
                set {
                    this[this.tableProductionOrder.CopiesRequestedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CopiesCompleted {
                get {
                    return ((string)(this[this.tableProductionOrder.CopiesCompletedColumn]));
                }
                set {
                    this[this.tableProductionOrder.CopiesCompletedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PercentCompleted {
                get {
                    return ((string)(this[this.tableProductionOrder.PercentCompletedColumn]));
                }
                set {
                    this[this.tableProductionOrder.PercentCompletedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OriginalOrder {
                get {
                    try {
                        return ((string)(this[this.tableProductionOrder.OriginalOrderColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OriginalOrder\' in table \'ProductionOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProductionOrder.OriginalOrderColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OrderList_Id {
                get {
                    try {
                        return ((int)(this[this.tableProductionOrder.OrderList_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OrderList_Id\' in table \'ProductionOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProductionOrder.OrderList_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderListRow OrderListRow {
                get {
                    return ((OrderListRow)(this.GetParentRow(this.Table.ParentRelations["OrderList_ProductionOrder"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["OrderList_ProductionOrder"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderTypeNull() {
                return this.IsNull(this.tableProductionOrder.OrderTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderTypeNull() {
                this[this.tableProductionOrder.OrderTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderStateNull() {
                return this.IsNull(this.tableProductionOrder.OrderStateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderStateNull() {
                this[this.tableProductionOrder.OrderStateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderStageExNull() {
                return this.IsNull(this.tableProductionOrder.OrderStageExColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderStageExNull() {
                this[this.tableProductionOrder.OrderStageExColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOriginalOrderNull() {
                return this.IsNull(this.tableProductionOrder.OriginalOrderColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOriginalOrderNull() {
                this[this.tableProductionOrder.OriginalOrderColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderList_IdNull() {
                return this.IsNull(this.tableProductionOrder.OrderList_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderList_IdNull() {
                this[this.tableProductionOrder.OrderList_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SessionLogRow : System.Data.DataRow {
            
            private SessionLogDataTable tableSessionLog;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SessionLogRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSessionLog = ((SessionLogDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NumberOfEntries {
                get {
                    return ((string)(this[this.tableSessionLog.NumberOfEntriesColumn]));
                }
                set {
                    this[this.tableSessionLog.NumberOfEntriesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SessionLog_Id {
                get {
                    return ((int)(this[this.tableSessionLog.SessionLog_IdColumn]));
                }
                set {
                    this[this.tableSessionLog.SessionLog_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntryRow[] GetEntryRows() {
                return ((EntryRow[])(base.GetChildRows(this.Table.ChildRelations["SessionLog_Entry"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EntryRow : System.Data.DataRow {
            
            private EntryDataTable tableEntry;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EntryRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEntry = ((EntryDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text {
                get {
                    return ((string)(this[this.tableEntry.TextColumn]));
                }
                set {
                    this[this.tableEntry.TextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Timestamp {
                get {
                    return ((string)(this[this.tableEntry.TimestampColumn]));
                }
                set {
                    this[this.tableEntry.TimestampColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MessageId {
                get {
                    return ((string)(this[this.tableEntry.MessageIdColumn]));
                }
                set {
                    this[this.tableEntry.MessageIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SessionLog_Id {
                get {
                    try {
                        return ((int)(this[this.tableEntry.SessionLog_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SessionLog_Id\' in table \'Entry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntry.SessionLog_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionLogRow SessionLogRow {
                get {
                    return ((SessionLogRow)(this.GetParentRow(this.Table.ParentRelations["SessionLog_Entry"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SessionLog_Entry"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSessionLog_IdNull() {
                return this.IsNull(this.tableEntry.SessionLog_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSessionLog_IdNull() {
                this[this.tableEntry.SessionLog_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DialogActionRow : System.Data.DataRow {
            
            private DialogActionDataTable tableDialogAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DialogActionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDialogAction = ((DialogActionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DialogId {
                get {
                    return ((string)(this[this.tableDialogAction.DialogIdColumn]));
                }
                set {
                    this[this.tableDialogAction.DialogIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Button {
                get {
                    return ((string)(this[this.tableDialogAction.ButtonColumn]));
                }
                set {
                    this[this.tableDialogAction.ButtonColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableDialogAction.NameColumn]));
                }
                set {
                    this[this.tableDialogAction.NameColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProductionParameterSettingsRow : System.Data.DataRow {
            
            private ProductionParameterSettingsDataTable tableProductionParameterSettings;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProductionParameterSettingsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProductionParameterSettings = ((ProductionParameterSettingsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductionParameterSettings_Id {
                get {
                    return ((int)(this[this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn]));
                }
                set {
                    this[this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerRow[] GetServerRows() {
                return ((ServerRow[])(base.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Server"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModesRow[] GetModesRows() {
                return ((ModesRow[])(base.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Modes"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CachingRow[] GetCachingRows() {
                return ((CachingRow[])(base.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Caching"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingRow[] GetRecordingRows() {
                return ((RecordingRow[])(base.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Recording"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyRow[] GetVerifyRows() {
                return ((VerifyRow[])(base.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Verify"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintingRow[] GetPrintingRows() {
                return ((PrintingRow[])(base.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Printing"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderRow[] GetAutoloaderRows() {
                return ((AutoloaderRow[])(base.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Autoloader"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadingRow[] GetReadingRows() {
                return ((ReadingRow[])(base.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Reading"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodesRow[] GetMediaCodesRows() {
                return ((MediaCodesRow[])(base.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_MediaCodes"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KioskModeRow[] GetKioskModeRows() {
                return ((KioskModeRow[])(base.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_KioskMode"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServerRow : System.Data.DataRow {
            
            private ServerDataTable tableServer;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServer = ((ServerDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableServer.DescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'Server\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServer.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrderStatusUpdateInterval {
                get {
                    return ((string)(this[this.tableServer.OrderStatusUpdateIntervalColumn]));
                }
                set {
                    this[this.tableServer.OrderStatusUpdateIntervalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductionParameterSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tableServer.ProductionParameterSettings_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductionParameterSettings_Id\' in table \'Server\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableServer.ProductionParameterSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Server"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Server"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableServer.DescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableServer.DescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductionParameterSettings_IdNull() {
                return this.IsNull(this.tableServer.ProductionParameterSettings_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductionParameterSettings_IdNull() {
                this[this.tableServer.ProductionParameterSettings_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ModesRow : System.Data.DataRow {
            
            private ModesDataTable tableModes;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ModesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableModes = ((ModesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServerMode {
                get {
                    try {
                        return ((string)(this[this.tableModes.ServerModeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ServerMode\' in table \'Modes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModes.ServerModeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OperatingMode {
                get {
                    try {
                        return ((string)(this[this.tableModes.OperatingModeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OperatingMode\' in table \'Modes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModes.OperatingModeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseFIFOMode {
                get {
                    try {
                        return ((string)(this[this.tableModes.UseFIFOModeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UseFIFOMode\' in table \'Modes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModes.UseFIFOModeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductionParameterSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tableModes.ProductionParameterSettings_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductionParameterSettings_Id\' in table \'Modes\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableModes.ProductionParameterSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Modes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Modes"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServerModeNull() {
                return this.IsNull(this.tableModes.ServerModeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServerModeNull() {
                this[this.tableModes.ServerModeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOperatingModeNull() {
                return this.IsNull(this.tableModes.OperatingModeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOperatingModeNull() {
                this[this.tableModes.OperatingModeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseFIFOModeNull() {
                return this.IsNull(this.tableModes.UseFIFOModeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseFIFOModeNull() {
                this[this.tableModes.UseFIFOModeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductionParameterSettings_IdNull() {
                return this.IsNull(this.tableModes.ProductionParameterSettings_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductionParameterSettings_IdNull() {
                this[this.tableModes.ProductionParameterSettings_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CachingRow : System.Data.DataRow {
            
            private CachingDataTable tableCaching;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CachingRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCaching = ((CachingDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseStaticCaching {
                get {
                    try {
                        return ((string)(this[this.tableCaching.UseStaticCachingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UseStaticCaching\' in table \'Caching\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaching.UseStaticCachingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CacheDriveLetters {
                get {
                    try {
                        return ((string)(this[this.tableCaching.CacheDriveLettersColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CacheDriveLetters\' in table \'Caching\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaching.CacheDriveLettersColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductionParameterSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tableCaching.ProductionParameterSettings_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductionParameterSettings_Id\' in table \'Caching\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableCaching.ProductionParameterSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Caching"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Caching"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseStaticCachingNull() {
                return this.IsNull(this.tableCaching.UseStaticCachingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseStaticCachingNull() {
                this[this.tableCaching.UseStaticCachingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCacheDriveLettersNull() {
                return this.IsNull(this.tableCaching.CacheDriveLettersColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCacheDriveLettersNull() {
                this[this.tableCaching.CacheDriveLettersColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductionParameterSettings_IdNull() {
                return this.IsNull(this.tableCaching.ProductionParameterSettings_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductionParameterSettings_IdNull() {
                this[this.tableCaching.ProductionParameterSettings_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RecordingRow : System.Data.DataRow {
            
            private RecordingDataTable tableRecording;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RecordingRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRecording = ((RecordingDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SimulateRecording {
                get {
                    try {
                        return ((string)(this[this.tableRecording.SimulateRecordingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SimulateRecording\' in table \'Recording\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecording.SimulateRecordingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseNewMediaOnly {
                get {
                    try {
                        return ((string)(this[this.tableRecording.UseNewMediaOnlyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UseNewMediaOnly\' in table \'Recording\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecording.UseNewMediaOnlyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaxRecordingSpeed {
                get {
                    return ((string)(this[this.tableRecording.MaxRecordingSpeedColumn]));
                }
                set {
                    this[this.tableRecording.MaxRecordingSpeedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaxDVDRecordingSpeed {
                get {
                    return ((string)(this[this.tableRecording.MaxDVDRecordingSpeedColumn]));
                }
                set {
                    this[this.tableRecording.MaxDVDRecordingSpeedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RejectNonISO {
                get {
                    try {
                        return ((string)(this[this.tableRecording.RejectNonISOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RejectNonISO\' in table \'Recording\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecording.RejectNonISOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DisableISOExtentFixups {
                get {
                    try {
                        return ((string)(this[this.tableRecording.DisableISOExtentFixupsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DisableISOExtentFixups\' in table \'Recording\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecording.DisableISOExtentFixupsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AddPostgapToISO {
                get {
                    try {
                        return ((string)(this[this.tableRecording.AddPostgapToISOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AddPostgapToISO\' in table \'Recording\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecording.AddPostgapToISOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EnableUsing90_100MinuteCDRs {
                get {
                    try {
                        return ((string)(this[this.tableRecording.EnableUsing90_100MinuteCDRsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EnableUsing90_100MinuteCDRs\' in table \'Recording\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableRecording.EnableUsing90_100MinuteCDRsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DestroyFailedRecordings {
                get {
                    try {
                        return ((string)(this[this.tableRecording.DestroyFailedRecordingsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DestroyFailedRecordings\' in table \'Recording\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecording.DestroyFailedRecordingsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductionParameterSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tableRecording.ProductionParameterSettings_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductionParameterSettings_Id\' in table \'Recording\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableRecording.ProductionParameterSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Recording"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Recording"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSimulateRecordingNull() {
                return this.IsNull(this.tableRecording.SimulateRecordingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSimulateRecordingNull() {
                this[this.tableRecording.SimulateRecordingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseNewMediaOnlyNull() {
                return this.IsNull(this.tableRecording.UseNewMediaOnlyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseNewMediaOnlyNull() {
                this[this.tableRecording.UseNewMediaOnlyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRejectNonISONull() {
                return this.IsNull(this.tableRecording.RejectNonISOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRejectNonISONull() {
                this[this.tableRecording.RejectNonISOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDisableISOExtentFixupsNull() {
                return this.IsNull(this.tableRecording.DisableISOExtentFixupsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDisableISOExtentFixupsNull() {
                this[this.tableRecording.DisableISOExtentFixupsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddPostgapToISONull() {
                return this.IsNull(this.tableRecording.AddPostgapToISOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddPostgapToISONull() {
                this[this.tableRecording.AddPostgapToISOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnableUsing90_100MinuteCDRsNull() {
                return this.IsNull(this.tableRecording.EnableUsing90_100MinuteCDRsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEnableUsing90_100MinuteCDRsNull() {
                this[this.tableRecording.EnableUsing90_100MinuteCDRsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestroyFailedRecordingsNull() {
                return this.IsNull(this.tableRecording.DestroyFailedRecordingsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestroyFailedRecordingsNull() {
                this[this.tableRecording.DestroyFailedRecordingsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductionParameterSettings_IdNull() {
                return this.IsNull(this.tableRecording.ProductionParameterSettings_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductionParameterSettings_IdNull() {
                this[this.tableRecording.ProductionParameterSettings_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class VerifyRow : System.Data.DataRow {
            
            private VerifyDataTable tableVerify;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VerifyRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVerify = ((VerifyDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseVerify {
                get {
                    try {
                        return ((string)(this[this.tableVerify.UseVerifyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UseVerify\' in table \'Verify\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVerify.UseVerifyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Frequency {
                get {
                    return ((string)(this[this.tableVerify.FrequencyColumn]));
                }
                set {
                    this[this.tableVerify.FrequencyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsChecksumDLLReady {
                get {
                    try {
                        return ((string)(this[this.tableVerify.IsChecksumDLLReadyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IsChecksumDLLReady\' in table \'Verify\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVerify.IsChecksumDLLReadyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseChecksumDLL {
                get {
                    try {
                        return ((string)(this[this.tableVerify.UseChecksumDLLColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UseChecksumDLL\' in table \'Verify\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVerify.UseChecksumDLLColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChecksumDLLId {
                get {
                    try {
                        return ((string)(this[this.tableVerify.ChecksumDLLIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ChecksumDLLId\' in table \'Verify\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVerify.ChecksumDLLIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductionParameterSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tableVerify.ProductionParameterSettings_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductionParameterSettings_Id\' in table \'Verify\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableVerify.ProductionParameterSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Verify"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Verify"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseVerifyNull() {
                return this.IsNull(this.tableVerify.UseVerifyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseVerifyNull() {
                this[this.tableVerify.UseVerifyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsChecksumDLLReadyNull() {
                return this.IsNull(this.tableVerify.IsChecksumDLLReadyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsChecksumDLLReadyNull() {
                this[this.tableVerify.IsChecksumDLLReadyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseChecksumDLLNull() {
                return this.IsNull(this.tableVerify.UseChecksumDLLColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseChecksumDLLNull() {
                this[this.tableVerify.UseChecksumDLLColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChecksumDLLIdNull() {
                return this.IsNull(this.tableVerify.ChecksumDLLIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChecksumDLLIdNull() {
                this[this.tableVerify.ChecksumDLLIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductionParameterSettings_IdNull() {
                return this.IsNull(this.tableVerify.ProductionParameterSettings_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductionParameterSettings_IdNull() {
                this[this.tableVerify.ProductionParameterSettings_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PrintingRow : System.Data.DataRow {
            
            private PrintingDataTable tablePrinting;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintingRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrinting = ((PrintingDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SimulatePrinting {
                get {
                    try {
                        return ((string)(this[this.tablePrinting.SimulatePrintingColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SimulatePrinting\' in table \'Printing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrinting.SimulatePrintingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RejectPattern {
                get {
                    try {
                        return ((string)(this[this.tablePrinting.RejectPatternColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RejectPattern\' in table \'Printing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrinting.RejectPatternColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TakeOrdersWithLabelWithoutPrinter {
                get {
                    try {
                        return ((string)(this[this.tablePrinting.TakeOrdersWithLabelWithoutPrinterColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TakeOrdersWithLabelWithoutPrinter\' in table \'Printing\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablePrinting.TakeOrdersWithLabelWithoutPrinterColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrorOnLowInkLevel {
                get {
                    try {
                        return ((string)(this[this.tablePrinting.ErrorOnLowInkLevelColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ErrorOnLowInkLevel\' in table \'Printing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrinting.ErrorOnLowInkLevelColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LowInkPercentage {
                get {
                    try {
                        return ((string)(this[this.tablePrinting.LowInkPercentageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LowInkPercentage\' in table \'Printing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrinting.LowInkPercentageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductionParameterSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tablePrinting.ProductionParameterSettings_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductionParameterSettings_Id\' in table \'Printing\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePrinting.ProductionParameterSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Printing"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Printing"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSimulatePrintingNull() {
                return this.IsNull(this.tablePrinting.SimulatePrintingColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSimulatePrintingNull() {
                this[this.tablePrinting.SimulatePrintingColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRejectPatternNull() {
                return this.IsNull(this.tablePrinting.RejectPatternColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRejectPatternNull() {
                this[this.tablePrinting.RejectPatternColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTakeOrdersWithLabelWithoutPrinterNull() {
                return this.IsNull(this.tablePrinting.TakeOrdersWithLabelWithoutPrinterColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTakeOrdersWithLabelWithoutPrinterNull() {
                this[this.tablePrinting.TakeOrdersWithLabelWithoutPrinterColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorOnLowInkLevelNull() {
                return this.IsNull(this.tablePrinting.ErrorOnLowInkLevelColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorOnLowInkLevelNull() {
                this[this.tablePrinting.ErrorOnLowInkLevelColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLowInkPercentageNull() {
                return this.IsNull(this.tablePrinting.LowInkPercentageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLowInkPercentageNull() {
                this[this.tablePrinting.LowInkPercentageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductionParameterSettings_IdNull() {
                return this.IsNull(this.tablePrinting.ProductionParameterSettings_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductionParameterSettings_IdNull() {
                this[this.tablePrinting.ProductionParameterSettings_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AutoloaderRow : System.Data.DataRow {
            
            private AutoloaderDataTable tableAutoloader;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AutoloaderRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAutoloader = ((AutoloaderDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LoaderNumber {
                get {
                    return ((string)(this[this.tableAutoloader.LoaderNumberColumn]));
                }
                set {
                    this[this.tableAutoloader.LoaderNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MailslotSetting {
                get {
                    return ((string)(this[this.tableAutoloader.MailslotSettingColumn]));
                }
                set {
                    this[this.tableAutoloader.MailslotSettingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AvailableMailslotSettings {
                get {
                    return ((string)(this[this.tableAutoloader.AvailableMailslotSettingsColumn]));
                }
                set {
                    this[this.tableAutoloader.AvailableMailslotSettingsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MediaSize {
                get {
                    try {
                        return ((string)(this[this.tableAutoloader.MediaSizeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MediaSize\' in table \'Autoloader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoloader.MediaSizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AvailableMediaSizes {
                get {
                    return ((string)(this[this.tableAutoloader.AvailableMediaSizesColumn]));
                }
                set {
                    this[this.tableAutoloader.AvailableMediaSizesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MediaType {
                get {
                    try {
                        return ((string)(this[this.tableAutoloader.MediaTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MediaType\' in table \'Autoloader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoloader.MediaTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AvailableMediaTypes {
                get {
                    try {
                        return ((string)(this[this.tableAutoloader.AvailableMediaTypesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AvailableMediaTypes\' in table \'Autoloader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoloader.AvailableMediaTypesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AvailableMediaTypes2 {
                get {
                    try {
                        return ((string)(this[this.tableAutoloader.AvailableMediaTypes2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AvailableMediaTypes2\' in table \'Autoloader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoloader.AvailableMediaTypes2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Autoloader_Id {
                get {
                    return ((int)(this[this.tableAutoloader.Autoloader_IdColumn]));
                }
                set {
                    this[this.tableAutoloader.Autoloader_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductionParameterSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tableAutoloader.ProductionParameterSettings_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductionParameterSettings_Id\' in table \'Autoloader\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableAutoloader.ProductionParameterSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Autoloader"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Autoloader"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMediaSizeNull() {
                return this.IsNull(this.tableAutoloader.MediaSizeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMediaSizeNull() {
                this[this.tableAutoloader.MediaSizeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMediaTypeNull() {
                return this.IsNull(this.tableAutoloader.MediaTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMediaTypeNull() {
                this[this.tableAutoloader.MediaTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAvailableMediaTypesNull() {
                return this.IsNull(this.tableAutoloader.AvailableMediaTypesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAvailableMediaTypesNull() {
                this[this.tableAutoloader.AvailableMediaTypesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAvailableMediaTypes2Null() {
                return this.IsNull(this.tableAutoloader.AvailableMediaTypes2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAvailableMediaTypes2Null() {
                this[this.tableAutoloader.AvailableMediaTypes2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductionParameterSettings_IdNull() {
                return this.IsNull(this.tableAutoloader.ProductionParameterSettings_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductionParameterSettings_IdNull() {
                this[this.tableAutoloader.ProductionParameterSettings_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BinSettingRow[] GetBinSettingRows() {
                return ((BinSettingRow[])(base.GetChildRows(this.Table.ChildRelations["Autoloader_BinSetting"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BinSettingRow : System.Data.DataRow {
            
            private BinSettingDataTable tableBinSetting;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BinSettingRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBinSetting = ((BinSettingDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BinNumber {
                get {
                    return ((string)(this[this.tableBinSetting.BinNumberColumn]));
                }
                set {
                    this[this.tableBinSetting.BinNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Setting {
                get {
                    return ((string)(this[this.tableBinSetting.SettingColumn]));
                }
                set {
                    this[this.tableBinSetting.SettingColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AvailableBinSettings {
                get {
                    return ((string)(this[this.tableBinSetting.AvailableBinSettingsColumn]));
                }
                set {
                    this[this.tableBinSetting.AvailableBinSettingsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Autoloader_Id {
                get {
                    try {
                        return ((int)(this[this.tableBinSetting.Autoloader_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Autoloader_Id\' in table \'BinSetting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBinSetting.Autoloader_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderRow AutoloaderRow {
                get {
                    return ((AutoloaderRow)(this.GetParentRow(this.Table.ParentRelations["Autoloader_BinSetting"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Autoloader_BinSetting"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoloader_IdNull() {
                return this.IsNull(this.tableBinSetting.Autoloader_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAutoloader_IdNull() {
                this[this.tableBinSetting.Autoloader_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReadingRow : System.Data.DataRow {
            
            private ReadingDataTable tableReading;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReadingRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReading = ((ReadingDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AudioReadSpeed {
                get {
                    try {
                        return ((string)(this[this.tableReading.AudioReadSpeedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AudioReadSpeed\' in table \'Reading\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReading.AudioReadSpeedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PreferredReader {
                get {
                    try {
                        return ((string)(this[this.tableReading.PreferredReaderColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PreferredReader\' in table \'Reading\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReading.PreferredReaderColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BarcodePort {
                get {
                    try {
                        return ((string)(this[this.tableReading.BarcodePortColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BarcodePort\' in table \'Reading\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReading.BarcodePortColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BarcodeAngle {
                get {
                    return ((string)(this[this.tableReading.BarcodeAngleColumn]));
                }
                set {
                    this[this.tableReading.BarcodeAngleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseBarcodeIndex {
                get {
                    try {
                        return ((string)(this[this.tableReading.UseBarcodeIndexColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UseBarcodeIndex\' in table \'Reading\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReading.UseBarcodeIndexColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Reading_Id {
                get {
                    return ((int)(this[this.tableReading.Reading_IdColumn]));
                }
                set {
                    this[this.tableReading.Reading_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductionParameterSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tableReading.ProductionParameterSettings_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductionParameterSettings_Id\' in table \'Reading\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableReading.ProductionParameterSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Reading"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Reading"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAudioReadSpeedNull() {
                return this.IsNull(this.tableReading.AudioReadSpeedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAudioReadSpeedNull() {
                this[this.tableReading.AudioReadSpeedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreferredReaderNull() {
                return this.IsNull(this.tableReading.PreferredReaderColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreferredReaderNull() {
                this[this.tableReading.PreferredReaderColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBarcodePortNull() {
                return this.IsNull(this.tableReading.BarcodePortColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBarcodePortNull() {
                this[this.tableReading.BarcodePortColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseBarcodeIndexNull() {
                return this.IsNull(this.tableReading.UseBarcodeIndexColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseBarcodeIndexNull() {
                this[this.tableReading.UseBarcodeIndexColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductionParameterSettings_IdNull() {
                return this.IsNull(this.tableReading.ProductionParameterSettings_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductionParameterSettings_IdNull() {
                this[this.tableReading.ProductionParameterSettings_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoBulkReadRow[] GetAutoBulkReadRows() {
                return ((AutoBulkReadRow[])(base.GetChildRows(this.Table.ChildRelations["Reading_AutoBulkRead"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AutoBulkReadRow : System.Data.DataRow {
            
            private AutoBulkReadDataTable tableAutoBulkRead;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AutoBulkReadRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAutoBulkRead = ((AutoBulkReadDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BaseFolderForImages {
                get {
                    return ((string)(this[this.tableAutoBulkRead.BaseFolderForImagesColumn]));
                }
                set {
                    this[this.tableAutoBulkRead.BaseFolderForImagesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseVolumeIDAsFolderName {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.UseVolumeIDAsFolderNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UseVolumeIDAsFolderName\' in table \'AutoBulkRead\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.UseVolumeIDAsFolderNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseBarcodeAsFolderName {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.UseBarcodeAsFolderNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UseBarcodeAsFolderName\' in table \'AutoBulkRead\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.UseBarcodeAsFolderNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExtractISOImagesToFoldersAndFiles {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.ExtractISOImagesToFoldersAndFilesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ExtractISOImagesToFoldersAndFiles\' in table \'AutoBulkRead\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.ExtractISOImagesToFoldersAndFilesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImageTypeForAudioTracks {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.ImageTypeForAudioTracksColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ImageTypeForAudioTracks\' in table \'AutoBulkRead\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.ImageTypeForAudioTracksColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseISRCAsFilenameForAudioTracks {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.UseISRCAsFilenameForAudioTracksColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UseISRCAsFilenameForAudioTracks\' in table \'AutoBulkRead\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.UseISRCAsFilenameForAudioTracksColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PutFailuresToRejectBin {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.PutFailuresToRejectBinColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PutFailuresToRejectBin\' in table \'AutoBulkRead\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.PutFailuresToRejectBinColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Reading_Id {
                get {
                    try {
                        return ((int)(this[this.tableAutoBulkRead.Reading_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Reading_Id\' in table \'AutoBulkRead\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.Reading_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadingRow ReadingRow {
                get {
                    return ((ReadingRow)(this.GetParentRow(this.Table.ParentRelations["Reading_AutoBulkRead"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Reading_AutoBulkRead"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseVolumeIDAsFolderNameNull() {
                return this.IsNull(this.tableAutoBulkRead.UseVolumeIDAsFolderNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseVolumeIDAsFolderNameNull() {
                this[this.tableAutoBulkRead.UseVolumeIDAsFolderNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseBarcodeAsFolderNameNull() {
                return this.IsNull(this.tableAutoBulkRead.UseBarcodeAsFolderNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseBarcodeAsFolderNameNull() {
                this[this.tableAutoBulkRead.UseBarcodeAsFolderNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExtractISOImagesToFoldersAndFilesNull() {
                return this.IsNull(this.tableAutoBulkRead.ExtractISOImagesToFoldersAndFilesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExtractISOImagesToFoldersAndFilesNull() {
                this[this.tableAutoBulkRead.ExtractISOImagesToFoldersAndFilesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageTypeForAudioTracksNull() {
                return this.IsNull(this.tableAutoBulkRead.ImageTypeForAudioTracksColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageTypeForAudioTracksNull() {
                this[this.tableAutoBulkRead.ImageTypeForAudioTracksColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseISRCAsFilenameForAudioTracksNull() {
                return this.IsNull(this.tableAutoBulkRead.UseISRCAsFilenameForAudioTracksColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseISRCAsFilenameForAudioTracksNull() {
                this[this.tableAutoBulkRead.UseISRCAsFilenameForAudioTracksColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPutFailuresToRejectBinNull() {
                return this.IsNull(this.tableAutoBulkRead.PutFailuresToRejectBinColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPutFailuresToRejectBinNull() {
                this[this.tableAutoBulkRead.PutFailuresToRejectBinColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReading_IdNull() {
                return this.IsNull(this.tableAutoBulkRead.Reading_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReading_IdNull() {
                this[this.tableAutoBulkRead.Reading_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MediaCodesRow : System.Data.DataRow {
            
            private MediaCodesDataTable tableMediaCodes;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MediaCodesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMediaCodes = ((MediaCodesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UseMediaCodes {
                get {
                    try {
                        return ((string)(this[this.tableMediaCodes.UseMediaCodesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UseMediaCodes\' in table \'MediaCodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMediaCodes.UseMediaCodesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MediaCodes_Id {
                get {
                    return ((int)(this[this.tableMediaCodes.MediaCodes_IdColumn]));
                }
                set {
                    this[this.tableMediaCodes.MediaCodes_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductionParameterSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tableMediaCodes.ProductionParameterSettings_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductionParameterSettings_Id\' in table \'MediaCodes\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableMediaCodes.ProductionParameterSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_MediaCodes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_MediaCodes"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUseMediaCodesNull() {
                return this.IsNull(this.tableMediaCodes.UseMediaCodesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUseMediaCodesNull() {
                this[this.tableMediaCodes.UseMediaCodesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductionParameterSettings_IdNull() {
                return this.IsNull(this.tableMediaCodes.ProductionParameterSettings_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductionParameterSettings_IdNull() {
                this[this.tableMediaCodes.ProductionParameterSettings_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodeRow[] GetMediaCodeRows() {
                return ((MediaCodeRow[])(base.GetChildRows(this.Table.ChildRelations["MediaCodes_MediaCode"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MediaCodeRow : System.Data.DataRow {
            
            private MediaCodeDataTable tableMediaCode;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MediaCodeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMediaCode = ((MediaCodeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    return ((string)(this[this.tableMediaCode.ValueColumn]));
                }
                set {
                    this[this.tableMediaCode.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MediaCodes_Id {
                get {
                    try {
                        return ((int)(this[this.tableMediaCode.MediaCodes_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MediaCodes_Id\' in table \'MediaCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMediaCode.MediaCodes_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodesRow MediaCodesRow {
                get {
                    return ((MediaCodesRow)(this.GetParentRow(this.Table.ParentRelations["MediaCodes_MediaCode"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MediaCodes_MediaCode"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMediaCodes_IdNull() {
                return this.IsNull(this.tableMediaCode.MediaCodes_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMediaCodes_IdNull() {
                this[this.tableMediaCode.MediaCodes_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class KioskModeRow : System.Data.DataRow {
            
            private KioskModeDataTable tableKioskMode;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KioskModeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableKioskMode = ((KioskModeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RecoverOrders {
                get {
                    try {
                        return ((string)(this[this.tableKioskMode.RecoverOrdersColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RecoverOrders\' in table \'KioskMode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKioskMode.RecoverOrdersColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RunNoPrinter {
                get {
                    try {
                        return ((string)(this[this.tableKioskMode.RunNoPrinterColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RunNoPrinter\' in table \'KioskMode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKioskMode.RunNoPrinterColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AutoloaderRecovery {
                get {
                    try {
                        return ((string)(this[this.tableKioskMode.AutoloaderRecoveryColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AutoloaderRecovery\' in table \'KioskMode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKioskMode.AutoloaderRecoveryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrinterRecovery {
                get {
                    try {
                        return ((string)(this[this.tableKioskMode.PrinterRecoveryColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PrinterRecovery\' in table \'KioskMode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKioskMode.PrinterRecoveryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AutoRespondOnStartup {
                get {
                    try {
                        return ((string)(this[this.tableKioskMode.AutoRespondOnStartupColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AutoRespondOnStartup\' in table \'KioskMode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKioskMode.AutoRespondOnStartupColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProductionParameterSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tableKioskMode.ProductionParameterSettings_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ProductionParameterSettings_Id\' in table \'KioskMode\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableKioskMode.ProductionParameterSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_KioskMode"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_KioskMode"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecoverOrdersNull() {
                return this.IsNull(this.tableKioskMode.RecoverOrdersColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecoverOrdersNull() {
                this[this.tableKioskMode.RecoverOrdersColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRunNoPrinterNull() {
                return this.IsNull(this.tableKioskMode.RunNoPrinterColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRunNoPrinterNull() {
                this[this.tableKioskMode.RunNoPrinterColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoloaderRecoveryNull() {
                return this.IsNull(this.tableKioskMode.AutoloaderRecoveryColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAutoloaderRecoveryNull() {
                this[this.tableKioskMode.AutoloaderRecoveryColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrinterRecoveryNull() {
                return this.IsNull(this.tableKioskMode.PrinterRecoveryColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrinterRecoveryNull() {
                this[this.tableKioskMode.PrinterRecoveryColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoRespondOnStartupNull() {
                return this.IsNull(this.tableKioskMode.AutoRespondOnStartupColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAutoRespondOnStartupNull() {
                this[this.tableKioskMode.AutoRespondOnStartupColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductionParameterSettings_IdNull() {
                return this.IsNull(this.tableKioskMode.ProductionParameterSettings_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductionParameterSettings_IdNull() {
                this[this.tableKioskMode.ProductionParameterSettings_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UnlockingCodesRow : System.Data.DataRow {
            
            private UnlockingCodesDataTable tableUnlockingCodes;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnlockingCodesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUnlockingCodes = ((UnlockingCodesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Feature {
                get {
                    try {
                        return ((string)(this[this.tableUnlockingCodes.FeatureColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Feature\' in table \'UnlockingCodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnlockingCodes.FeatureColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SessionCode {
                get {
                    return ((string)(this[this.tableUnlockingCodes.SessionCodeColumn]));
                }
                set {
                    this[this.tableUnlockingCodes.SessionCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ComputerCode {
                get {
                    return ((string)(this[this.tableUnlockingCodes.ComputerCodeColumn]));
                }
                set {
                    this[this.tableUnlockingCodes.ComputerCodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeatureNull() {
                return this.IsNull(this.tableUnlockingCodes.FeatureColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeatureNull() {
                this[this.tableUnlockingCodes.FeatureColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AckOnlyRowChangeEvent : System.EventArgs {
            
            private AckOnlyRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AckOnlyRowChangeEvent(AckOnlyRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AckOnlyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServerStatusRowChangeEvent : System.EventArgs {
            
            private ServerStatusRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerStatusRowChangeEvent(ServerStatusRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerStatusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServerInfoRowChangeEvent : System.EventArgs {
            
            private ServerInfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerInfoRowChangeEvent(ServerInfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProductionCountRowChangeEvent : System.EventArgs {
            
            private ProductionCountRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionCountRowChangeEvent(ProductionCountRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionCountRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SwitchesRowChangeEvent : System.EventArgs {
            
            private SwitchesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SwitchesRowChangeEvent(SwitchesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SwitchesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AutoloaderStatusRowChangeEvent : System.EventArgs {
            
            private AutoloaderStatusRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderStatusRowChangeEvent(AutoloaderStatusRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderStatusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BinRowChangeEvent : System.EventArgs {
            
            private BinRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BinRowChangeEvent(BinRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BinRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PrinterRowChangeEvent : System.EventArgs {
            
            private PrinterRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrinterRowChangeEvent(PrinterRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrinterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RecorderRowChangeEvent : System.EventArgs {
            
            private RecorderRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecorderRowChangeEvent(RecorderRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecorderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ActivationInfoRowChangeEvent : System.EventArgs {
            
            private ActivationInfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivationInfoRowChangeEvent(ActivationInfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActivationInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BaseRowChangeEvent : System.EventArgs {
            
            private BaseRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseRowChangeEvent(BaseRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RawModeRowChangeEvent : System.EventArgs {
            
            private RawModeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RawModeRowChangeEvent(RawModeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RawModeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SmarteCDRowChangeEvent : System.EventArgs {
            
            private SmarteCDRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SmarteCDRowChangeEvent(SmarteCDRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SmarteCDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class VideoCDRowChangeEvent : System.EventArgs {
            
            private VideoCDRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VideoCDRowChangeEvent(VideoCDRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VideoCDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OrderListRowChangeEvent : System.EventArgs {
            
            private OrderListRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderListRowChangeEvent(OrderListRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OrderListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProductionOrderRowChangeEvent : System.EventArgs {
            
            private ProductionOrderRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionOrderRowChangeEvent(ProductionOrderRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionOrderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SessionLogRowChangeEvent : System.EventArgs {
            
            private SessionLogRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionLogRowChangeEvent(SessionLogRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionLogRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EntryRowChangeEvent : System.EventArgs {
            
            private EntryRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntryRowChangeEvent(EntryRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DialogActionRowChangeEvent : System.EventArgs {
            
            private DialogActionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DialogActionRowChangeEvent(DialogActionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DialogActionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProductionParameterSettingsRowChangeEvent : System.EventArgs {
            
            private ProductionParameterSettingsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsRowChangeEvent(ProductionParameterSettingsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProductionParameterSettingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServerRowChangeEvent : System.EventArgs {
            
            private ServerRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerRowChangeEvent(ServerRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ModesRowChangeEvent : System.EventArgs {
            
            private ModesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModesRowChangeEvent(ModesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CachingRowChangeEvent : System.EventArgs {
            
            private CachingRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CachingRowChangeEvent(CachingRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CachingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RecordingRowChangeEvent : System.EventArgs {
            
            private RecordingRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingRowChangeEvent(RecordingRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class VerifyRowChangeEvent : System.EventArgs {
            
            private VerifyRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyRowChangeEvent(VerifyRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PrintingRowChangeEvent : System.EventArgs {
            
            private PrintingRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintingRowChangeEvent(PrintingRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AutoloaderRowChangeEvent : System.EventArgs {
            
            private AutoloaderRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderRowChangeEvent(AutoloaderRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BinSettingRowChangeEvent : System.EventArgs {
            
            private BinSettingRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BinSettingRowChangeEvent(BinSettingRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BinSettingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReadingRowChangeEvent : System.EventArgs {
            
            private ReadingRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadingRowChangeEvent(ReadingRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AutoBulkReadRowChangeEvent : System.EventArgs {
            
            private AutoBulkReadRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoBulkReadRowChangeEvent(AutoBulkReadRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoBulkReadRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MediaCodesRowChangeEvent : System.EventArgs {
            
            private MediaCodesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodesRowChangeEvent(MediaCodesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MediaCodeRowChangeEvent : System.EventArgs {
            
            private MediaCodeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodeRowChangeEvent(MediaCodeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class KioskModeRowChangeEvent : System.EventArgs {
            
            private KioskModeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KioskModeRowChangeEvent(KioskModeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KioskModeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UnlockingCodesRowChangeEvent : System.EventArgs {
            
            private UnlockingCodesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnlockingCodesRowChangeEvent(UnlockingCodesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnlockingCodesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591