//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace RImageSchemas.Schemas {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("ImageOrder")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ImageOrder : System.Data.DataSet {
        
        private TargetDataTable tableTarget;
        
        private FormatDataTable tableFormat;
        
        private UDFFormatDataTable tableUDFFormat;
        
        private PCMACFormatDataTable tablePCMACFormat;
        
        private FormatOptionsDataTable tableFormatOptions;
        
        private SourceDataTable tableSource;
        
        private ParentFolderDataTable tableParentFolder;
        
        private EditListDataTable tableEditList;
        
        private OutputDataTable tableOutput;
        
        private RulesDataTable tableRules;
        
        private VolumeNameDataTable tableVolumeName;
        
        private PVDInfoDataTable tablePVDInfo;
        
        private ControlsDataTable tableControls;
        
        private System.Data.DataRelation relationFormat_UDFFormat;
        
        private System.Data.DataRelation relationFormat_PCMACFormat;
        
        private System.Data.DataRelation relationFormat_FormatOptions;
        
        private System.Data.DataRelation relationSource_ParentFolder;
        
        private System.Data.DataRelation relationSource_EditList;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ImageOrder() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ImageOrder(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Target"] != null)) {
                    base.Tables.Add(new TargetDataTable(ds.Tables["Target"]));
                }
                if ((ds.Tables["Format"] != null)) {
                    base.Tables.Add(new FormatDataTable(ds.Tables["Format"]));
                }
                if ((ds.Tables["UDFFormat"] != null)) {
                    base.Tables.Add(new UDFFormatDataTable(ds.Tables["UDFFormat"]));
                }
                if ((ds.Tables["PCMACFormat"] != null)) {
                    base.Tables.Add(new PCMACFormatDataTable(ds.Tables["PCMACFormat"]));
                }
                if ((ds.Tables["FormatOptions"] != null)) {
                    base.Tables.Add(new FormatOptionsDataTable(ds.Tables["FormatOptions"]));
                }
                if ((ds.Tables["Source"] != null)) {
                    base.Tables.Add(new SourceDataTable(ds.Tables["Source"]));
                }
                if ((ds.Tables["ParentFolder"] != null)) {
                    base.Tables.Add(new ParentFolderDataTable(ds.Tables["ParentFolder"]));
                }
                if ((ds.Tables["EditList"] != null)) {
                    base.Tables.Add(new EditListDataTable(ds.Tables["EditList"]));
                }
                if ((ds.Tables["Output"] != null)) {
                    base.Tables.Add(new OutputDataTable(ds.Tables["Output"]));
                }
                if ((ds.Tables["Rules"] != null)) {
                    base.Tables.Add(new RulesDataTable(ds.Tables["Rules"]));
                }
                if ((ds.Tables["VolumeName"] != null)) {
                    base.Tables.Add(new VolumeNameDataTable(ds.Tables["VolumeName"]));
                }
                if ((ds.Tables["PVDInfo"] != null)) {
                    base.Tables.Add(new PVDInfoDataTable(ds.Tables["PVDInfo"]));
                }
                if ((ds.Tables["Controls"] != null)) {
                    base.Tables.Add(new ControlsDataTable(ds.Tables["Controls"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TargetDataTable Target {
            get {
                return this.tableTarget;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FormatDataTable Format {
            get {
                return this.tableFormat;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UDFFormatDataTable UDFFormat {
            get {
                return this.tableUDFFormat;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PCMACFormatDataTable PCMACFormat {
            get {
                return this.tablePCMACFormat;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FormatOptionsDataTable FormatOptions {
            get {
                return this.tableFormatOptions;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SourceDataTable Source {
            get {
                return this.tableSource;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ParentFolderDataTable ParentFolder {
            get {
                return this.tableParentFolder;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EditListDataTable EditList {
            get {
                return this.tableEditList;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OutputDataTable Output {
            get {
                return this.tableOutput;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RulesDataTable Rules {
            get {
                return this.tableRules;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VolumeNameDataTable VolumeName {
            get {
                return this.tableVolumeName;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PVDInfoDataTable PVDInfo {
            get {
                return this.tablePVDInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ControlsDataTable Controls {
            get {
                return this.tableControls;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            ImageOrder cln = ((ImageOrder)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Target"] != null)) {
                    base.Tables.Add(new TargetDataTable(ds.Tables["Target"]));
                }
                if ((ds.Tables["Format"] != null)) {
                    base.Tables.Add(new FormatDataTable(ds.Tables["Format"]));
                }
                if ((ds.Tables["UDFFormat"] != null)) {
                    base.Tables.Add(new UDFFormatDataTable(ds.Tables["UDFFormat"]));
                }
                if ((ds.Tables["PCMACFormat"] != null)) {
                    base.Tables.Add(new PCMACFormatDataTable(ds.Tables["PCMACFormat"]));
                }
                if ((ds.Tables["FormatOptions"] != null)) {
                    base.Tables.Add(new FormatOptionsDataTable(ds.Tables["FormatOptions"]));
                }
                if ((ds.Tables["Source"] != null)) {
                    base.Tables.Add(new SourceDataTable(ds.Tables["Source"]));
                }
                if ((ds.Tables["ParentFolder"] != null)) {
                    base.Tables.Add(new ParentFolderDataTable(ds.Tables["ParentFolder"]));
                }
                if ((ds.Tables["EditList"] != null)) {
                    base.Tables.Add(new EditListDataTable(ds.Tables["EditList"]));
                }
                if ((ds.Tables["Output"] != null)) {
                    base.Tables.Add(new OutputDataTable(ds.Tables["Output"]));
                }
                if ((ds.Tables["Rules"] != null)) {
                    base.Tables.Add(new RulesDataTable(ds.Tables["Rules"]));
                }
                if ((ds.Tables["VolumeName"] != null)) {
                    base.Tables.Add(new VolumeNameDataTable(ds.Tables["VolumeName"]));
                }
                if ((ds.Tables["PVDInfo"] != null)) {
                    base.Tables.Add(new PVDInfoDataTable(ds.Tables["PVDInfo"]));
                }
                if ((ds.Tables["Controls"] != null)) {
                    base.Tables.Add(new ControlsDataTable(ds.Tables["Controls"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTarget = ((TargetDataTable)(base.Tables["Target"]));
            if ((initTable == true)) {
                if ((this.tableTarget != null)) {
                    this.tableTarget.InitVars();
                }
            }
            this.tableFormat = ((FormatDataTable)(base.Tables["Format"]));
            if ((initTable == true)) {
                if ((this.tableFormat != null)) {
                    this.tableFormat.InitVars();
                }
            }
            this.tableUDFFormat = ((UDFFormatDataTable)(base.Tables["UDFFormat"]));
            if ((initTable == true)) {
                if ((this.tableUDFFormat != null)) {
                    this.tableUDFFormat.InitVars();
                }
            }
            this.tablePCMACFormat = ((PCMACFormatDataTable)(base.Tables["PCMACFormat"]));
            if ((initTable == true)) {
                if ((this.tablePCMACFormat != null)) {
                    this.tablePCMACFormat.InitVars();
                }
            }
            this.tableFormatOptions = ((FormatOptionsDataTable)(base.Tables["FormatOptions"]));
            if ((initTable == true)) {
                if ((this.tableFormatOptions != null)) {
                    this.tableFormatOptions.InitVars();
                }
            }
            this.tableSource = ((SourceDataTable)(base.Tables["Source"]));
            if ((initTable == true)) {
                if ((this.tableSource != null)) {
                    this.tableSource.InitVars();
                }
            }
            this.tableParentFolder = ((ParentFolderDataTable)(base.Tables["ParentFolder"]));
            if ((initTable == true)) {
                if ((this.tableParentFolder != null)) {
                    this.tableParentFolder.InitVars();
                }
            }
            this.tableEditList = ((EditListDataTable)(base.Tables["EditList"]));
            if ((initTable == true)) {
                if ((this.tableEditList != null)) {
                    this.tableEditList.InitVars();
                }
            }
            this.tableOutput = ((OutputDataTable)(base.Tables["Output"]));
            if ((initTable == true)) {
                if ((this.tableOutput != null)) {
                    this.tableOutput.InitVars();
                }
            }
            this.tableRules = ((RulesDataTable)(base.Tables["Rules"]));
            if ((initTable == true)) {
                if ((this.tableRules != null)) {
                    this.tableRules.InitVars();
                }
            }
            this.tableVolumeName = ((VolumeNameDataTable)(base.Tables["VolumeName"]));
            if ((initTable == true)) {
                if ((this.tableVolumeName != null)) {
                    this.tableVolumeName.InitVars();
                }
            }
            this.tablePVDInfo = ((PVDInfoDataTable)(base.Tables["PVDInfo"]));
            if ((initTable == true)) {
                if ((this.tablePVDInfo != null)) {
                    this.tablePVDInfo.InitVars();
                }
            }
            this.tableControls = ((ControlsDataTable)(base.Tables["Controls"]));
            if ((initTable == true)) {
                if ((this.tableControls != null)) {
                    this.tableControls.InitVars();
                }
            }
            this.relationFormat_UDFFormat = this.Relations["Format_UDFFormat"];
            this.relationFormat_PCMACFormat = this.Relations["Format_PCMACFormat"];
            this.relationFormat_FormatOptions = this.Relations["Format_FormatOptions"];
            this.relationSource_ParentFolder = this.Relations["Source_ParentFolder"];
            this.relationSource_EditList = this.Relations["Source_EditList"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ImageOrder";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTarget = new TargetDataTable();
            base.Tables.Add(this.tableTarget);
            this.tableFormat = new FormatDataTable();
            base.Tables.Add(this.tableFormat);
            this.tableUDFFormat = new UDFFormatDataTable();
            base.Tables.Add(this.tableUDFFormat);
            this.tablePCMACFormat = new PCMACFormatDataTable();
            base.Tables.Add(this.tablePCMACFormat);
            this.tableFormatOptions = new FormatOptionsDataTable();
            base.Tables.Add(this.tableFormatOptions);
            this.tableSource = new SourceDataTable();
            base.Tables.Add(this.tableSource);
            this.tableParentFolder = new ParentFolderDataTable();
            base.Tables.Add(this.tableParentFolder);
            this.tableEditList = new EditListDataTable();
            base.Tables.Add(this.tableEditList);
            this.tableOutput = new OutputDataTable();
            base.Tables.Add(this.tableOutput);
            this.tableRules = new RulesDataTable();
            base.Tables.Add(this.tableRules);
            this.tableVolumeName = new VolumeNameDataTable();
            base.Tables.Add(this.tableVolumeName);
            this.tablePVDInfo = new PVDInfoDataTable();
            base.Tables.Add(this.tablePVDInfo);
            this.tableControls = new ControlsDataTable();
            base.Tables.Add(this.tableControls);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("Format_UDFFormat", new System.Data.DataColumn[] {
                        this.tableFormat.Format_IdColumn}, new System.Data.DataColumn[] {
                        this.tableUDFFormat.Format_IdColumn});
            this.tableUDFFormat.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Format_PCMACFormat", new System.Data.DataColumn[] {
                        this.tableFormat.Format_IdColumn}, new System.Data.DataColumn[] {
                        this.tablePCMACFormat.Format_IdColumn});
            this.tablePCMACFormat.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Format_FormatOptions", new System.Data.DataColumn[] {
                        this.tableFormat.Format_IdColumn}, new System.Data.DataColumn[] {
                        this.tableFormatOptions.Format_IdColumn});
            this.tableFormatOptions.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Source_ParentFolder", new System.Data.DataColumn[] {
                        this.tableSource.Source_IdColumn}, new System.Data.DataColumn[] {
                        this.tableParentFolder.Source_IdColumn});
            this.tableParentFolder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Source_EditList", new System.Data.DataColumn[] {
                        this.tableSource.Source_IdColumn}, new System.Data.DataColumn[] {
                        this.tableEditList.Source_IdColumn});
            this.tableEditList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationFormat_UDFFormat = new System.Data.DataRelation("Format_UDFFormat", new System.Data.DataColumn[] {
                        this.tableFormat.Format_IdColumn}, new System.Data.DataColumn[] {
                        this.tableUDFFormat.Format_IdColumn}, false);
            this.relationFormat_UDFFormat.Nested = true;
            this.Relations.Add(this.relationFormat_UDFFormat);
            this.relationFormat_PCMACFormat = new System.Data.DataRelation("Format_PCMACFormat", new System.Data.DataColumn[] {
                        this.tableFormat.Format_IdColumn}, new System.Data.DataColumn[] {
                        this.tablePCMACFormat.Format_IdColumn}, false);
            this.relationFormat_PCMACFormat.Nested = true;
            this.Relations.Add(this.relationFormat_PCMACFormat);
            this.relationFormat_FormatOptions = new System.Data.DataRelation("Format_FormatOptions", new System.Data.DataColumn[] {
                        this.tableFormat.Format_IdColumn}, new System.Data.DataColumn[] {
                        this.tableFormatOptions.Format_IdColumn}, false);
            this.relationFormat_FormatOptions.Nested = true;
            this.Relations.Add(this.relationFormat_FormatOptions);
            this.relationSource_ParentFolder = new System.Data.DataRelation("Source_ParentFolder", new System.Data.DataColumn[] {
                        this.tableSource.Source_IdColumn}, new System.Data.DataColumn[] {
                        this.tableParentFolder.Source_IdColumn}, false);
            this.relationSource_ParentFolder.Nested = true;
            this.Relations.Add(this.relationSource_ParentFolder);
            this.relationSource_EditList = new System.Data.DataRelation("Source_EditList", new System.Data.DataColumn[] {
                        this.tableSource.Source_IdColumn}, new System.Data.DataColumn[] {
                        this.tableEditList.Source_IdColumn}, false);
            this.relationSource_EditList.Nested = true;
            this.Relations.Add(this.relationSource_EditList);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTarget() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFormat() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUDFFormat() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePCMACFormat() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFormatOptions() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSource() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeParentFolder() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEditList() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOutput() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRules() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeVolumeName() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePVDInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeControls() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            ImageOrder ds = new ImageOrder();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void TargetRowChangeEventHandler(object sender, TargetRowChangeEvent e);
        
        public delegate void FormatRowChangeEventHandler(object sender, FormatRowChangeEvent e);
        
        public delegate void UDFFormatRowChangeEventHandler(object sender, UDFFormatRowChangeEvent e);
        
        public delegate void PCMACFormatRowChangeEventHandler(object sender, PCMACFormatRowChangeEvent e);
        
        public delegate void FormatOptionsRowChangeEventHandler(object sender, FormatOptionsRowChangeEvent e);
        
        public delegate void SourceRowChangeEventHandler(object sender, SourceRowChangeEvent e);
        
        public delegate void ParentFolderRowChangeEventHandler(object sender, ParentFolderRowChangeEvent e);
        
        public delegate void EditListRowChangeEventHandler(object sender, EditListRowChangeEvent e);
        
        public delegate void OutputRowChangeEventHandler(object sender, OutputRowChangeEvent e);
        
        public delegate void RulesRowChangeEventHandler(object sender, RulesRowChangeEvent e);
        
        public delegate void VolumeNameRowChangeEventHandler(object sender, VolumeNameRowChangeEvent e);
        
        public delegate void PVDInfoRowChangeEventHandler(object sender, PVDInfoRowChangeEvent e);
        
        public delegate void ControlsRowChangeEventHandler(object sender, ControlsRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TargetDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCluster;
            
            private System.Data.DataColumn columnServer;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TargetDataTable() {
                this.TableName = "Target";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TargetDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TargetDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClusterColumn {
                get {
                    return this.columnCluster;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ServerColumn {
                get {
                    return this.columnServer;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TargetRow this[int index] {
                get {
                    return ((TargetRow)(this.Rows[index]));
                }
            }
            
            public event TargetRowChangeEventHandler TargetRowChanging;
            
            public event TargetRowChangeEventHandler TargetRowChanged;
            
            public event TargetRowChangeEventHandler TargetRowDeleting;
            
            public event TargetRowChangeEventHandler TargetRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTargetRow(TargetRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TargetRow AddTargetRow(string Cluster, string Server) {
                TargetRow rowTargetRow = ((TargetRow)(this.NewRow()));
                rowTargetRow.ItemArray = new object[] {
                        Cluster,
                        Server};
                this.Rows.Add(rowTargetRow);
                return rowTargetRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TargetDataTable cln = ((TargetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TargetDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCluster = base.Columns["Cluster"];
                this.columnServer = base.Columns["Server"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCluster = new System.Data.DataColumn("Cluster", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCluster);
                this.columnServer = new System.Data.DataColumn("Server", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnServer);
                this.columnCluster.Namespace = "";
                this.columnCluster.DefaultValue = ((string)("DefaultImageCluster"));
                this.columnServer.Namespace = "";
                this.columnServer.DefaultValue = ((string)("ANY"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TargetRow NewTargetRow() {
                return ((TargetRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TargetRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TargetRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TargetRowChanged != null)) {
                    this.TargetRowChanged(this, new TargetRowChangeEvent(((TargetRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TargetRowChanging != null)) {
                    this.TargetRowChanging(this, new TargetRowChangeEvent(((TargetRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TargetRowDeleted != null)) {
                    this.TargetRowDeleted(this, new TargetRowChangeEvent(((TargetRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TargetRowDeleting != null)) {
                    this.TargetRowDeleting(this, new TargetRowChangeEvent(((TargetRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTargetRow(TargetRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ImageOrder ds = new ImageOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TargetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FormatDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFormat_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormatDataTable() {
                this.TableName = "Format";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FormatDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FormatDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Format_IdColumn {
                get {
                    return this.columnFormat_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormatRow this[int index] {
                get {
                    return ((FormatRow)(this.Rows[index]));
                }
            }
            
            public event FormatRowChangeEventHandler FormatRowChanging;
            
            public event FormatRowChangeEventHandler FormatRowChanged;
            
            public event FormatRowChangeEventHandler FormatRowDeleting;
            
            public event FormatRowChangeEventHandler FormatRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFormatRow(FormatRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormatRow AddFormatRow() {
                FormatRow rowFormatRow = ((FormatRow)(this.NewRow()));
                rowFormatRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowFormatRow);
                return rowFormatRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FormatDataTable cln = ((FormatDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FormatDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFormat_Id = base.Columns["Format_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFormat_Id = new System.Data.DataColumn("Format_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnFormat_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnFormat_Id}, true));
                this.columnFormat_Id.AutoIncrement = true;
                this.columnFormat_Id.AllowDBNull = false;
                this.columnFormat_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormatRow NewFormatRow() {
                return ((FormatRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FormatRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FormatRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FormatRowChanged != null)) {
                    this.FormatRowChanged(this, new FormatRowChangeEvent(((FormatRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FormatRowChanging != null)) {
                    this.FormatRowChanging(this, new FormatRowChangeEvent(((FormatRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FormatRowDeleted != null)) {
                    this.FormatRowDeleted(this, new FormatRowChangeEvent(((FormatRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FormatRowDeleting != null)) {
                    this.FormatRowDeleting(this, new FormatRowChangeEvent(((FormatRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFormatRow(FormatRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ImageOrder ds = new ImageOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FormatDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UDFFormatDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUDF;
            
            private System.Data.DataColumn columnFormat_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDFFormatDataTable() {
                this.TableName = "UDFFormat";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UDFFormatDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UDFFormatDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UDFColumn {
                get {
                    return this.columnUDF;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Format_IdColumn {
                get {
                    return this.columnFormat_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDFFormatRow this[int index] {
                get {
                    return ((UDFFormatRow)(this.Rows[index]));
                }
            }
            
            public event UDFFormatRowChangeEventHandler UDFFormatRowChanging;
            
            public event UDFFormatRowChangeEventHandler UDFFormatRowChanged;
            
            public event UDFFormatRowChangeEventHandler UDFFormatRowDeleting;
            
            public event UDFFormatRowChangeEventHandler UDFFormatRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUDFFormatRow(UDFFormatRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDFFormatRow AddUDFFormatRow(string UDF, FormatRow parentFormatRowByFormat_UDFFormat) {
                UDFFormatRow rowUDFFormatRow = ((UDFFormatRow)(this.NewRow()));
                rowUDFFormatRow.ItemArray = new object[] {
                        UDF,
                        parentFormatRowByFormat_UDFFormat[0]};
                this.Rows.Add(rowUDFFormatRow);
                return rowUDFFormatRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UDFFormatDataTable cln = ((UDFFormatDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UDFFormatDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUDF = base.Columns["UDF"];
                this.columnFormat_Id = base.Columns["Format_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUDF = new System.Data.DataColumn("UDF", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUDF);
                this.columnFormat_Id = new System.Data.DataColumn("Format_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnFormat_Id);
                this.columnUDF.Namespace = "";
                this.columnUDF.DefaultValue = ((string)("102ISO"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDFFormatRow NewUDFFormatRow() {
                return ((UDFFormatRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UDFFormatRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UDFFormatRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UDFFormatRowChanged != null)) {
                    this.UDFFormatRowChanged(this, new UDFFormatRowChangeEvent(((UDFFormatRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UDFFormatRowChanging != null)) {
                    this.UDFFormatRowChanging(this, new UDFFormatRowChangeEvent(((UDFFormatRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UDFFormatRowDeleted != null)) {
                    this.UDFFormatRowDeleted(this, new UDFFormatRowChangeEvent(((UDFFormatRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UDFFormatRowDeleting != null)) {
                    this.UDFFormatRowDeleting(this, new UDFFormatRowChangeEvent(((UDFFormatRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUDFFormatRow(UDFFormatRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ImageOrder ds = new ImageOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UDFFormatDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PCMACFormatDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnISO;
            
            private System.Data.DataColumn columnVCDSlides;
            
            private System.Data.DataColumn columnApple;
            
            private System.Data.DataColumn columnJoliet;
            
            private System.Data.DataColumn columnRockridge;
            
            private System.Data.DataColumn columnFormat_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PCMACFormatDataTable() {
                this.TableName = "PCMACFormat";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PCMACFormatDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PCMACFormatDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ISOColumn {
                get {
                    return this.columnISO;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VCDSlidesColumn {
                get {
                    return this.columnVCDSlides;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AppleColumn {
                get {
                    return this.columnApple;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn JolietColumn {
                get {
                    return this.columnJoliet;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RockridgeColumn {
                get {
                    return this.columnRockridge;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Format_IdColumn {
                get {
                    return this.columnFormat_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PCMACFormatRow this[int index] {
                get {
                    return ((PCMACFormatRow)(this.Rows[index]));
                }
            }
            
            public event PCMACFormatRowChangeEventHandler PCMACFormatRowChanging;
            
            public event PCMACFormatRowChangeEventHandler PCMACFormatRowChanged;
            
            public event PCMACFormatRowChangeEventHandler PCMACFormatRowDeleting;
            
            public event PCMACFormatRowChangeEventHandler PCMACFormatRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPCMACFormatRow(PCMACFormatRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PCMACFormatRow AddPCMACFormatRow(string ISO, string VCDSlides, string Apple, string Joliet, string Rockridge, FormatRow parentFormatRowByFormat_PCMACFormat) {
                PCMACFormatRow rowPCMACFormatRow = ((PCMACFormatRow)(this.NewRow()));
                rowPCMACFormatRow.ItemArray = new object[] {
                        ISO,
                        VCDSlides,
                        Apple,
                        Joliet,
                        Rockridge,
                        parentFormatRowByFormat_PCMACFormat[0]};
                this.Rows.Add(rowPCMACFormatRow);
                return rowPCMACFormatRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PCMACFormatDataTable cln = ((PCMACFormatDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PCMACFormatDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnISO = base.Columns["ISO"];
                this.columnVCDSlides = base.Columns["VCDSlides"];
                this.columnApple = base.Columns["Apple"];
                this.columnJoliet = base.Columns["Joliet"];
                this.columnRockridge = base.Columns["Rockridge"];
                this.columnFormat_Id = base.Columns["Format_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnISO = new System.Data.DataColumn("ISO", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnISO);
                this.columnVCDSlides = new System.Data.DataColumn("VCDSlides", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnVCDSlides);
                this.columnApple = new System.Data.DataColumn("Apple", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnApple);
                this.columnJoliet = new System.Data.DataColumn("Joliet", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnJoliet);
                this.columnRockridge = new System.Data.DataColumn("Rockridge", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRockridge);
                this.columnFormat_Id = new System.Data.DataColumn("Format_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnFormat_Id);
                this.columnISO.Namespace = "";
                this.columnISO.DefaultValue = ((string)("2"));
                this.columnVCDSlides.Namespace = "";
                this.columnVCDSlides.DefaultValue = ((string)("false"));
                this.columnApple.Namespace = "";
                this.columnApple.DefaultValue = ((string)("none"));
                this.columnJoliet.Namespace = "";
                this.columnJoliet.DefaultValue = ((string)("false"));
                this.columnRockridge.Namespace = "";
                this.columnRockridge.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PCMACFormatRow NewPCMACFormatRow() {
                return ((PCMACFormatRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PCMACFormatRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PCMACFormatRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PCMACFormatRowChanged != null)) {
                    this.PCMACFormatRowChanged(this, new PCMACFormatRowChangeEvent(((PCMACFormatRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PCMACFormatRowChanging != null)) {
                    this.PCMACFormatRowChanging(this, new PCMACFormatRowChangeEvent(((PCMACFormatRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PCMACFormatRowDeleted != null)) {
                    this.PCMACFormatRowDeleted(this, new PCMACFormatRowChangeEvent(((PCMACFormatRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PCMACFormatRowDeleting != null)) {
                    this.PCMACFormatRowDeleting(this, new PCMACFormatRowChangeEvent(((PCMACFormatRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePCMACFormatRow(PCMACFormatRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ImageOrder ds = new ImageOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PCMACFormatDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FormatOptionsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnForceUpperCase;
            
            private System.Data.DataColumn columnAllowMultipleFilePaths;
            
            private System.Data.DataColumn columnForceDot;
            
            private System.Data.DataColumn columnForceShort;
            
            private System.Data.DataColumn columnVersions;
            
            private System.Data.DataColumn columnIgnoreBadFiles;
            
            private System.Data.DataColumn columnCaseSensitive;
            
            private System.Data.DataColumn columnZip;
            
            private System.Data.DataColumn columnAllowBootableCD;
            
            private System.Data.DataColumn columnFormat_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormatOptionsDataTable() {
                this.TableName = "FormatOptions";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FormatOptionsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FormatOptionsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ForceUpperCaseColumn {
                get {
                    return this.columnForceUpperCase;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AllowMultipleFilePathsColumn {
                get {
                    return this.columnAllowMultipleFilePaths;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ForceDotColumn {
                get {
                    return this.columnForceDot;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ForceShortColumn {
                get {
                    return this.columnForceShort;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VersionsColumn {
                get {
                    return this.columnVersions;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IgnoreBadFilesColumn {
                get {
                    return this.columnIgnoreBadFiles;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CaseSensitiveColumn {
                get {
                    return this.columnCaseSensitive;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ZipColumn {
                get {
                    return this.columnZip;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AllowBootableCDColumn {
                get {
                    return this.columnAllowBootableCD;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Format_IdColumn {
                get {
                    return this.columnFormat_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormatOptionsRow this[int index] {
                get {
                    return ((FormatOptionsRow)(this.Rows[index]));
                }
            }
            
            public event FormatOptionsRowChangeEventHandler FormatOptionsRowChanging;
            
            public event FormatOptionsRowChangeEventHandler FormatOptionsRowChanged;
            
            public event FormatOptionsRowChangeEventHandler FormatOptionsRowDeleting;
            
            public event FormatOptionsRowChangeEventHandler FormatOptionsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFormatOptionsRow(FormatOptionsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormatOptionsRow AddFormatOptionsRow(string ForceUpperCase, string AllowMultipleFilePaths, string ForceDot, string ForceShort, string Versions, string IgnoreBadFiles, string CaseSensitive, string Zip, string AllowBootableCD, FormatRow parentFormatRowByFormat_FormatOptions) {
                FormatOptionsRow rowFormatOptionsRow = ((FormatOptionsRow)(this.NewRow()));
                rowFormatOptionsRow.ItemArray = new object[] {
                        ForceUpperCase,
                        AllowMultipleFilePaths,
                        ForceDot,
                        ForceShort,
                        Versions,
                        IgnoreBadFiles,
                        CaseSensitive,
                        Zip,
                        AllowBootableCD,
                        parentFormatRowByFormat_FormatOptions[0]};
                this.Rows.Add(rowFormatOptionsRow);
                return rowFormatOptionsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FormatOptionsDataTable cln = ((FormatOptionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FormatOptionsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnForceUpperCase = base.Columns["ForceUpperCase"];
                this.columnAllowMultipleFilePaths = base.Columns["AllowMultipleFilePaths"];
                this.columnForceDot = base.Columns["ForceDot"];
                this.columnForceShort = base.Columns["ForceShort"];
                this.columnVersions = base.Columns["Versions"];
                this.columnIgnoreBadFiles = base.Columns["IgnoreBadFiles"];
                this.columnCaseSensitive = base.Columns["CaseSensitive"];
                this.columnZip = base.Columns["Zip"];
                this.columnAllowBootableCD = base.Columns["AllowBootableCD"];
                this.columnFormat_Id = base.Columns["Format_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnForceUpperCase = new System.Data.DataColumn("ForceUpperCase", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnForceUpperCase);
                this.columnAllowMultipleFilePaths = new System.Data.DataColumn("AllowMultipleFilePaths", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAllowMultipleFilePaths);
                this.columnForceDot = new System.Data.DataColumn("ForceDot", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnForceDot);
                this.columnForceShort = new System.Data.DataColumn("ForceShort", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnForceShort);
                this.columnVersions = new System.Data.DataColumn("Versions", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnVersions);
                this.columnIgnoreBadFiles = new System.Data.DataColumn("IgnoreBadFiles", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIgnoreBadFiles);
                this.columnCaseSensitive = new System.Data.DataColumn("CaseSensitive", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCaseSensitive);
                this.columnZip = new System.Data.DataColumn("Zip", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnZip);
                this.columnAllowBootableCD = new System.Data.DataColumn("AllowBootableCD", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAllowBootableCD);
                this.columnFormat_Id = new System.Data.DataColumn("Format_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnFormat_Id);
                this.columnForceUpperCase.Namespace = "";
                this.columnForceUpperCase.DefaultValue = ((string)("false"));
                this.columnAllowMultipleFilePaths.Namespace = "";
                this.columnAllowMultipleFilePaths.DefaultValue = ((string)("true"));
                this.columnForceDot.Namespace = "";
                this.columnForceDot.DefaultValue = ((string)("true"));
                this.columnForceShort.Namespace = "";
                this.columnForceShort.DefaultValue = ((string)("false"));
                this.columnVersions.Namespace = "";
                this.columnVersions.DefaultValue = ((string)("true"));
                this.columnIgnoreBadFiles.Namespace = "";
                this.columnIgnoreBadFiles.DefaultValue = ((string)("false"));
                this.columnCaseSensitive.Namespace = "";
                this.columnCaseSensitive.DefaultValue = ((string)("false"));
                this.columnZip.Namespace = "";
                this.columnZip.DefaultValue = ((string)("false"));
                this.columnAllowBootableCD.Namespace = "";
                this.columnAllowBootableCD.DefaultValue = ((string)("true"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormatOptionsRow NewFormatOptionsRow() {
                return ((FormatOptionsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FormatOptionsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FormatOptionsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FormatOptionsRowChanged != null)) {
                    this.FormatOptionsRowChanged(this, new FormatOptionsRowChangeEvent(((FormatOptionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FormatOptionsRowChanging != null)) {
                    this.FormatOptionsRowChanging(this, new FormatOptionsRowChangeEvent(((FormatOptionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FormatOptionsRowDeleted != null)) {
                    this.FormatOptionsRowDeleted(this, new FormatOptionsRowChangeEvent(((FormatOptionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FormatOptionsRowDeleting != null)) {
                    this.FormatOptionsRowDeleting(this, new FormatOptionsRowChangeEvent(((FormatOptionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFormatOptionsRow(FormatOptionsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ImageOrder ds = new ImageOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FormatOptionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SourceDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSource_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SourceDataTable() {
                this.TableName = "Source";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SourceDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SourceDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Source_IdColumn {
                get {
                    return this.columnSource_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SourceRow this[int index] {
                get {
                    return ((SourceRow)(this.Rows[index]));
                }
            }
            
            public event SourceRowChangeEventHandler SourceRowChanging;
            
            public event SourceRowChangeEventHandler SourceRowChanged;
            
            public event SourceRowChangeEventHandler SourceRowDeleting;
            
            public event SourceRowChangeEventHandler SourceRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSourceRow(SourceRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SourceRow AddSourceRow() {
                SourceRow rowSourceRow = ((SourceRow)(this.NewRow()));
                rowSourceRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowSourceRow);
                return rowSourceRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SourceDataTable cln = ((SourceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SourceDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSource_Id = base.Columns["Source_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSource_Id = new System.Data.DataColumn("Source_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSource_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnSource_Id}, true));
                this.columnSource_Id.AutoIncrement = true;
                this.columnSource_Id.AllowDBNull = false;
                this.columnSource_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SourceRow NewSourceRow() {
                return ((SourceRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SourceRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SourceRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SourceRowChanged != null)) {
                    this.SourceRowChanged(this, new SourceRowChangeEvent(((SourceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SourceRowChanging != null)) {
                    this.SourceRowChanging(this, new SourceRowChangeEvent(((SourceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SourceRowDeleted != null)) {
                    this.SourceRowDeleted(this, new SourceRowChangeEvent(((SourceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SourceRowDeleting != null)) {
                    this.SourceRowDeleting(this, new SourceRowChangeEvent(((SourceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSourceRow(SourceRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ImageOrder ds = new ImageOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SourceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ParentFolderDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnParentFolderPath;
            
            private System.Data.DataColumn columnDestination;
            
            private System.Data.DataColumn columnDirTimeStamp;
            
            private System.Data.DataColumn columnSource_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParentFolderDataTable() {
                this.TableName = "ParentFolder";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParentFolderDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ParentFolderDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ParentFolderPathColumn {
                get {
                    return this.columnParentFolderPath;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DestinationColumn {
                get {
                    return this.columnDestination;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DirTimeStampColumn {
                get {
                    return this.columnDirTimeStamp;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Source_IdColumn {
                get {
                    return this.columnSource_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParentFolderRow this[int index] {
                get {
                    return ((ParentFolderRow)(this.Rows[index]));
                }
            }
            
            public event ParentFolderRowChangeEventHandler ParentFolderRowChanging;
            
            public event ParentFolderRowChangeEventHandler ParentFolderRowChanged;
            
            public event ParentFolderRowChangeEventHandler ParentFolderRowDeleting;
            
            public event ParentFolderRowChangeEventHandler ParentFolderRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddParentFolderRow(ParentFolderRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParentFolderRow AddParentFolderRow(string ParentFolderPath, string Destination, string DirTimeStamp, SourceRow parentSourceRowBySource_ParentFolder) {
                ParentFolderRow rowParentFolderRow = ((ParentFolderRow)(this.NewRow()));
                rowParentFolderRow.ItemArray = new object[] {
                        ParentFolderPath,
                        Destination,
                        DirTimeStamp,
                        parentSourceRowBySource_ParentFolder[0]};
                this.Rows.Add(rowParentFolderRow);
                return rowParentFolderRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ParentFolderDataTable cln = ((ParentFolderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ParentFolderDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnParentFolderPath = base.Columns["ParentFolderPath"];
                this.columnDestination = base.Columns["Destination"];
                this.columnDirTimeStamp = base.Columns["DirTimeStamp"];
                this.columnSource_Id = base.Columns["Source_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnParentFolderPath = new System.Data.DataColumn("ParentFolderPath", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnParentFolderPath);
                this.columnDestination = new System.Data.DataColumn("Destination", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDestination);
                this.columnDirTimeStamp = new System.Data.DataColumn("DirTimeStamp", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDirTimeStamp);
                this.columnSource_Id = new System.Data.DataColumn("Source_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSource_Id);
                this.columnParentFolderPath.AllowDBNull = false;
                this.columnParentFolderPath.Namespace = "";
                this.columnDestination.Namespace = "";
                this.columnDestination.DefaultValue = ((string)("both"));
                this.columnDirTimeStamp.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParentFolderRow NewParentFolderRow() {
                return ((ParentFolderRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ParentFolderRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ParentFolderRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ParentFolderRowChanged != null)) {
                    this.ParentFolderRowChanged(this, new ParentFolderRowChangeEvent(((ParentFolderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ParentFolderRowChanging != null)) {
                    this.ParentFolderRowChanging(this, new ParentFolderRowChangeEvent(((ParentFolderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ParentFolderRowDeleted != null)) {
                    this.ParentFolderRowDeleted(this, new ParentFolderRowChangeEvent(((ParentFolderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ParentFolderRowDeleting != null)) {
                    this.ParentFolderRowDeleting(this, new ParentFolderRowChangeEvent(((ParentFolderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveParentFolderRow(ParentFolderRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ImageOrder ds = new ImageOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ParentFolderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EditListDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnEditListPath;
            
            private System.Data.DataColumn columnDestination;
            
            private System.Data.DataColumn columnDirTimeStamp;
            
            private System.Data.DataColumn columnSource_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EditListDataTable() {
                this.TableName = "EditList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EditListDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EditListDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EditListPathColumn {
                get {
                    return this.columnEditListPath;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DestinationColumn {
                get {
                    return this.columnDestination;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DirTimeStampColumn {
                get {
                    return this.columnDirTimeStamp;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Source_IdColumn {
                get {
                    return this.columnSource_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EditListRow this[int index] {
                get {
                    return ((EditListRow)(this.Rows[index]));
                }
            }
            
            public event EditListRowChangeEventHandler EditListRowChanging;
            
            public event EditListRowChangeEventHandler EditListRowChanged;
            
            public event EditListRowChangeEventHandler EditListRowDeleting;
            
            public event EditListRowChangeEventHandler EditListRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEditListRow(EditListRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EditListRow AddEditListRow(string EditListPath, string Destination, string DirTimeStamp, SourceRow parentSourceRowBySource_EditList) {
                EditListRow rowEditListRow = ((EditListRow)(this.NewRow()));
                rowEditListRow.ItemArray = new object[] {
                        EditListPath,
                        Destination,
                        DirTimeStamp,
                        parentSourceRowBySource_EditList[0]};
                this.Rows.Add(rowEditListRow);
                return rowEditListRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EditListDataTable cln = ((EditListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EditListDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEditListPath = base.Columns["EditListPath"];
                this.columnDestination = base.Columns["Destination"];
                this.columnDirTimeStamp = base.Columns["DirTimeStamp"];
                this.columnSource_Id = base.Columns["Source_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEditListPath = new System.Data.DataColumn("EditListPath", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEditListPath);
                this.columnDestination = new System.Data.DataColumn("Destination", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDestination);
                this.columnDirTimeStamp = new System.Data.DataColumn("DirTimeStamp", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDirTimeStamp);
                this.columnSource_Id = new System.Data.DataColumn("Source_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSource_Id);
                this.columnEditListPath.AllowDBNull = false;
                this.columnEditListPath.Namespace = "";
                this.columnDestination.Namespace = "";
                this.columnDestination.DefaultValue = ((string)("both"));
                this.columnDirTimeStamp.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EditListRow NewEditListRow() {
                return ((EditListRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EditListRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EditListRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EditListRowChanged != null)) {
                    this.EditListRowChanged(this, new EditListRowChangeEvent(((EditListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EditListRowChanging != null)) {
                    this.EditListRowChanging(this, new EditListRowChangeEvent(((EditListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EditListRowDeleted != null)) {
                    this.EditListRowDeleted(this, new EditListRowChangeEvent(((EditListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EditListRowDeleting != null)) {
                    this.EditListRowDeleting(this, new EditListRowChangeEvent(((EditListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEditListRow(EditListRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ImageOrder ds = new ImageOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EditListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OutputDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnImageFile;
            
            private System.Data.DataColumn columnType;
            
            private System.Data.DataColumn columnCDXA;
            
            private System.Data.DataColumn columnPostgap;
            
            private System.Data.DataColumn columnSize;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutputDataTable() {
                this.TableName = "Output";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OutputDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OutputDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ImageFileColumn {
                get {
                    return this.columnImageFile;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CDXAColumn {
                get {
                    return this.columnCDXA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PostgapColumn {
                get {
                    return this.columnPostgap;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SizeColumn {
                get {
                    return this.columnSize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutputRow this[int index] {
                get {
                    return ((OutputRow)(this.Rows[index]));
                }
            }
            
            public event OutputRowChangeEventHandler OutputRowChanging;
            
            public event OutputRowChangeEventHandler OutputRowChanged;
            
            public event OutputRowChangeEventHandler OutputRowDeleting;
            
            public event OutputRowChangeEventHandler OutputRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOutputRow(OutputRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutputRow AddOutputRow(string ImageFile, string Type, string CDXA, string Postgap, string Size) {
                OutputRow rowOutputRow = ((OutputRow)(this.NewRow()));
                rowOutputRow.ItemArray = new object[] {
                        ImageFile,
                        Type,
                        CDXA,
                        Postgap,
                        Size};
                this.Rows.Add(rowOutputRow);
                return rowOutputRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                OutputDataTable cln = ((OutputDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new OutputDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnImageFile = base.Columns["ImageFile"];
                this.columnType = base.Columns["Type"];
                this.columnCDXA = base.Columns["CDXA"];
                this.columnPostgap = base.Columns["Postgap"];
                this.columnSize = base.Columns["Size"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnImageFile = new System.Data.DataColumn("ImageFile", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnImageFile);
                this.columnType = new System.Data.DataColumn("Type", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnType);
                this.columnCDXA = new System.Data.DataColumn("CDXA", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCDXA);
                this.columnPostgap = new System.Data.DataColumn("Postgap", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPostgap);
                this.columnSize = new System.Data.DataColumn("Size", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSize);
                this.columnImageFile.AllowDBNull = false;
                this.columnImageFile.Namespace = "";
                this.columnType.Namespace = "";
                this.columnType.DefaultValue = ((string)("Normal"));
                this.columnCDXA.Namespace = "";
                this.columnCDXA.DefaultValue = ((string)("false"));
                this.columnPostgap.Namespace = "";
                this.columnPostgap.DefaultValue = ((string)("true"));
                this.columnSize.Namespace = "";
                this.columnSize.DefaultValue = ((string)("74"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutputRow NewOutputRow() {
                return ((OutputRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OutputRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(OutputRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OutputRowChanged != null)) {
                    this.OutputRowChanged(this, new OutputRowChangeEvent(((OutputRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OutputRowChanging != null)) {
                    this.OutputRowChanging(this, new OutputRowChangeEvent(((OutputRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OutputRowDeleted != null)) {
                    this.OutputRowDeleted(this, new OutputRowChangeEvent(((OutputRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OutputRowDeleting != null)) {
                    this.OutputRowDeleting(this, new OutputRowChangeEvent(((OutputRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOutputRow(OutputRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ImageOrder ds = new ImageOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OutputDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RulesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCheckNames;
            
            private System.Data.DataColumn columnAllowDirExt;
            
            private System.Data.DataColumn columnCheckLevels;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RulesDataTable() {
                this.TableName = "Rules";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RulesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RulesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CheckNamesColumn {
                get {
                    return this.columnCheckNames;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AllowDirExtColumn {
                get {
                    return this.columnAllowDirExt;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CheckLevelsColumn {
                get {
                    return this.columnCheckLevels;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RulesRow this[int index] {
                get {
                    return ((RulesRow)(this.Rows[index]));
                }
            }
            
            public event RulesRowChangeEventHandler RulesRowChanging;
            
            public event RulesRowChangeEventHandler RulesRowChanged;
            
            public event RulesRowChangeEventHandler RulesRowDeleting;
            
            public event RulesRowChangeEventHandler RulesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRulesRow(RulesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RulesRow AddRulesRow(string CheckNames, string AllowDirExt, string CheckLevels) {
                RulesRow rowRulesRow = ((RulesRow)(this.NewRow()));
                rowRulesRow.ItemArray = new object[] {
                        CheckNames,
                        AllowDirExt,
                        CheckLevels};
                this.Rows.Add(rowRulesRow);
                return rowRulesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RulesDataTable cln = ((RulesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RulesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCheckNames = base.Columns["CheckNames"];
                this.columnAllowDirExt = base.Columns["AllowDirExt"];
                this.columnCheckLevels = base.Columns["CheckLevels"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCheckNames = new System.Data.DataColumn("CheckNames", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCheckNames);
                this.columnAllowDirExt = new System.Data.DataColumn("AllowDirExt", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAllowDirExt);
                this.columnCheckLevels = new System.Data.DataColumn("CheckLevels", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCheckLevels);
                this.columnCheckNames.Namespace = "";
                this.columnCheckNames.DefaultValue = ((string)("true"));
                this.columnAllowDirExt.Namespace = "";
                this.columnAllowDirExt.DefaultValue = ((string)("false"));
                this.columnCheckLevels.Namespace = "";
                this.columnCheckLevels.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RulesRow NewRulesRow() {
                return ((RulesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RulesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RulesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RulesRowChanged != null)) {
                    this.RulesRowChanged(this, new RulesRowChangeEvent(((RulesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RulesRowChanging != null)) {
                    this.RulesRowChanging(this, new RulesRowChangeEvent(((RulesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RulesRowDeleted != null)) {
                    this.RulesRowDeleted(this, new RulesRowChangeEvent(((RulesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RulesRowDeleting != null)) {
                    this.RulesRowDeleting(this, new RulesRowChangeEvent(((RulesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRulesRow(RulesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ImageOrder ds = new ImageOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RulesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class VolumeNameDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnVolName;
            
            private System.Data.DataColumn columnMacVolName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VolumeNameDataTable() {
                this.TableName = "VolumeName";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VolumeNameDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected VolumeNameDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VolNameColumn {
                get {
                    return this.columnVolName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MacVolNameColumn {
                get {
                    return this.columnMacVolName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VolumeNameRow this[int index] {
                get {
                    return ((VolumeNameRow)(this.Rows[index]));
                }
            }
            
            public event VolumeNameRowChangeEventHandler VolumeNameRowChanging;
            
            public event VolumeNameRowChangeEventHandler VolumeNameRowChanged;
            
            public event VolumeNameRowChangeEventHandler VolumeNameRowDeleting;
            
            public event VolumeNameRowChangeEventHandler VolumeNameRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddVolumeNameRow(VolumeNameRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VolumeNameRow AddVolumeNameRow(string VolName, string MacVolName) {
                VolumeNameRow rowVolumeNameRow = ((VolumeNameRow)(this.NewRow()));
                rowVolumeNameRow.ItemArray = new object[] {
                        VolName,
                        MacVolName};
                this.Rows.Add(rowVolumeNameRow);
                return rowVolumeNameRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                VolumeNameDataTable cln = ((VolumeNameDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new VolumeNameDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnVolName = base.Columns["VolName"];
                this.columnMacVolName = base.Columns["MacVolName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnVolName = new System.Data.DataColumn("VolName", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnVolName);
                this.columnMacVolName = new System.Data.DataColumn("MacVolName", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMacVolName);
                this.columnVolName.Namespace = "";
                this.columnVolName.DefaultValue = ((string)("No Label"));
                this.columnMacVolName.Namespace = "";
                this.columnMacVolName.DefaultValue = ((string)(""));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VolumeNameRow NewVolumeNameRow() {
                return ((VolumeNameRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new VolumeNameRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(VolumeNameRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VolumeNameRowChanged != null)) {
                    this.VolumeNameRowChanged(this, new VolumeNameRowChangeEvent(((VolumeNameRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VolumeNameRowChanging != null)) {
                    this.VolumeNameRowChanging(this, new VolumeNameRowChangeEvent(((VolumeNameRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VolumeNameRowDeleted != null)) {
                    this.VolumeNameRowDeleted(this, new VolumeNameRowChangeEvent(((VolumeNameRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VolumeNameRowDeleting != null)) {
                    this.VolumeNameRowDeleting(this, new VolumeNameRowChangeEvent(((VolumeNameRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveVolumeNameRow(VolumeNameRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ImageOrder ds = new ImageOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VolumeNameDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PVDInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnPVDSystem;
            
            private System.Data.DataColumn columnPVDVolumeSet;
            
            private System.Data.DataColumn columnPVDCopyright;
            
            private System.Data.DataColumn columnPVDPublisher;
            
            private System.Data.DataColumn columnPVDPreparer;
            
            private System.Data.DataColumn columnPVDApplication;
            
            private System.Data.DataColumn columnPVDAbstract;
            
            private System.Data.DataColumn columnPVDBibliography;
            
            private System.Data.DataColumn columnPVDExpirationDate;
            
            private System.Data.DataColumn columnPVDEffectiveDate;
            
            private System.Data.DataColumn columnGMTOffset;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PVDInfoDataTable() {
                this.TableName = "PVDInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PVDInfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PVDInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PVDSystemColumn {
                get {
                    return this.columnPVDSystem;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PVDVolumeSetColumn {
                get {
                    return this.columnPVDVolumeSet;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PVDCopyrightColumn {
                get {
                    return this.columnPVDCopyright;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PVDPublisherColumn {
                get {
                    return this.columnPVDPublisher;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PVDPreparerColumn {
                get {
                    return this.columnPVDPreparer;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PVDApplicationColumn {
                get {
                    return this.columnPVDApplication;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PVDAbstractColumn {
                get {
                    return this.columnPVDAbstract;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PVDBibliographyColumn {
                get {
                    return this.columnPVDBibliography;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PVDExpirationDateColumn {
                get {
                    return this.columnPVDExpirationDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PVDEffectiveDateColumn {
                get {
                    return this.columnPVDEffectiveDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GMTOffsetColumn {
                get {
                    return this.columnGMTOffset;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PVDInfoRow this[int index] {
                get {
                    return ((PVDInfoRow)(this.Rows[index]));
                }
            }
            
            public event PVDInfoRowChangeEventHandler PVDInfoRowChanging;
            
            public event PVDInfoRowChangeEventHandler PVDInfoRowChanged;
            
            public event PVDInfoRowChangeEventHandler PVDInfoRowDeleting;
            
            public event PVDInfoRowChangeEventHandler PVDInfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPVDInfoRow(PVDInfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PVDInfoRow AddPVDInfoRow(string PVDSystem, string PVDVolumeSet, string PVDCopyright, string PVDPublisher, string PVDPreparer, string PVDApplication, string PVDAbstract, string PVDBibliography, string PVDExpirationDate, string PVDEffectiveDate, string GMTOffset) {
                PVDInfoRow rowPVDInfoRow = ((PVDInfoRow)(this.NewRow()));
                rowPVDInfoRow.ItemArray = new object[] {
                        PVDSystem,
                        PVDVolumeSet,
                        PVDCopyright,
                        PVDPublisher,
                        PVDPreparer,
                        PVDApplication,
                        PVDAbstract,
                        PVDBibliography,
                        PVDExpirationDate,
                        PVDEffectiveDate,
                        GMTOffset};
                this.Rows.Add(rowPVDInfoRow);
                return rowPVDInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PVDInfoDataTable cln = ((PVDInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PVDInfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPVDSystem = base.Columns["PVDSystem"];
                this.columnPVDVolumeSet = base.Columns["PVDVolumeSet"];
                this.columnPVDCopyright = base.Columns["PVDCopyright"];
                this.columnPVDPublisher = base.Columns["PVDPublisher"];
                this.columnPVDPreparer = base.Columns["PVDPreparer"];
                this.columnPVDApplication = base.Columns["PVDApplication"];
                this.columnPVDAbstract = base.Columns["PVDAbstract"];
                this.columnPVDBibliography = base.Columns["PVDBibliography"];
                this.columnPVDExpirationDate = base.Columns["PVDExpirationDate"];
                this.columnPVDEffectiveDate = base.Columns["PVDEffectiveDate"];
                this.columnGMTOffset = base.Columns["GMTOffset"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPVDSystem = new System.Data.DataColumn("PVDSystem", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPVDSystem);
                this.columnPVDVolumeSet = new System.Data.DataColumn("PVDVolumeSet", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPVDVolumeSet);
                this.columnPVDCopyright = new System.Data.DataColumn("PVDCopyright", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPVDCopyright);
                this.columnPVDPublisher = new System.Data.DataColumn("PVDPublisher", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPVDPublisher);
                this.columnPVDPreparer = new System.Data.DataColumn("PVDPreparer", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPVDPreparer);
                this.columnPVDApplication = new System.Data.DataColumn("PVDApplication", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPVDApplication);
                this.columnPVDAbstract = new System.Data.DataColumn("PVDAbstract", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPVDAbstract);
                this.columnPVDBibliography = new System.Data.DataColumn("PVDBibliography", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPVDBibliography);
                this.columnPVDExpirationDate = new System.Data.DataColumn("PVDExpirationDate", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPVDExpirationDate);
                this.columnPVDEffectiveDate = new System.Data.DataColumn("PVDEffectiveDate", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPVDEffectiveDate);
                this.columnGMTOffset = new System.Data.DataColumn("GMTOffset", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnGMTOffset);
                this.columnPVDSystem.Namespace = "";
                this.columnPVDVolumeSet.Namespace = "";
                this.columnPVDCopyright.Namespace = "";
                this.columnPVDPublisher.Namespace = "";
                this.columnPVDPreparer.Namespace = "";
                this.columnPVDApplication.Namespace = "";
                this.columnPVDAbstract.Namespace = "";
                this.columnPVDBibliography.Namespace = "";
                this.columnPVDExpirationDate.Namespace = "";
                this.columnPVDEffectiveDate.Namespace = "";
                this.columnGMTOffset.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PVDInfoRow NewPVDInfoRow() {
                return ((PVDInfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PVDInfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PVDInfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PVDInfoRowChanged != null)) {
                    this.PVDInfoRowChanged(this, new PVDInfoRowChangeEvent(((PVDInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PVDInfoRowChanging != null)) {
                    this.PVDInfoRowChanging(this, new PVDInfoRowChangeEvent(((PVDInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PVDInfoRowDeleted != null)) {
                    this.PVDInfoRowDeleted(this, new PVDInfoRowChangeEvent(((PVDInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PVDInfoRowDeleting != null)) {
                    this.PVDInfoRowDeleting(this, new PVDInfoRowChangeEvent(((PVDInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePVDInfoRow(PVDInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ImageOrder ds = new ImageOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PVDInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ControlsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnOverwrite;
            
            private System.Data.DataColumn columnWaitForSpace;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControlsDataTable() {
                this.TableName = "Controls";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ControlsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ControlsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OverwriteColumn {
                get {
                    return this.columnOverwrite;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WaitForSpaceColumn {
                get {
                    return this.columnWaitForSpace;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControlsRow this[int index] {
                get {
                    return ((ControlsRow)(this.Rows[index]));
                }
            }
            
            public event ControlsRowChangeEventHandler ControlsRowChanging;
            
            public event ControlsRowChangeEventHandler ControlsRowChanged;
            
            public event ControlsRowChangeEventHandler ControlsRowDeleting;
            
            public event ControlsRowChangeEventHandler ControlsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddControlsRow(ControlsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControlsRow AddControlsRow(string Overwrite, string WaitForSpace) {
                ControlsRow rowControlsRow = ((ControlsRow)(this.NewRow()));
                rowControlsRow.ItemArray = new object[] {
                        Overwrite,
                        WaitForSpace};
                this.Rows.Add(rowControlsRow);
                return rowControlsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ControlsDataTable cln = ((ControlsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ControlsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOverwrite = base.Columns["Overwrite"];
                this.columnWaitForSpace = base.Columns["WaitForSpace"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOverwrite = new System.Data.DataColumn("Overwrite", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOverwrite);
                this.columnWaitForSpace = new System.Data.DataColumn("WaitForSpace", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnWaitForSpace);
                this.columnOverwrite.Namespace = "";
                this.columnOverwrite.DefaultValue = ((string)("true"));
                this.columnWaitForSpace.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControlsRow NewControlsRow() {
                return ((ControlsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ControlsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ControlsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ControlsRowChanged != null)) {
                    this.ControlsRowChanged(this, new ControlsRowChangeEvent(((ControlsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ControlsRowChanging != null)) {
                    this.ControlsRowChanging(this, new ControlsRowChangeEvent(((ControlsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ControlsRowDeleted != null)) {
                    this.ControlsRowDeleted(this, new ControlsRowChangeEvent(((ControlsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ControlsRowDeleting != null)) {
                    this.ControlsRowDeleting(this, new ControlsRowChangeEvent(((ControlsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveControlsRow(ControlsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ImageOrder ds = new ImageOrder();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ControlsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TargetRow : System.Data.DataRow {
            
            private TargetDataTable tableTarget;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TargetRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTarget = ((TargetDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cluster {
                get {
                    try {
                        return ((string)(this[this.tableTarget.ClusterColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Cluster\' in table \'Target\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTarget.ClusterColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Server {
                get {
                    try {
                        return ((string)(this[this.tableTarget.ServerColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Server\' in table \'Target\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTarget.ServerColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClusterNull() {
                return this.IsNull(this.tableTarget.ClusterColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClusterNull() {
                this[this.tableTarget.ClusterColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServerNull() {
                return this.IsNull(this.tableTarget.ServerColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServerNull() {
                this[this.tableTarget.ServerColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FormatRow : System.Data.DataRow {
            
            private FormatDataTable tableFormat;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FormatRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFormat = ((FormatDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Format_Id {
                get {
                    return ((int)(this[this.tableFormat.Format_IdColumn]));
                }
                set {
                    this[this.tableFormat.Format_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDFFormatRow[] GetUDFFormatRows() {
                return ((UDFFormatRow[])(base.GetChildRows(this.Table.ChildRelations["Format_UDFFormat"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PCMACFormatRow[] GetPCMACFormatRows() {
                return ((PCMACFormatRow[])(base.GetChildRows(this.Table.ChildRelations["Format_PCMACFormat"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormatOptionsRow[] GetFormatOptionsRows() {
                return ((FormatOptionsRow[])(base.GetChildRows(this.Table.ChildRelations["Format_FormatOptions"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UDFFormatRow : System.Data.DataRow {
            
            private UDFFormatDataTable tableUDFFormat;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UDFFormatRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUDFFormat = ((UDFFormatDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UDF {
                get {
                    try {
                        return ((string)(this[this.tableUDFFormat.UDFColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UDF\' in table \'UDFFormat\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUDFFormat.UDFColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Format_Id {
                get {
                    try {
                        return ((int)(this[this.tableUDFFormat.Format_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Format_Id\' in table \'UDFFormat\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUDFFormat.Format_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormatRow FormatRow {
                get {
                    return ((FormatRow)(this.GetParentRow(this.Table.ParentRelations["Format_UDFFormat"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Format_UDFFormat"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUDFNull() {
                return this.IsNull(this.tableUDFFormat.UDFColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUDFNull() {
                this[this.tableUDFFormat.UDFColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormat_IdNull() {
                return this.IsNull(this.tableUDFFormat.Format_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormat_IdNull() {
                this[this.tableUDFFormat.Format_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PCMACFormatRow : System.Data.DataRow {
            
            private PCMACFormatDataTable tablePCMACFormat;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PCMACFormatRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePCMACFormat = ((PCMACFormatDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ISO {
                get {
                    try {
                        return ((string)(this[this.tablePCMACFormat.ISOColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ISO\' in table \'PCMACFormat\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePCMACFormat.ISOColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VCDSlides {
                get {
                    try {
                        return ((string)(this[this.tablePCMACFormat.VCDSlidesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'VCDSlides\' in table \'PCMACFormat\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePCMACFormat.VCDSlidesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Apple {
                get {
                    try {
                        return ((string)(this[this.tablePCMACFormat.AppleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Apple\' in table \'PCMACFormat\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePCMACFormat.AppleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Joliet {
                get {
                    try {
                        return ((string)(this[this.tablePCMACFormat.JolietColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Joliet\' in table \'PCMACFormat\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePCMACFormat.JolietColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Rockridge {
                get {
                    try {
                        return ((string)(this[this.tablePCMACFormat.RockridgeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Rockridge\' in table \'PCMACFormat\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePCMACFormat.RockridgeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Format_Id {
                get {
                    try {
                        return ((int)(this[this.tablePCMACFormat.Format_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Format_Id\' in table \'PCMACFormat\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePCMACFormat.Format_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormatRow FormatRow {
                get {
                    return ((FormatRow)(this.GetParentRow(this.Table.ParentRelations["Format_PCMACFormat"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Format_PCMACFormat"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsISONull() {
                return this.IsNull(this.tablePCMACFormat.ISOColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetISONull() {
                this[this.tablePCMACFormat.ISOColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVCDSlidesNull() {
                return this.IsNull(this.tablePCMACFormat.VCDSlidesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVCDSlidesNull() {
                this[this.tablePCMACFormat.VCDSlidesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAppleNull() {
                return this.IsNull(this.tablePCMACFormat.AppleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAppleNull() {
                this[this.tablePCMACFormat.AppleColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJolietNull() {
                return this.IsNull(this.tablePCMACFormat.JolietColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJolietNull() {
                this[this.tablePCMACFormat.JolietColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRockridgeNull() {
                return this.IsNull(this.tablePCMACFormat.RockridgeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRockridgeNull() {
                this[this.tablePCMACFormat.RockridgeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormat_IdNull() {
                return this.IsNull(this.tablePCMACFormat.Format_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormat_IdNull() {
                this[this.tablePCMACFormat.Format_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FormatOptionsRow : System.Data.DataRow {
            
            private FormatOptionsDataTable tableFormatOptions;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FormatOptionsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFormatOptions = ((FormatOptionsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ForceUpperCase {
                get {
                    try {
                        return ((string)(this[this.tableFormatOptions.ForceUpperCaseColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ForceUpperCase\' in table \'FormatOptions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormatOptions.ForceUpperCaseColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AllowMultipleFilePaths {
                get {
                    try {
                        return ((string)(this[this.tableFormatOptions.AllowMultipleFilePathsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AllowMultipleFilePaths\' in table \'FormatOptions\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableFormatOptions.AllowMultipleFilePathsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ForceDot {
                get {
                    try {
                        return ((string)(this[this.tableFormatOptions.ForceDotColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ForceDot\' in table \'FormatOptions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormatOptions.ForceDotColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ForceShort {
                get {
                    try {
                        return ((string)(this[this.tableFormatOptions.ForceShortColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ForceShort\' in table \'FormatOptions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormatOptions.ForceShortColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Versions {
                get {
                    try {
                        return ((string)(this[this.tableFormatOptions.VersionsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Versions\' in table \'FormatOptions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormatOptions.VersionsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IgnoreBadFiles {
                get {
                    try {
                        return ((string)(this[this.tableFormatOptions.IgnoreBadFilesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IgnoreBadFiles\' in table \'FormatOptions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormatOptions.IgnoreBadFilesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CaseSensitive {
                get {
                    try {
                        return ((string)(this[this.tableFormatOptions.CaseSensitiveColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CaseSensitive\' in table \'FormatOptions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormatOptions.CaseSensitiveColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zip {
                get {
                    try {
                        return ((string)(this[this.tableFormatOptions.ZipColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Zip\' in table \'FormatOptions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormatOptions.ZipColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AllowBootableCD {
                get {
                    try {
                        return ((string)(this[this.tableFormatOptions.AllowBootableCDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AllowBootableCD\' in table \'FormatOptions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormatOptions.AllowBootableCDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Format_Id {
                get {
                    try {
                        return ((int)(this[this.tableFormatOptions.Format_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Format_Id\' in table \'FormatOptions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormatOptions.Format_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormatRow FormatRow {
                get {
                    return ((FormatRow)(this.GetParentRow(this.Table.ParentRelations["Format_FormatOptions"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Format_FormatOptions"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsForceUpperCaseNull() {
                return this.IsNull(this.tableFormatOptions.ForceUpperCaseColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetForceUpperCaseNull() {
                this[this.tableFormatOptions.ForceUpperCaseColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAllowMultipleFilePathsNull() {
                return this.IsNull(this.tableFormatOptions.AllowMultipleFilePathsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAllowMultipleFilePathsNull() {
                this[this.tableFormatOptions.AllowMultipleFilePathsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsForceDotNull() {
                return this.IsNull(this.tableFormatOptions.ForceDotColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetForceDotNull() {
                this[this.tableFormatOptions.ForceDotColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsForceShortNull() {
                return this.IsNull(this.tableFormatOptions.ForceShortColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetForceShortNull() {
                this[this.tableFormatOptions.ForceShortColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVersionsNull() {
                return this.IsNull(this.tableFormatOptions.VersionsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVersionsNull() {
                this[this.tableFormatOptions.VersionsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIgnoreBadFilesNull() {
                return this.IsNull(this.tableFormatOptions.IgnoreBadFilesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIgnoreBadFilesNull() {
                this[this.tableFormatOptions.IgnoreBadFilesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCaseSensitiveNull() {
                return this.IsNull(this.tableFormatOptions.CaseSensitiveColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCaseSensitiveNull() {
                this[this.tableFormatOptions.CaseSensitiveColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZipNull() {
                return this.IsNull(this.tableFormatOptions.ZipColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZipNull() {
                this[this.tableFormatOptions.ZipColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAllowBootableCDNull() {
                return this.IsNull(this.tableFormatOptions.AllowBootableCDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAllowBootableCDNull() {
                this[this.tableFormatOptions.AllowBootableCDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormat_IdNull() {
                return this.IsNull(this.tableFormatOptions.Format_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormat_IdNull() {
                this[this.tableFormatOptions.Format_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SourceRow : System.Data.DataRow {
            
            private SourceDataTable tableSource;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SourceRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSource = ((SourceDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Source_Id {
                get {
                    return ((int)(this[this.tableSource.Source_IdColumn]));
                }
                set {
                    this[this.tableSource.Source_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParentFolderRow[] GetParentFolderRows() {
                return ((ParentFolderRow[])(base.GetChildRows(this.Table.ChildRelations["Source_ParentFolder"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EditListRow[] GetEditListRows() {
                return ((EditListRow[])(base.GetChildRows(this.Table.ChildRelations["Source_EditList"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ParentFolderRow : System.Data.DataRow {
            
            private ParentFolderDataTable tableParentFolder;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ParentFolderRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableParentFolder = ((ParentFolderDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParentFolderPath {
                get {
                    return ((string)(this[this.tableParentFolder.ParentFolderPathColumn]));
                }
                set {
                    this[this.tableParentFolder.ParentFolderPathColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Destination {
                get {
                    try {
                        return ((string)(this[this.tableParentFolder.DestinationColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Destination\' in table \'ParentFolder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParentFolder.DestinationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DirTimeStamp {
                get {
                    try {
                        return ((string)(this[this.tableParentFolder.DirTimeStampColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DirTimeStamp\' in table \'ParentFolder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParentFolder.DirTimeStampColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Source_Id {
                get {
                    try {
                        return ((int)(this[this.tableParentFolder.Source_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Source_Id\' in table \'ParentFolder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableParentFolder.Source_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SourceRow SourceRow {
                get {
                    return ((SourceRow)(this.GetParentRow(this.Table.ParentRelations["Source_ParentFolder"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Source_ParentFolder"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestinationNull() {
                return this.IsNull(this.tableParentFolder.DestinationColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestinationNull() {
                this[this.tableParentFolder.DestinationColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDirTimeStampNull() {
                return this.IsNull(this.tableParentFolder.DirTimeStampColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDirTimeStampNull() {
                this[this.tableParentFolder.DirTimeStampColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSource_IdNull() {
                return this.IsNull(this.tableParentFolder.Source_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSource_IdNull() {
                this[this.tableParentFolder.Source_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EditListRow : System.Data.DataRow {
            
            private EditListDataTable tableEditList;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EditListRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEditList = ((EditListDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EditListPath {
                get {
                    return ((string)(this[this.tableEditList.EditListPathColumn]));
                }
                set {
                    this[this.tableEditList.EditListPathColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Destination {
                get {
                    try {
                        return ((string)(this[this.tableEditList.DestinationColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Destination\' in table \'EditList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEditList.DestinationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DirTimeStamp {
                get {
                    try {
                        return ((string)(this[this.tableEditList.DirTimeStampColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DirTimeStamp\' in table \'EditList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEditList.DirTimeStampColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Source_Id {
                get {
                    try {
                        return ((int)(this[this.tableEditList.Source_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Source_Id\' in table \'EditList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEditList.Source_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SourceRow SourceRow {
                get {
                    return ((SourceRow)(this.GetParentRow(this.Table.ParentRelations["Source_EditList"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Source_EditList"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestinationNull() {
                return this.IsNull(this.tableEditList.DestinationColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestinationNull() {
                this[this.tableEditList.DestinationColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDirTimeStampNull() {
                return this.IsNull(this.tableEditList.DirTimeStampColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDirTimeStampNull() {
                this[this.tableEditList.DirTimeStampColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSource_IdNull() {
                return this.IsNull(this.tableEditList.Source_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSource_IdNull() {
                this[this.tableEditList.Source_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OutputRow : System.Data.DataRow {
            
            private OutputDataTable tableOutput;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OutputRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOutput = ((OutputDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImageFile {
                get {
                    return ((string)(this[this.tableOutput.ImageFileColumn]));
                }
                set {
                    this[this.tableOutput.ImageFileColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableOutput.TypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Type\' in table \'Output\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutput.TypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CDXA {
                get {
                    try {
                        return ((string)(this[this.tableOutput.CDXAColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CDXA\' in table \'Output\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutput.CDXAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Postgap {
                get {
                    try {
                        return ((string)(this[this.tableOutput.PostgapColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Postgap\' in table \'Output\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutput.PostgapColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size {
                get {
                    try {
                        return ((string)(this[this.tableOutput.SizeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Size\' in table \'Output\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutput.SizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableOutput.TypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableOutput.TypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCDXANull() {
                return this.IsNull(this.tableOutput.CDXAColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCDXANull() {
                this[this.tableOutput.CDXAColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostgapNull() {
                return this.IsNull(this.tableOutput.PostgapColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostgapNull() {
                this[this.tableOutput.PostgapColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSizeNull() {
                return this.IsNull(this.tableOutput.SizeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSizeNull() {
                this[this.tableOutput.SizeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RulesRow : System.Data.DataRow {
            
            private RulesDataTable tableRules;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RulesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRules = ((RulesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CheckNames {
                get {
                    try {
                        return ((string)(this[this.tableRules.CheckNamesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CheckNames\' in table \'Rules\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRules.CheckNamesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AllowDirExt {
                get {
                    try {
                        return ((string)(this[this.tableRules.AllowDirExtColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AllowDirExt\' in table \'Rules\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRules.AllowDirExtColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CheckLevels {
                get {
                    try {
                        return ((string)(this[this.tableRules.CheckLevelsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CheckLevels\' in table \'Rules\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRules.CheckLevelsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckNamesNull() {
                return this.IsNull(this.tableRules.CheckNamesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckNamesNull() {
                this[this.tableRules.CheckNamesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAllowDirExtNull() {
                return this.IsNull(this.tableRules.AllowDirExtColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAllowDirExtNull() {
                this[this.tableRules.AllowDirExtColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckLevelsNull() {
                return this.IsNull(this.tableRules.CheckLevelsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckLevelsNull() {
                this[this.tableRules.CheckLevelsColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class VolumeNameRow : System.Data.DataRow {
            
            private VolumeNameDataTable tableVolumeName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VolumeNameRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVolumeName = ((VolumeNameDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VolName {
                get {
                    try {
                        return ((string)(this[this.tableVolumeName.VolNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'VolName\' in table \'VolumeName\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVolumeName.VolNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MacVolName {
                get {
                    try {
                        return ((string)(this[this.tableVolumeName.MacVolNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MacVolName\' in table \'VolumeName\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVolumeName.MacVolNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVolNameNull() {
                return this.IsNull(this.tableVolumeName.VolNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVolNameNull() {
                this[this.tableVolumeName.VolNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMacVolNameNull() {
                return this.IsNull(this.tableVolumeName.MacVolNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMacVolNameNull() {
                this[this.tableVolumeName.MacVolNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PVDInfoRow : System.Data.DataRow {
            
            private PVDInfoDataTable tablePVDInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PVDInfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePVDInfo = ((PVDInfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PVDSystem {
                get {
                    try {
                        return ((string)(this[this.tablePVDInfo.PVDSystemColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PVDSystem\' in table \'PVDInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePVDInfo.PVDSystemColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PVDVolumeSet {
                get {
                    try {
                        return ((string)(this[this.tablePVDInfo.PVDVolumeSetColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PVDVolumeSet\' in table \'PVDInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePVDInfo.PVDVolumeSetColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PVDCopyright {
                get {
                    try {
                        return ((string)(this[this.tablePVDInfo.PVDCopyrightColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PVDCopyright\' in table \'PVDInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePVDInfo.PVDCopyrightColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PVDPublisher {
                get {
                    try {
                        return ((string)(this[this.tablePVDInfo.PVDPublisherColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PVDPublisher\' in table \'PVDInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePVDInfo.PVDPublisherColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PVDPreparer {
                get {
                    try {
                        return ((string)(this[this.tablePVDInfo.PVDPreparerColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PVDPreparer\' in table \'PVDInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePVDInfo.PVDPreparerColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PVDApplication {
                get {
                    try {
                        return ((string)(this[this.tablePVDInfo.PVDApplicationColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PVDApplication\' in table \'PVDInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePVDInfo.PVDApplicationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PVDAbstract {
                get {
                    try {
                        return ((string)(this[this.tablePVDInfo.PVDAbstractColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PVDAbstract\' in table \'PVDInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePVDInfo.PVDAbstractColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PVDBibliography {
                get {
                    try {
                        return ((string)(this[this.tablePVDInfo.PVDBibliographyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PVDBibliography\' in table \'PVDInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePVDInfo.PVDBibliographyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PVDExpirationDate {
                get {
                    try {
                        return ((string)(this[this.tablePVDInfo.PVDExpirationDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PVDExpirationDate\' in table \'PVDInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePVDInfo.PVDExpirationDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PVDEffectiveDate {
                get {
                    try {
                        return ((string)(this[this.tablePVDInfo.PVDEffectiveDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PVDEffectiveDate\' in table \'PVDInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePVDInfo.PVDEffectiveDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GMTOffset {
                get {
                    try {
                        return ((string)(this[this.tablePVDInfo.GMTOffsetColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'GMTOffset\' in table \'PVDInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePVDInfo.GMTOffsetColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPVDSystemNull() {
                return this.IsNull(this.tablePVDInfo.PVDSystemColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPVDSystemNull() {
                this[this.tablePVDInfo.PVDSystemColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPVDVolumeSetNull() {
                return this.IsNull(this.tablePVDInfo.PVDVolumeSetColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPVDVolumeSetNull() {
                this[this.tablePVDInfo.PVDVolumeSetColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPVDCopyrightNull() {
                return this.IsNull(this.tablePVDInfo.PVDCopyrightColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPVDCopyrightNull() {
                this[this.tablePVDInfo.PVDCopyrightColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPVDPublisherNull() {
                return this.IsNull(this.tablePVDInfo.PVDPublisherColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPVDPublisherNull() {
                this[this.tablePVDInfo.PVDPublisherColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPVDPreparerNull() {
                return this.IsNull(this.tablePVDInfo.PVDPreparerColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPVDPreparerNull() {
                this[this.tablePVDInfo.PVDPreparerColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPVDApplicationNull() {
                return this.IsNull(this.tablePVDInfo.PVDApplicationColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPVDApplicationNull() {
                this[this.tablePVDInfo.PVDApplicationColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPVDAbstractNull() {
                return this.IsNull(this.tablePVDInfo.PVDAbstractColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPVDAbstractNull() {
                this[this.tablePVDInfo.PVDAbstractColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPVDBibliographyNull() {
                return this.IsNull(this.tablePVDInfo.PVDBibliographyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPVDBibliographyNull() {
                this[this.tablePVDInfo.PVDBibliographyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPVDExpirationDateNull() {
                return this.IsNull(this.tablePVDInfo.PVDExpirationDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPVDExpirationDateNull() {
                this[this.tablePVDInfo.PVDExpirationDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPVDEffectiveDateNull() {
                return this.IsNull(this.tablePVDInfo.PVDEffectiveDateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPVDEffectiveDateNull() {
                this[this.tablePVDInfo.PVDEffectiveDateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGMTOffsetNull() {
                return this.IsNull(this.tablePVDInfo.GMTOffsetColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGMTOffsetNull() {
                this[this.tablePVDInfo.GMTOffsetColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ControlsRow : System.Data.DataRow {
            
            private ControlsDataTable tableControls;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ControlsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableControls = ((ControlsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Overwrite {
                get {
                    try {
                        return ((string)(this[this.tableControls.OverwriteColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Overwrite\' in table \'Controls\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableControls.OverwriteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WaitForSpace {
                get {
                    try {
                        return ((string)(this[this.tableControls.WaitForSpaceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'WaitForSpace\' in table \'Controls\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableControls.WaitForSpaceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOverwriteNull() {
                return this.IsNull(this.tableControls.OverwriteColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOverwriteNull() {
                this[this.tableControls.OverwriteColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWaitForSpaceNull() {
                return this.IsNull(this.tableControls.WaitForSpaceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWaitForSpaceNull() {
                this[this.tableControls.WaitForSpaceColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TargetRowChangeEvent : System.EventArgs {
            
            private TargetRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TargetRowChangeEvent(TargetRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TargetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FormatRowChangeEvent : System.EventArgs {
            
            private FormatRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormatRowChangeEvent(FormatRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormatRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UDFFormatRowChangeEvent : System.EventArgs {
            
            private UDFFormatRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDFFormatRowChangeEvent(UDFFormatRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDFFormatRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PCMACFormatRowChangeEvent : System.EventArgs {
            
            private PCMACFormatRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PCMACFormatRowChangeEvent(PCMACFormatRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PCMACFormatRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FormatOptionsRowChangeEvent : System.EventArgs {
            
            private FormatOptionsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormatOptionsRowChangeEvent(FormatOptionsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormatOptionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SourceRowChangeEvent : System.EventArgs {
            
            private SourceRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SourceRowChangeEvent(SourceRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SourceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ParentFolderRowChangeEvent : System.EventArgs {
            
            private ParentFolderRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParentFolderRowChangeEvent(ParentFolderRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ParentFolderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EditListRowChangeEvent : System.EventArgs {
            
            private EditListRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EditListRowChangeEvent(EditListRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EditListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OutputRowChangeEvent : System.EventArgs {
            
            private OutputRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutputRowChangeEvent(OutputRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutputRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RulesRowChangeEvent : System.EventArgs {
            
            private RulesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RulesRowChangeEvent(RulesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RulesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class VolumeNameRowChangeEvent : System.EventArgs {
            
            private VolumeNameRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VolumeNameRowChangeEvent(VolumeNameRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VolumeNameRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PVDInfoRowChangeEvent : System.EventArgs {
            
            private PVDInfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PVDInfoRowChangeEvent(PVDInfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PVDInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ControlsRowChangeEvent : System.EventArgs {
            
            private ControlsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControlsRowChangeEvent(ControlsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ControlsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591