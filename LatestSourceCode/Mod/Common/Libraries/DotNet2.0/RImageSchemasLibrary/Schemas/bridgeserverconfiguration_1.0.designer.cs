//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace RImageSchemas.Schemas {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("BridgeServerConfiguration")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class BridgeServerConfiguration : System.Data.DataSet {
        
        private ServerInfoDataTable tableServerInfo;
        
        private ImagerInfoDataTable tableImagerInfo;
        
        private ProducerInfoDataTable tableProducerInfo;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BridgeServerConfiguration() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected BridgeServerConfiguration(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ServerInfo"] != null)) {
                    base.Tables.Add(new ServerInfoDataTable(ds.Tables["ServerInfo"]));
                }
                if ((ds.Tables["ImagerInfo"] != null)) {
                    base.Tables.Add(new ImagerInfoDataTable(ds.Tables["ImagerInfo"]));
                }
                if ((ds.Tables["ProducerInfo"] != null)) {
                    base.Tables.Add(new ProducerInfoDataTable(ds.Tables["ProducerInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerInfoDataTable ServerInfo {
            get {
                return this.tableServerInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ImagerInfoDataTable ImagerInfo {
            get {
                return this.tableImagerInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProducerInfoDataTable ProducerInfo {
            get {
                return this.tableProducerInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            BridgeServerConfiguration cln = ((BridgeServerConfiguration)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ServerInfo"] != null)) {
                    base.Tables.Add(new ServerInfoDataTable(ds.Tables["ServerInfo"]));
                }
                if ((ds.Tables["ImagerInfo"] != null)) {
                    base.Tables.Add(new ImagerInfoDataTable(ds.Tables["ImagerInfo"]));
                }
                if ((ds.Tables["ProducerInfo"] != null)) {
                    base.Tables.Add(new ProducerInfoDataTable(ds.Tables["ProducerInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableServerInfo = ((ServerInfoDataTable)(base.Tables["ServerInfo"]));
            if ((initTable == true)) {
                if ((this.tableServerInfo != null)) {
                    this.tableServerInfo.InitVars();
                }
            }
            this.tableImagerInfo = ((ImagerInfoDataTable)(base.Tables["ImagerInfo"]));
            if ((initTable == true)) {
                if ((this.tableImagerInfo != null)) {
                    this.tableImagerInfo.InitVars();
                }
            }
            this.tableProducerInfo = ((ProducerInfoDataTable)(base.Tables["ProducerInfo"]));
            if ((initTable == true)) {
                if ((this.tableProducerInfo != null)) {
                    this.tableProducerInfo.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "BridgeServerConfiguration";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableServerInfo = new ServerInfoDataTable();
            base.Tables.Add(this.tableServerInfo);
            this.tableImagerInfo = new ImagerInfoDataTable();
            base.Tables.Add(this.tableImagerInfo);
            this.tableProducerInfo = new ProducerInfoDataTable();
            base.Tables.Add(this.tableProducerInfo);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServerInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeImagerInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProducerInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            BridgeServerConfiguration ds = new BridgeServerConfiguration();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void ServerInfoRowChangeEventHandler(object sender, ServerInfoRowChangeEvent e);
        
        public delegate void ImagerInfoRowChangeEventHandler(object sender, ImagerInfoRowChangeEvent e);
        
        public delegate void ProducerInfoRowChangeEventHandler(object sender, ProducerInfoRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServerInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnSoftwareVersion;
            
            private System.Data.DataColumn columnDescription;
            
            private System.Data.DataColumn columnHostname;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerInfoDataTable() {
                this.TableName = "ServerInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerInfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServerInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SoftwareVersionColumn {
                get {
                    return this.columnSoftwareVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HostnameColumn {
                get {
                    return this.columnHostname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerInfoRow this[int index] {
                get {
                    return ((ServerInfoRow)(this.Rows[index]));
                }
            }
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowChanging;
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowChanged;
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowDeleting;
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServerInfoRow(ServerInfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerInfoRow AddServerInfoRow(string ID, string SoftwareVersion, string Description, string Hostname) {
                ServerInfoRow rowServerInfoRow = ((ServerInfoRow)(this.NewRow()));
                rowServerInfoRow.ItemArray = new object[] {
                        ID,
                        SoftwareVersion,
                        Description,
                        Hostname};
                this.Rows.Add(rowServerInfoRow);
                return rowServerInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ServerInfoDataTable cln = ((ServerInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ServerInfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnSoftwareVersion = base.Columns["SoftwareVersion"];
                this.columnDescription = base.Columns["Description"];
                this.columnHostname = base.Columns["Hostname"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new System.Data.DataColumn("ID", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnID);
                this.columnSoftwareVersion = new System.Data.DataColumn("SoftwareVersion", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSoftwareVersion);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDescription);
                this.columnHostname = new System.Data.DataColumn("Hostname", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnHostname);
                this.columnID.AllowDBNull = false;
                this.columnID.Namespace = "";
                this.columnSoftwareVersion.AllowDBNull = false;
                this.columnSoftwareVersion.Namespace = "";
                this.columnDescription.Namespace = "";
                this.columnHostname.AllowDBNull = false;
                this.columnHostname.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerInfoRow NewServerInfoRow() {
                return ((ServerInfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ServerInfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ServerInfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerInfoRowChanged != null)) {
                    this.ServerInfoRowChanged(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerInfoRowChanging != null)) {
                    this.ServerInfoRowChanging(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerInfoRowDeleted != null)) {
                    this.ServerInfoRowDeleted(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerInfoRowDeleting != null)) {
                    this.ServerInfoRowDeleting(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServerInfoRow(ServerInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BridgeServerConfiguration ds = new BridgeServerConfiguration();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServerInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ImagerInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnImagerID;
            
            private System.Data.DataColumn columnImagerCluster;
            
            private System.Data.DataColumn columnImageOrderFile;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagerInfoDataTable() {
                this.TableName = "ImagerInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ImagerInfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ImagerInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ImagerIDColumn {
                get {
                    return this.columnImagerID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ImagerClusterColumn {
                get {
                    return this.columnImagerCluster;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ImageOrderFileColumn {
                get {
                    return this.columnImageOrderFile;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagerInfoRow this[int index] {
                get {
                    return ((ImagerInfoRow)(this.Rows[index]));
                }
            }
            
            public event ImagerInfoRowChangeEventHandler ImagerInfoRowChanging;
            
            public event ImagerInfoRowChangeEventHandler ImagerInfoRowChanged;
            
            public event ImagerInfoRowChangeEventHandler ImagerInfoRowDeleting;
            
            public event ImagerInfoRowChangeEventHandler ImagerInfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddImagerInfoRow(ImagerInfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagerInfoRow AddImagerInfoRow(string ImagerID, string ImagerCluster, string ImageOrderFile) {
                ImagerInfoRow rowImagerInfoRow = ((ImagerInfoRow)(this.NewRow()));
                rowImagerInfoRow.ItemArray = new object[] {
                        ImagerID,
                        ImagerCluster,
                        ImageOrderFile};
                this.Rows.Add(rowImagerInfoRow);
                return rowImagerInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ImagerInfoDataTable cln = ((ImagerInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ImagerInfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnImagerID = base.Columns["ImagerID"];
                this.columnImagerCluster = base.Columns["ImagerCluster"];
                this.columnImageOrderFile = base.Columns["ImageOrderFile"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnImagerID = new System.Data.DataColumn("ImagerID", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnImagerID);
                this.columnImagerCluster = new System.Data.DataColumn("ImagerCluster", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnImagerCluster);
                this.columnImageOrderFile = new System.Data.DataColumn("ImageOrderFile", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnImageOrderFile);
                this.columnImagerID.AllowDBNull = false;
                this.columnImagerID.Namespace = "";
                this.columnImagerCluster.AllowDBNull = false;
                this.columnImagerCluster.Namespace = "";
                this.columnImageOrderFile.AllowDBNull = false;
                this.columnImageOrderFile.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagerInfoRow NewImagerInfoRow() {
                return ((ImagerInfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ImagerInfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ImagerInfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ImagerInfoRowChanged != null)) {
                    this.ImagerInfoRowChanged(this, new ImagerInfoRowChangeEvent(((ImagerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ImagerInfoRowChanging != null)) {
                    this.ImagerInfoRowChanging(this, new ImagerInfoRowChangeEvent(((ImagerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ImagerInfoRowDeleted != null)) {
                    this.ImagerInfoRowDeleted(this, new ImagerInfoRowChangeEvent(((ImagerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ImagerInfoRowDeleting != null)) {
                    this.ImagerInfoRowDeleting(this, new ImagerInfoRowChangeEvent(((ImagerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveImagerInfoRow(ImagerInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BridgeServerConfiguration ds = new BridgeServerConfiguration();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ImagerInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProducerInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnProducerID;
            
            private System.Data.DataColumn columnProducerCluster;
            
            private System.Data.DataColumn columnProductionOrderFile;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProducerInfoDataTable() {
                this.TableName = "ProducerInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProducerInfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProducerInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProducerIDColumn {
                get {
                    return this.columnProducerID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProducerClusterColumn {
                get {
                    return this.columnProducerCluster;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductionOrderFileColumn {
                get {
                    return this.columnProductionOrderFile;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProducerInfoRow this[int index] {
                get {
                    return ((ProducerInfoRow)(this.Rows[index]));
                }
            }
            
            public event ProducerInfoRowChangeEventHandler ProducerInfoRowChanging;
            
            public event ProducerInfoRowChangeEventHandler ProducerInfoRowChanged;
            
            public event ProducerInfoRowChangeEventHandler ProducerInfoRowDeleting;
            
            public event ProducerInfoRowChangeEventHandler ProducerInfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProducerInfoRow(ProducerInfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProducerInfoRow AddProducerInfoRow(string ProducerID, string ProducerCluster, string ProductionOrderFile) {
                ProducerInfoRow rowProducerInfoRow = ((ProducerInfoRow)(this.NewRow()));
                rowProducerInfoRow.ItemArray = new object[] {
                        ProducerID,
                        ProducerCluster,
                        ProductionOrderFile};
                this.Rows.Add(rowProducerInfoRow);
                return rowProducerInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ProducerInfoDataTable cln = ((ProducerInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ProducerInfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProducerID = base.Columns["ProducerID"];
                this.columnProducerCluster = base.Columns["ProducerCluster"];
                this.columnProductionOrderFile = base.Columns["ProductionOrderFile"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProducerID = new System.Data.DataColumn("ProducerID", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnProducerID);
                this.columnProducerCluster = new System.Data.DataColumn("ProducerCluster", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnProducerCluster);
                this.columnProductionOrderFile = new System.Data.DataColumn("ProductionOrderFile", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnProductionOrderFile);
                this.columnProducerID.AllowDBNull = false;
                this.columnProducerID.Namespace = "";
                this.columnProducerCluster.AllowDBNull = false;
                this.columnProducerCluster.Namespace = "";
                this.columnProductionOrderFile.AllowDBNull = false;
                this.columnProductionOrderFile.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProducerInfoRow NewProducerInfoRow() {
                return ((ProducerInfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ProducerInfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ProducerInfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProducerInfoRowChanged != null)) {
                    this.ProducerInfoRowChanged(this, new ProducerInfoRowChangeEvent(((ProducerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProducerInfoRowChanging != null)) {
                    this.ProducerInfoRowChanging(this, new ProducerInfoRowChangeEvent(((ProducerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProducerInfoRowDeleted != null)) {
                    this.ProducerInfoRowDeleted(this, new ProducerInfoRowChangeEvent(((ProducerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProducerInfoRowDeleting != null)) {
                    this.ProducerInfoRowDeleting(this, new ProducerInfoRowChangeEvent(((ProducerInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProducerInfoRow(ProducerInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BridgeServerConfiguration ds = new BridgeServerConfiguration();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProducerInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServerInfoRow : System.Data.DataRow {
            
            private ServerInfoDataTable tableServerInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerInfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerInfo = ((ServerInfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID {
                get {
                    return ((string)(this[this.tableServerInfo.IDColumn]));
                }
                set {
                    this[this.tableServerInfo.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SoftwareVersion {
                get {
                    return ((string)(this[this.tableServerInfo.SoftwareVersionColumn]));
                }
                set {
                    this[this.tableServerInfo.SoftwareVersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableServerInfo.DescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'ServerInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Hostname {
                get {
                    return ((string)(this[this.tableServerInfo.HostnameColumn]));
                }
                set {
                    this[this.tableServerInfo.HostnameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableServerInfo.DescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableServerInfo.DescriptionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ImagerInfoRow : System.Data.DataRow {
            
            private ImagerInfoDataTable tableImagerInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ImagerInfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableImagerInfo = ((ImagerInfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImagerID {
                get {
                    return ((string)(this[this.tableImagerInfo.ImagerIDColumn]));
                }
                set {
                    this[this.tableImagerInfo.ImagerIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImagerCluster {
                get {
                    return ((string)(this[this.tableImagerInfo.ImagerClusterColumn]));
                }
                set {
                    this[this.tableImagerInfo.ImagerClusterColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImageOrderFile {
                get {
                    return ((string)(this[this.tableImagerInfo.ImageOrderFileColumn]));
                }
                set {
                    this[this.tableImagerInfo.ImageOrderFileColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProducerInfoRow : System.Data.DataRow {
            
            private ProducerInfoDataTable tableProducerInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProducerInfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProducerInfo = ((ProducerInfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProducerID {
                get {
                    return ((string)(this[this.tableProducerInfo.ProducerIDColumn]));
                }
                set {
                    this[this.tableProducerInfo.ProducerIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProducerCluster {
                get {
                    return ((string)(this[this.tableProducerInfo.ProducerClusterColumn]));
                }
                set {
                    this[this.tableProducerInfo.ProducerClusterColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProductionOrderFile {
                get {
                    return ((string)(this[this.tableProducerInfo.ProductionOrderFileColumn]));
                }
                set {
                    this[this.tableProducerInfo.ProductionOrderFileColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServerInfoRowChangeEvent : System.EventArgs {
            
            private ServerInfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerInfoRowChangeEvent(ServerInfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ImagerInfoRowChangeEvent : System.EventArgs {
            
            private ImagerInfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagerInfoRowChangeEvent(ImagerInfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImagerInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProducerInfoRowChangeEvent : System.EventArgs {
            
            private ProducerInfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProducerInfoRowChangeEvent(ProducerInfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProducerInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591