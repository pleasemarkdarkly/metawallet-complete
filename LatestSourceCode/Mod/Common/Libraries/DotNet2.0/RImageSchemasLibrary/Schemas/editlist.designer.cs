//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace RImageSchemas.Schemas {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("EditList")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class EditList : System.Data.DataSet {
        
        private BasePathDataTable tableBasePath;
        
        private CDPathDataTable tableCDPath;
        
        private DstFileDataTable tableDstFile;
        
        private System.Data.DataRelation relationBasePath_CDPath;
        
        private System.Data.DataRelation relationCDPath_DstFile;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EditList() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected EditList(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["BasePath"] != null)) {
                    base.Tables.Add(new BasePathDataTable(ds.Tables["BasePath"]));
                }
                if ((ds.Tables["CDPath"] != null)) {
                    base.Tables.Add(new CDPathDataTable(ds.Tables["CDPath"]));
                }
                if ((ds.Tables["DstFile"] != null)) {
                    base.Tables.Add(new DstFileDataTable(ds.Tables["DstFile"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BasePathDataTable BasePath {
            get {
                return this.tableBasePath;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CDPathDataTable CDPath {
            get {
                return this.tableCDPath;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DstFileDataTable DstFile {
            get {
                return this.tableDstFile;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            EditList cln = ((EditList)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["BasePath"] != null)) {
                    base.Tables.Add(new BasePathDataTable(ds.Tables["BasePath"]));
                }
                if ((ds.Tables["CDPath"] != null)) {
                    base.Tables.Add(new CDPathDataTable(ds.Tables["CDPath"]));
                }
                if ((ds.Tables["DstFile"] != null)) {
                    base.Tables.Add(new DstFileDataTable(ds.Tables["DstFile"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableBasePath = ((BasePathDataTable)(base.Tables["BasePath"]));
            if ((initTable == true)) {
                if ((this.tableBasePath != null)) {
                    this.tableBasePath.InitVars();
                }
            }
            this.tableCDPath = ((CDPathDataTable)(base.Tables["CDPath"]));
            if ((initTable == true)) {
                if ((this.tableCDPath != null)) {
                    this.tableCDPath.InitVars();
                }
            }
            this.tableDstFile = ((DstFileDataTable)(base.Tables["DstFile"]));
            if ((initTable == true)) {
                if ((this.tableDstFile != null)) {
                    this.tableDstFile.InitVars();
                }
            }
            this.relationBasePath_CDPath = this.Relations["BasePath_CDPath"];
            this.relationCDPath_DstFile = this.Relations["CDPath_DstFile"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "EditList";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableBasePath = new BasePathDataTable();
            base.Tables.Add(this.tableBasePath);
            this.tableCDPath = new CDPathDataTable();
            base.Tables.Add(this.tableCDPath);
            this.tableDstFile = new DstFileDataTable();
            base.Tables.Add(this.tableDstFile);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("BasePath_CDPath", new System.Data.DataColumn[] {
                        this.tableBasePath.BasePath_IdColumn}, new System.Data.DataColumn[] {
                        this.tableCDPath.BasePath_IdColumn});
            this.tableCDPath.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("CDPath_DstFile", new System.Data.DataColumn[] {
                        this.tableCDPath.CDPath_IdColumn}, new System.Data.DataColumn[] {
                        this.tableDstFile.CDPath_IdColumn});
            this.tableDstFile.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationBasePath_CDPath = new System.Data.DataRelation("BasePath_CDPath", new System.Data.DataColumn[] {
                        this.tableBasePath.BasePath_IdColumn}, new System.Data.DataColumn[] {
                        this.tableCDPath.BasePath_IdColumn}, false);
            this.relationBasePath_CDPath.Nested = true;
            this.Relations.Add(this.relationBasePath_CDPath);
            this.relationCDPath_DstFile = new System.Data.DataRelation("CDPath_DstFile", new System.Data.DataColumn[] {
                        this.tableCDPath.CDPath_IdColumn}, new System.Data.DataColumn[] {
                        this.tableDstFile.CDPath_IdColumn}, false);
            this.relationCDPath_DstFile.Nested = true;
            this.Relations.Add(this.relationCDPath_DstFile);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBasePath() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCDPath() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDstFile() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            EditList ds = new EditList();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void BasePathRowChangeEventHandler(object sender, BasePathRowChangeEvent e);
        
        public delegate void CDPathRowChangeEventHandler(object sender, CDPathRowChangeEvent e);
        
        public delegate void DstFileRowChangeEventHandler(object sender, DstFileRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BasePathDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnBPath;
            
            private System.Data.DataColumn columnSystemDst;
            
            private System.Data.DataColumn columnBasePath_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasePathDataTable() {
                this.TableName = "BasePath";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BasePathDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BasePathDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BPathColumn {
                get {
                    return this.columnBPath;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SystemDstColumn {
                get {
                    return this.columnSystemDst;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BasePath_IdColumn {
                get {
                    return this.columnBasePath_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasePathRow this[int index] {
                get {
                    return ((BasePathRow)(this.Rows[index]));
                }
            }
            
            public event BasePathRowChangeEventHandler BasePathRowChanging;
            
            public event BasePathRowChangeEventHandler BasePathRowChanged;
            
            public event BasePathRowChangeEventHandler BasePathRowDeleting;
            
            public event BasePathRowChangeEventHandler BasePathRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBasePathRow(BasePathRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasePathRow AddBasePathRow(string BPath, string SystemDst) {
                BasePathRow rowBasePathRow = ((BasePathRow)(this.NewRow()));
                rowBasePathRow.ItemArray = new object[] {
                        BPath,
                        SystemDst,
                        null};
                this.Rows.Add(rowBasePathRow);
                return rowBasePathRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BasePathDataTable cln = ((BasePathDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BasePathDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBPath = base.Columns["BPath"];
                this.columnSystemDst = base.Columns["SystemDst"];
                this.columnBasePath_Id = base.Columns["BasePath_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBPath = new System.Data.DataColumn("BPath", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnBPath);
                this.columnSystemDst = new System.Data.DataColumn("SystemDst", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSystemDst);
                this.columnBasePath_Id = new System.Data.DataColumn("BasePath_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnBasePath_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnBasePath_Id}, true));
                this.columnBPath.AllowDBNull = false;
                this.columnBPath.Namespace = "";
                this.columnSystemDst.Namespace = "";
                this.columnSystemDst.DefaultValue = ((string)("BOTH"));
                this.columnBasePath_Id.AutoIncrement = true;
                this.columnBasePath_Id.AllowDBNull = false;
                this.columnBasePath_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasePathRow NewBasePathRow() {
                return ((BasePathRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BasePathRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BasePathRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BasePathRowChanged != null)) {
                    this.BasePathRowChanged(this, new BasePathRowChangeEvent(((BasePathRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BasePathRowChanging != null)) {
                    this.BasePathRowChanging(this, new BasePathRowChangeEvent(((BasePathRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BasePathRowDeleted != null)) {
                    this.BasePathRowDeleted(this, new BasePathRowChangeEvent(((BasePathRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BasePathRowDeleting != null)) {
                    this.BasePathRowDeleting(this, new BasePathRowChangeEvent(((BasePathRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBasePathRow(BasePathRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                EditList ds = new EditList();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BasePathDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CDPathDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCDDir;
            
            private System.Data.DataColumn columnCDPath_Id;
            
            private System.Data.DataColumn columnBasePath_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CDPathDataTable() {
                this.TableName = "CDPath";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CDPathDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CDPathDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CDDirColumn {
                get {
                    return this.columnCDDir;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CDPath_IdColumn {
                get {
                    return this.columnCDPath_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BasePath_IdColumn {
                get {
                    return this.columnBasePath_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CDPathRow this[int index] {
                get {
                    return ((CDPathRow)(this.Rows[index]));
                }
            }
            
            public event CDPathRowChangeEventHandler CDPathRowChanging;
            
            public event CDPathRowChangeEventHandler CDPathRowChanged;
            
            public event CDPathRowChangeEventHandler CDPathRowDeleting;
            
            public event CDPathRowChangeEventHandler CDPathRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCDPathRow(CDPathRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CDPathRow AddCDPathRow(string CDDir, BasePathRow parentBasePathRowByBasePath_CDPath) {
                CDPathRow rowCDPathRow = ((CDPathRow)(this.NewRow()));
                rowCDPathRow.ItemArray = new object[] {
                        CDDir,
                        null,
                        parentBasePathRowByBasePath_CDPath[2]};
                this.Rows.Add(rowCDPathRow);
                return rowCDPathRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CDPathDataTable cln = ((CDPathDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CDPathDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCDDir = base.Columns["CDDir"];
                this.columnCDPath_Id = base.Columns["CDPath_Id"];
                this.columnBasePath_Id = base.Columns["BasePath_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCDDir = new System.Data.DataColumn("CDDir", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCDDir);
                this.columnCDPath_Id = new System.Data.DataColumn("CDPath_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCDPath_Id);
                this.columnBasePath_Id = new System.Data.DataColumn("BasePath_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnBasePath_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCDPath_Id}, true));
                this.columnCDDir.Namespace = "";
                this.columnCDDir.DefaultValue = ((string)("/"));
                this.columnCDPath_Id.AutoIncrement = true;
                this.columnCDPath_Id.AllowDBNull = false;
                this.columnCDPath_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CDPathRow NewCDPathRow() {
                return ((CDPathRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CDPathRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CDPathRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CDPathRowChanged != null)) {
                    this.CDPathRowChanged(this, new CDPathRowChangeEvent(((CDPathRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CDPathRowChanging != null)) {
                    this.CDPathRowChanging(this, new CDPathRowChangeEvent(((CDPathRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CDPathRowDeleted != null)) {
                    this.CDPathRowDeleted(this, new CDPathRowChangeEvent(((CDPathRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CDPathRowDeleting != null)) {
                    this.CDPathRowDeleting(this, new CDPathRowChangeEvent(((CDPathRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCDPathRow(CDPathRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                EditList ds = new EditList();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CDPathDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DstFileDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDstFileName;
            
            private System.Data.DataColumn columnSourceOverride;
            
            private System.Data.DataColumn columnCDPath_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DstFileDataTable() {
                this.TableName = "DstFile";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DstFileDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DstFileDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DstFileNameColumn {
                get {
                    return this.columnDstFileName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SourceOverrideColumn {
                get {
                    return this.columnSourceOverride;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CDPath_IdColumn {
                get {
                    return this.columnCDPath_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DstFileRow this[int index] {
                get {
                    return ((DstFileRow)(this.Rows[index]));
                }
            }
            
            public event DstFileRowChangeEventHandler DstFileRowChanging;
            
            public event DstFileRowChangeEventHandler DstFileRowChanged;
            
            public event DstFileRowChangeEventHandler DstFileRowDeleting;
            
            public event DstFileRowChangeEventHandler DstFileRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDstFileRow(DstFileRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DstFileRow AddDstFileRow(string DstFileName, string SourceOverride, CDPathRow parentCDPathRowByCDPath_DstFile) {
                DstFileRow rowDstFileRow = ((DstFileRow)(this.NewRow()));
                rowDstFileRow.ItemArray = new object[] {
                        DstFileName,
                        SourceOverride,
                        parentCDPathRowByCDPath_DstFile[1]};
                this.Rows.Add(rowDstFileRow);
                return rowDstFileRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DstFileDataTable cln = ((DstFileDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DstFileDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDstFileName = base.Columns["DstFileName"];
                this.columnSourceOverride = base.Columns["SourceOverride"];
                this.columnCDPath_Id = base.Columns["CDPath_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDstFileName = new System.Data.DataColumn("DstFileName", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDstFileName);
                this.columnSourceOverride = new System.Data.DataColumn("SourceOverride", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSourceOverride);
                this.columnCDPath_Id = new System.Data.DataColumn("CDPath_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCDPath_Id);
                this.columnDstFileName.AllowDBNull = false;
                this.columnDstFileName.Namespace = "";
                this.columnSourceOverride.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DstFileRow NewDstFileRow() {
                return ((DstFileRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DstFileRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DstFileRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DstFileRowChanged != null)) {
                    this.DstFileRowChanged(this, new DstFileRowChangeEvent(((DstFileRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DstFileRowChanging != null)) {
                    this.DstFileRowChanging(this, new DstFileRowChangeEvent(((DstFileRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DstFileRowDeleted != null)) {
                    this.DstFileRowDeleted(this, new DstFileRowChangeEvent(((DstFileRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DstFileRowDeleting != null)) {
                    this.DstFileRowDeleting(this, new DstFileRowChangeEvent(((DstFileRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDstFileRow(DstFileRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                EditList ds = new EditList();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DstFileDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BasePathRow : System.Data.DataRow {
            
            private BasePathDataTable tableBasePath;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BasePathRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBasePath = ((BasePathDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BPath {
                get {
                    return ((string)(this[this.tableBasePath.BPathColumn]));
                }
                set {
                    this[this.tableBasePath.BPathColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SystemDst {
                get {
                    try {
                        return ((string)(this[this.tableBasePath.SystemDstColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SystemDst\' in table \'BasePath\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasePath.SystemDstColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BasePath_Id {
                get {
                    return ((int)(this[this.tableBasePath.BasePath_IdColumn]));
                }
                set {
                    this[this.tableBasePath.BasePath_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSystemDstNull() {
                return this.IsNull(this.tableBasePath.SystemDstColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSystemDstNull() {
                this[this.tableBasePath.SystemDstColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CDPathRow[] GetCDPathRows() {
                return ((CDPathRow[])(base.GetChildRows(this.Table.ChildRelations["BasePath_CDPath"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CDPathRow : System.Data.DataRow {
            
            private CDPathDataTable tableCDPath;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CDPathRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCDPath = ((CDPathDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CDDir {
                get {
                    try {
                        return ((string)(this[this.tableCDPath.CDDirColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CDDir\' in table \'CDPath\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCDPath.CDDirColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CDPath_Id {
                get {
                    return ((int)(this[this.tableCDPath.CDPath_IdColumn]));
                }
                set {
                    this[this.tableCDPath.CDPath_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BasePath_Id {
                get {
                    try {
                        return ((int)(this[this.tableCDPath.BasePath_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BasePath_Id\' in table \'CDPath\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCDPath.BasePath_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasePathRow BasePathRow {
                get {
                    return ((BasePathRow)(this.GetParentRow(this.Table.ParentRelations["BasePath_CDPath"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["BasePath_CDPath"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCDDirNull() {
                return this.IsNull(this.tableCDPath.CDDirColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCDDirNull() {
                this[this.tableCDPath.CDDirColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBasePath_IdNull() {
                return this.IsNull(this.tableCDPath.BasePath_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBasePath_IdNull() {
                this[this.tableCDPath.BasePath_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DstFileRow[] GetDstFileRows() {
                return ((DstFileRow[])(base.GetChildRows(this.Table.ChildRelations["CDPath_DstFile"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DstFileRow : System.Data.DataRow {
            
            private DstFileDataTable tableDstFile;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DstFileRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDstFile = ((DstFileDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DstFileName {
                get {
                    return ((string)(this[this.tableDstFile.DstFileNameColumn]));
                }
                set {
                    this[this.tableDstFile.DstFileNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceOverride {
                get {
                    try {
                        return ((string)(this[this.tableDstFile.SourceOverrideColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SourceOverride\' in table \'DstFile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDstFile.SourceOverrideColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CDPath_Id {
                get {
                    try {
                        return ((int)(this[this.tableDstFile.CDPath_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CDPath_Id\' in table \'DstFile\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDstFile.CDPath_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CDPathRow CDPathRow {
                get {
                    return ((CDPathRow)(this.GetParentRow(this.Table.ParentRelations["CDPath_DstFile"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CDPath_DstFile"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceOverrideNull() {
                return this.IsNull(this.tableDstFile.SourceOverrideColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceOverrideNull() {
                this[this.tableDstFile.SourceOverrideColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCDPath_IdNull() {
                return this.IsNull(this.tableDstFile.CDPath_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCDPath_IdNull() {
                this[this.tableDstFile.CDPath_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BasePathRowChangeEvent : System.EventArgs {
            
            private BasePathRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasePathRowChangeEvent(BasePathRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasePathRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CDPathRowChangeEvent : System.EventArgs {
            
            private CDPathRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CDPathRowChangeEvent(CDPathRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CDPathRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DstFileRowChangeEvent : System.EventArgs {
            
            private DstFileRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DstFileRowChangeEvent(DstFileRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DstFileRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591