//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace RImageSchemas.Schemas {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("ProductionServerRequest")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ProductionServerRequest : System.Data.DataSet {
        
        private GetServerStatusDataTable tableGetServerStatus;
        
        private GetParameterSettingsDataTable tableGetParameterSettings;
        
        private GetOrderListDataTable tableGetOrderList;
        
        private ServerPasswordDataTable tableServerPassword;
        
        private SetServerPasswordDataTable tableSetServerPassword;
        
        private OldPasswordDataTable tableOldPassword;
        
        private NewPasswordDataTable tableNewPassword;
        
        private ServerPassword1DataTable tableServerPassword1;
        
        private VerifyServerPasswordDataTable tableVerifyServerPassword;
        
        private ServerPassword2DataTable tableServerPassword2;
        
        private CancelOrderDataTable tableCancelOrder;
        
        private ServerPassword3DataTable tableServerPassword3;
        
        private ChangeOrderDataTable tableChangeOrder;
        
        private ServerPassword4DataTable tableServerPassword4;
        
        private SuspendOrderDataTable tableSuspendOrder;
        
        private ResumeOrderDataTable tableResumeOrder;
        
        private QuantityDataTable tableQuantity;
        
        private EnableDeviceDataTable tableEnableDevice;
        
        private ServerPassword5DataTable tableServerPassword5;
        
        private AutoloaderDataTable tableAutoloader;
        
        private RecorderDataTable tableRecorder;
        
        private PrinterDataTable tablePrinter;
        
        private ResetInputBinsDataTable tableResetInputBins;
        
        private SetDialogActionDataTable tableSetDialogAction;
        
        private GetSessionLogDataTable tableGetSessionLog;
        
        private ClearSessionLogDataTable tableClearSessionLog;
        
        private SetParameterDataTable tableSetParameter;
        
        private ServerPassword6DataTable tableServerPassword6;
        
        private SettingDataTable tableSetting;
        
        private ServerDataTable tableServer;
        
        private ModeSettingsDataTable tableModeSettings;
        
        private ServerModeDataTable tableServerMode;
        
        private OperatingModeDataTable tableOperatingMode;
        
        private UseFIFOModeDataTable tableUseFIFOMode;
        
        private CachingDataTable tableCaching;
        
        private UseStaticCachingDataTable tableUseStaticCaching;
        
        private CacheDriveLettersDataTable tableCacheDriveLetters;
        
        private RecordingDataTable tableRecording;
        
        private SimulateRecordingDataTable tableSimulateRecording;
        
        private UseNewMediaOnlyDataTable tableUseNewMediaOnly;
        
        private MaxRecordingSpeedDataTable tableMaxRecordingSpeed;
        
        private MaxDVDRecordingSpeedDataTable tableMaxDVDRecordingSpeed;
        
        private DisableISOExtentFixupsDataTable tableDisableISOExtentFixups;
        
        private RejectNonISODataTable tableRejectNonISO;
        
        private AddPostgapToISODataTable tableAddPostgapToISO;
        
        private EnableUsing90_100MinuteCDRsDataTable tableEnableUsing90_100MinuteCDRs;
        
        private DestroyFailedRecordingsDataTable tableDestroyFailedRecordings;
        
        private VerifyDataTable tableVerify;
        
        private UseVerifyDataTable tableUseVerify;
        
        private FrequencyDataTable tableFrequency;
        
        private UseChecksumDLLDataTable tableUseChecksumDLL;
        
        private PrintingDataTable tablePrinting;
        
        private SimulatePrintingDataTable tableSimulatePrinting;
        
        private RejectPatternDataTable tableRejectPattern;
        
        private TakeOrdersWithLabelWithoutPrinterDataTable tableTakeOrdersWithLabelWithoutPrinter;
        
        private ErrorOnLowInkLevelDataTable tableErrorOnLowInkLevel;
        
        private LowInkThresholdPercentDataTable tableLowInkThresholdPercent;
        
        private AutoloaderSettingsDataTable tableAutoloaderSettings;
        
        private BinSettingDataTable tableBinSetting;
        
        private MailslotSettingDataTable tableMailslotSetting;
        
        private MediaSizeDataTable tableMediaSize;
        
        private MediaTypeDataTable tableMediaType;
        
        private ReadingDataTable tableReading;
        
        private BarcodePortDataTable tableBarcodePort;
        
        private BarcodeAngleDataTable tableBarcodeAngle;
        
        private UseBarcodeIndexDataTable tableUseBarcodeIndex;
        
        private AutoBulkReadDataTable tableAutoBulkRead;
        
        private BaseFolderForImagesDataTable tableBaseFolderForImages;
        
        private UseVolumeIDAsFolderNameDataTable tableUseVolumeIDAsFolderName;
        
        private UseBarcodeAsFolderNameDataTable tableUseBarcodeAsFolderName;
        
        private ExtractISOImagesToFoldersAndFilesDataTable tableExtractISOImagesToFoldersAndFiles;
        
        private ImageTypeForAudioTracksDataTable tableImageTypeForAudioTracks;
        
        private UseISRCAsFilenameForAudioTracksDataTable tableUseISRCAsFilenameForAudioTracks;
        
        private PutFailuresToRejectBinDataTable tablePutFailuresToRejectBin;
        
        private AudioReadSpeedDataTable tableAudioReadSpeed;
        
        private PreferredReaderDataTable tablePreferredReader;
        
        private MediaCodesDataTable tableMediaCodes;
        
        private UseMediaCodesDataTable tableUseMediaCodes;
        
        private MediaCodeDataTable tableMediaCode;
        
        private ClearAllCodesDataTable tableClearAllCodes;
        
        private KioskModeDataTable tableKioskMode;
        
        private RecoverOrdersDataTable tableRecoverOrders;
        
        private RunNoPrinterDataTable tableRunNoPrinter;
        
        private AutoloaderRecoveryDataTable tableAutoloaderRecovery;
        
        private PrinterRecoveryDataTable tablePrinterRecovery;
        
        private AutoRespondOnStartupDataTable tableAutoRespondOnStartup;
        
        private PauseServerDataTable tablePauseServer;
        
        private ServerPassword7DataTable tableServerPassword7;
        
        private ResumeServerDataTable tableResumeServer;
        
        private ServerPassword8DataTable tableServerPassword8;
        
        private StopServerDataTable tableStopServer;
        
        private ServerPassword9DataTable tableServerPassword9;
        
        private FlashUploadDataTable tableFlashUpload;
        
        private ServerPassword10DataTable tableServerPassword10;
        
        private GetUnlockingCodesDataTable tableGetUnlockingCodes;
        
        private SetActivationCodesDataTable tableSetActivationCodes;
        
        private System.Data.DataRelation relationOldPassword_ServerPassword;
        
        private System.Data.DataRelation relationSetServerPassword_OldPassword;
        
        private System.Data.DataRelation relationSetServerPassword_NewPassword;
        
        private System.Data.DataRelation relationNewPassword_ServerPassword1;
        
        private System.Data.DataRelation relationVerifyServerPassword_ServerPassword2;
        
        private System.Data.DataRelation relationCancelOrder_ServerPassword3;
        
        private System.Data.DataRelation relationChangeOrder_ServerPassword4;
        
        private System.Data.DataRelation relationChangeOrder_SuspendOrder;
        
        private System.Data.DataRelation relationChangeOrder_ResumeOrder;
        
        private System.Data.DataRelation relationChangeOrder_Quantity;
        
        private System.Data.DataRelation relationEnableDevice_ServerPassword5;
        
        private System.Data.DataRelation relationEnableDevice_Autoloader;
        
        private System.Data.DataRelation relationEnableDevice_Recorder;
        
        private System.Data.DataRelation relationEnableDevice_Printer;
        
        private System.Data.DataRelation relationSetParameter_ServerPassword6;
        
        private System.Data.DataRelation relationSetParameter_Setting;
        
        private System.Data.DataRelation relationSetting_Server;
        
        private System.Data.DataRelation relationSetting_ModeSettings;
        
        private System.Data.DataRelation relationModeSettings_ServerMode;
        
        private System.Data.DataRelation relationModeSettings_OperatingMode;
        
        private System.Data.DataRelation relationModeSettings_UseFIFOMode;
        
        private System.Data.DataRelation relationSetting_Caching;
        
        private System.Data.DataRelation relationCaching_UseStaticCaching;
        
        private System.Data.DataRelation relationCaching_CacheDriveLetters;
        
        private System.Data.DataRelation relationSetting_Recording;
        
        private System.Data.DataRelation relationRecording_SimulateRecording;
        
        private System.Data.DataRelation relationRecording_UseNewMediaOnly;
        
        private System.Data.DataRelation relationRecording_MaxRecordingSpeed;
        
        private System.Data.DataRelation relationRecording_MaxDVDRecordingSpeed;
        
        private System.Data.DataRelation relationRecording_DisableISOExtentFixups;
        
        private System.Data.DataRelation relationRecording_RejectNonISO;
        
        private System.Data.DataRelation relationRecording_AddPostgapToISO;
        
        private System.Data.DataRelation relationRecording_EnableUsing90_100MinuteCDRs;
        
        private System.Data.DataRelation relationRecording_DestroyFailedRecordings;
        
        private System.Data.DataRelation relationSetting_Verify;
        
        private System.Data.DataRelation relationVerify_UseVerify;
        
        private System.Data.DataRelation relationVerify_Frequency;
        
        private System.Data.DataRelation relationVerify_UseChecksumDLL;
        
        private System.Data.DataRelation relationSetting_Printing;
        
        private System.Data.DataRelation relationPrinting_SimulatePrinting;
        
        private System.Data.DataRelation relationPrinting_RejectPattern;
        
        private System.Data.DataRelation relationPrinting_TakeOrdersWithLabelWithoutPrinter;
        
        private System.Data.DataRelation relationPrinting_ErrorOnLowInkLevel;
        
        private System.Data.DataRelation relationPrinting_LowInkThresholdPercent;
        
        private System.Data.DataRelation relationSetting_AutoloaderSettings;
        
        private System.Data.DataRelation relationAutoloaderSettings_BinSetting;
        
        private System.Data.DataRelation relationAutoloaderSettings_MailslotSetting;
        
        private System.Data.DataRelation relationAutoloaderSettings_MediaSize;
        
        private System.Data.DataRelation relationAutoloaderSettings_MediaType;
        
        private System.Data.DataRelation relationSetting_Reading;
        
        private System.Data.DataRelation relationReading_BarcodePort;
        
        private System.Data.DataRelation relationReading_BarcodeAngle;
        
        private System.Data.DataRelation relationReading_UseBarcodeIndex;
        
        private System.Data.DataRelation relationReading_AutoBulkRead;
        
        private System.Data.DataRelation relationAutoBulkRead_BaseFolderForImages;
        
        private System.Data.DataRelation relationAutoBulkRead_UseVolumeIDAsFolderName;
        
        private System.Data.DataRelation relationAutoBulkRead_UseBarcodeAsFolderName;
        
        private System.Data.DataRelation relationAutoBulkRead_ExtractISOImagesToFoldersAndFiles;
        
        private System.Data.DataRelation relationAutoBulkRead_ImageTypeForAudioTracks;
        
        private System.Data.DataRelation relationAutoBulkRead_UseISRCAsFilenameForAudioTracks;
        
        private System.Data.DataRelation relationAutoBulkRead_PutFailuresToRejectBin;
        
        private System.Data.DataRelation relationReading_AudioReadSpeed;
        
        private System.Data.DataRelation relationReading_PreferredReader;
        
        private System.Data.DataRelation relationSetting_MediaCodes;
        
        private System.Data.DataRelation relationMediaCodes_UseMediaCodes;
        
        private System.Data.DataRelation relationMediaCodes_MediaCode;
        
        private System.Data.DataRelation relationMediaCodes_ClearAllCodes;
        
        private System.Data.DataRelation relationSetting_KioskMode;
        
        private System.Data.DataRelation relationKioskMode_RecoverOrders;
        
        private System.Data.DataRelation relationKioskMode_RunNoPrinter;
        
        private System.Data.DataRelation relationKioskMode_AutoloaderRecovery;
        
        private System.Data.DataRelation relationKioskMode_PrinterRecovery;
        
        private System.Data.DataRelation relationKioskMode_AutoRespondOnStartup;
        
        private System.Data.DataRelation relationPauseServer_ServerPassword7;
        
        private System.Data.DataRelation relationResumeServer_ServerPassword8;
        
        private System.Data.DataRelation relationStopServer_ServerPassword9;
        
        private System.Data.DataRelation relationFlashUpload_ServerPassword10;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProductionServerRequest() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ProductionServerRequest(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["GetServerStatus"] != null)) {
                    base.Tables.Add(new GetServerStatusDataTable(ds.Tables["GetServerStatus"]));
                }
                if ((ds.Tables["GetParameterSettings"] != null)) {
                    base.Tables.Add(new GetParameterSettingsDataTable(ds.Tables["GetParameterSettings"]));
                }
                if ((ds.Tables["GetOrderList"] != null)) {
                    base.Tables.Add(new GetOrderListDataTable(ds.Tables["GetOrderList"]));
                }
                if ((ds.Tables["ServerPassword"] != null)) {
                    base.Tables.Add(new ServerPasswordDataTable(ds.Tables["ServerPassword"]));
                }
                if ((ds.Tables["SetServerPassword"] != null)) {
                    base.Tables.Add(new SetServerPasswordDataTable(ds.Tables["SetServerPassword"]));
                }
                if ((ds.Tables["OldPassword"] != null)) {
                    base.Tables.Add(new OldPasswordDataTable(ds.Tables["OldPassword"]));
                }
                if ((ds.Tables["NewPassword"] != null)) {
                    base.Tables.Add(new NewPasswordDataTable(ds.Tables["NewPassword"]));
                }
                if ((ds.Tables["ServerPassword1"] != null)) {
                    base.Tables.Add(new ServerPassword1DataTable(ds.Tables["ServerPassword1"]));
                }
                if ((ds.Tables["VerifyServerPassword"] != null)) {
                    base.Tables.Add(new VerifyServerPasswordDataTable(ds.Tables["VerifyServerPassword"]));
                }
                if ((ds.Tables["ServerPassword2"] != null)) {
                    base.Tables.Add(new ServerPassword2DataTable(ds.Tables["ServerPassword2"]));
                }
                if ((ds.Tables["CancelOrder"] != null)) {
                    base.Tables.Add(new CancelOrderDataTable(ds.Tables["CancelOrder"]));
                }
                if ((ds.Tables["ServerPassword3"] != null)) {
                    base.Tables.Add(new ServerPassword3DataTable(ds.Tables["ServerPassword3"]));
                }
                if ((ds.Tables["ChangeOrder"] != null)) {
                    base.Tables.Add(new ChangeOrderDataTable(ds.Tables["ChangeOrder"]));
                }
                if ((ds.Tables["ServerPassword4"] != null)) {
                    base.Tables.Add(new ServerPassword4DataTable(ds.Tables["ServerPassword4"]));
                }
                if ((ds.Tables["SuspendOrder"] != null)) {
                    base.Tables.Add(new SuspendOrderDataTable(ds.Tables["SuspendOrder"]));
                }
                if ((ds.Tables["ResumeOrder"] != null)) {
                    base.Tables.Add(new ResumeOrderDataTable(ds.Tables["ResumeOrder"]));
                }
                if ((ds.Tables["Quantity"] != null)) {
                    base.Tables.Add(new QuantityDataTable(ds.Tables["Quantity"]));
                }
                if ((ds.Tables["EnableDevice"] != null)) {
                    base.Tables.Add(new EnableDeviceDataTable(ds.Tables["EnableDevice"]));
                }
                if ((ds.Tables["ServerPassword5"] != null)) {
                    base.Tables.Add(new ServerPassword5DataTable(ds.Tables["ServerPassword5"]));
                }
                if ((ds.Tables["Autoloader"] != null)) {
                    base.Tables.Add(new AutoloaderDataTable(ds.Tables["Autoloader"]));
                }
                if ((ds.Tables["Recorder"] != null)) {
                    base.Tables.Add(new RecorderDataTable(ds.Tables["Recorder"]));
                }
                if ((ds.Tables["Printer"] != null)) {
                    base.Tables.Add(new PrinterDataTable(ds.Tables["Printer"]));
                }
                if ((ds.Tables["ResetInputBins"] != null)) {
                    base.Tables.Add(new ResetInputBinsDataTable(ds.Tables["ResetInputBins"]));
                }
                if ((ds.Tables["SetDialogAction"] != null)) {
                    base.Tables.Add(new SetDialogActionDataTable(ds.Tables["SetDialogAction"]));
                }
                if ((ds.Tables["GetSessionLog"] != null)) {
                    base.Tables.Add(new GetSessionLogDataTable(ds.Tables["GetSessionLog"]));
                }
                if ((ds.Tables["ClearSessionLog"] != null)) {
                    base.Tables.Add(new ClearSessionLogDataTable(ds.Tables["ClearSessionLog"]));
                }
                if ((ds.Tables["SetParameter"] != null)) {
                    base.Tables.Add(new SetParameterDataTable(ds.Tables["SetParameter"]));
                }
                if ((ds.Tables["ServerPassword6"] != null)) {
                    base.Tables.Add(new ServerPassword6DataTable(ds.Tables["ServerPassword6"]));
                }
                if ((ds.Tables["Setting"] != null)) {
                    base.Tables.Add(new SettingDataTable(ds.Tables["Setting"]));
                }
                if ((ds.Tables["Server"] != null)) {
                    base.Tables.Add(new ServerDataTable(ds.Tables["Server"]));
                }
                if ((ds.Tables["ModeSettings"] != null)) {
                    base.Tables.Add(new ModeSettingsDataTable(ds.Tables["ModeSettings"]));
                }
                if ((ds.Tables["ServerMode"] != null)) {
                    base.Tables.Add(new ServerModeDataTable(ds.Tables["ServerMode"]));
                }
                if ((ds.Tables["OperatingMode"] != null)) {
                    base.Tables.Add(new OperatingModeDataTable(ds.Tables["OperatingMode"]));
                }
                if ((ds.Tables["UseFIFOMode"] != null)) {
                    base.Tables.Add(new UseFIFOModeDataTable(ds.Tables["UseFIFOMode"]));
                }
                if ((ds.Tables["Caching"] != null)) {
                    base.Tables.Add(new CachingDataTable(ds.Tables["Caching"]));
                }
                if ((ds.Tables["UseStaticCaching"] != null)) {
                    base.Tables.Add(new UseStaticCachingDataTable(ds.Tables["UseStaticCaching"]));
                }
                if ((ds.Tables["CacheDriveLetters"] != null)) {
                    base.Tables.Add(new CacheDriveLettersDataTable(ds.Tables["CacheDriveLetters"]));
                }
                if ((ds.Tables["Recording"] != null)) {
                    base.Tables.Add(new RecordingDataTable(ds.Tables["Recording"]));
                }
                if ((ds.Tables["SimulateRecording"] != null)) {
                    base.Tables.Add(new SimulateRecordingDataTable(ds.Tables["SimulateRecording"]));
                }
                if ((ds.Tables["UseNewMediaOnly"] != null)) {
                    base.Tables.Add(new UseNewMediaOnlyDataTable(ds.Tables["UseNewMediaOnly"]));
                }
                if ((ds.Tables["MaxRecordingSpeed"] != null)) {
                    base.Tables.Add(new MaxRecordingSpeedDataTable(ds.Tables["MaxRecordingSpeed"]));
                }
                if ((ds.Tables["MaxDVDRecordingSpeed"] != null)) {
                    base.Tables.Add(new MaxDVDRecordingSpeedDataTable(ds.Tables["MaxDVDRecordingSpeed"]));
                }
                if ((ds.Tables["DisableISOExtentFixups"] != null)) {
                    base.Tables.Add(new DisableISOExtentFixupsDataTable(ds.Tables["DisableISOExtentFixups"]));
                }
                if ((ds.Tables["RejectNonISO"] != null)) {
                    base.Tables.Add(new RejectNonISODataTable(ds.Tables["RejectNonISO"]));
                }
                if ((ds.Tables["AddPostgapToISO"] != null)) {
                    base.Tables.Add(new AddPostgapToISODataTable(ds.Tables["AddPostgapToISO"]));
                }
                if ((ds.Tables["EnableUsing90_100MinuteCDRs"] != null)) {
                    base.Tables.Add(new EnableUsing90_100MinuteCDRsDataTable(ds.Tables["EnableUsing90_100MinuteCDRs"]));
                }
                if ((ds.Tables["DestroyFailedRecordings"] != null)) {
                    base.Tables.Add(new DestroyFailedRecordingsDataTable(ds.Tables["DestroyFailedRecordings"]));
                }
                if ((ds.Tables["Verify"] != null)) {
                    base.Tables.Add(new VerifyDataTable(ds.Tables["Verify"]));
                }
                if ((ds.Tables["UseVerify"] != null)) {
                    base.Tables.Add(new UseVerifyDataTable(ds.Tables["UseVerify"]));
                }
                if ((ds.Tables["Frequency"] != null)) {
                    base.Tables.Add(new FrequencyDataTable(ds.Tables["Frequency"]));
                }
                if ((ds.Tables["UseChecksumDLL"] != null)) {
                    base.Tables.Add(new UseChecksumDLLDataTable(ds.Tables["UseChecksumDLL"]));
                }
                if ((ds.Tables["Printing"] != null)) {
                    base.Tables.Add(new PrintingDataTable(ds.Tables["Printing"]));
                }
                if ((ds.Tables["SimulatePrinting"] != null)) {
                    base.Tables.Add(new SimulatePrintingDataTable(ds.Tables["SimulatePrinting"]));
                }
                if ((ds.Tables["RejectPattern"] != null)) {
                    base.Tables.Add(new RejectPatternDataTable(ds.Tables["RejectPattern"]));
                }
                if ((ds.Tables["TakeOrdersWithLabelWithoutPrinter"] != null)) {
                    base.Tables.Add(new TakeOrdersWithLabelWithoutPrinterDataTable(ds.Tables["TakeOrdersWithLabelWithoutPrinter"]));
                }
                if ((ds.Tables["ErrorOnLowInkLevel"] != null)) {
                    base.Tables.Add(new ErrorOnLowInkLevelDataTable(ds.Tables["ErrorOnLowInkLevel"]));
                }
                if ((ds.Tables["LowInkThresholdPercent"] != null)) {
                    base.Tables.Add(new LowInkThresholdPercentDataTable(ds.Tables["LowInkThresholdPercent"]));
                }
                if ((ds.Tables["AutoloaderSettings"] != null)) {
                    base.Tables.Add(new AutoloaderSettingsDataTable(ds.Tables["AutoloaderSettings"]));
                }
                if ((ds.Tables["BinSetting"] != null)) {
                    base.Tables.Add(new BinSettingDataTable(ds.Tables["BinSetting"]));
                }
                if ((ds.Tables["MailslotSetting"] != null)) {
                    base.Tables.Add(new MailslotSettingDataTable(ds.Tables["MailslotSetting"]));
                }
                if ((ds.Tables["MediaSize"] != null)) {
                    base.Tables.Add(new MediaSizeDataTable(ds.Tables["MediaSize"]));
                }
                if ((ds.Tables["MediaType"] != null)) {
                    base.Tables.Add(new MediaTypeDataTable(ds.Tables["MediaType"]));
                }
                if ((ds.Tables["Reading"] != null)) {
                    base.Tables.Add(new ReadingDataTable(ds.Tables["Reading"]));
                }
                if ((ds.Tables["BarcodePort"] != null)) {
                    base.Tables.Add(new BarcodePortDataTable(ds.Tables["BarcodePort"]));
                }
                if ((ds.Tables["BarcodeAngle"] != null)) {
                    base.Tables.Add(new BarcodeAngleDataTable(ds.Tables["BarcodeAngle"]));
                }
                if ((ds.Tables["UseBarcodeIndex"] != null)) {
                    base.Tables.Add(new UseBarcodeIndexDataTable(ds.Tables["UseBarcodeIndex"]));
                }
                if ((ds.Tables["AutoBulkRead"] != null)) {
                    base.Tables.Add(new AutoBulkReadDataTable(ds.Tables["AutoBulkRead"]));
                }
                if ((ds.Tables["BaseFolderForImages"] != null)) {
                    base.Tables.Add(new BaseFolderForImagesDataTable(ds.Tables["BaseFolderForImages"]));
                }
                if ((ds.Tables["UseVolumeIDAsFolderName"] != null)) {
                    base.Tables.Add(new UseVolumeIDAsFolderNameDataTable(ds.Tables["UseVolumeIDAsFolderName"]));
                }
                if ((ds.Tables["UseBarcodeAsFolderName"] != null)) {
                    base.Tables.Add(new UseBarcodeAsFolderNameDataTable(ds.Tables["UseBarcodeAsFolderName"]));
                }
                if ((ds.Tables["ExtractISOImagesToFoldersAndFiles"] != null)) {
                    base.Tables.Add(new ExtractISOImagesToFoldersAndFilesDataTable(ds.Tables["ExtractISOImagesToFoldersAndFiles"]));
                }
                if ((ds.Tables["ImageTypeForAudioTracks"] != null)) {
                    base.Tables.Add(new ImageTypeForAudioTracksDataTable(ds.Tables["ImageTypeForAudioTracks"]));
                }
                if ((ds.Tables["UseISRCAsFilenameForAudioTracks"] != null)) {
                    base.Tables.Add(new UseISRCAsFilenameForAudioTracksDataTable(ds.Tables["UseISRCAsFilenameForAudioTracks"]));
                }
                if ((ds.Tables["PutFailuresToRejectBin"] != null)) {
                    base.Tables.Add(new PutFailuresToRejectBinDataTable(ds.Tables["PutFailuresToRejectBin"]));
                }
                if ((ds.Tables["AudioReadSpeed"] != null)) {
                    base.Tables.Add(new AudioReadSpeedDataTable(ds.Tables["AudioReadSpeed"]));
                }
                if ((ds.Tables["PreferredReader"] != null)) {
                    base.Tables.Add(new PreferredReaderDataTable(ds.Tables["PreferredReader"]));
                }
                if ((ds.Tables["MediaCodes"] != null)) {
                    base.Tables.Add(new MediaCodesDataTable(ds.Tables["MediaCodes"]));
                }
                if ((ds.Tables["UseMediaCodes"] != null)) {
                    base.Tables.Add(new UseMediaCodesDataTable(ds.Tables["UseMediaCodes"]));
                }
                if ((ds.Tables["MediaCode"] != null)) {
                    base.Tables.Add(new MediaCodeDataTable(ds.Tables["MediaCode"]));
                }
                if ((ds.Tables["ClearAllCodes"] != null)) {
                    base.Tables.Add(new ClearAllCodesDataTable(ds.Tables["ClearAllCodes"]));
                }
                if ((ds.Tables["KioskMode"] != null)) {
                    base.Tables.Add(new KioskModeDataTable(ds.Tables["KioskMode"]));
                }
                if ((ds.Tables["RecoverOrders"] != null)) {
                    base.Tables.Add(new RecoverOrdersDataTable(ds.Tables["RecoverOrders"]));
                }
                if ((ds.Tables["RunNoPrinter"] != null)) {
                    base.Tables.Add(new RunNoPrinterDataTable(ds.Tables["RunNoPrinter"]));
                }
                if ((ds.Tables["AutoloaderRecovery"] != null)) {
                    base.Tables.Add(new AutoloaderRecoveryDataTable(ds.Tables["AutoloaderRecovery"]));
                }
                if ((ds.Tables["PrinterRecovery"] != null)) {
                    base.Tables.Add(new PrinterRecoveryDataTable(ds.Tables["PrinterRecovery"]));
                }
                if ((ds.Tables["AutoRespondOnStartup"] != null)) {
                    base.Tables.Add(new AutoRespondOnStartupDataTable(ds.Tables["AutoRespondOnStartup"]));
                }
                if ((ds.Tables["PauseServer"] != null)) {
                    base.Tables.Add(new PauseServerDataTable(ds.Tables["PauseServer"]));
                }
                if ((ds.Tables["ServerPassword7"] != null)) {
                    base.Tables.Add(new ServerPassword7DataTable(ds.Tables["ServerPassword7"]));
                }
                if ((ds.Tables["ResumeServer"] != null)) {
                    base.Tables.Add(new ResumeServerDataTable(ds.Tables["ResumeServer"]));
                }
                if ((ds.Tables["ServerPassword8"] != null)) {
                    base.Tables.Add(new ServerPassword8DataTable(ds.Tables["ServerPassword8"]));
                }
                if ((ds.Tables["StopServer"] != null)) {
                    base.Tables.Add(new StopServerDataTable(ds.Tables["StopServer"]));
                }
                if ((ds.Tables["ServerPassword9"] != null)) {
                    base.Tables.Add(new ServerPassword9DataTable(ds.Tables["ServerPassword9"]));
                }
                if ((ds.Tables["FlashUpload"] != null)) {
                    base.Tables.Add(new FlashUploadDataTable(ds.Tables["FlashUpload"]));
                }
                if ((ds.Tables["ServerPassword10"] != null)) {
                    base.Tables.Add(new ServerPassword10DataTable(ds.Tables["ServerPassword10"]));
                }
                if ((ds.Tables["GetUnlockingCodes"] != null)) {
                    base.Tables.Add(new GetUnlockingCodesDataTable(ds.Tables["GetUnlockingCodes"]));
                }
                if ((ds.Tables["SetActivationCodes"] != null)) {
                    base.Tables.Add(new SetActivationCodesDataTable(ds.Tables["SetActivationCodes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetServerStatusDataTable GetServerStatus {
            get {
                return this.tableGetServerStatus;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetParameterSettingsDataTable GetParameterSettings {
            get {
                return this.tableGetParameterSettings;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetOrderListDataTable GetOrderList {
            get {
                return this.tableGetOrderList;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerPasswordDataTable ServerPassword {
            get {
                return this.tableServerPassword;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SetServerPasswordDataTable SetServerPassword {
            get {
                return this.tableSetServerPassword;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OldPasswordDataTable OldPassword {
            get {
                return this.tableOldPassword;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NewPasswordDataTable NewPassword {
            get {
                return this.tableNewPassword;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerPassword1DataTable ServerPassword1 {
            get {
                return this.tableServerPassword1;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VerifyServerPasswordDataTable VerifyServerPassword {
            get {
                return this.tableVerifyServerPassword;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerPassword2DataTable ServerPassword2 {
            get {
                return this.tableServerPassword2;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CancelOrderDataTable CancelOrder {
            get {
                return this.tableCancelOrder;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerPassword3DataTable ServerPassword3 {
            get {
                return this.tableServerPassword3;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ChangeOrderDataTable ChangeOrder {
            get {
                return this.tableChangeOrder;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerPassword4DataTable ServerPassword4 {
            get {
                return this.tableServerPassword4;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SuspendOrderDataTable SuspendOrder {
            get {
                return this.tableSuspendOrder;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ResumeOrderDataTable ResumeOrder {
            get {
                return this.tableResumeOrder;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public QuantityDataTable Quantity {
            get {
                return this.tableQuantity;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EnableDeviceDataTable EnableDevice {
            get {
                return this.tableEnableDevice;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerPassword5DataTable ServerPassword5 {
            get {
                return this.tableServerPassword5;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AutoloaderDataTable Autoloader {
            get {
                return this.tableAutoloader;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RecorderDataTable Recorder {
            get {
                return this.tableRecorder;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrinterDataTable Printer {
            get {
                return this.tablePrinter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ResetInputBinsDataTable ResetInputBins {
            get {
                return this.tableResetInputBins;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SetDialogActionDataTable SetDialogAction {
            get {
                return this.tableSetDialogAction;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetSessionLogDataTable GetSessionLog {
            get {
                return this.tableGetSessionLog;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClearSessionLogDataTable ClearSessionLog {
            get {
                return this.tableClearSessionLog;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SetParameterDataTable SetParameter {
            get {
                return this.tableSetParameter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerPassword6DataTable ServerPassword6 {
            get {
                return this.tableServerPassword6;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SettingDataTable Setting {
            get {
                return this.tableSetting;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerDataTable Server {
            get {
                return this.tableServer;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ModeSettingsDataTable ModeSettings {
            get {
                return this.tableModeSettings;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerModeDataTable ServerMode {
            get {
                return this.tableServerMode;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OperatingModeDataTable OperatingMode {
            get {
                return this.tableOperatingMode;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UseFIFOModeDataTable UseFIFOMode {
            get {
                return this.tableUseFIFOMode;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CachingDataTable Caching {
            get {
                return this.tableCaching;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UseStaticCachingDataTable UseStaticCaching {
            get {
                return this.tableUseStaticCaching;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CacheDriveLettersDataTable CacheDriveLetters {
            get {
                return this.tableCacheDriveLetters;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RecordingDataTable Recording {
            get {
                return this.tableRecording;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SimulateRecordingDataTable SimulateRecording {
            get {
                return this.tableSimulateRecording;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UseNewMediaOnlyDataTable UseNewMediaOnly {
            get {
                return this.tableUseNewMediaOnly;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MaxRecordingSpeedDataTable MaxRecordingSpeed {
            get {
                return this.tableMaxRecordingSpeed;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MaxDVDRecordingSpeedDataTable MaxDVDRecordingSpeed {
            get {
                return this.tableMaxDVDRecordingSpeed;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DisableISOExtentFixupsDataTable DisableISOExtentFixups {
            get {
                return this.tableDisableISOExtentFixups;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RejectNonISODataTable RejectNonISO {
            get {
                return this.tableRejectNonISO;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AddPostgapToISODataTable AddPostgapToISO {
            get {
                return this.tableAddPostgapToISO;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EnableUsing90_100MinuteCDRsDataTable EnableUsing90_100MinuteCDRs {
            get {
                return this.tableEnableUsing90_100MinuteCDRs;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DestroyFailedRecordingsDataTable DestroyFailedRecordings {
            get {
                return this.tableDestroyFailedRecordings;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VerifyDataTable Verify {
            get {
                return this.tableVerify;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UseVerifyDataTable UseVerify {
            get {
                return this.tableUseVerify;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FrequencyDataTable Frequency {
            get {
                return this.tableFrequency;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UseChecksumDLLDataTable UseChecksumDLL {
            get {
                return this.tableUseChecksumDLL;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrintingDataTable Printing {
            get {
                return this.tablePrinting;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SimulatePrintingDataTable SimulatePrinting {
            get {
                return this.tableSimulatePrinting;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RejectPatternDataTable RejectPattern {
            get {
                return this.tableRejectPattern;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TakeOrdersWithLabelWithoutPrinterDataTable TakeOrdersWithLabelWithoutPrinter {
            get {
                return this.tableTakeOrdersWithLabelWithoutPrinter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ErrorOnLowInkLevelDataTable ErrorOnLowInkLevel {
            get {
                return this.tableErrorOnLowInkLevel;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LowInkThresholdPercentDataTable LowInkThresholdPercent {
            get {
                return this.tableLowInkThresholdPercent;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AutoloaderSettingsDataTable AutoloaderSettings {
            get {
                return this.tableAutoloaderSettings;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BinSettingDataTable BinSetting {
            get {
                return this.tableBinSetting;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MailslotSettingDataTable MailslotSetting {
            get {
                return this.tableMailslotSetting;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MediaSizeDataTable MediaSize {
            get {
                return this.tableMediaSize;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MediaTypeDataTable MediaType {
            get {
                return this.tableMediaType;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReadingDataTable Reading {
            get {
                return this.tableReading;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BarcodePortDataTable BarcodePort {
            get {
                return this.tableBarcodePort;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BarcodeAngleDataTable BarcodeAngle {
            get {
                return this.tableBarcodeAngle;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UseBarcodeIndexDataTable UseBarcodeIndex {
            get {
                return this.tableUseBarcodeIndex;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AutoBulkReadDataTable AutoBulkRead {
            get {
                return this.tableAutoBulkRead;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BaseFolderForImagesDataTable BaseFolderForImages {
            get {
                return this.tableBaseFolderForImages;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UseVolumeIDAsFolderNameDataTable UseVolumeIDAsFolderName {
            get {
                return this.tableUseVolumeIDAsFolderName;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UseBarcodeAsFolderNameDataTable UseBarcodeAsFolderName {
            get {
                return this.tableUseBarcodeAsFolderName;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExtractISOImagesToFoldersAndFilesDataTable ExtractISOImagesToFoldersAndFiles {
            get {
                return this.tableExtractISOImagesToFoldersAndFiles;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ImageTypeForAudioTracksDataTable ImageTypeForAudioTracks {
            get {
                return this.tableImageTypeForAudioTracks;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UseISRCAsFilenameForAudioTracksDataTable UseISRCAsFilenameForAudioTracks {
            get {
                return this.tableUseISRCAsFilenameForAudioTracks;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PutFailuresToRejectBinDataTable PutFailuresToRejectBin {
            get {
                return this.tablePutFailuresToRejectBin;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AudioReadSpeedDataTable AudioReadSpeed {
            get {
                return this.tableAudioReadSpeed;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PreferredReaderDataTable PreferredReader {
            get {
                return this.tablePreferredReader;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MediaCodesDataTable MediaCodes {
            get {
                return this.tableMediaCodes;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UseMediaCodesDataTable UseMediaCodes {
            get {
                return this.tableUseMediaCodes;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MediaCodeDataTable MediaCode {
            get {
                return this.tableMediaCode;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClearAllCodesDataTable ClearAllCodes {
            get {
                return this.tableClearAllCodes;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public KioskModeDataTable KioskMode {
            get {
                return this.tableKioskMode;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RecoverOrdersDataTable RecoverOrders {
            get {
                return this.tableRecoverOrders;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RunNoPrinterDataTable RunNoPrinter {
            get {
                return this.tableRunNoPrinter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AutoloaderRecoveryDataTable AutoloaderRecovery {
            get {
                return this.tableAutoloaderRecovery;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrinterRecoveryDataTable PrinterRecovery {
            get {
                return this.tablePrinterRecovery;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AutoRespondOnStartupDataTable AutoRespondOnStartup {
            get {
                return this.tableAutoRespondOnStartup;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PauseServerDataTable PauseServer {
            get {
                return this.tablePauseServer;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerPassword7DataTable ServerPassword7 {
            get {
                return this.tableServerPassword7;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ResumeServerDataTable ResumeServer {
            get {
                return this.tableResumeServer;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerPassword8DataTable ServerPassword8 {
            get {
                return this.tableServerPassword8;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StopServerDataTable StopServer {
            get {
                return this.tableStopServer;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerPassword9DataTable ServerPassword9 {
            get {
                return this.tableServerPassword9;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FlashUploadDataTable FlashUpload {
            get {
                return this.tableFlashUpload;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerPassword10DataTable ServerPassword10 {
            get {
                return this.tableServerPassword10;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetUnlockingCodesDataTable GetUnlockingCodes {
            get {
                return this.tableGetUnlockingCodes;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SetActivationCodesDataTable SetActivationCodes {
            get {
                return this.tableSetActivationCodes;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            ProductionServerRequest cln = ((ProductionServerRequest)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GetServerStatus"] != null)) {
                    base.Tables.Add(new GetServerStatusDataTable(ds.Tables["GetServerStatus"]));
                }
                if ((ds.Tables["GetParameterSettings"] != null)) {
                    base.Tables.Add(new GetParameterSettingsDataTable(ds.Tables["GetParameterSettings"]));
                }
                if ((ds.Tables["GetOrderList"] != null)) {
                    base.Tables.Add(new GetOrderListDataTable(ds.Tables["GetOrderList"]));
                }
                if ((ds.Tables["ServerPassword"] != null)) {
                    base.Tables.Add(new ServerPasswordDataTable(ds.Tables["ServerPassword"]));
                }
                if ((ds.Tables["SetServerPassword"] != null)) {
                    base.Tables.Add(new SetServerPasswordDataTable(ds.Tables["SetServerPassword"]));
                }
                if ((ds.Tables["OldPassword"] != null)) {
                    base.Tables.Add(new OldPasswordDataTable(ds.Tables["OldPassword"]));
                }
                if ((ds.Tables["NewPassword"] != null)) {
                    base.Tables.Add(new NewPasswordDataTable(ds.Tables["NewPassword"]));
                }
                if ((ds.Tables["ServerPassword1"] != null)) {
                    base.Tables.Add(new ServerPassword1DataTable(ds.Tables["ServerPassword1"]));
                }
                if ((ds.Tables["VerifyServerPassword"] != null)) {
                    base.Tables.Add(new VerifyServerPasswordDataTable(ds.Tables["VerifyServerPassword"]));
                }
                if ((ds.Tables["ServerPassword2"] != null)) {
                    base.Tables.Add(new ServerPassword2DataTable(ds.Tables["ServerPassword2"]));
                }
                if ((ds.Tables["CancelOrder"] != null)) {
                    base.Tables.Add(new CancelOrderDataTable(ds.Tables["CancelOrder"]));
                }
                if ((ds.Tables["ServerPassword3"] != null)) {
                    base.Tables.Add(new ServerPassword3DataTable(ds.Tables["ServerPassword3"]));
                }
                if ((ds.Tables["ChangeOrder"] != null)) {
                    base.Tables.Add(new ChangeOrderDataTable(ds.Tables["ChangeOrder"]));
                }
                if ((ds.Tables["ServerPassword4"] != null)) {
                    base.Tables.Add(new ServerPassword4DataTable(ds.Tables["ServerPassword4"]));
                }
                if ((ds.Tables["SuspendOrder"] != null)) {
                    base.Tables.Add(new SuspendOrderDataTable(ds.Tables["SuspendOrder"]));
                }
                if ((ds.Tables["ResumeOrder"] != null)) {
                    base.Tables.Add(new ResumeOrderDataTable(ds.Tables["ResumeOrder"]));
                }
                if ((ds.Tables["Quantity"] != null)) {
                    base.Tables.Add(new QuantityDataTable(ds.Tables["Quantity"]));
                }
                if ((ds.Tables["EnableDevice"] != null)) {
                    base.Tables.Add(new EnableDeviceDataTable(ds.Tables["EnableDevice"]));
                }
                if ((ds.Tables["ServerPassword5"] != null)) {
                    base.Tables.Add(new ServerPassword5DataTable(ds.Tables["ServerPassword5"]));
                }
                if ((ds.Tables["Autoloader"] != null)) {
                    base.Tables.Add(new AutoloaderDataTable(ds.Tables["Autoloader"]));
                }
                if ((ds.Tables["Recorder"] != null)) {
                    base.Tables.Add(new RecorderDataTable(ds.Tables["Recorder"]));
                }
                if ((ds.Tables["Printer"] != null)) {
                    base.Tables.Add(new PrinterDataTable(ds.Tables["Printer"]));
                }
                if ((ds.Tables["ResetInputBins"] != null)) {
                    base.Tables.Add(new ResetInputBinsDataTable(ds.Tables["ResetInputBins"]));
                }
                if ((ds.Tables["SetDialogAction"] != null)) {
                    base.Tables.Add(new SetDialogActionDataTable(ds.Tables["SetDialogAction"]));
                }
                if ((ds.Tables["GetSessionLog"] != null)) {
                    base.Tables.Add(new GetSessionLogDataTable(ds.Tables["GetSessionLog"]));
                }
                if ((ds.Tables["ClearSessionLog"] != null)) {
                    base.Tables.Add(new ClearSessionLogDataTable(ds.Tables["ClearSessionLog"]));
                }
                if ((ds.Tables["SetParameter"] != null)) {
                    base.Tables.Add(new SetParameterDataTable(ds.Tables["SetParameter"]));
                }
                if ((ds.Tables["ServerPassword6"] != null)) {
                    base.Tables.Add(new ServerPassword6DataTable(ds.Tables["ServerPassword6"]));
                }
                if ((ds.Tables["Setting"] != null)) {
                    base.Tables.Add(new SettingDataTable(ds.Tables["Setting"]));
                }
                if ((ds.Tables["Server"] != null)) {
                    base.Tables.Add(new ServerDataTable(ds.Tables["Server"]));
                }
                if ((ds.Tables["ModeSettings"] != null)) {
                    base.Tables.Add(new ModeSettingsDataTable(ds.Tables["ModeSettings"]));
                }
                if ((ds.Tables["ServerMode"] != null)) {
                    base.Tables.Add(new ServerModeDataTable(ds.Tables["ServerMode"]));
                }
                if ((ds.Tables["OperatingMode"] != null)) {
                    base.Tables.Add(new OperatingModeDataTable(ds.Tables["OperatingMode"]));
                }
                if ((ds.Tables["UseFIFOMode"] != null)) {
                    base.Tables.Add(new UseFIFOModeDataTable(ds.Tables["UseFIFOMode"]));
                }
                if ((ds.Tables["Caching"] != null)) {
                    base.Tables.Add(new CachingDataTable(ds.Tables["Caching"]));
                }
                if ((ds.Tables["UseStaticCaching"] != null)) {
                    base.Tables.Add(new UseStaticCachingDataTable(ds.Tables["UseStaticCaching"]));
                }
                if ((ds.Tables["CacheDriveLetters"] != null)) {
                    base.Tables.Add(new CacheDriveLettersDataTable(ds.Tables["CacheDriveLetters"]));
                }
                if ((ds.Tables["Recording"] != null)) {
                    base.Tables.Add(new RecordingDataTable(ds.Tables["Recording"]));
                }
                if ((ds.Tables["SimulateRecording"] != null)) {
                    base.Tables.Add(new SimulateRecordingDataTable(ds.Tables["SimulateRecording"]));
                }
                if ((ds.Tables["UseNewMediaOnly"] != null)) {
                    base.Tables.Add(new UseNewMediaOnlyDataTable(ds.Tables["UseNewMediaOnly"]));
                }
                if ((ds.Tables["MaxRecordingSpeed"] != null)) {
                    base.Tables.Add(new MaxRecordingSpeedDataTable(ds.Tables["MaxRecordingSpeed"]));
                }
                if ((ds.Tables["MaxDVDRecordingSpeed"] != null)) {
                    base.Tables.Add(new MaxDVDRecordingSpeedDataTable(ds.Tables["MaxDVDRecordingSpeed"]));
                }
                if ((ds.Tables["DisableISOExtentFixups"] != null)) {
                    base.Tables.Add(new DisableISOExtentFixupsDataTable(ds.Tables["DisableISOExtentFixups"]));
                }
                if ((ds.Tables["RejectNonISO"] != null)) {
                    base.Tables.Add(new RejectNonISODataTable(ds.Tables["RejectNonISO"]));
                }
                if ((ds.Tables["AddPostgapToISO"] != null)) {
                    base.Tables.Add(new AddPostgapToISODataTable(ds.Tables["AddPostgapToISO"]));
                }
                if ((ds.Tables["EnableUsing90_100MinuteCDRs"] != null)) {
                    base.Tables.Add(new EnableUsing90_100MinuteCDRsDataTable(ds.Tables["EnableUsing90_100MinuteCDRs"]));
                }
                if ((ds.Tables["DestroyFailedRecordings"] != null)) {
                    base.Tables.Add(new DestroyFailedRecordingsDataTable(ds.Tables["DestroyFailedRecordings"]));
                }
                if ((ds.Tables["Verify"] != null)) {
                    base.Tables.Add(new VerifyDataTable(ds.Tables["Verify"]));
                }
                if ((ds.Tables["UseVerify"] != null)) {
                    base.Tables.Add(new UseVerifyDataTable(ds.Tables["UseVerify"]));
                }
                if ((ds.Tables["Frequency"] != null)) {
                    base.Tables.Add(new FrequencyDataTable(ds.Tables["Frequency"]));
                }
                if ((ds.Tables["UseChecksumDLL"] != null)) {
                    base.Tables.Add(new UseChecksumDLLDataTable(ds.Tables["UseChecksumDLL"]));
                }
                if ((ds.Tables["Printing"] != null)) {
                    base.Tables.Add(new PrintingDataTable(ds.Tables["Printing"]));
                }
                if ((ds.Tables["SimulatePrinting"] != null)) {
                    base.Tables.Add(new SimulatePrintingDataTable(ds.Tables["SimulatePrinting"]));
                }
                if ((ds.Tables["RejectPattern"] != null)) {
                    base.Tables.Add(new RejectPatternDataTable(ds.Tables["RejectPattern"]));
                }
                if ((ds.Tables["TakeOrdersWithLabelWithoutPrinter"] != null)) {
                    base.Tables.Add(new TakeOrdersWithLabelWithoutPrinterDataTable(ds.Tables["TakeOrdersWithLabelWithoutPrinter"]));
                }
                if ((ds.Tables["ErrorOnLowInkLevel"] != null)) {
                    base.Tables.Add(new ErrorOnLowInkLevelDataTable(ds.Tables["ErrorOnLowInkLevel"]));
                }
                if ((ds.Tables["LowInkThresholdPercent"] != null)) {
                    base.Tables.Add(new LowInkThresholdPercentDataTable(ds.Tables["LowInkThresholdPercent"]));
                }
                if ((ds.Tables["AutoloaderSettings"] != null)) {
                    base.Tables.Add(new AutoloaderSettingsDataTable(ds.Tables["AutoloaderSettings"]));
                }
                if ((ds.Tables["BinSetting"] != null)) {
                    base.Tables.Add(new BinSettingDataTable(ds.Tables["BinSetting"]));
                }
                if ((ds.Tables["MailslotSetting"] != null)) {
                    base.Tables.Add(new MailslotSettingDataTable(ds.Tables["MailslotSetting"]));
                }
                if ((ds.Tables["MediaSize"] != null)) {
                    base.Tables.Add(new MediaSizeDataTable(ds.Tables["MediaSize"]));
                }
                if ((ds.Tables["MediaType"] != null)) {
                    base.Tables.Add(new MediaTypeDataTable(ds.Tables["MediaType"]));
                }
                if ((ds.Tables["Reading"] != null)) {
                    base.Tables.Add(new ReadingDataTable(ds.Tables["Reading"]));
                }
                if ((ds.Tables["BarcodePort"] != null)) {
                    base.Tables.Add(new BarcodePortDataTable(ds.Tables["BarcodePort"]));
                }
                if ((ds.Tables["BarcodeAngle"] != null)) {
                    base.Tables.Add(new BarcodeAngleDataTable(ds.Tables["BarcodeAngle"]));
                }
                if ((ds.Tables["UseBarcodeIndex"] != null)) {
                    base.Tables.Add(new UseBarcodeIndexDataTable(ds.Tables["UseBarcodeIndex"]));
                }
                if ((ds.Tables["AutoBulkRead"] != null)) {
                    base.Tables.Add(new AutoBulkReadDataTable(ds.Tables["AutoBulkRead"]));
                }
                if ((ds.Tables["BaseFolderForImages"] != null)) {
                    base.Tables.Add(new BaseFolderForImagesDataTable(ds.Tables["BaseFolderForImages"]));
                }
                if ((ds.Tables["UseVolumeIDAsFolderName"] != null)) {
                    base.Tables.Add(new UseVolumeIDAsFolderNameDataTable(ds.Tables["UseVolumeIDAsFolderName"]));
                }
                if ((ds.Tables["UseBarcodeAsFolderName"] != null)) {
                    base.Tables.Add(new UseBarcodeAsFolderNameDataTable(ds.Tables["UseBarcodeAsFolderName"]));
                }
                if ((ds.Tables["ExtractISOImagesToFoldersAndFiles"] != null)) {
                    base.Tables.Add(new ExtractISOImagesToFoldersAndFilesDataTable(ds.Tables["ExtractISOImagesToFoldersAndFiles"]));
                }
                if ((ds.Tables["ImageTypeForAudioTracks"] != null)) {
                    base.Tables.Add(new ImageTypeForAudioTracksDataTable(ds.Tables["ImageTypeForAudioTracks"]));
                }
                if ((ds.Tables["UseISRCAsFilenameForAudioTracks"] != null)) {
                    base.Tables.Add(new UseISRCAsFilenameForAudioTracksDataTable(ds.Tables["UseISRCAsFilenameForAudioTracks"]));
                }
                if ((ds.Tables["PutFailuresToRejectBin"] != null)) {
                    base.Tables.Add(new PutFailuresToRejectBinDataTable(ds.Tables["PutFailuresToRejectBin"]));
                }
                if ((ds.Tables["AudioReadSpeed"] != null)) {
                    base.Tables.Add(new AudioReadSpeedDataTable(ds.Tables["AudioReadSpeed"]));
                }
                if ((ds.Tables["PreferredReader"] != null)) {
                    base.Tables.Add(new PreferredReaderDataTable(ds.Tables["PreferredReader"]));
                }
                if ((ds.Tables["MediaCodes"] != null)) {
                    base.Tables.Add(new MediaCodesDataTable(ds.Tables["MediaCodes"]));
                }
                if ((ds.Tables["UseMediaCodes"] != null)) {
                    base.Tables.Add(new UseMediaCodesDataTable(ds.Tables["UseMediaCodes"]));
                }
                if ((ds.Tables["MediaCode"] != null)) {
                    base.Tables.Add(new MediaCodeDataTable(ds.Tables["MediaCode"]));
                }
                if ((ds.Tables["ClearAllCodes"] != null)) {
                    base.Tables.Add(new ClearAllCodesDataTable(ds.Tables["ClearAllCodes"]));
                }
                if ((ds.Tables["KioskMode"] != null)) {
                    base.Tables.Add(new KioskModeDataTable(ds.Tables["KioskMode"]));
                }
                if ((ds.Tables["RecoverOrders"] != null)) {
                    base.Tables.Add(new RecoverOrdersDataTable(ds.Tables["RecoverOrders"]));
                }
                if ((ds.Tables["RunNoPrinter"] != null)) {
                    base.Tables.Add(new RunNoPrinterDataTable(ds.Tables["RunNoPrinter"]));
                }
                if ((ds.Tables["AutoloaderRecovery"] != null)) {
                    base.Tables.Add(new AutoloaderRecoveryDataTable(ds.Tables["AutoloaderRecovery"]));
                }
                if ((ds.Tables["PrinterRecovery"] != null)) {
                    base.Tables.Add(new PrinterRecoveryDataTable(ds.Tables["PrinterRecovery"]));
                }
                if ((ds.Tables["AutoRespondOnStartup"] != null)) {
                    base.Tables.Add(new AutoRespondOnStartupDataTable(ds.Tables["AutoRespondOnStartup"]));
                }
                if ((ds.Tables["PauseServer"] != null)) {
                    base.Tables.Add(new PauseServerDataTable(ds.Tables["PauseServer"]));
                }
                if ((ds.Tables["ServerPassword7"] != null)) {
                    base.Tables.Add(new ServerPassword7DataTable(ds.Tables["ServerPassword7"]));
                }
                if ((ds.Tables["ResumeServer"] != null)) {
                    base.Tables.Add(new ResumeServerDataTable(ds.Tables["ResumeServer"]));
                }
                if ((ds.Tables["ServerPassword8"] != null)) {
                    base.Tables.Add(new ServerPassword8DataTable(ds.Tables["ServerPassword8"]));
                }
                if ((ds.Tables["StopServer"] != null)) {
                    base.Tables.Add(new StopServerDataTable(ds.Tables["StopServer"]));
                }
                if ((ds.Tables["ServerPassword9"] != null)) {
                    base.Tables.Add(new ServerPassword9DataTable(ds.Tables["ServerPassword9"]));
                }
                if ((ds.Tables["FlashUpload"] != null)) {
                    base.Tables.Add(new FlashUploadDataTable(ds.Tables["FlashUpload"]));
                }
                if ((ds.Tables["ServerPassword10"] != null)) {
                    base.Tables.Add(new ServerPassword10DataTable(ds.Tables["ServerPassword10"]));
                }
                if ((ds.Tables["GetUnlockingCodes"] != null)) {
                    base.Tables.Add(new GetUnlockingCodesDataTable(ds.Tables["GetUnlockingCodes"]));
                }
                if ((ds.Tables["SetActivationCodes"] != null)) {
                    base.Tables.Add(new SetActivationCodesDataTable(ds.Tables["SetActivationCodes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGetServerStatus = ((GetServerStatusDataTable)(base.Tables["GetServerStatus"]));
            if ((initTable == true)) {
                if ((this.tableGetServerStatus != null)) {
                    this.tableGetServerStatus.InitVars();
                }
            }
            this.tableGetParameterSettings = ((GetParameterSettingsDataTable)(base.Tables["GetParameterSettings"]));
            if ((initTable == true)) {
                if ((this.tableGetParameterSettings != null)) {
                    this.tableGetParameterSettings.InitVars();
                }
            }
            this.tableGetOrderList = ((GetOrderListDataTable)(base.Tables["GetOrderList"]));
            if ((initTable == true)) {
                if ((this.tableGetOrderList != null)) {
                    this.tableGetOrderList.InitVars();
                }
            }
            this.tableServerPassword = ((ServerPasswordDataTable)(base.Tables["ServerPassword"]));
            if ((initTable == true)) {
                if ((this.tableServerPassword != null)) {
                    this.tableServerPassword.InitVars();
                }
            }
            this.tableSetServerPassword = ((SetServerPasswordDataTable)(base.Tables["SetServerPassword"]));
            if ((initTable == true)) {
                if ((this.tableSetServerPassword != null)) {
                    this.tableSetServerPassword.InitVars();
                }
            }
            this.tableOldPassword = ((OldPasswordDataTable)(base.Tables["OldPassword"]));
            if ((initTable == true)) {
                if ((this.tableOldPassword != null)) {
                    this.tableOldPassword.InitVars();
                }
            }
            this.tableNewPassword = ((NewPasswordDataTable)(base.Tables["NewPassword"]));
            if ((initTable == true)) {
                if ((this.tableNewPassword != null)) {
                    this.tableNewPassword.InitVars();
                }
            }
            this.tableServerPassword1 = ((ServerPassword1DataTable)(base.Tables["ServerPassword1"]));
            if ((initTable == true)) {
                if ((this.tableServerPassword1 != null)) {
                    this.tableServerPassword1.InitVars();
                }
            }
            this.tableVerifyServerPassword = ((VerifyServerPasswordDataTable)(base.Tables["VerifyServerPassword"]));
            if ((initTable == true)) {
                if ((this.tableVerifyServerPassword != null)) {
                    this.tableVerifyServerPassword.InitVars();
                }
            }
            this.tableServerPassword2 = ((ServerPassword2DataTable)(base.Tables["ServerPassword2"]));
            if ((initTable == true)) {
                if ((this.tableServerPassword2 != null)) {
                    this.tableServerPassword2.InitVars();
                }
            }
            this.tableCancelOrder = ((CancelOrderDataTable)(base.Tables["CancelOrder"]));
            if ((initTable == true)) {
                if ((this.tableCancelOrder != null)) {
                    this.tableCancelOrder.InitVars();
                }
            }
            this.tableServerPassword3 = ((ServerPassword3DataTable)(base.Tables["ServerPassword3"]));
            if ((initTable == true)) {
                if ((this.tableServerPassword3 != null)) {
                    this.tableServerPassword3.InitVars();
                }
            }
            this.tableChangeOrder = ((ChangeOrderDataTable)(base.Tables["ChangeOrder"]));
            if ((initTable == true)) {
                if ((this.tableChangeOrder != null)) {
                    this.tableChangeOrder.InitVars();
                }
            }
            this.tableServerPassword4 = ((ServerPassword4DataTable)(base.Tables["ServerPassword4"]));
            if ((initTable == true)) {
                if ((this.tableServerPassword4 != null)) {
                    this.tableServerPassword4.InitVars();
                }
            }
            this.tableSuspendOrder = ((SuspendOrderDataTable)(base.Tables["SuspendOrder"]));
            if ((initTable == true)) {
                if ((this.tableSuspendOrder != null)) {
                    this.tableSuspendOrder.InitVars();
                }
            }
            this.tableResumeOrder = ((ResumeOrderDataTable)(base.Tables["ResumeOrder"]));
            if ((initTable == true)) {
                if ((this.tableResumeOrder != null)) {
                    this.tableResumeOrder.InitVars();
                }
            }
            this.tableQuantity = ((QuantityDataTable)(base.Tables["Quantity"]));
            if ((initTable == true)) {
                if ((this.tableQuantity != null)) {
                    this.tableQuantity.InitVars();
                }
            }
            this.tableEnableDevice = ((EnableDeviceDataTable)(base.Tables["EnableDevice"]));
            if ((initTable == true)) {
                if ((this.tableEnableDevice != null)) {
                    this.tableEnableDevice.InitVars();
                }
            }
            this.tableServerPassword5 = ((ServerPassword5DataTable)(base.Tables["ServerPassword5"]));
            if ((initTable == true)) {
                if ((this.tableServerPassword5 != null)) {
                    this.tableServerPassword5.InitVars();
                }
            }
            this.tableAutoloader = ((AutoloaderDataTable)(base.Tables["Autoloader"]));
            if ((initTable == true)) {
                if ((this.tableAutoloader != null)) {
                    this.tableAutoloader.InitVars();
                }
            }
            this.tableRecorder = ((RecorderDataTable)(base.Tables["Recorder"]));
            if ((initTable == true)) {
                if ((this.tableRecorder != null)) {
                    this.tableRecorder.InitVars();
                }
            }
            this.tablePrinter = ((PrinterDataTable)(base.Tables["Printer"]));
            if ((initTable == true)) {
                if ((this.tablePrinter != null)) {
                    this.tablePrinter.InitVars();
                }
            }
            this.tableResetInputBins = ((ResetInputBinsDataTable)(base.Tables["ResetInputBins"]));
            if ((initTable == true)) {
                if ((this.tableResetInputBins != null)) {
                    this.tableResetInputBins.InitVars();
                }
            }
            this.tableSetDialogAction = ((SetDialogActionDataTable)(base.Tables["SetDialogAction"]));
            if ((initTable == true)) {
                if ((this.tableSetDialogAction != null)) {
                    this.tableSetDialogAction.InitVars();
                }
            }
            this.tableGetSessionLog = ((GetSessionLogDataTable)(base.Tables["GetSessionLog"]));
            if ((initTable == true)) {
                if ((this.tableGetSessionLog != null)) {
                    this.tableGetSessionLog.InitVars();
                }
            }
            this.tableClearSessionLog = ((ClearSessionLogDataTable)(base.Tables["ClearSessionLog"]));
            if ((initTable == true)) {
                if ((this.tableClearSessionLog != null)) {
                    this.tableClearSessionLog.InitVars();
                }
            }
            this.tableSetParameter = ((SetParameterDataTable)(base.Tables["SetParameter"]));
            if ((initTable == true)) {
                if ((this.tableSetParameter != null)) {
                    this.tableSetParameter.InitVars();
                }
            }
            this.tableServerPassword6 = ((ServerPassword6DataTable)(base.Tables["ServerPassword6"]));
            if ((initTable == true)) {
                if ((this.tableServerPassword6 != null)) {
                    this.tableServerPassword6.InitVars();
                }
            }
            this.tableSetting = ((SettingDataTable)(base.Tables["Setting"]));
            if ((initTable == true)) {
                if ((this.tableSetting != null)) {
                    this.tableSetting.InitVars();
                }
            }
            this.tableServer = ((ServerDataTable)(base.Tables["Server"]));
            if ((initTable == true)) {
                if ((this.tableServer != null)) {
                    this.tableServer.InitVars();
                }
            }
            this.tableModeSettings = ((ModeSettingsDataTable)(base.Tables["ModeSettings"]));
            if ((initTable == true)) {
                if ((this.tableModeSettings != null)) {
                    this.tableModeSettings.InitVars();
                }
            }
            this.tableServerMode = ((ServerModeDataTable)(base.Tables["ServerMode"]));
            if ((initTable == true)) {
                if ((this.tableServerMode != null)) {
                    this.tableServerMode.InitVars();
                }
            }
            this.tableOperatingMode = ((OperatingModeDataTable)(base.Tables["OperatingMode"]));
            if ((initTable == true)) {
                if ((this.tableOperatingMode != null)) {
                    this.tableOperatingMode.InitVars();
                }
            }
            this.tableUseFIFOMode = ((UseFIFOModeDataTable)(base.Tables["UseFIFOMode"]));
            if ((initTable == true)) {
                if ((this.tableUseFIFOMode != null)) {
                    this.tableUseFIFOMode.InitVars();
                }
            }
            this.tableCaching = ((CachingDataTable)(base.Tables["Caching"]));
            if ((initTable == true)) {
                if ((this.tableCaching != null)) {
                    this.tableCaching.InitVars();
                }
            }
            this.tableUseStaticCaching = ((UseStaticCachingDataTable)(base.Tables["UseStaticCaching"]));
            if ((initTable == true)) {
                if ((this.tableUseStaticCaching != null)) {
                    this.tableUseStaticCaching.InitVars();
                }
            }
            this.tableCacheDriveLetters = ((CacheDriveLettersDataTable)(base.Tables["CacheDriveLetters"]));
            if ((initTable == true)) {
                if ((this.tableCacheDriveLetters != null)) {
                    this.tableCacheDriveLetters.InitVars();
                }
            }
            this.tableRecording = ((RecordingDataTable)(base.Tables["Recording"]));
            if ((initTable == true)) {
                if ((this.tableRecording != null)) {
                    this.tableRecording.InitVars();
                }
            }
            this.tableSimulateRecording = ((SimulateRecordingDataTable)(base.Tables["SimulateRecording"]));
            if ((initTable == true)) {
                if ((this.tableSimulateRecording != null)) {
                    this.tableSimulateRecording.InitVars();
                }
            }
            this.tableUseNewMediaOnly = ((UseNewMediaOnlyDataTable)(base.Tables["UseNewMediaOnly"]));
            if ((initTable == true)) {
                if ((this.tableUseNewMediaOnly != null)) {
                    this.tableUseNewMediaOnly.InitVars();
                }
            }
            this.tableMaxRecordingSpeed = ((MaxRecordingSpeedDataTable)(base.Tables["MaxRecordingSpeed"]));
            if ((initTable == true)) {
                if ((this.tableMaxRecordingSpeed != null)) {
                    this.tableMaxRecordingSpeed.InitVars();
                }
            }
            this.tableMaxDVDRecordingSpeed = ((MaxDVDRecordingSpeedDataTable)(base.Tables["MaxDVDRecordingSpeed"]));
            if ((initTable == true)) {
                if ((this.tableMaxDVDRecordingSpeed != null)) {
                    this.tableMaxDVDRecordingSpeed.InitVars();
                }
            }
            this.tableDisableISOExtentFixups = ((DisableISOExtentFixupsDataTable)(base.Tables["DisableISOExtentFixups"]));
            if ((initTable == true)) {
                if ((this.tableDisableISOExtentFixups != null)) {
                    this.tableDisableISOExtentFixups.InitVars();
                }
            }
            this.tableRejectNonISO = ((RejectNonISODataTable)(base.Tables["RejectNonISO"]));
            if ((initTable == true)) {
                if ((this.tableRejectNonISO != null)) {
                    this.tableRejectNonISO.InitVars();
                }
            }
            this.tableAddPostgapToISO = ((AddPostgapToISODataTable)(base.Tables["AddPostgapToISO"]));
            if ((initTable == true)) {
                if ((this.tableAddPostgapToISO != null)) {
                    this.tableAddPostgapToISO.InitVars();
                }
            }
            this.tableEnableUsing90_100MinuteCDRs = ((EnableUsing90_100MinuteCDRsDataTable)(base.Tables["EnableUsing90_100MinuteCDRs"]));
            if ((initTable == true)) {
                if ((this.tableEnableUsing90_100MinuteCDRs != null)) {
                    this.tableEnableUsing90_100MinuteCDRs.InitVars();
                }
            }
            this.tableDestroyFailedRecordings = ((DestroyFailedRecordingsDataTable)(base.Tables["DestroyFailedRecordings"]));
            if ((initTable == true)) {
                if ((this.tableDestroyFailedRecordings != null)) {
                    this.tableDestroyFailedRecordings.InitVars();
                }
            }
            this.tableVerify = ((VerifyDataTable)(base.Tables["Verify"]));
            if ((initTable == true)) {
                if ((this.tableVerify != null)) {
                    this.tableVerify.InitVars();
                }
            }
            this.tableUseVerify = ((UseVerifyDataTable)(base.Tables["UseVerify"]));
            if ((initTable == true)) {
                if ((this.tableUseVerify != null)) {
                    this.tableUseVerify.InitVars();
                }
            }
            this.tableFrequency = ((FrequencyDataTable)(base.Tables["Frequency"]));
            if ((initTable == true)) {
                if ((this.tableFrequency != null)) {
                    this.tableFrequency.InitVars();
                }
            }
            this.tableUseChecksumDLL = ((UseChecksumDLLDataTable)(base.Tables["UseChecksumDLL"]));
            if ((initTable == true)) {
                if ((this.tableUseChecksumDLL != null)) {
                    this.tableUseChecksumDLL.InitVars();
                }
            }
            this.tablePrinting = ((PrintingDataTable)(base.Tables["Printing"]));
            if ((initTable == true)) {
                if ((this.tablePrinting != null)) {
                    this.tablePrinting.InitVars();
                }
            }
            this.tableSimulatePrinting = ((SimulatePrintingDataTable)(base.Tables["SimulatePrinting"]));
            if ((initTable == true)) {
                if ((this.tableSimulatePrinting != null)) {
                    this.tableSimulatePrinting.InitVars();
                }
            }
            this.tableRejectPattern = ((RejectPatternDataTable)(base.Tables["RejectPattern"]));
            if ((initTable == true)) {
                if ((this.tableRejectPattern != null)) {
                    this.tableRejectPattern.InitVars();
                }
            }
            this.tableTakeOrdersWithLabelWithoutPrinter = ((TakeOrdersWithLabelWithoutPrinterDataTable)(base.Tables["TakeOrdersWithLabelWithoutPrinter"]));
            if ((initTable == true)) {
                if ((this.tableTakeOrdersWithLabelWithoutPrinter != null)) {
                    this.tableTakeOrdersWithLabelWithoutPrinter.InitVars();
                }
            }
            this.tableErrorOnLowInkLevel = ((ErrorOnLowInkLevelDataTable)(base.Tables["ErrorOnLowInkLevel"]));
            if ((initTable == true)) {
                if ((this.tableErrorOnLowInkLevel != null)) {
                    this.tableErrorOnLowInkLevel.InitVars();
                }
            }
            this.tableLowInkThresholdPercent = ((LowInkThresholdPercentDataTable)(base.Tables["LowInkThresholdPercent"]));
            if ((initTable == true)) {
                if ((this.tableLowInkThresholdPercent != null)) {
                    this.tableLowInkThresholdPercent.InitVars();
                }
            }
            this.tableAutoloaderSettings = ((AutoloaderSettingsDataTable)(base.Tables["AutoloaderSettings"]));
            if ((initTable == true)) {
                if ((this.tableAutoloaderSettings != null)) {
                    this.tableAutoloaderSettings.InitVars();
                }
            }
            this.tableBinSetting = ((BinSettingDataTable)(base.Tables["BinSetting"]));
            if ((initTable == true)) {
                if ((this.tableBinSetting != null)) {
                    this.tableBinSetting.InitVars();
                }
            }
            this.tableMailslotSetting = ((MailslotSettingDataTable)(base.Tables["MailslotSetting"]));
            if ((initTable == true)) {
                if ((this.tableMailslotSetting != null)) {
                    this.tableMailslotSetting.InitVars();
                }
            }
            this.tableMediaSize = ((MediaSizeDataTable)(base.Tables["MediaSize"]));
            if ((initTable == true)) {
                if ((this.tableMediaSize != null)) {
                    this.tableMediaSize.InitVars();
                }
            }
            this.tableMediaType = ((MediaTypeDataTable)(base.Tables["MediaType"]));
            if ((initTable == true)) {
                if ((this.tableMediaType != null)) {
                    this.tableMediaType.InitVars();
                }
            }
            this.tableReading = ((ReadingDataTable)(base.Tables["Reading"]));
            if ((initTable == true)) {
                if ((this.tableReading != null)) {
                    this.tableReading.InitVars();
                }
            }
            this.tableBarcodePort = ((BarcodePortDataTable)(base.Tables["BarcodePort"]));
            if ((initTable == true)) {
                if ((this.tableBarcodePort != null)) {
                    this.tableBarcodePort.InitVars();
                }
            }
            this.tableBarcodeAngle = ((BarcodeAngleDataTable)(base.Tables["BarcodeAngle"]));
            if ((initTable == true)) {
                if ((this.tableBarcodeAngle != null)) {
                    this.tableBarcodeAngle.InitVars();
                }
            }
            this.tableUseBarcodeIndex = ((UseBarcodeIndexDataTable)(base.Tables["UseBarcodeIndex"]));
            if ((initTable == true)) {
                if ((this.tableUseBarcodeIndex != null)) {
                    this.tableUseBarcodeIndex.InitVars();
                }
            }
            this.tableAutoBulkRead = ((AutoBulkReadDataTable)(base.Tables["AutoBulkRead"]));
            if ((initTable == true)) {
                if ((this.tableAutoBulkRead != null)) {
                    this.tableAutoBulkRead.InitVars();
                }
            }
            this.tableBaseFolderForImages = ((BaseFolderForImagesDataTable)(base.Tables["BaseFolderForImages"]));
            if ((initTable == true)) {
                if ((this.tableBaseFolderForImages != null)) {
                    this.tableBaseFolderForImages.InitVars();
                }
            }
            this.tableUseVolumeIDAsFolderName = ((UseVolumeIDAsFolderNameDataTable)(base.Tables["UseVolumeIDAsFolderName"]));
            if ((initTable == true)) {
                if ((this.tableUseVolumeIDAsFolderName != null)) {
                    this.tableUseVolumeIDAsFolderName.InitVars();
                }
            }
            this.tableUseBarcodeAsFolderName = ((UseBarcodeAsFolderNameDataTable)(base.Tables["UseBarcodeAsFolderName"]));
            if ((initTable == true)) {
                if ((this.tableUseBarcodeAsFolderName != null)) {
                    this.tableUseBarcodeAsFolderName.InitVars();
                }
            }
            this.tableExtractISOImagesToFoldersAndFiles = ((ExtractISOImagesToFoldersAndFilesDataTable)(base.Tables["ExtractISOImagesToFoldersAndFiles"]));
            if ((initTable == true)) {
                if ((this.tableExtractISOImagesToFoldersAndFiles != null)) {
                    this.tableExtractISOImagesToFoldersAndFiles.InitVars();
                }
            }
            this.tableImageTypeForAudioTracks = ((ImageTypeForAudioTracksDataTable)(base.Tables["ImageTypeForAudioTracks"]));
            if ((initTable == true)) {
                if ((this.tableImageTypeForAudioTracks != null)) {
                    this.tableImageTypeForAudioTracks.InitVars();
                }
            }
            this.tableUseISRCAsFilenameForAudioTracks = ((UseISRCAsFilenameForAudioTracksDataTable)(base.Tables["UseISRCAsFilenameForAudioTracks"]));
            if ((initTable == true)) {
                if ((this.tableUseISRCAsFilenameForAudioTracks != null)) {
                    this.tableUseISRCAsFilenameForAudioTracks.InitVars();
                }
            }
            this.tablePutFailuresToRejectBin = ((PutFailuresToRejectBinDataTable)(base.Tables["PutFailuresToRejectBin"]));
            if ((initTable == true)) {
                if ((this.tablePutFailuresToRejectBin != null)) {
                    this.tablePutFailuresToRejectBin.InitVars();
                }
            }
            this.tableAudioReadSpeed = ((AudioReadSpeedDataTable)(base.Tables["AudioReadSpeed"]));
            if ((initTable == true)) {
                if ((this.tableAudioReadSpeed != null)) {
                    this.tableAudioReadSpeed.InitVars();
                }
            }
            this.tablePreferredReader = ((PreferredReaderDataTable)(base.Tables["PreferredReader"]));
            if ((initTable == true)) {
                if ((this.tablePreferredReader != null)) {
                    this.tablePreferredReader.InitVars();
                }
            }
            this.tableMediaCodes = ((MediaCodesDataTable)(base.Tables["MediaCodes"]));
            if ((initTable == true)) {
                if ((this.tableMediaCodes != null)) {
                    this.tableMediaCodes.InitVars();
                }
            }
            this.tableUseMediaCodes = ((UseMediaCodesDataTable)(base.Tables["UseMediaCodes"]));
            if ((initTable == true)) {
                if ((this.tableUseMediaCodes != null)) {
                    this.tableUseMediaCodes.InitVars();
                }
            }
            this.tableMediaCode = ((MediaCodeDataTable)(base.Tables["MediaCode"]));
            if ((initTable == true)) {
                if ((this.tableMediaCode != null)) {
                    this.tableMediaCode.InitVars();
                }
            }
            this.tableClearAllCodes = ((ClearAllCodesDataTable)(base.Tables["ClearAllCodes"]));
            if ((initTable == true)) {
                if ((this.tableClearAllCodes != null)) {
                    this.tableClearAllCodes.InitVars();
                }
            }
            this.tableKioskMode = ((KioskModeDataTable)(base.Tables["KioskMode"]));
            if ((initTable == true)) {
                if ((this.tableKioskMode != null)) {
                    this.tableKioskMode.InitVars();
                }
            }
            this.tableRecoverOrders = ((RecoverOrdersDataTable)(base.Tables["RecoverOrders"]));
            if ((initTable == true)) {
                if ((this.tableRecoverOrders != null)) {
                    this.tableRecoverOrders.InitVars();
                }
            }
            this.tableRunNoPrinter = ((RunNoPrinterDataTable)(base.Tables["RunNoPrinter"]));
            if ((initTable == true)) {
                if ((this.tableRunNoPrinter != null)) {
                    this.tableRunNoPrinter.InitVars();
                }
            }
            this.tableAutoloaderRecovery = ((AutoloaderRecoveryDataTable)(base.Tables["AutoloaderRecovery"]));
            if ((initTable == true)) {
                if ((this.tableAutoloaderRecovery != null)) {
                    this.tableAutoloaderRecovery.InitVars();
                }
            }
            this.tablePrinterRecovery = ((PrinterRecoveryDataTable)(base.Tables["PrinterRecovery"]));
            if ((initTable == true)) {
                if ((this.tablePrinterRecovery != null)) {
                    this.tablePrinterRecovery.InitVars();
                }
            }
            this.tableAutoRespondOnStartup = ((AutoRespondOnStartupDataTable)(base.Tables["AutoRespondOnStartup"]));
            if ((initTable == true)) {
                if ((this.tableAutoRespondOnStartup != null)) {
                    this.tableAutoRespondOnStartup.InitVars();
                }
            }
            this.tablePauseServer = ((PauseServerDataTable)(base.Tables["PauseServer"]));
            if ((initTable == true)) {
                if ((this.tablePauseServer != null)) {
                    this.tablePauseServer.InitVars();
                }
            }
            this.tableServerPassword7 = ((ServerPassword7DataTable)(base.Tables["ServerPassword7"]));
            if ((initTable == true)) {
                if ((this.tableServerPassword7 != null)) {
                    this.tableServerPassword7.InitVars();
                }
            }
            this.tableResumeServer = ((ResumeServerDataTable)(base.Tables["ResumeServer"]));
            if ((initTable == true)) {
                if ((this.tableResumeServer != null)) {
                    this.tableResumeServer.InitVars();
                }
            }
            this.tableServerPassword8 = ((ServerPassword8DataTable)(base.Tables["ServerPassword8"]));
            if ((initTable == true)) {
                if ((this.tableServerPassword8 != null)) {
                    this.tableServerPassword8.InitVars();
                }
            }
            this.tableStopServer = ((StopServerDataTable)(base.Tables["StopServer"]));
            if ((initTable == true)) {
                if ((this.tableStopServer != null)) {
                    this.tableStopServer.InitVars();
                }
            }
            this.tableServerPassword9 = ((ServerPassword9DataTable)(base.Tables["ServerPassword9"]));
            if ((initTable == true)) {
                if ((this.tableServerPassword9 != null)) {
                    this.tableServerPassword9.InitVars();
                }
            }
            this.tableFlashUpload = ((FlashUploadDataTable)(base.Tables["FlashUpload"]));
            if ((initTable == true)) {
                if ((this.tableFlashUpload != null)) {
                    this.tableFlashUpload.InitVars();
                }
            }
            this.tableServerPassword10 = ((ServerPassword10DataTable)(base.Tables["ServerPassword10"]));
            if ((initTable == true)) {
                if ((this.tableServerPassword10 != null)) {
                    this.tableServerPassword10.InitVars();
                }
            }
            this.tableGetUnlockingCodes = ((GetUnlockingCodesDataTable)(base.Tables["GetUnlockingCodes"]));
            if ((initTable == true)) {
                if ((this.tableGetUnlockingCodes != null)) {
                    this.tableGetUnlockingCodes.InitVars();
                }
            }
            this.tableSetActivationCodes = ((SetActivationCodesDataTable)(base.Tables["SetActivationCodes"]));
            if ((initTable == true)) {
                if ((this.tableSetActivationCodes != null)) {
                    this.tableSetActivationCodes.InitVars();
                }
            }
            this.relationOldPassword_ServerPassword = this.Relations["OldPassword_ServerPassword"];
            this.relationSetServerPassword_OldPassword = this.Relations["SetServerPassword_OldPassword"];
            this.relationSetServerPassword_NewPassword = this.Relations["SetServerPassword_NewPassword"];
            this.relationNewPassword_ServerPassword1 = this.Relations["NewPassword_ServerPassword1"];
            this.relationVerifyServerPassword_ServerPassword2 = this.Relations["VerifyServerPassword_ServerPassword2"];
            this.relationCancelOrder_ServerPassword3 = this.Relations["CancelOrder_ServerPassword3"];
            this.relationChangeOrder_ServerPassword4 = this.Relations["ChangeOrder_ServerPassword4"];
            this.relationChangeOrder_SuspendOrder = this.Relations["ChangeOrder_SuspendOrder"];
            this.relationChangeOrder_ResumeOrder = this.Relations["ChangeOrder_ResumeOrder"];
            this.relationChangeOrder_Quantity = this.Relations["ChangeOrder_Quantity"];
            this.relationEnableDevice_ServerPassword5 = this.Relations["EnableDevice_ServerPassword5"];
            this.relationEnableDevice_Autoloader = this.Relations["EnableDevice_Autoloader"];
            this.relationEnableDevice_Recorder = this.Relations["EnableDevice_Recorder"];
            this.relationEnableDevice_Printer = this.Relations["EnableDevice_Printer"];
            this.relationSetParameter_ServerPassword6 = this.Relations["SetParameter_ServerPassword6"];
            this.relationSetParameter_Setting = this.Relations["SetParameter_Setting"];
            this.relationSetting_Server = this.Relations["Setting_Server"];
            this.relationSetting_ModeSettings = this.Relations["Setting_ModeSettings"];
            this.relationModeSettings_ServerMode = this.Relations["ModeSettings_ServerMode"];
            this.relationModeSettings_OperatingMode = this.Relations["ModeSettings_OperatingMode"];
            this.relationModeSettings_UseFIFOMode = this.Relations["ModeSettings_UseFIFOMode"];
            this.relationSetting_Caching = this.Relations["Setting_Caching"];
            this.relationCaching_UseStaticCaching = this.Relations["Caching_UseStaticCaching"];
            this.relationCaching_CacheDriveLetters = this.Relations["Caching_CacheDriveLetters"];
            this.relationSetting_Recording = this.Relations["Setting_Recording"];
            this.relationRecording_SimulateRecording = this.Relations["Recording_SimulateRecording"];
            this.relationRecording_UseNewMediaOnly = this.Relations["Recording_UseNewMediaOnly"];
            this.relationRecording_MaxRecordingSpeed = this.Relations["Recording_MaxRecordingSpeed"];
            this.relationRecording_MaxDVDRecordingSpeed = this.Relations["Recording_MaxDVDRecordingSpeed"];
            this.relationRecording_DisableISOExtentFixups = this.Relations["Recording_DisableISOExtentFixups"];
            this.relationRecording_RejectNonISO = this.Relations["Recording_RejectNonISO"];
            this.relationRecording_AddPostgapToISO = this.Relations["Recording_AddPostgapToISO"];
            this.relationRecording_EnableUsing90_100MinuteCDRs = this.Relations["Recording_EnableUsing90_100MinuteCDRs"];
            this.relationRecording_DestroyFailedRecordings = this.Relations["Recording_DestroyFailedRecordings"];
            this.relationSetting_Verify = this.Relations["Setting_Verify"];
            this.relationVerify_UseVerify = this.Relations["Verify_UseVerify"];
            this.relationVerify_Frequency = this.Relations["Verify_Frequency"];
            this.relationVerify_UseChecksumDLL = this.Relations["Verify_UseChecksumDLL"];
            this.relationSetting_Printing = this.Relations["Setting_Printing"];
            this.relationPrinting_SimulatePrinting = this.Relations["Printing_SimulatePrinting"];
            this.relationPrinting_RejectPattern = this.Relations["Printing_RejectPattern"];
            this.relationPrinting_TakeOrdersWithLabelWithoutPrinter = this.Relations["Printing_TakeOrdersWithLabelWithoutPrinter"];
            this.relationPrinting_ErrorOnLowInkLevel = this.Relations["Printing_ErrorOnLowInkLevel"];
            this.relationPrinting_LowInkThresholdPercent = this.Relations["Printing_LowInkThresholdPercent"];
            this.relationSetting_AutoloaderSettings = this.Relations["Setting_AutoloaderSettings"];
            this.relationAutoloaderSettings_BinSetting = this.Relations["AutoloaderSettings_BinSetting"];
            this.relationAutoloaderSettings_MailslotSetting = this.Relations["AutoloaderSettings_MailslotSetting"];
            this.relationAutoloaderSettings_MediaSize = this.Relations["AutoloaderSettings_MediaSize"];
            this.relationAutoloaderSettings_MediaType = this.Relations["AutoloaderSettings_MediaType"];
            this.relationSetting_Reading = this.Relations["Setting_Reading"];
            this.relationReading_BarcodePort = this.Relations["Reading_BarcodePort"];
            this.relationReading_BarcodeAngle = this.Relations["Reading_BarcodeAngle"];
            this.relationReading_UseBarcodeIndex = this.Relations["Reading_UseBarcodeIndex"];
            this.relationReading_AutoBulkRead = this.Relations["Reading_AutoBulkRead"];
            this.relationAutoBulkRead_BaseFolderForImages = this.Relations["AutoBulkRead_BaseFolderForImages"];
            this.relationAutoBulkRead_UseVolumeIDAsFolderName = this.Relations["AutoBulkRead_UseVolumeIDAsFolderName"];
            this.relationAutoBulkRead_UseBarcodeAsFolderName = this.Relations["AutoBulkRead_UseBarcodeAsFolderName"];
            this.relationAutoBulkRead_ExtractISOImagesToFoldersAndFiles = this.Relations["AutoBulkRead_ExtractISOImagesToFoldersAndFiles"];
            this.relationAutoBulkRead_ImageTypeForAudioTracks = this.Relations["AutoBulkRead_ImageTypeForAudioTracks"];
            this.relationAutoBulkRead_UseISRCAsFilenameForAudioTracks = this.Relations["AutoBulkRead_UseISRCAsFilenameForAudioTracks"];
            this.relationAutoBulkRead_PutFailuresToRejectBin = this.Relations["AutoBulkRead_PutFailuresToRejectBin"];
            this.relationReading_AudioReadSpeed = this.Relations["Reading_AudioReadSpeed"];
            this.relationReading_PreferredReader = this.Relations["Reading_PreferredReader"];
            this.relationSetting_MediaCodes = this.Relations["Setting_MediaCodes"];
            this.relationMediaCodes_UseMediaCodes = this.Relations["MediaCodes_UseMediaCodes"];
            this.relationMediaCodes_MediaCode = this.Relations["MediaCodes_MediaCode"];
            this.relationMediaCodes_ClearAllCodes = this.Relations["MediaCodes_ClearAllCodes"];
            this.relationSetting_KioskMode = this.Relations["Setting_KioskMode"];
            this.relationKioskMode_RecoverOrders = this.Relations["KioskMode_RecoverOrders"];
            this.relationKioskMode_RunNoPrinter = this.Relations["KioskMode_RunNoPrinter"];
            this.relationKioskMode_AutoloaderRecovery = this.Relations["KioskMode_AutoloaderRecovery"];
            this.relationKioskMode_PrinterRecovery = this.Relations["KioskMode_PrinterRecovery"];
            this.relationKioskMode_AutoRespondOnStartup = this.Relations["KioskMode_AutoRespondOnStartup"];
            this.relationPauseServer_ServerPassword7 = this.Relations["PauseServer_ServerPassword7"];
            this.relationResumeServer_ServerPassword8 = this.Relations["ResumeServer_ServerPassword8"];
            this.relationStopServer_ServerPassword9 = this.Relations["StopServer_ServerPassword9"];
            this.relationFlashUpload_ServerPassword10 = this.Relations["FlashUpload_ServerPassword10"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ProductionServerRequest";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGetServerStatus = new GetServerStatusDataTable();
            base.Tables.Add(this.tableGetServerStatus);
            this.tableGetParameterSettings = new GetParameterSettingsDataTable();
            base.Tables.Add(this.tableGetParameterSettings);
            this.tableGetOrderList = new GetOrderListDataTable();
            base.Tables.Add(this.tableGetOrderList);
            this.tableServerPassword = new ServerPasswordDataTable();
            base.Tables.Add(this.tableServerPassword);
            this.tableSetServerPassword = new SetServerPasswordDataTable();
            base.Tables.Add(this.tableSetServerPassword);
            this.tableOldPassword = new OldPasswordDataTable();
            base.Tables.Add(this.tableOldPassword);
            this.tableNewPassword = new NewPasswordDataTable();
            base.Tables.Add(this.tableNewPassword);
            this.tableServerPassword1 = new ServerPassword1DataTable();
            base.Tables.Add(this.tableServerPassword1);
            this.tableVerifyServerPassword = new VerifyServerPasswordDataTable();
            base.Tables.Add(this.tableVerifyServerPassword);
            this.tableServerPassword2 = new ServerPassword2DataTable();
            base.Tables.Add(this.tableServerPassword2);
            this.tableCancelOrder = new CancelOrderDataTable();
            base.Tables.Add(this.tableCancelOrder);
            this.tableServerPassword3 = new ServerPassword3DataTable();
            base.Tables.Add(this.tableServerPassword3);
            this.tableChangeOrder = new ChangeOrderDataTable();
            base.Tables.Add(this.tableChangeOrder);
            this.tableServerPassword4 = new ServerPassword4DataTable();
            base.Tables.Add(this.tableServerPassword4);
            this.tableSuspendOrder = new SuspendOrderDataTable();
            base.Tables.Add(this.tableSuspendOrder);
            this.tableResumeOrder = new ResumeOrderDataTable();
            base.Tables.Add(this.tableResumeOrder);
            this.tableQuantity = new QuantityDataTable();
            base.Tables.Add(this.tableQuantity);
            this.tableEnableDevice = new EnableDeviceDataTable();
            base.Tables.Add(this.tableEnableDevice);
            this.tableServerPassword5 = new ServerPassword5DataTable();
            base.Tables.Add(this.tableServerPassword5);
            this.tableAutoloader = new AutoloaderDataTable();
            base.Tables.Add(this.tableAutoloader);
            this.tableRecorder = new RecorderDataTable();
            base.Tables.Add(this.tableRecorder);
            this.tablePrinter = new PrinterDataTable();
            base.Tables.Add(this.tablePrinter);
            this.tableResetInputBins = new ResetInputBinsDataTable();
            base.Tables.Add(this.tableResetInputBins);
            this.tableSetDialogAction = new SetDialogActionDataTable();
            base.Tables.Add(this.tableSetDialogAction);
            this.tableGetSessionLog = new GetSessionLogDataTable();
            base.Tables.Add(this.tableGetSessionLog);
            this.tableClearSessionLog = new ClearSessionLogDataTable();
            base.Tables.Add(this.tableClearSessionLog);
            this.tableSetParameter = new SetParameterDataTable();
            base.Tables.Add(this.tableSetParameter);
            this.tableServerPassword6 = new ServerPassword6DataTable();
            base.Tables.Add(this.tableServerPassword6);
            this.tableSetting = new SettingDataTable();
            base.Tables.Add(this.tableSetting);
            this.tableServer = new ServerDataTable();
            base.Tables.Add(this.tableServer);
            this.tableModeSettings = new ModeSettingsDataTable();
            base.Tables.Add(this.tableModeSettings);
            this.tableServerMode = new ServerModeDataTable();
            base.Tables.Add(this.tableServerMode);
            this.tableOperatingMode = new OperatingModeDataTable();
            base.Tables.Add(this.tableOperatingMode);
            this.tableUseFIFOMode = new UseFIFOModeDataTable();
            base.Tables.Add(this.tableUseFIFOMode);
            this.tableCaching = new CachingDataTable();
            base.Tables.Add(this.tableCaching);
            this.tableUseStaticCaching = new UseStaticCachingDataTable();
            base.Tables.Add(this.tableUseStaticCaching);
            this.tableCacheDriveLetters = new CacheDriveLettersDataTable();
            base.Tables.Add(this.tableCacheDriveLetters);
            this.tableRecording = new RecordingDataTable();
            base.Tables.Add(this.tableRecording);
            this.tableSimulateRecording = new SimulateRecordingDataTable();
            base.Tables.Add(this.tableSimulateRecording);
            this.tableUseNewMediaOnly = new UseNewMediaOnlyDataTable();
            base.Tables.Add(this.tableUseNewMediaOnly);
            this.tableMaxRecordingSpeed = new MaxRecordingSpeedDataTable();
            base.Tables.Add(this.tableMaxRecordingSpeed);
            this.tableMaxDVDRecordingSpeed = new MaxDVDRecordingSpeedDataTable();
            base.Tables.Add(this.tableMaxDVDRecordingSpeed);
            this.tableDisableISOExtentFixups = new DisableISOExtentFixupsDataTable();
            base.Tables.Add(this.tableDisableISOExtentFixups);
            this.tableRejectNonISO = new RejectNonISODataTable();
            base.Tables.Add(this.tableRejectNonISO);
            this.tableAddPostgapToISO = new AddPostgapToISODataTable();
            base.Tables.Add(this.tableAddPostgapToISO);
            this.tableEnableUsing90_100MinuteCDRs = new EnableUsing90_100MinuteCDRsDataTable();
            base.Tables.Add(this.tableEnableUsing90_100MinuteCDRs);
            this.tableDestroyFailedRecordings = new DestroyFailedRecordingsDataTable();
            base.Tables.Add(this.tableDestroyFailedRecordings);
            this.tableVerify = new VerifyDataTable();
            base.Tables.Add(this.tableVerify);
            this.tableUseVerify = new UseVerifyDataTable();
            base.Tables.Add(this.tableUseVerify);
            this.tableFrequency = new FrequencyDataTable();
            base.Tables.Add(this.tableFrequency);
            this.tableUseChecksumDLL = new UseChecksumDLLDataTable();
            base.Tables.Add(this.tableUseChecksumDLL);
            this.tablePrinting = new PrintingDataTable();
            base.Tables.Add(this.tablePrinting);
            this.tableSimulatePrinting = new SimulatePrintingDataTable();
            base.Tables.Add(this.tableSimulatePrinting);
            this.tableRejectPattern = new RejectPatternDataTable();
            base.Tables.Add(this.tableRejectPattern);
            this.tableTakeOrdersWithLabelWithoutPrinter = new TakeOrdersWithLabelWithoutPrinterDataTable();
            base.Tables.Add(this.tableTakeOrdersWithLabelWithoutPrinter);
            this.tableErrorOnLowInkLevel = new ErrorOnLowInkLevelDataTable();
            base.Tables.Add(this.tableErrorOnLowInkLevel);
            this.tableLowInkThresholdPercent = new LowInkThresholdPercentDataTable();
            base.Tables.Add(this.tableLowInkThresholdPercent);
            this.tableAutoloaderSettings = new AutoloaderSettingsDataTable();
            base.Tables.Add(this.tableAutoloaderSettings);
            this.tableBinSetting = new BinSettingDataTable();
            base.Tables.Add(this.tableBinSetting);
            this.tableMailslotSetting = new MailslotSettingDataTable();
            base.Tables.Add(this.tableMailslotSetting);
            this.tableMediaSize = new MediaSizeDataTable();
            base.Tables.Add(this.tableMediaSize);
            this.tableMediaType = new MediaTypeDataTable();
            base.Tables.Add(this.tableMediaType);
            this.tableReading = new ReadingDataTable();
            base.Tables.Add(this.tableReading);
            this.tableBarcodePort = new BarcodePortDataTable();
            base.Tables.Add(this.tableBarcodePort);
            this.tableBarcodeAngle = new BarcodeAngleDataTable();
            base.Tables.Add(this.tableBarcodeAngle);
            this.tableUseBarcodeIndex = new UseBarcodeIndexDataTable();
            base.Tables.Add(this.tableUseBarcodeIndex);
            this.tableAutoBulkRead = new AutoBulkReadDataTable();
            base.Tables.Add(this.tableAutoBulkRead);
            this.tableBaseFolderForImages = new BaseFolderForImagesDataTable();
            base.Tables.Add(this.tableBaseFolderForImages);
            this.tableUseVolumeIDAsFolderName = new UseVolumeIDAsFolderNameDataTable();
            base.Tables.Add(this.tableUseVolumeIDAsFolderName);
            this.tableUseBarcodeAsFolderName = new UseBarcodeAsFolderNameDataTable();
            base.Tables.Add(this.tableUseBarcodeAsFolderName);
            this.tableExtractISOImagesToFoldersAndFiles = new ExtractISOImagesToFoldersAndFilesDataTable();
            base.Tables.Add(this.tableExtractISOImagesToFoldersAndFiles);
            this.tableImageTypeForAudioTracks = new ImageTypeForAudioTracksDataTable();
            base.Tables.Add(this.tableImageTypeForAudioTracks);
            this.tableUseISRCAsFilenameForAudioTracks = new UseISRCAsFilenameForAudioTracksDataTable();
            base.Tables.Add(this.tableUseISRCAsFilenameForAudioTracks);
            this.tablePutFailuresToRejectBin = new PutFailuresToRejectBinDataTable();
            base.Tables.Add(this.tablePutFailuresToRejectBin);
            this.tableAudioReadSpeed = new AudioReadSpeedDataTable();
            base.Tables.Add(this.tableAudioReadSpeed);
            this.tablePreferredReader = new PreferredReaderDataTable();
            base.Tables.Add(this.tablePreferredReader);
            this.tableMediaCodes = new MediaCodesDataTable();
            base.Tables.Add(this.tableMediaCodes);
            this.tableUseMediaCodes = new UseMediaCodesDataTable();
            base.Tables.Add(this.tableUseMediaCodes);
            this.tableMediaCode = new MediaCodeDataTable();
            base.Tables.Add(this.tableMediaCode);
            this.tableClearAllCodes = new ClearAllCodesDataTable();
            base.Tables.Add(this.tableClearAllCodes);
            this.tableKioskMode = new KioskModeDataTable();
            base.Tables.Add(this.tableKioskMode);
            this.tableRecoverOrders = new RecoverOrdersDataTable();
            base.Tables.Add(this.tableRecoverOrders);
            this.tableRunNoPrinter = new RunNoPrinterDataTable();
            base.Tables.Add(this.tableRunNoPrinter);
            this.tableAutoloaderRecovery = new AutoloaderRecoveryDataTable();
            base.Tables.Add(this.tableAutoloaderRecovery);
            this.tablePrinterRecovery = new PrinterRecoveryDataTable();
            base.Tables.Add(this.tablePrinterRecovery);
            this.tableAutoRespondOnStartup = new AutoRespondOnStartupDataTable();
            base.Tables.Add(this.tableAutoRespondOnStartup);
            this.tablePauseServer = new PauseServerDataTable();
            base.Tables.Add(this.tablePauseServer);
            this.tableServerPassword7 = new ServerPassword7DataTable();
            base.Tables.Add(this.tableServerPassword7);
            this.tableResumeServer = new ResumeServerDataTable();
            base.Tables.Add(this.tableResumeServer);
            this.tableServerPassword8 = new ServerPassword8DataTable();
            base.Tables.Add(this.tableServerPassword8);
            this.tableStopServer = new StopServerDataTable();
            base.Tables.Add(this.tableStopServer);
            this.tableServerPassword9 = new ServerPassword9DataTable();
            base.Tables.Add(this.tableServerPassword9);
            this.tableFlashUpload = new FlashUploadDataTable();
            base.Tables.Add(this.tableFlashUpload);
            this.tableServerPassword10 = new ServerPassword10DataTable();
            base.Tables.Add(this.tableServerPassword10);
            this.tableGetUnlockingCodes = new GetUnlockingCodesDataTable();
            base.Tables.Add(this.tableGetUnlockingCodes);
            this.tableSetActivationCodes = new SetActivationCodesDataTable();
            base.Tables.Add(this.tableSetActivationCodes);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("OldPassword_ServerPassword", new System.Data.DataColumn[] {
                        this.tableOldPassword.OldPassword_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerPassword.OldPassword_IdColumn});
            this.tableServerPassword.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("SetServerPassword_OldPassword", new System.Data.DataColumn[] {
                        this.tableSetServerPassword.SetServerPassword_IdColumn}, new System.Data.DataColumn[] {
                        this.tableOldPassword.SetServerPassword_IdColumn});
            this.tableOldPassword.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("SetServerPassword_NewPassword", new System.Data.DataColumn[] {
                        this.tableSetServerPassword.SetServerPassword_IdColumn}, new System.Data.DataColumn[] {
                        this.tableNewPassword.SetServerPassword_IdColumn});
            this.tableNewPassword.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("NewPassword_ServerPassword1", new System.Data.DataColumn[] {
                        this.tableNewPassword.NewPassword_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerPassword1.NewPassword_IdColumn});
            this.tableServerPassword1.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("VerifyServerPassword_ServerPassword2", new System.Data.DataColumn[] {
                        this.tableVerifyServerPassword.VerifyServerPassword_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerPassword2.VerifyServerPassword_IdColumn});
            this.tableServerPassword2.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("CancelOrder_ServerPassword3", new System.Data.DataColumn[] {
                        this.tableCancelOrder.CancelOrder_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerPassword3.CancelOrder_IdColumn});
            this.tableServerPassword3.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ChangeOrder_ServerPassword4", new System.Data.DataColumn[] {
                        this.tableChangeOrder.ChangeOrder_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerPassword4.ChangeOrder_IdColumn});
            this.tableServerPassword4.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ChangeOrder_SuspendOrder", new System.Data.DataColumn[] {
                        this.tableChangeOrder.ChangeOrder_IdColumn}, new System.Data.DataColumn[] {
                        this.tableSuspendOrder.ChangeOrder_IdColumn});
            this.tableSuspendOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ChangeOrder_ResumeOrder", new System.Data.DataColumn[] {
                        this.tableChangeOrder.ChangeOrder_IdColumn}, new System.Data.DataColumn[] {
                        this.tableResumeOrder.ChangeOrder_IdColumn});
            this.tableResumeOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ChangeOrder_Quantity", new System.Data.DataColumn[] {
                        this.tableChangeOrder.ChangeOrder_IdColumn}, new System.Data.DataColumn[] {
                        this.tableQuantity.ChangeOrder_IdColumn});
            this.tableQuantity.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("EnableDevice_ServerPassword5", new System.Data.DataColumn[] {
                        this.tableEnableDevice.EnableDevice_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerPassword5.EnableDevice_IdColumn});
            this.tableServerPassword5.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("EnableDevice_Autoloader", new System.Data.DataColumn[] {
                        this.tableEnableDevice.EnableDevice_IdColumn}, new System.Data.DataColumn[] {
                        this.tableAutoloader.EnableDevice_IdColumn});
            this.tableAutoloader.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("EnableDevice_Recorder", new System.Data.DataColumn[] {
                        this.tableEnableDevice.EnableDevice_IdColumn}, new System.Data.DataColumn[] {
                        this.tableRecorder.EnableDevice_IdColumn});
            this.tableRecorder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("EnableDevice_Printer", new System.Data.DataColumn[] {
                        this.tableEnableDevice.EnableDevice_IdColumn}, new System.Data.DataColumn[] {
                        this.tablePrinter.EnableDevice_IdColumn});
            this.tablePrinter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("SetParameter_ServerPassword6", new System.Data.DataColumn[] {
                        this.tableSetParameter.SetParameter_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerPassword6.SetParameter_IdColumn});
            this.tableServerPassword6.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("SetParameter_Setting", new System.Data.DataColumn[] {
                        this.tableSetParameter.SetParameter_IdColumn}, new System.Data.DataColumn[] {
                        this.tableSetting.SetParameter_IdColumn});
            this.tableSetting.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Setting_Server", new System.Data.DataColumn[] {
                        this.tableSetting.Setting_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServer.Setting_IdColumn});
            this.tableServer.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Setting_ModeSettings", new System.Data.DataColumn[] {
                        this.tableSetting.Setting_IdColumn}, new System.Data.DataColumn[] {
                        this.tableModeSettings.Setting_IdColumn});
            this.tableModeSettings.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ModeSettings_ServerMode", new System.Data.DataColumn[] {
                        this.tableModeSettings.ModeSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerMode.ModeSettings_IdColumn});
            this.tableServerMode.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ModeSettings_OperatingMode", new System.Data.DataColumn[] {
                        this.tableModeSettings.ModeSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableOperatingMode.ModeSettings_IdColumn});
            this.tableOperatingMode.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ModeSettings_UseFIFOMode", new System.Data.DataColumn[] {
                        this.tableModeSettings.ModeSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableUseFIFOMode.ModeSettings_IdColumn});
            this.tableUseFIFOMode.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Setting_Caching", new System.Data.DataColumn[] {
                        this.tableSetting.Setting_IdColumn}, new System.Data.DataColumn[] {
                        this.tableCaching.Setting_IdColumn});
            this.tableCaching.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Caching_UseStaticCaching", new System.Data.DataColumn[] {
                        this.tableCaching.Caching_IdColumn}, new System.Data.DataColumn[] {
                        this.tableUseStaticCaching.Caching_IdColumn});
            this.tableUseStaticCaching.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Caching_CacheDriveLetters", new System.Data.DataColumn[] {
                        this.tableCaching.Caching_IdColumn}, new System.Data.DataColumn[] {
                        this.tableCacheDriveLetters.Caching_IdColumn});
            this.tableCacheDriveLetters.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Setting_Recording", new System.Data.DataColumn[] {
                        this.tableSetting.Setting_IdColumn}, new System.Data.DataColumn[] {
                        this.tableRecording.Setting_IdColumn});
            this.tableRecording.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Recording_SimulateRecording", new System.Data.DataColumn[] {
                        this.tableRecording.Recording_IdColumn}, new System.Data.DataColumn[] {
                        this.tableSimulateRecording.Recording_IdColumn});
            this.tableSimulateRecording.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Recording_UseNewMediaOnly", new System.Data.DataColumn[] {
                        this.tableRecording.Recording_IdColumn}, new System.Data.DataColumn[] {
                        this.tableUseNewMediaOnly.Recording_IdColumn});
            this.tableUseNewMediaOnly.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Recording_MaxRecordingSpeed", new System.Data.DataColumn[] {
                        this.tableRecording.Recording_IdColumn}, new System.Data.DataColumn[] {
                        this.tableMaxRecordingSpeed.Recording_IdColumn});
            this.tableMaxRecordingSpeed.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Recording_MaxDVDRecordingSpeed", new System.Data.DataColumn[] {
                        this.tableRecording.Recording_IdColumn}, new System.Data.DataColumn[] {
                        this.tableMaxDVDRecordingSpeed.Recording_IdColumn});
            this.tableMaxDVDRecordingSpeed.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Recording_DisableISOExtentFixups", new System.Data.DataColumn[] {
                        this.tableRecording.Recording_IdColumn}, new System.Data.DataColumn[] {
                        this.tableDisableISOExtentFixups.Recording_IdColumn});
            this.tableDisableISOExtentFixups.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Recording_RejectNonISO", new System.Data.DataColumn[] {
                        this.tableRecording.Recording_IdColumn}, new System.Data.DataColumn[] {
                        this.tableRejectNonISO.Recording_IdColumn});
            this.tableRejectNonISO.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Recording_AddPostgapToISO", new System.Data.DataColumn[] {
                        this.tableRecording.Recording_IdColumn}, new System.Data.DataColumn[] {
                        this.tableAddPostgapToISO.Recording_IdColumn});
            this.tableAddPostgapToISO.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Recording_EnableUsing90_100MinuteCDRs", new System.Data.DataColumn[] {
                        this.tableRecording.Recording_IdColumn}, new System.Data.DataColumn[] {
                        this.tableEnableUsing90_100MinuteCDRs.Recording_IdColumn});
            this.tableEnableUsing90_100MinuteCDRs.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Recording_DestroyFailedRecordings", new System.Data.DataColumn[] {
                        this.tableRecording.Recording_IdColumn}, new System.Data.DataColumn[] {
                        this.tableDestroyFailedRecordings.Recording_IdColumn});
            this.tableDestroyFailedRecordings.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Setting_Verify", new System.Data.DataColumn[] {
                        this.tableSetting.Setting_IdColumn}, new System.Data.DataColumn[] {
                        this.tableVerify.Setting_IdColumn});
            this.tableVerify.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Verify_UseVerify", new System.Data.DataColumn[] {
                        this.tableVerify.Verify_IdColumn}, new System.Data.DataColumn[] {
                        this.tableUseVerify.Verify_IdColumn});
            this.tableUseVerify.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Verify_Frequency", new System.Data.DataColumn[] {
                        this.tableVerify.Verify_IdColumn}, new System.Data.DataColumn[] {
                        this.tableFrequency.Verify_IdColumn});
            this.tableFrequency.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Verify_UseChecksumDLL", new System.Data.DataColumn[] {
                        this.tableVerify.Verify_IdColumn}, new System.Data.DataColumn[] {
                        this.tableUseChecksumDLL.Verify_IdColumn});
            this.tableUseChecksumDLL.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Setting_Printing", new System.Data.DataColumn[] {
                        this.tableSetting.Setting_IdColumn}, new System.Data.DataColumn[] {
                        this.tablePrinting.Setting_IdColumn});
            this.tablePrinting.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Printing_SimulatePrinting", new System.Data.DataColumn[] {
                        this.tablePrinting.Printing_IdColumn}, new System.Data.DataColumn[] {
                        this.tableSimulatePrinting.Printing_IdColumn});
            this.tableSimulatePrinting.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Printing_RejectPattern", new System.Data.DataColumn[] {
                        this.tablePrinting.Printing_IdColumn}, new System.Data.DataColumn[] {
                        this.tableRejectPattern.Printing_IdColumn});
            this.tableRejectPattern.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Printing_TakeOrdersWithLabelWithoutPrinter", new System.Data.DataColumn[] {
                        this.tablePrinting.Printing_IdColumn}, new System.Data.DataColumn[] {
                        this.tableTakeOrdersWithLabelWithoutPrinter.Printing_IdColumn});
            this.tableTakeOrdersWithLabelWithoutPrinter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Printing_ErrorOnLowInkLevel", new System.Data.DataColumn[] {
                        this.tablePrinting.Printing_IdColumn}, new System.Data.DataColumn[] {
                        this.tableErrorOnLowInkLevel.Printing_IdColumn});
            this.tableErrorOnLowInkLevel.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Printing_LowInkThresholdPercent", new System.Data.DataColumn[] {
                        this.tablePrinting.Printing_IdColumn}, new System.Data.DataColumn[] {
                        this.tableLowInkThresholdPercent.Printing_IdColumn});
            this.tableLowInkThresholdPercent.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Setting_AutoloaderSettings", new System.Data.DataColumn[] {
                        this.tableSetting.Setting_IdColumn}, new System.Data.DataColumn[] {
                        this.tableAutoloaderSettings.Setting_IdColumn});
            this.tableAutoloaderSettings.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("AutoloaderSettings_BinSetting", new System.Data.DataColumn[] {
                        this.tableAutoloaderSettings.AutoloaderSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableBinSetting.AutoloaderSettings_IdColumn});
            this.tableBinSetting.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("AutoloaderSettings_MailslotSetting", new System.Data.DataColumn[] {
                        this.tableAutoloaderSettings.AutoloaderSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableMailslotSetting.AutoloaderSettings_IdColumn});
            this.tableMailslotSetting.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("AutoloaderSettings_MediaSize", new System.Data.DataColumn[] {
                        this.tableAutoloaderSettings.AutoloaderSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableMediaSize.AutoloaderSettings_IdColumn});
            this.tableMediaSize.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("AutoloaderSettings_MediaType", new System.Data.DataColumn[] {
                        this.tableAutoloaderSettings.AutoloaderSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableMediaType.AutoloaderSettings_IdColumn});
            this.tableMediaType.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Setting_Reading", new System.Data.DataColumn[] {
                        this.tableSetting.Setting_IdColumn}, new System.Data.DataColumn[] {
                        this.tableReading.Setting_IdColumn});
            this.tableReading.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Reading_BarcodePort", new System.Data.DataColumn[] {
                        this.tableReading.Reading_IdColumn}, new System.Data.DataColumn[] {
                        this.tableBarcodePort.Reading_IdColumn});
            this.tableBarcodePort.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Reading_BarcodeAngle", new System.Data.DataColumn[] {
                        this.tableReading.Reading_IdColumn}, new System.Data.DataColumn[] {
                        this.tableBarcodeAngle.Reading_IdColumn});
            this.tableBarcodeAngle.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Reading_UseBarcodeIndex", new System.Data.DataColumn[] {
                        this.tableReading.Reading_IdColumn}, new System.Data.DataColumn[] {
                        this.tableUseBarcodeIndex.Reading_IdColumn});
            this.tableUseBarcodeIndex.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Reading_AutoBulkRead", new System.Data.DataColumn[] {
                        this.tableReading.Reading_IdColumn}, new System.Data.DataColumn[] {
                        this.tableAutoBulkRead.Reading_IdColumn});
            this.tableAutoBulkRead.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("AutoBulkRead_BaseFolderForImages", new System.Data.DataColumn[] {
                        this.tableAutoBulkRead.AutoBulkRead_IdColumn}, new System.Data.DataColumn[] {
                        this.tableBaseFolderForImages.AutoBulkRead_IdColumn});
            this.tableBaseFolderForImages.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("AutoBulkRead_UseVolumeIDAsFolderName", new System.Data.DataColumn[] {
                        this.tableAutoBulkRead.AutoBulkRead_IdColumn}, new System.Data.DataColumn[] {
                        this.tableUseVolumeIDAsFolderName.AutoBulkRead_IdColumn});
            this.tableUseVolumeIDAsFolderName.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("AutoBulkRead_UseBarcodeAsFolderName", new System.Data.DataColumn[] {
                        this.tableAutoBulkRead.AutoBulkRead_IdColumn}, new System.Data.DataColumn[] {
                        this.tableUseBarcodeAsFolderName.AutoBulkRead_IdColumn});
            this.tableUseBarcodeAsFolderName.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("AutoBulkRead_ExtractISOImagesToFoldersAndFiles", new System.Data.DataColumn[] {
                        this.tableAutoBulkRead.AutoBulkRead_IdColumn}, new System.Data.DataColumn[] {
                        this.tableExtractISOImagesToFoldersAndFiles.AutoBulkRead_IdColumn});
            this.tableExtractISOImagesToFoldersAndFiles.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("AutoBulkRead_ImageTypeForAudioTracks", new System.Data.DataColumn[] {
                        this.tableAutoBulkRead.AutoBulkRead_IdColumn}, new System.Data.DataColumn[] {
                        this.tableImageTypeForAudioTracks.AutoBulkRead_IdColumn});
            this.tableImageTypeForAudioTracks.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("AutoBulkRead_UseISRCAsFilenameForAudioTracks", new System.Data.DataColumn[] {
                        this.tableAutoBulkRead.AutoBulkRead_IdColumn}, new System.Data.DataColumn[] {
                        this.tableUseISRCAsFilenameForAudioTracks.AutoBulkRead_IdColumn});
            this.tableUseISRCAsFilenameForAudioTracks.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("AutoBulkRead_PutFailuresToRejectBin", new System.Data.DataColumn[] {
                        this.tableAutoBulkRead.AutoBulkRead_IdColumn}, new System.Data.DataColumn[] {
                        this.tablePutFailuresToRejectBin.AutoBulkRead_IdColumn});
            this.tablePutFailuresToRejectBin.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Reading_AudioReadSpeed", new System.Data.DataColumn[] {
                        this.tableReading.Reading_IdColumn}, new System.Data.DataColumn[] {
                        this.tableAudioReadSpeed.Reading_IdColumn});
            this.tableAudioReadSpeed.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Reading_PreferredReader", new System.Data.DataColumn[] {
                        this.tableReading.Reading_IdColumn}, new System.Data.DataColumn[] {
                        this.tablePreferredReader.Reading_IdColumn});
            this.tablePreferredReader.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Setting_MediaCodes", new System.Data.DataColumn[] {
                        this.tableSetting.Setting_IdColumn}, new System.Data.DataColumn[] {
                        this.tableMediaCodes.Setting_IdColumn});
            this.tableMediaCodes.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("MediaCodes_UseMediaCodes", new System.Data.DataColumn[] {
                        this.tableMediaCodes.MediaCodes_IdColumn}, new System.Data.DataColumn[] {
                        this.tableUseMediaCodes.MediaCodes_IdColumn});
            this.tableUseMediaCodes.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("MediaCodes_MediaCode", new System.Data.DataColumn[] {
                        this.tableMediaCodes.MediaCodes_IdColumn}, new System.Data.DataColumn[] {
                        this.tableMediaCode.MediaCodes_IdColumn});
            this.tableMediaCode.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("MediaCodes_ClearAllCodes", new System.Data.DataColumn[] {
                        this.tableMediaCodes.MediaCodes_IdColumn}, new System.Data.DataColumn[] {
                        this.tableClearAllCodes.MediaCodes_IdColumn});
            this.tableClearAllCodes.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Setting_KioskMode", new System.Data.DataColumn[] {
                        this.tableSetting.Setting_IdColumn}, new System.Data.DataColumn[] {
                        this.tableKioskMode.Setting_IdColumn});
            this.tableKioskMode.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("KioskMode_RecoverOrders", new System.Data.DataColumn[] {
                        this.tableKioskMode.KioskMode_IdColumn}, new System.Data.DataColumn[] {
                        this.tableRecoverOrders.KioskMode_IdColumn});
            this.tableRecoverOrders.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("KioskMode_RunNoPrinter", new System.Data.DataColumn[] {
                        this.tableKioskMode.KioskMode_IdColumn}, new System.Data.DataColumn[] {
                        this.tableRunNoPrinter.KioskMode_IdColumn});
            this.tableRunNoPrinter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("KioskMode_AutoloaderRecovery", new System.Data.DataColumn[] {
                        this.tableKioskMode.KioskMode_IdColumn}, new System.Data.DataColumn[] {
                        this.tableAutoloaderRecovery.KioskMode_IdColumn});
            this.tableAutoloaderRecovery.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("KioskMode_PrinterRecovery", new System.Data.DataColumn[] {
                        this.tableKioskMode.KioskMode_IdColumn}, new System.Data.DataColumn[] {
                        this.tablePrinterRecovery.KioskMode_IdColumn});
            this.tablePrinterRecovery.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("KioskMode_AutoRespondOnStartup", new System.Data.DataColumn[] {
                        this.tableKioskMode.KioskMode_IdColumn}, new System.Data.DataColumn[] {
                        this.tableAutoRespondOnStartup.KioskMode_IdColumn});
            this.tableAutoRespondOnStartup.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("PauseServer_ServerPassword7", new System.Data.DataColumn[] {
                        this.tablePauseServer.PauseServer_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerPassword7.PauseServer_IdColumn});
            this.tableServerPassword7.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ResumeServer_ServerPassword8", new System.Data.DataColumn[] {
                        this.tableResumeServer.ResumeServer_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerPassword8.ResumeServer_IdColumn});
            this.tableServerPassword8.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("StopServer_ServerPassword9", new System.Data.DataColumn[] {
                        this.tableStopServer.StopServer_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerPassword9.StopServer_IdColumn});
            this.tableServerPassword9.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FlashUpload_ServerPassword10", new System.Data.DataColumn[] {
                        this.tableFlashUpload.FlashUpload_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerPassword10.FlashUpload_IdColumn});
            this.tableServerPassword10.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationOldPassword_ServerPassword = new System.Data.DataRelation("OldPassword_ServerPassword", new System.Data.DataColumn[] {
                        this.tableOldPassword.OldPassword_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerPassword.OldPassword_IdColumn}, false);
            this.relationOldPassword_ServerPassword.Nested = true;
            this.Relations.Add(this.relationOldPassword_ServerPassword);
            this.relationSetServerPassword_OldPassword = new System.Data.DataRelation("SetServerPassword_OldPassword", new System.Data.DataColumn[] {
                        this.tableSetServerPassword.SetServerPassword_IdColumn}, new System.Data.DataColumn[] {
                        this.tableOldPassword.SetServerPassword_IdColumn}, false);
            this.relationSetServerPassword_OldPassword.Nested = true;
            this.Relations.Add(this.relationSetServerPassword_OldPassword);
            this.relationSetServerPassword_NewPassword = new System.Data.DataRelation("SetServerPassword_NewPassword", new System.Data.DataColumn[] {
                        this.tableSetServerPassword.SetServerPassword_IdColumn}, new System.Data.DataColumn[] {
                        this.tableNewPassword.SetServerPassword_IdColumn}, false);
            this.relationSetServerPassword_NewPassword.Nested = true;
            this.Relations.Add(this.relationSetServerPassword_NewPassword);
            this.relationNewPassword_ServerPassword1 = new System.Data.DataRelation("NewPassword_ServerPassword1", new System.Data.DataColumn[] {
                        this.tableNewPassword.NewPassword_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerPassword1.NewPassword_IdColumn}, false);
            this.relationNewPassword_ServerPassword1.Nested = true;
            this.Relations.Add(this.relationNewPassword_ServerPassword1);
            this.relationVerifyServerPassword_ServerPassword2 = new System.Data.DataRelation("VerifyServerPassword_ServerPassword2", new System.Data.DataColumn[] {
                        this.tableVerifyServerPassword.VerifyServerPassword_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerPassword2.VerifyServerPassword_IdColumn}, false);
            this.relationVerifyServerPassword_ServerPassword2.Nested = true;
            this.Relations.Add(this.relationVerifyServerPassword_ServerPassword2);
            this.relationCancelOrder_ServerPassword3 = new System.Data.DataRelation("CancelOrder_ServerPassword3", new System.Data.DataColumn[] {
                        this.tableCancelOrder.CancelOrder_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerPassword3.CancelOrder_IdColumn}, false);
            this.relationCancelOrder_ServerPassword3.Nested = true;
            this.Relations.Add(this.relationCancelOrder_ServerPassword3);
            this.relationChangeOrder_ServerPassword4 = new System.Data.DataRelation("ChangeOrder_ServerPassword4", new System.Data.DataColumn[] {
                        this.tableChangeOrder.ChangeOrder_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerPassword4.ChangeOrder_IdColumn}, false);
            this.relationChangeOrder_ServerPassword4.Nested = true;
            this.Relations.Add(this.relationChangeOrder_ServerPassword4);
            this.relationChangeOrder_SuspendOrder = new System.Data.DataRelation("ChangeOrder_SuspendOrder", new System.Data.DataColumn[] {
                        this.tableChangeOrder.ChangeOrder_IdColumn}, new System.Data.DataColumn[] {
                        this.tableSuspendOrder.ChangeOrder_IdColumn}, false);
            this.relationChangeOrder_SuspendOrder.Nested = true;
            this.Relations.Add(this.relationChangeOrder_SuspendOrder);
            this.relationChangeOrder_ResumeOrder = new System.Data.DataRelation("ChangeOrder_ResumeOrder", new System.Data.DataColumn[] {
                        this.tableChangeOrder.ChangeOrder_IdColumn}, new System.Data.DataColumn[] {
                        this.tableResumeOrder.ChangeOrder_IdColumn}, false);
            this.relationChangeOrder_ResumeOrder.Nested = true;
            this.Relations.Add(this.relationChangeOrder_ResumeOrder);
            this.relationChangeOrder_Quantity = new System.Data.DataRelation("ChangeOrder_Quantity", new System.Data.DataColumn[] {
                        this.tableChangeOrder.ChangeOrder_IdColumn}, new System.Data.DataColumn[] {
                        this.tableQuantity.ChangeOrder_IdColumn}, false);
            this.relationChangeOrder_Quantity.Nested = true;
            this.Relations.Add(this.relationChangeOrder_Quantity);
            this.relationEnableDevice_ServerPassword5 = new System.Data.DataRelation("EnableDevice_ServerPassword5", new System.Data.DataColumn[] {
                        this.tableEnableDevice.EnableDevice_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerPassword5.EnableDevice_IdColumn}, false);
            this.relationEnableDevice_ServerPassword5.Nested = true;
            this.Relations.Add(this.relationEnableDevice_ServerPassword5);
            this.relationEnableDevice_Autoloader = new System.Data.DataRelation("EnableDevice_Autoloader", new System.Data.DataColumn[] {
                        this.tableEnableDevice.EnableDevice_IdColumn}, new System.Data.DataColumn[] {
                        this.tableAutoloader.EnableDevice_IdColumn}, false);
            this.relationEnableDevice_Autoloader.Nested = true;
            this.Relations.Add(this.relationEnableDevice_Autoloader);
            this.relationEnableDevice_Recorder = new System.Data.DataRelation("EnableDevice_Recorder", new System.Data.DataColumn[] {
                        this.tableEnableDevice.EnableDevice_IdColumn}, new System.Data.DataColumn[] {
                        this.tableRecorder.EnableDevice_IdColumn}, false);
            this.relationEnableDevice_Recorder.Nested = true;
            this.Relations.Add(this.relationEnableDevice_Recorder);
            this.relationEnableDevice_Printer = new System.Data.DataRelation("EnableDevice_Printer", new System.Data.DataColumn[] {
                        this.tableEnableDevice.EnableDevice_IdColumn}, new System.Data.DataColumn[] {
                        this.tablePrinter.EnableDevice_IdColumn}, false);
            this.relationEnableDevice_Printer.Nested = true;
            this.Relations.Add(this.relationEnableDevice_Printer);
            this.relationSetParameter_ServerPassword6 = new System.Data.DataRelation("SetParameter_ServerPassword6", new System.Data.DataColumn[] {
                        this.tableSetParameter.SetParameter_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerPassword6.SetParameter_IdColumn}, false);
            this.relationSetParameter_ServerPassword6.Nested = true;
            this.Relations.Add(this.relationSetParameter_ServerPassword6);
            this.relationSetParameter_Setting = new System.Data.DataRelation("SetParameter_Setting", new System.Data.DataColumn[] {
                        this.tableSetParameter.SetParameter_IdColumn}, new System.Data.DataColumn[] {
                        this.tableSetting.SetParameter_IdColumn}, false);
            this.relationSetParameter_Setting.Nested = true;
            this.Relations.Add(this.relationSetParameter_Setting);
            this.relationSetting_Server = new System.Data.DataRelation("Setting_Server", new System.Data.DataColumn[] {
                        this.tableSetting.Setting_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServer.Setting_IdColumn}, false);
            this.relationSetting_Server.Nested = true;
            this.Relations.Add(this.relationSetting_Server);
            this.relationSetting_ModeSettings = new System.Data.DataRelation("Setting_ModeSettings", new System.Data.DataColumn[] {
                        this.tableSetting.Setting_IdColumn}, new System.Data.DataColumn[] {
                        this.tableModeSettings.Setting_IdColumn}, false);
            this.relationSetting_ModeSettings.Nested = true;
            this.Relations.Add(this.relationSetting_ModeSettings);
            this.relationModeSettings_ServerMode = new System.Data.DataRelation("ModeSettings_ServerMode", new System.Data.DataColumn[] {
                        this.tableModeSettings.ModeSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerMode.ModeSettings_IdColumn}, false);
            this.relationModeSettings_ServerMode.Nested = true;
            this.Relations.Add(this.relationModeSettings_ServerMode);
            this.relationModeSettings_OperatingMode = new System.Data.DataRelation("ModeSettings_OperatingMode", new System.Data.DataColumn[] {
                        this.tableModeSettings.ModeSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableOperatingMode.ModeSettings_IdColumn}, false);
            this.relationModeSettings_OperatingMode.Nested = true;
            this.Relations.Add(this.relationModeSettings_OperatingMode);
            this.relationModeSettings_UseFIFOMode = new System.Data.DataRelation("ModeSettings_UseFIFOMode", new System.Data.DataColumn[] {
                        this.tableModeSettings.ModeSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableUseFIFOMode.ModeSettings_IdColumn}, false);
            this.relationModeSettings_UseFIFOMode.Nested = true;
            this.Relations.Add(this.relationModeSettings_UseFIFOMode);
            this.relationSetting_Caching = new System.Data.DataRelation("Setting_Caching", new System.Data.DataColumn[] {
                        this.tableSetting.Setting_IdColumn}, new System.Data.DataColumn[] {
                        this.tableCaching.Setting_IdColumn}, false);
            this.relationSetting_Caching.Nested = true;
            this.Relations.Add(this.relationSetting_Caching);
            this.relationCaching_UseStaticCaching = new System.Data.DataRelation("Caching_UseStaticCaching", new System.Data.DataColumn[] {
                        this.tableCaching.Caching_IdColumn}, new System.Data.DataColumn[] {
                        this.tableUseStaticCaching.Caching_IdColumn}, false);
            this.relationCaching_UseStaticCaching.Nested = true;
            this.Relations.Add(this.relationCaching_UseStaticCaching);
            this.relationCaching_CacheDriveLetters = new System.Data.DataRelation("Caching_CacheDriveLetters", new System.Data.DataColumn[] {
                        this.tableCaching.Caching_IdColumn}, new System.Data.DataColumn[] {
                        this.tableCacheDriveLetters.Caching_IdColumn}, false);
            this.relationCaching_CacheDriveLetters.Nested = true;
            this.Relations.Add(this.relationCaching_CacheDriveLetters);
            this.relationSetting_Recording = new System.Data.DataRelation("Setting_Recording", new System.Data.DataColumn[] {
                        this.tableSetting.Setting_IdColumn}, new System.Data.DataColumn[] {
                        this.tableRecording.Setting_IdColumn}, false);
            this.relationSetting_Recording.Nested = true;
            this.Relations.Add(this.relationSetting_Recording);
            this.relationRecording_SimulateRecording = new System.Data.DataRelation("Recording_SimulateRecording", new System.Data.DataColumn[] {
                        this.tableRecording.Recording_IdColumn}, new System.Data.DataColumn[] {
                        this.tableSimulateRecording.Recording_IdColumn}, false);
            this.relationRecording_SimulateRecording.Nested = true;
            this.Relations.Add(this.relationRecording_SimulateRecording);
            this.relationRecording_UseNewMediaOnly = new System.Data.DataRelation("Recording_UseNewMediaOnly", new System.Data.DataColumn[] {
                        this.tableRecording.Recording_IdColumn}, new System.Data.DataColumn[] {
                        this.tableUseNewMediaOnly.Recording_IdColumn}, false);
            this.relationRecording_UseNewMediaOnly.Nested = true;
            this.Relations.Add(this.relationRecording_UseNewMediaOnly);
            this.relationRecording_MaxRecordingSpeed = new System.Data.DataRelation("Recording_MaxRecordingSpeed", new System.Data.DataColumn[] {
                        this.tableRecording.Recording_IdColumn}, new System.Data.DataColumn[] {
                        this.tableMaxRecordingSpeed.Recording_IdColumn}, false);
            this.relationRecording_MaxRecordingSpeed.Nested = true;
            this.Relations.Add(this.relationRecording_MaxRecordingSpeed);
            this.relationRecording_MaxDVDRecordingSpeed = new System.Data.DataRelation("Recording_MaxDVDRecordingSpeed", new System.Data.DataColumn[] {
                        this.tableRecording.Recording_IdColumn}, new System.Data.DataColumn[] {
                        this.tableMaxDVDRecordingSpeed.Recording_IdColumn}, false);
            this.relationRecording_MaxDVDRecordingSpeed.Nested = true;
            this.Relations.Add(this.relationRecording_MaxDVDRecordingSpeed);
            this.relationRecording_DisableISOExtentFixups = new System.Data.DataRelation("Recording_DisableISOExtentFixups", new System.Data.DataColumn[] {
                        this.tableRecording.Recording_IdColumn}, new System.Data.DataColumn[] {
                        this.tableDisableISOExtentFixups.Recording_IdColumn}, false);
            this.relationRecording_DisableISOExtentFixups.Nested = true;
            this.Relations.Add(this.relationRecording_DisableISOExtentFixups);
            this.relationRecording_RejectNonISO = new System.Data.DataRelation("Recording_RejectNonISO", new System.Data.DataColumn[] {
                        this.tableRecording.Recording_IdColumn}, new System.Data.DataColumn[] {
                        this.tableRejectNonISO.Recording_IdColumn}, false);
            this.relationRecording_RejectNonISO.Nested = true;
            this.Relations.Add(this.relationRecording_RejectNonISO);
            this.relationRecording_AddPostgapToISO = new System.Data.DataRelation("Recording_AddPostgapToISO", new System.Data.DataColumn[] {
                        this.tableRecording.Recording_IdColumn}, new System.Data.DataColumn[] {
                        this.tableAddPostgapToISO.Recording_IdColumn}, false);
            this.relationRecording_AddPostgapToISO.Nested = true;
            this.Relations.Add(this.relationRecording_AddPostgapToISO);
            this.relationRecording_EnableUsing90_100MinuteCDRs = new System.Data.DataRelation("Recording_EnableUsing90_100MinuteCDRs", new System.Data.DataColumn[] {
                        this.tableRecording.Recording_IdColumn}, new System.Data.DataColumn[] {
                        this.tableEnableUsing90_100MinuteCDRs.Recording_IdColumn}, false);
            this.relationRecording_EnableUsing90_100MinuteCDRs.Nested = true;
            this.Relations.Add(this.relationRecording_EnableUsing90_100MinuteCDRs);
            this.relationRecording_DestroyFailedRecordings = new System.Data.DataRelation("Recording_DestroyFailedRecordings", new System.Data.DataColumn[] {
                        this.tableRecording.Recording_IdColumn}, new System.Data.DataColumn[] {
                        this.tableDestroyFailedRecordings.Recording_IdColumn}, false);
            this.relationRecording_DestroyFailedRecordings.Nested = true;
            this.Relations.Add(this.relationRecording_DestroyFailedRecordings);
            this.relationSetting_Verify = new System.Data.DataRelation("Setting_Verify", new System.Data.DataColumn[] {
                        this.tableSetting.Setting_IdColumn}, new System.Data.DataColumn[] {
                        this.tableVerify.Setting_IdColumn}, false);
            this.relationSetting_Verify.Nested = true;
            this.Relations.Add(this.relationSetting_Verify);
            this.relationVerify_UseVerify = new System.Data.DataRelation("Verify_UseVerify", new System.Data.DataColumn[] {
                        this.tableVerify.Verify_IdColumn}, new System.Data.DataColumn[] {
                        this.tableUseVerify.Verify_IdColumn}, false);
            this.relationVerify_UseVerify.Nested = true;
            this.Relations.Add(this.relationVerify_UseVerify);
            this.relationVerify_Frequency = new System.Data.DataRelation("Verify_Frequency", new System.Data.DataColumn[] {
                        this.tableVerify.Verify_IdColumn}, new System.Data.DataColumn[] {
                        this.tableFrequency.Verify_IdColumn}, false);
            this.relationVerify_Frequency.Nested = true;
            this.Relations.Add(this.relationVerify_Frequency);
            this.relationVerify_UseChecksumDLL = new System.Data.DataRelation("Verify_UseChecksumDLL", new System.Data.DataColumn[] {
                        this.tableVerify.Verify_IdColumn}, new System.Data.DataColumn[] {
                        this.tableUseChecksumDLL.Verify_IdColumn}, false);
            this.relationVerify_UseChecksumDLL.Nested = true;
            this.Relations.Add(this.relationVerify_UseChecksumDLL);
            this.relationSetting_Printing = new System.Data.DataRelation("Setting_Printing", new System.Data.DataColumn[] {
                        this.tableSetting.Setting_IdColumn}, new System.Data.DataColumn[] {
                        this.tablePrinting.Setting_IdColumn}, false);
            this.relationSetting_Printing.Nested = true;
            this.Relations.Add(this.relationSetting_Printing);
            this.relationPrinting_SimulatePrinting = new System.Data.DataRelation("Printing_SimulatePrinting", new System.Data.DataColumn[] {
                        this.tablePrinting.Printing_IdColumn}, new System.Data.DataColumn[] {
                        this.tableSimulatePrinting.Printing_IdColumn}, false);
            this.relationPrinting_SimulatePrinting.Nested = true;
            this.Relations.Add(this.relationPrinting_SimulatePrinting);
            this.relationPrinting_RejectPattern = new System.Data.DataRelation("Printing_RejectPattern", new System.Data.DataColumn[] {
                        this.tablePrinting.Printing_IdColumn}, new System.Data.DataColumn[] {
                        this.tableRejectPattern.Printing_IdColumn}, false);
            this.relationPrinting_RejectPattern.Nested = true;
            this.Relations.Add(this.relationPrinting_RejectPattern);
            this.relationPrinting_TakeOrdersWithLabelWithoutPrinter = new System.Data.DataRelation("Printing_TakeOrdersWithLabelWithoutPrinter", new System.Data.DataColumn[] {
                        this.tablePrinting.Printing_IdColumn}, new System.Data.DataColumn[] {
                        this.tableTakeOrdersWithLabelWithoutPrinter.Printing_IdColumn}, false);
            this.relationPrinting_TakeOrdersWithLabelWithoutPrinter.Nested = true;
            this.Relations.Add(this.relationPrinting_TakeOrdersWithLabelWithoutPrinter);
            this.relationPrinting_ErrorOnLowInkLevel = new System.Data.DataRelation("Printing_ErrorOnLowInkLevel", new System.Data.DataColumn[] {
                        this.tablePrinting.Printing_IdColumn}, new System.Data.DataColumn[] {
                        this.tableErrorOnLowInkLevel.Printing_IdColumn}, false);
            this.relationPrinting_ErrorOnLowInkLevel.Nested = true;
            this.Relations.Add(this.relationPrinting_ErrorOnLowInkLevel);
            this.relationPrinting_LowInkThresholdPercent = new System.Data.DataRelation("Printing_LowInkThresholdPercent", new System.Data.DataColumn[] {
                        this.tablePrinting.Printing_IdColumn}, new System.Data.DataColumn[] {
                        this.tableLowInkThresholdPercent.Printing_IdColumn}, false);
            this.relationPrinting_LowInkThresholdPercent.Nested = true;
            this.Relations.Add(this.relationPrinting_LowInkThresholdPercent);
            this.relationSetting_AutoloaderSettings = new System.Data.DataRelation("Setting_AutoloaderSettings", new System.Data.DataColumn[] {
                        this.tableSetting.Setting_IdColumn}, new System.Data.DataColumn[] {
                        this.tableAutoloaderSettings.Setting_IdColumn}, false);
            this.relationSetting_AutoloaderSettings.Nested = true;
            this.Relations.Add(this.relationSetting_AutoloaderSettings);
            this.relationAutoloaderSettings_BinSetting = new System.Data.DataRelation("AutoloaderSettings_BinSetting", new System.Data.DataColumn[] {
                        this.tableAutoloaderSettings.AutoloaderSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableBinSetting.AutoloaderSettings_IdColumn}, false);
            this.relationAutoloaderSettings_BinSetting.Nested = true;
            this.Relations.Add(this.relationAutoloaderSettings_BinSetting);
            this.relationAutoloaderSettings_MailslotSetting = new System.Data.DataRelation("AutoloaderSettings_MailslotSetting", new System.Data.DataColumn[] {
                        this.tableAutoloaderSettings.AutoloaderSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableMailslotSetting.AutoloaderSettings_IdColumn}, false);
            this.relationAutoloaderSettings_MailslotSetting.Nested = true;
            this.Relations.Add(this.relationAutoloaderSettings_MailslotSetting);
            this.relationAutoloaderSettings_MediaSize = new System.Data.DataRelation("AutoloaderSettings_MediaSize", new System.Data.DataColumn[] {
                        this.tableAutoloaderSettings.AutoloaderSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableMediaSize.AutoloaderSettings_IdColumn}, false);
            this.relationAutoloaderSettings_MediaSize.Nested = true;
            this.Relations.Add(this.relationAutoloaderSettings_MediaSize);
            this.relationAutoloaderSettings_MediaType = new System.Data.DataRelation("AutoloaderSettings_MediaType", new System.Data.DataColumn[] {
                        this.tableAutoloaderSettings.AutoloaderSettings_IdColumn}, new System.Data.DataColumn[] {
                        this.tableMediaType.AutoloaderSettings_IdColumn}, false);
            this.relationAutoloaderSettings_MediaType.Nested = true;
            this.Relations.Add(this.relationAutoloaderSettings_MediaType);
            this.relationSetting_Reading = new System.Data.DataRelation("Setting_Reading", new System.Data.DataColumn[] {
                        this.tableSetting.Setting_IdColumn}, new System.Data.DataColumn[] {
                        this.tableReading.Setting_IdColumn}, false);
            this.relationSetting_Reading.Nested = true;
            this.Relations.Add(this.relationSetting_Reading);
            this.relationReading_BarcodePort = new System.Data.DataRelation("Reading_BarcodePort", new System.Data.DataColumn[] {
                        this.tableReading.Reading_IdColumn}, new System.Data.DataColumn[] {
                        this.tableBarcodePort.Reading_IdColumn}, false);
            this.relationReading_BarcodePort.Nested = true;
            this.Relations.Add(this.relationReading_BarcodePort);
            this.relationReading_BarcodeAngle = new System.Data.DataRelation("Reading_BarcodeAngle", new System.Data.DataColumn[] {
                        this.tableReading.Reading_IdColumn}, new System.Data.DataColumn[] {
                        this.tableBarcodeAngle.Reading_IdColumn}, false);
            this.relationReading_BarcodeAngle.Nested = true;
            this.Relations.Add(this.relationReading_BarcodeAngle);
            this.relationReading_UseBarcodeIndex = new System.Data.DataRelation("Reading_UseBarcodeIndex", new System.Data.DataColumn[] {
                        this.tableReading.Reading_IdColumn}, new System.Data.DataColumn[] {
                        this.tableUseBarcodeIndex.Reading_IdColumn}, false);
            this.relationReading_UseBarcodeIndex.Nested = true;
            this.Relations.Add(this.relationReading_UseBarcodeIndex);
            this.relationReading_AutoBulkRead = new System.Data.DataRelation("Reading_AutoBulkRead", new System.Data.DataColumn[] {
                        this.tableReading.Reading_IdColumn}, new System.Data.DataColumn[] {
                        this.tableAutoBulkRead.Reading_IdColumn}, false);
            this.relationReading_AutoBulkRead.Nested = true;
            this.Relations.Add(this.relationReading_AutoBulkRead);
            this.relationAutoBulkRead_BaseFolderForImages = new System.Data.DataRelation("AutoBulkRead_BaseFolderForImages", new System.Data.DataColumn[] {
                        this.tableAutoBulkRead.AutoBulkRead_IdColumn}, new System.Data.DataColumn[] {
                        this.tableBaseFolderForImages.AutoBulkRead_IdColumn}, false);
            this.relationAutoBulkRead_BaseFolderForImages.Nested = true;
            this.Relations.Add(this.relationAutoBulkRead_BaseFolderForImages);
            this.relationAutoBulkRead_UseVolumeIDAsFolderName = new System.Data.DataRelation("AutoBulkRead_UseVolumeIDAsFolderName", new System.Data.DataColumn[] {
                        this.tableAutoBulkRead.AutoBulkRead_IdColumn}, new System.Data.DataColumn[] {
                        this.tableUseVolumeIDAsFolderName.AutoBulkRead_IdColumn}, false);
            this.relationAutoBulkRead_UseVolumeIDAsFolderName.Nested = true;
            this.Relations.Add(this.relationAutoBulkRead_UseVolumeIDAsFolderName);
            this.relationAutoBulkRead_UseBarcodeAsFolderName = new System.Data.DataRelation("AutoBulkRead_UseBarcodeAsFolderName", new System.Data.DataColumn[] {
                        this.tableAutoBulkRead.AutoBulkRead_IdColumn}, new System.Data.DataColumn[] {
                        this.tableUseBarcodeAsFolderName.AutoBulkRead_IdColumn}, false);
            this.relationAutoBulkRead_UseBarcodeAsFolderName.Nested = true;
            this.Relations.Add(this.relationAutoBulkRead_UseBarcodeAsFolderName);
            this.relationAutoBulkRead_ExtractISOImagesToFoldersAndFiles = new System.Data.DataRelation("AutoBulkRead_ExtractISOImagesToFoldersAndFiles", new System.Data.DataColumn[] {
                        this.tableAutoBulkRead.AutoBulkRead_IdColumn}, new System.Data.DataColumn[] {
                        this.tableExtractISOImagesToFoldersAndFiles.AutoBulkRead_IdColumn}, false);
            this.relationAutoBulkRead_ExtractISOImagesToFoldersAndFiles.Nested = true;
            this.Relations.Add(this.relationAutoBulkRead_ExtractISOImagesToFoldersAndFiles);
            this.relationAutoBulkRead_ImageTypeForAudioTracks = new System.Data.DataRelation("AutoBulkRead_ImageTypeForAudioTracks", new System.Data.DataColumn[] {
                        this.tableAutoBulkRead.AutoBulkRead_IdColumn}, new System.Data.DataColumn[] {
                        this.tableImageTypeForAudioTracks.AutoBulkRead_IdColumn}, false);
            this.relationAutoBulkRead_ImageTypeForAudioTracks.Nested = true;
            this.Relations.Add(this.relationAutoBulkRead_ImageTypeForAudioTracks);
            this.relationAutoBulkRead_UseISRCAsFilenameForAudioTracks = new System.Data.DataRelation("AutoBulkRead_UseISRCAsFilenameForAudioTracks", new System.Data.DataColumn[] {
                        this.tableAutoBulkRead.AutoBulkRead_IdColumn}, new System.Data.DataColumn[] {
                        this.tableUseISRCAsFilenameForAudioTracks.AutoBulkRead_IdColumn}, false);
            this.relationAutoBulkRead_UseISRCAsFilenameForAudioTracks.Nested = true;
            this.Relations.Add(this.relationAutoBulkRead_UseISRCAsFilenameForAudioTracks);
            this.relationAutoBulkRead_PutFailuresToRejectBin = new System.Data.DataRelation("AutoBulkRead_PutFailuresToRejectBin", new System.Data.DataColumn[] {
                        this.tableAutoBulkRead.AutoBulkRead_IdColumn}, new System.Data.DataColumn[] {
                        this.tablePutFailuresToRejectBin.AutoBulkRead_IdColumn}, false);
            this.relationAutoBulkRead_PutFailuresToRejectBin.Nested = true;
            this.Relations.Add(this.relationAutoBulkRead_PutFailuresToRejectBin);
            this.relationReading_AudioReadSpeed = new System.Data.DataRelation("Reading_AudioReadSpeed", new System.Data.DataColumn[] {
                        this.tableReading.Reading_IdColumn}, new System.Data.DataColumn[] {
                        this.tableAudioReadSpeed.Reading_IdColumn}, false);
            this.relationReading_AudioReadSpeed.Nested = true;
            this.Relations.Add(this.relationReading_AudioReadSpeed);
            this.relationReading_PreferredReader = new System.Data.DataRelation("Reading_PreferredReader", new System.Data.DataColumn[] {
                        this.tableReading.Reading_IdColumn}, new System.Data.DataColumn[] {
                        this.tablePreferredReader.Reading_IdColumn}, false);
            this.relationReading_PreferredReader.Nested = true;
            this.Relations.Add(this.relationReading_PreferredReader);
            this.relationSetting_MediaCodes = new System.Data.DataRelation("Setting_MediaCodes", new System.Data.DataColumn[] {
                        this.tableSetting.Setting_IdColumn}, new System.Data.DataColumn[] {
                        this.tableMediaCodes.Setting_IdColumn}, false);
            this.relationSetting_MediaCodes.Nested = true;
            this.Relations.Add(this.relationSetting_MediaCodes);
            this.relationMediaCodes_UseMediaCodes = new System.Data.DataRelation("MediaCodes_UseMediaCodes", new System.Data.DataColumn[] {
                        this.tableMediaCodes.MediaCodes_IdColumn}, new System.Data.DataColumn[] {
                        this.tableUseMediaCodes.MediaCodes_IdColumn}, false);
            this.relationMediaCodes_UseMediaCodes.Nested = true;
            this.Relations.Add(this.relationMediaCodes_UseMediaCodes);
            this.relationMediaCodes_MediaCode = new System.Data.DataRelation("MediaCodes_MediaCode", new System.Data.DataColumn[] {
                        this.tableMediaCodes.MediaCodes_IdColumn}, new System.Data.DataColumn[] {
                        this.tableMediaCode.MediaCodes_IdColumn}, false);
            this.relationMediaCodes_MediaCode.Nested = true;
            this.Relations.Add(this.relationMediaCodes_MediaCode);
            this.relationMediaCodes_ClearAllCodes = new System.Data.DataRelation("MediaCodes_ClearAllCodes", new System.Data.DataColumn[] {
                        this.tableMediaCodes.MediaCodes_IdColumn}, new System.Data.DataColumn[] {
                        this.tableClearAllCodes.MediaCodes_IdColumn}, false);
            this.relationMediaCodes_ClearAllCodes.Nested = true;
            this.Relations.Add(this.relationMediaCodes_ClearAllCodes);
            this.relationSetting_KioskMode = new System.Data.DataRelation("Setting_KioskMode", new System.Data.DataColumn[] {
                        this.tableSetting.Setting_IdColumn}, new System.Data.DataColumn[] {
                        this.tableKioskMode.Setting_IdColumn}, false);
            this.relationSetting_KioskMode.Nested = true;
            this.Relations.Add(this.relationSetting_KioskMode);
            this.relationKioskMode_RecoverOrders = new System.Data.DataRelation("KioskMode_RecoverOrders", new System.Data.DataColumn[] {
                        this.tableKioskMode.KioskMode_IdColumn}, new System.Data.DataColumn[] {
                        this.tableRecoverOrders.KioskMode_IdColumn}, false);
            this.relationKioskMode_RecoverOrders.Nested = true;
            this.Relations.Add(this.relationKioskMode_RecoverOrders);
            this.relationKioskMode_RunNoPrinter = new System.Data.DataRelation("KioskMode_RunNoPrinter", new System.Data.DataColumn[] {
                        this.tableKioskMode.KioskMode_IdColumn}, new System.Data.DataColumn[] {
                        this.tableRunNoPrinter.KioskMode_IdColumn}, false);
            this.relationKioskMode_RunNoPrinter.Nested = true;
            this.Relations.Add(this.relationKioskMode_RunNoPrinter);
            this.relationKioskMode_AutoloaderRecovery = new System.Data.DataRelation("KioskMode_AutoloaderRecovery", new System.Data.DataColumn[] {
                        this.tableKioskMode.KioskMode_IdColumn}, new System.Data.DataColumn[] {
                        this.tableAutoloaderRecovery.KioskMode_IdColumn}, false);
            this.relationKioskMode_AutoloaderRecovery.Nested = true;
            this.Relations.Add(this.relationKioskMode_AutoloaderRecovery);
            this.relationKioskMode_PrinterRecovery = new System.Data.DataRelation("KioskMode_PrinterRecovery", new System.Data.DataColumn[] {
                        this.tableKioskMode.KioskMode_IdColumn}, new System.Data.DataColumn[] {
                        this.tablePrinterRecovery.KioskMode_IdColumn}, false);
            this.relationKioskMode_PrinterRecovery.Nested = true;
            this.Relations.Add(this.relationKioskMode_PrinterRecovery);
            this.relationKioskMode_AutoRespondOnStartup = new System.Data.DataRelation("KioskMode_AutoRespondOnStartup", new System.Data.DataColumn[] {
                        this.tableKioskMode.KioskMode_IdColumn}, new System.Data.DataColumn[] {
                        this.tableAutoRespondOnStartup.KioskMode_IdColumn}, false);
            this.relationKioskMode_AutoRespondOnStartup.Nested = true;
            this.Relations.Add(this.relationKioskMode_AutoRespondOnStartup);
            this.relationPauseServer_ServerPassword7 = new System.Data.DataRelation("PauseServer_ServerPassword7", new System.Data.DataColumn[] {
                        this.tablePauseServer.PauseServer_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerPassword7.PauseServer_IdColumn}, false);
            this.relationPauseServer_ServerPassword7.Nested = true;
            this.Relations.Add(this.relationPauseServer_ServerPassword7);
            this.relationResumeServer_ServerPassword8 = new System.Data.DataRelation("ResumeServer_ServerPassword8", new System.Data.DataColumn[] {
                        this.tableResumeServer.ResumeServer_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerPassword8.ResumeServer_IdColumn}, false);
            this.relationResumeServer_ServerPassword8.Nested = true;
            this.Relations.Add(this.relationResumeServer_ServerPassword8);
            this.relationStopServer_ServerPassword9 = new System.Data.DataRelation("StopServer_ServerPassword9", new System.Data.DataColumn[] {
                        this.tableStopServer.StopServer_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerPassword9.StopServer_IdColumn}, false);
            this.relationStopServer_ServerPassword9.Nested = true;
            this.Relations.Add(this.relationStopServer_ServerPassword9);
            this.relationFlashUpload_ServerPassword10 = new System.Data.DataRelation("FlashUpload_ServerPassword10", new System.Data.DataColumn[] {
                        this.tableFlashUpload.FlashUpload_IdColumn}, new System.Data.DataColumn[] {
                        this.tableServerPassword10.FlashUpload_IdColumn}, false);
            this.relationFlashUpload_ServerPassword10.Nested = true;
            this.Relations.Add(this.relationFlashUpload_ServerPassword10);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetServerStatus() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetParameterSettings() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetOrderList() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServerPassword() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSetServerPassword() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOldPassword() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNewPassword() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServerPassword1() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeVerifyServerPassword() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServerPassword2() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCancelOrder() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServerPassword3() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeChangeOrder() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServerPassword4() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSuspendOrder() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeResumeOrder() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeQuantity() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEnableDevice() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServerPassword5() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAutoloader() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRecorder() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrinter() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeResetInputBins() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSetDialogAction() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetSessionLog() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClearSessionLog() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSetParameter() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServerPassword6() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSetting() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServer() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeModeSettings() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServerMode() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOperatingMode() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUseFIFOMode() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCaching() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUseStaticCaching() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCacheDriveLetters() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRecording() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSimulateRecording() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUseNewMediaOnly() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMaxRecordingSpeed() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMaxDVDRecordingSpeed() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDisableISOExtentFixups() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRejectNonISO() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAddPostgapToISO() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEnableUsing90_100MinuteCDRs() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDestroyFailedRecordings() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeVerify() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUseVerify() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFrequency() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUseChecksumDLL() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrinting() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSimulatePrinting() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRejectPattern() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTakeOrdersWithLabelWithoutPrinter() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeErrorOnLowInkLevel() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLowInkThresholdPercent() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAutoloaderSettings() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBinSetting() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMailslotSetting() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMediaSize() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMediaType() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReading() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBarcodePort() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBarcodeAngle() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUseBarcodeIndex() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAutoBulkRead() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBaseFolderForImages() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUseVolumeIDAsFolderName() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUseBarcodeAsFolderName() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExtractISOImagesToFoldersAndFiles() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeImageTypeForAudioTracks() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUseISRCAsFilenameForAudioTracks() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePutFailuresToRejectBin() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAudioReadSpeed() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePreferredReader() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMediaCodes() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUseMediaCodes() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMediaCode() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClearAllCodes() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeKioskMode() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRecoverOrders() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRunNoPrinter() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAutoloaderRecovery() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrinterRecovery() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAutoRespondOnStartup() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePauseServer() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServerPassword7() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeResumeServer() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServerPassword8() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStopServer() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServerPassword9() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFlashUpload() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServerPassword10() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGetUnlockingCodes() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSetActivationCodes() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            ProductionServerRequest ds = new ProductionServerRequest();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void GetServerStatusRowChangeEventHandler(object sender, GetServerStatusRowChangeEvent e);
        
        public delegate void GetParameterSettingsRowChangeEventHandler(object sender, GetParameterSettingsRowChangeEvent e);
        
        public delegate void GetOrderListRowChangeEventHandler(object sender, GetOrderListRowChangeEvent e);
        
        public delegate void ServerPasswordRowChangeEventHandler(object sender, ServerPasswordRowChangeEvent e);
        
        public delegate void SetServerPasswordRowChangeEventHandler(object sender, SetServerPasswordRowChangeEvent e);
        
        public delegate void OldPasswordRowChangeEventHandler(object sender, OldPasswordRowChangeEvent e);
        
        public delegate void NewPasswordRowChangeEventHandler(object sender, NewPasswordRowChangeEvent e);
        
        public delegate void ServerPassword1RowChangeEventHandler(object sender, ServerPassword1RowChangeEvent e);
        
        public delegate void VerifyServerPasswordRowChangeEventHandler(object sender, VerifyServerPasswordRowChangeEvent e);
        
        public delegate void ServerPassword2RowChangeEventHandler(object sender, ServerPassword2RowChangeEvent e);
        
        public delegate void CancelOrderRowChangeEventHandler(object sender, CancelOrderRowChangeEvent e);
        
        public delegate void ServerPassword3RowChangeEventHandler(object sender, ServerPassword3RowChangeEvent e);
        
        public delegate void ChangeOrderRowChangeEventHandler(object sender, ChangeOrderRowChangeEvent e);
        
        public delegate void ServerPassword4RowChangeEventHandler(object sender, ServerPassword4RowChangeEvent e);
        
        public delegate void SuspendOrderRowChangeEventHandler(object sender, SuspendOrderRowChangeEvent e);
        
        public delegate void ResumeOrderRowChangeEventHandler(object sender, ResumeOrderRowChangeEvent e);
        
        public delegate void QuantityRowChangeEventHandler(object sender, QuantityRowChangeEvent e);
        
        public delegate void EnableDeviceRowChangeEventHandler(object sender, EnableDeviceRowChangeEvent e);
        
        public delegate void ServerPassword5RowChangeEventHandler(object sender, ServerPassword5RowChangeEvent e);
        
        public delegate void AutoloaderRowChangeEventHandler(object sender, AutoloaderRowChangeEvent e);
        
        public delegate void RecorderRowChangeEventHandler(object sender, RecorderRowChangeEvent e);
        
        public delegate void PrinterRowChangeEventHandler(object sender, PrinterRowChangeEvent e);
        
        public delegate void ResetInputBinsRowChangeEventHandler(object sender, ResetInputBinsRowChangeEvent e);
        
        public delegate void SetDialogActionRowChangeEventHandler(object sender, SetDialogActionRowChangeEvent e);
        
        public delegate void GetSessionLogRowChangeEventHandler(object sender, GetSessionLogRowChangeEvent e);
        
        public delegate void ClearSessionLogRowChangeEventHandler(object sender, ClearSessionLogRowChangeEvent e);
        
        public delegate void SetParameterRowChangeEventHandler(object sender, SetParameterRowChangeEvent e);
        
        public delegate void ServerPassword6RowChangeEventHandler(object sender, ServerPassword6RowChangeEvent e);
        
        public delegate void SettingRowChangeEventHandler(object sender, SettingRowChangeEvent e);
        
        public delegate void ServerRowChangeEventHandler(object sender, ServerRowChangeEvent e);
        
        public delegate void ModeSettingsRowChangeEventHandler(object sender, ModeSettingsRowChangeEvent e);
        
        public delegate void ServerModeRowChangeEventHandler(object sender, ServerModeRowChangeEvent e);
        
        public delegate void OperatingModeRowChangeEventHandler(object sender, OperatingModeRowChangeEvent e);
        
        public delegate void UseFIFOModeRowChangeEventHandler(object sender, UseFIFOModeRowChangeEvent e);
        
        public delegate void CachingRowChangeEventHandler(object sender, CachingRowChangeEvent e);
        
        public delegate void UseStaticCachingRowChangeEventHandler(object sender, UseStaticCachingRowChangeEvent e);
        
        public delegate void CacheDriveLettersRowChangeEventHandler(object sender, CacheDriveLettersRowChangeEvent e);
        
        public delegate void RecordingRowChangeEventHandler(object sender, RecordingRowChangeEvent e);
        
        public delegate void SimulateRecordingRowChangeEventHandler(object sender, SimulateRecordingRowChangeEvent e);
        
        public delegate void UseNewMediaOnlyRowChangeEventHandler(object sender, UseNewMediaOnlyRowChangeEvent e);
        
        public delegate void MaxRecordingSpeedRowChangeEventHandler(object sender, MaxRecordingSpeedRowChangeEvent e);
        
        public delegate void MaxDVDRecordingSpeedRowChangeEventHandler(object sender, MaxDVDRecordingSpeedRowChangeEvent e);
        
        public delegate void DisableISOExtentFixupsRowChangeEventHandler(object sender, DisableISOExtentFixupsRowChangeEvent e);
        
        public delegate void RejectNonISORowChangeEventHandler(object sender, RejectNonISORowChangeEvent e);
        
        public delegate void AddPostgapToISORowChangeEventHandler(object sender, AddPostgapToISORowChangeEvent e);
        
        public delegate void EnableUsing90_100MinuteCDRsRowChangeEventHandler(object sender, EnableUsing90_100MinuteCDRsRowChangeEvent e);
        
        public delegate void DestroyFailedRecordingsRowChangeEventHandler(object sender, DestroyFailedRecordingsRowChangeEvent e);
        
        public delegate void VerifyRowChangeEventHandler(object sender, VerifyRowChangeEvent e);
        
        public delegate void UseVerifyRowChangeEventHandler(object sender, UseVerifyRowChangeEvent e);
        
        public delegate void FrequencyRowChangeEventHandler(object sender, FrequencyRowChangeEvent e);
        
        public delegate void UseChecksumDLLRowChangeEventHandler(object sender, UseChecksumDLLRowChangeEvent e);
        
        public delegate void PrintingRowChangeEventHandler(object sender, PrintingRowChangeEvent e);
        
        public delegate void SimulatePrintingRowChangeEventHandler(object sender, SimulatePrintingRowChangeEvent e);
        
        public delegate void RejectPatternRowChangeEventHandler(object sender, RejectPatternRowChangeEvent e);
        
        public delegate void TakeOrdersWithLabelWithoutPrinterRowChangeEventHandler(object sender, TakeOrdersWithLabelWithoutPrinterRowChangeEvent e);
        
        public delegate void ErrorOnLowInkLevelRowChangeEventHandler(object sender, ErrorOnLowInkLevelRowChangeEvent e);
        
        public delegate void LowInkThresholdPercentRowChangeEventHandler(object sender, LowInkThresholdPercentRowChangeEvent e);
        
        public delegate void AutoloaderSettingsRowChangeEventHandler(object sender, AutoloaderSettingsRowChangeEvent e);
        
        public delegate void BinSettingRowChangeEventHandler(object sender, BinSettingRowChangeEvent e);
        
        public delegate void MailslotSettingRowChangeEventHandler(object sender, MailslotSettingRowChangeEvent e);
        
        public delegate void MediaSizeRowChangeEventHandler(object sender, MediaSizeRowChangeEvent e);
        
        public delegate void MediaTypeRowChangeEventHandler(object sender, MediaTypeRowChangeEvent e);
        
        public delegate void ReadingRowChangeEventHandler(object sender, ReadingRowChangeEvent e);
        
        public delegate void BarcodePortRowChangeEventHandler(object sender, BarcodePortRowChangeEvent e);
        
        public delegate void BarcodeAngleRowChangeEventHandler(object sender, BarcodeAngleRowChangeEvent e);
        
        public delegate void UseBarcodeIndexRowChangeEventHandler(object sender, UseBarcodeIndexRowChangeEvent e);
        
        public delegate void AutoBulkReadRowChangeEventHandler(object sender, AutoBulkReadRowChangeEvent e);
        
        public delegate void BaseFolderForImagesRowChangeEventHandler(object sender, BaseFolderForImagesRowChangeEvent e);
        
        public delegate void UseVolumeIDAsFolderNameRowChangeEventHandler(object sender, UseVolumeIDAsFolderNameRowChangeEvent e);
        
        public delegate void UseBarcodeAsFolderNameRowChangeEventHandler(object sender, UseBarcodeAsFolderNameRowChangeEvent e);
        
        public delegate void ExtractISOImagesToFoldersAndFilesRowChangeEventHandler(object sender, ExtractISOImagesToFoldersAndFilesRowChangeEvent e);
        
        public delegate void ImageTypeForAudioTracksRowChangeEventHandler(object sender, ImageTypeForAudioTracksRowChangeEvent e);
        
        public delegate void UseISRCAsFilenameForAudioTracksRowChangeEventHandler(object sender, UseISRCAsFilenameForAudioTracksRowChangeEvent e);
        
        public delegate void PutFailuresToRejectBinRowChangeEventHandler(object sender, PutFailuresToRejectBinRowChangeEvent e);
        
        public delegate void AudioReadSpeedRowChangeEventHandler(object sender, AudioReadSpeedRowChangeEvent e);
        
        public delegate void PreferredReaderRowChangeEventHandler(object sender, PreferredReaderRowChangeEvent e);
        
        public delegate void MediaCodesRowChangeEventHandler(object sender, MediaCodesRowChangeEvent e);
        
        public delegate void UseMediaCodesRowChangeEventHandler(object sender, UseMediaCodesRowChangeEvent e);
        
        public delegate void MediaCodeRowChangeEventHandler(object sender, MediaCodeRowChangeEvent e);
        
        public delegate void ClearAllCodesRowChangeEventHandler(object sender, ClearAllCodesRowChangeEvent e);
        
        public delegate void KioskModeRowChangeEventHandler(object sender, KioskModeRowChangeEvent e);
        
        public delegate void RecoverOrdersRowChangeEventHandler(object sender, RecoverOrdersRowChangeEvent e);
        
        public delegate void RunNoPrinterRowChangeEventHandler(object sender, RunNoPrinterRowChangeEvent e);
        
        public delegate void AutoloaderRecoveryRowChangeEventHandler(object sender, AutoloaderRecoveryRowChangeEvent e);
        
        public delegate void PrinterRecoveryRowChangeEventHandler(object sender, PrinterRecoveryRowChangeEvent e);
        
        public delegate void AutoRespondOnStartupRowChangeEventHandler(object sender, AutoRespondOnStartupRowChangeEvent e);
        
        public delegate void PauseServerRowChangeEventHandler(object sender, PauseServerRowChangeEvent e);
        
        public delegate void ServerPassword7RowChangeEventHandler(object sender, ServerPassword7RowChangeEvent e);
        
        public delegate void ResumeServerRowChangeEventHandler(object sender, ResumeServerRowChangeEvent e);
        
        public delegate void ServerPassword8RowChangeEventHandler(object sender, ServerPassword8RowChangeEvent e);
        
        public delegate void StopServerRowChangeEventHandler(object sender, StopServerRowChangeEvent e);
        
        public delegate void ServerPassword9RowChangeEventHandler(object sender, ServerPassword9RowChangeEvent e);
        
        public delegate void FlashUploadRowChangeEventHandler(object sender, FlashUploadRowChangeEvent e);
        
        public delegate void ServerPassword10RowChangeEventHandler(object sender, ServerPassword10RowChangeEvent e);
        
        public delegate void GetUnlockingCodesRowChangeEventHandler(object sender, GetUnlockingCodesRowChangeEvent e);
        
        public delegate void SetActivationCodesRowChangeEventHandler(object sender, SetActivationCodesRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetServerStatusDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnGetCommandLineSwitches;
            
            private System.Data.DataColumn columnGetAutoloaderStatus;
            
            private System.Data.DataColumn columnGetActivationInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetServerStatusDataTable() {
                this.TableName = "GetServerStatus";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetServerStatusDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetServerStatusDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GetCommandLineSwitchesColumn {
                get {
                    return this.columnGetCommandLineSwitches;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GetAutoloaderStatusColumn {
                get {
                    return this.columnGetAutoloaderStatus;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GetActivationInfoColumn {
                get {
                    return this.columnGetActivationInfo;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetServerStatusRow this[int index] {
                get {
                    return ((GetServerStatusRow)(this.Rows[index]));
                }
            }
            
            public event GetServerStatusRowChangeEventHandler GetServerStatusRowChanging;
            
            public event GetServerStatusRowChangeEventHandler GetServerStatusRowChanged;
            
            public event GetServerStatusRowChangeEventHandler GetServerStatusRowDeleting;
            
            public event GetServerStatusRowChangeEventHandler GetServerStatusRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetServerStatusRow(GetServerStatusRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetServerStatusRow AddGetServerStatusRow(string GetCommandLineSwitches, string GetAutoloaderStatus, string GetActivationInfo) {
                GetServerStatusRow rowGetServerStatusRow = ((GetServerStatusRow)(this.NewRow()));
                rowGetServerStatusRow.ItemArray = new object[] {
                        GetCommandLineSwitches,
                        GetAutoloaderStatus,
                        GetActivationInfo};
                this.Rows.Add(rowGetServerStatusRow);
                return rowGetServerStatusRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                GetServerStatusDataTable cln = ((GetServerStatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new GetServerStatusDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGetCommandLineSwitches = base.Columns["GetCommandLineSwitches"];
                this.columnGetAutoloaderStatus = base.Columns["GetAutoloaderStatus"];
                this.columnGetActivationInfo = base.Columns["GetActivationInfo"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGetCommandLineSwitches = new System.Data.DataColumn("GetCommandLineSwitches", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnGetCommandLineSwitches);
                this.columnGetAutoloaderStatus = new System.Data.DataColumn("GetAutoloaderStatus", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnGetAutoloaderStatus);
                this.columnGetActivationInfo = new System.Data.DataColumn("GetActivationInfo", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnGetActivationInfo);
                this.columnGetCommandLineSwitches.Namespace = "";
                this.columnGetCommandLineSwitches.DefaultValue = ((string)("false"));
                this.columnGetAutoloaderStatus.Namespace = "";
                this.columnGetAutoloaderStatus.DefaultValue = ((string)("false"));
                this.columnGetActivationInfo.Namespace = "";
                this.columnGetActivationInfo.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetServerStatusRow NewGetServerStatusRow() {
                return ((GetServerStatusRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GetServerStatusRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(GetServerStatusRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetServerStatusRowChanged != null)) {
                    this.GetServerStatusRowChanged(this, new GetServerStatusRowChangeEvent(((GetServerStatusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetServerStatusRowChanging != null)) {
                    this.GetServerStatusRowChanging(this, new GetServerStatusRowChangeEvent(((GetServerStatusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetServerStatusRowDeleted != null)) {
                    this.GetServerStatusRowDeleted(this, new GetServerStatusRowChangeEvent(((GetServerStatusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetServerStatusRowDeleting != null)) {
                    this.GetServerStatusRowDeleting(this, new GetServerStatusRowChangeEvent(((GetServerStatusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetServerStatusRow(GetServerStatusRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetServerStatusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetParameterSettingsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetParameterSettingsDataTable() {
                this.TableName = "GetParameterSettings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetParameterSettingsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetParameterSettingsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetParameterSettingsRow this[int index] {
                get {
                    return ((GetParameterSettingsRow)(this.Rows[index]));
                }
            }
            
            public event GetParameterSettingsRowChangeEventHandler GetParameterSettingsRowChanging;
            
            public event GetParameterSettingsRowChangeEventHandler GetParameterSettingsRowChanged;
            
            public event GetParameterSettingsRowChangeEventHandler GetParameterSettingsRowDeleting;
            
            public event GetParameterSettingsRowChangeEventHandler GetParameterSettingsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetParameterSettingsRow(GetParameterSettingsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetParameterSettingsRow AddGetParameterSettingsRow() {
                GetParameterSettingsRow rowGetParameterSettingsRow = ((GetParameterSettingsRow)(this.NewRow()));
                rowGetParameterSettingsRow.ItemArray = new object[0];
                this.Rows.Add(rowGetParameterSettingsRow);
                return rowGetParameterSettingsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                GetParameterSettingsDataTable cln = ((GetParameterSettingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new GetParameterSettingsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetParameterSettingsRow NewGetParameterSettingsRow() {
                return ((GetParameterSettingsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GetParameterSettingsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(GetParameterSettingsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetParameterSettingsRowChanged != null)) {
                    this.GetParameterSettingsRowChanged(this, new GetParameterSettingsRowChangeEvent(((GetParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetParameterSettingsRowChanging != null)) {
                    this.GetParameterSettingsRowChanging(this, new GetParameterSettingsRowChangeEvent(((GetParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetParameterSettingsRowDeleted != null)) {
                    this.GetParameterSettingsRowDeleted(this, new GetParameterSettingsRowChangeEvent(((GetParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetParameterSettingsRowDeleting != null)) {
                    this.GetParameterSettingsRowDeleting(this, new GetParameterSettingsRowChangeEvent(((GetParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetParameterSettingsRow(GetParameterSettingsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetParameterSettingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetOrderListDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetOrderListDataTable() {
                this.TableName = "GetOrderList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetOrderListDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetOrderListDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetOrderListRow this[int index] {
                get {
                    return ((GetOrderListRow)(this.Rows[index]));
                }
            }
            
            public event GetOrderListRowChangeEventHandler GetOrderListRowChanging;
            
            public event GetOrderListRowChangeEventHandler GetOrderListRowChanged;
            
            public event GetOrderListRowChangeEventHandler GetOrderListRowDeleting;
            
            public event GetOrderListRowChangeEventHandler GetOrderListRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetOrderListRow(GetOrderListRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetOrderListRow AddGetOrderListRow() {
                GetOrderListRow rowGetOrderListRow = ((GetOrderListRow)(this.NewRow()));
                rowGetOrderListRow.ItemArray = new object[0];
                this.Rows.Add(rowGetOrderListRow);
                return rowGetOrderListRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                GetOrderListDataTable cln = ((GetOrderListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new GetOrderListDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetOrderListRow NewGetOrderListRow() {
                return ((GetOrderListRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GetOrderListRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(GetOrderListRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetOrderListRowChanged != null)) {
                    this.GetOrderListRowChanged(this, new GetOrderListRowChangeEvent(((GetOrderListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetOrderListRowChanging != null)) {
                    this.GetOrderListRowChanging(this, new GetOrderListRowChangeEvent(((GetOrderListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetOrderListRowDeleted != null)) {
                    this.GetOrderListRowDeleted(this, new GetOrderListRowChangeEvent(((GetOrderListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetOrderListRowDeleting != null)) {
                    this.GetOrderListRowDeleting(this, new GetOrderListRowChangeEvent(((GetOrderListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetOrderListRow(GetOrderListRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetOrderListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServerPasswordDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnEncodedPassword;
            
            private System.Data.DataColumn columnEncodeNumber;
            
            private System.Data.DataColumn columnOldPassword_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPasswordDataTable() {
                this.TableName = "ServerPassword";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerPasswordDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServerPasswordDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EncodedPasswordColumn {
                get {
                    return this.columnEncodedPassword;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EncodeNumberColumn {
                get {
                    return this.columnEncodeNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OldPassword_IdColumn {
                get {
                    return this.columnOldPassword_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPasswordRow this[int index] {
                get {
                    return ((ServerPasswordRow)(this.Rows[index]));
                }
            }
            
            public event ServerPasswordRowChangeEventHandler ServerPasswordRowChanging;
            
            public event ServerPasswordRowChangeEventHandler ServerPasswordRowChanged;
            
            public event ServerPasswordRowChangeEventHandler ServerPasswordRowDeleting;
            
            public event ServerPasswordRowChangeEventHandler ServerPasswordRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServerPasswordRow(ServerPasswordRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPasswordRow AddServerPasswordRow(string EncodedPassword, string EncodeNumber, OldPasswordRow parentOldPasswordRowByOldPassword_ServerPassword) {
                ServerPasswordRow rowServerPasswordRow = ((ServerPasswordRow)(this.NewRow()));
                rowServerPasswordRow.ItemArray = new object[] {
                        EncodedPassword,
                        EncodeNumber,
                        parentOldPasswordRowByOldPassword_ServerPassword[0]};
                this.Rows.Add(rowServerPasswordRow);
                return rowServerPasswordRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ServerPasswordDataTable cln = ((ServerPasswordDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ServerPasswordDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEncodedPassword = base.Columns["EncodedPassword"];
                this.columnEncodeNumber = base.Columns["EncodeNumber"];
                this.columnOldPassword_Id = base.Columns["OldPassword_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEncodedPassword = new System.Data.DataColumn("EncodedPassword", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEncodedPassword);
                this.columnEncodeNumber = new System.Data.DataColumn("EncodeNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEncodeNumber);
                this.columnOldPassword_Id = new System.Data.DataColumn("OldPassword_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnOldPassword_Id);
                this.columnEncodedPassword.AllowDBNull = false;
                this.columnEncodedPassword.Namespace = "";
                this.columnEncodeNumber.Namespace = "";
                this.columnEncodeNumber.DefaultValue = ((string)("7"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPasswordRow NewServerPasswordRow() {
                return ((ServerPasswordRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ServerPasswordRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ServerPasswordRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerPasswordRowChanged != null)) {
                    this.ServerPasswordRowChanged(this, new ServerPasswordRowChangeEvent(((ServerPasswordRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerPasswordRowChanging != null)) {
                    this.ServerPasswordRowChanging(this, new ServerPasswordRowChangeEvent(((ServerPasswordRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerPasswordRowDeleted != null)) {
                    this.ServerPasswordRowDeleted(this, new ServerPasswordRowChangeEvent(((ServerPasswordRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerPasswordRowDeleting != null)) {
                    this.ServerPasswordRowDeleting(this, new ServerPasswordRowChangeEvent(((ServerPasswordRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServerPasswordRow(ServerPasswordRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServerPasswordDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SetServerPasswordDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSetServerPassword_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetServerPasswordDataTable() {
                this.TableName = "SetServerPassword";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SetServerPasswordDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SetServerPasswordDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SetServerPassword_IdColumn {
                get {
                    return this.columnSetServerPassword_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetServerPasswordRow this[int index] {
                get {
                    return ((SetServerPasswordRow)(this.Rows[index]));
                }
            }
            
            public event SetServerPasswordRowChangeEventHandler SetServerPasswordRowChanging;
            
            public event SetServerPasswordRowChangeEventHandler SetServerPasswordRowChanged;
            
            public event SetServerPasswordRowChangeEventHandler SetServerPasswordRowDeleting;
            
            public event SetServerPasswordRowChangeEventHandler SetServerPasswordRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSetServerPasswordRow(SetServerPasswordRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetServerPasswordRow AddSetServerPasswordRow() {
                SetServerPasswordRow rowSetServerPasswordRow = ((SetServerPasswordRow)(this.NewRow()));
                rowSetServerPasswordRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowSetServerPasswordRow);
                return rowSetServerPasswordRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SetServerPasswordDataTable cln = ((SetServerPasswordDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SetServerPasswordDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSetServerPassword_Id = base.Columns["SetServerPassword_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSetServerPassword_Id = new System.Data.DataColumn("SetServerPassword_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSetServerPassword_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnSetServerPassword_Id}, true));
                this.columnSetServerPassword_Id.AutoIncrement = true;
                this.columnSetServerPassword_Id.AllowDBNull = false;
                this.columnSetServerPassword_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetServerPasswordRow NewSetServerPasswordRow() {
                return ((SetServerPasswordRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SetServerPasswordRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SetServerPasswordRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SetServerPasswordRowChanged != null)) {
                    this.SetServerPasswordRowChanged(this, new SetServerPasswordRowChangeEvent(((SetServerPasswordRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SetServerPasswordRowChanging != null)) {
                    this.SetServerPasswordRowChanging(this, new SetServerPasswordRowChangeEvent(((SetServerPasswordRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SetServerPasswordRowDeleted != null)) {
                    this.SetServerPasswordRowDeleted(this, new SetServerPasswordRowChangeEvent(((SetServerPasswordRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SetServerPasswordRowDeleting != null)) {
                    this.SetServerPasswordRowDeleting(this, new SetServerPasswordRowChangeEvent(((SetServerPasswordRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSetServerPasswordRow(SetServerPasswordRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SetServerPasswordDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OldPasswordDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnOldPassword_Id;
            
            private System.Data.DataColumn columnSetServerPassword_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OldPasswordDataTable() {
                this.TableName = "OldPassword";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OldPasswordDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OldPasswordDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OldPassword_IdColumn {
                get {
                    return this.columnOldPassword_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SetServerPassword_IdColumn {
                get {
                    return this.columnSetServerPassword_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OldPasswordRow this[int index] {
                get {
                    return ((OldPasswordRow)(this.Rows[index]));
                }
            }
            
            public event OldPasswordRowChangeEventHandler OldPasswordRowChanging;
            
            public event OldPasswordRowChangeEventHandler OldPasswordRowChanged;
            
            public event OldPasswordRowChangeEventHandler OldPasswordRowDeleting;
            
            public event OldPasswordRowChangeEventHandler OldPasswordRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOldPasswordRow(OldPasswordRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OldPasswordRow AddOldPasswordRow(SetServerPasswordRow parentSetServerPasswordRowBySetServerPassword_OldPassword) {
                OldPasswordRow rowOldPasswordRow = ((OldPasswordRow)(this.NewRow()));
                rowOldPasswordRow.ItemArray = new object[] {
                        null,
                        parentSetServerPasswordRowBySetServerPassword_OldPassword[0]};
                this.Rows.Add(rowOldPasswordRow);
                return rowOldPasswordRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                OldPasswordDataTable cln = ((OldPasswordDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new OldPasswordDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOldPassword_Id = base.Columns["OldPassword_Id"];
                this.columnSetServerPassword_Id = base.Columns["SetServerPassword_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOldPassword_Id = new System.Data.DataColumn("OldPassword_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnOldPassword_Id);
                this.columnSetServerPassword_Id = new System.Data.DataColumn("SetServerPassword_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSetServerPassword_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnOldPassword_Id}, true));
                this.columnOldPassword_Id.AutoIncrement = true;
                this.columnOldPassword_Id.AllowDBNull = false;
                this.columnOldPassword_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OldPasswordRow NewOldPasswordRow() {
                return ((OldPasswordRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OldPasswordRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(OldPasswordRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OldPasswordRowChanged != null)) {
                    this.OldPasswordRowChanged(this, new OldPasswordRowChangeEvent(((OldPasswordRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OldPasswordRowChanging != null)) {
                    this.OldPasswordRowChanging(this, new OldPasswordRowChangeEvent(((OldPasswordRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OldPasswordRowDeleted != null)) {
                    this.OldPasswordRowDeleted(this, new OldPasswordRowChangeEvent(((OldPasswordRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OldPasswordRowDeleting != null)) {
                    this.OldPasswordRowDeleting(this, new OldPasswordRowChangeEvent(((OldPasswordRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOldPasswordRow(OldPasswordRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OldPasswordDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NewPasswordDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnNewPassword_Id;
            
            private System.Data.DataColumn columnSetServerPassword_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NewPasswordDataTable() {
                this.TableName = "NewPassword";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NewPasswordDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NewPasswordDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NewPassword_IdColumn {
                get {
                    return this.columnNewPassword_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SetServerPassword_IdColumn {
                get {
                    return this.columnSetServerPassword_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NewPasswordRow this[int index] {
                get {
                    return ((NewPasswordRow)(this.Rows[index]));
                }
            }
            
            public event NewPasswordRowChangeEventHandler NewPasswordRowChanging;
            
            public event NewPasswordRowChangeEventHandler NewPasswordRowChanged;
            
            public event NewPasswordRowChangeEventHandler NewPasswordRowDeleting;
            
            public event NewPasswordRowChangeEventHandler NewPasswordRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNewPasswordRow(NewPasswordRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NewPasswordRow AddNewPasswordRow(SetServerPasswordRow parentSetServerPasswordRowBySetServerPassword_NewPassword) {
                NewPasswordRow rowNewPasswordRow = ((NewPasswordRow)(this.NewRow()));
                rowNewPasswordRow.ItemArray = new object[] {
                        null,
                        parentSetServerPasswordRowBySetServerPassword_NewPassword[0]};
                this.Rows.Add(rowNewPasswordRow);
                return rowNewPasswordRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                NewPasswordDataTable cln = ((NewPasswordDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new NewPasswordDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNewPassword_Id = base.Columns["NewPassword_Id"];
                this.columnSetServerPassword_Id = base.Columns["SetServerPassword_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNewPassword_Id = new System.Data.DataColumn("NewPassword_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnNewPassword_Id);
                this.columnSetServerPassword_Id = new System.Data.DataColumn("SetServerPassword_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSetServerPassword_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnNewPassword_Id}, true));
                this.columnNewPassword_Id.AutoIncrement = true;
                this.columnNewPassword_Id.AllowDBNull = false;
                this.columnNewPassword_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NewPasswordRow NewNewPasswordRow() {
                return ((NewPasswordRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new NewPasswordRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(NewPasswordRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NewPasswordRowChanged != null)) {
                    this.NewPasswordRowChanged(this, new NewPasswordRowChangeEvent(((NewPasswordRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NewPasswordRowChanging != null)) {
                    this.NewPasswordRowChanging(this, new NewPasswordRowChangeEvent(((NewPasswordRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NewPasswordRowDeleted != null)) {
                    this.NewPasswordRowDeleted(this, new NewPasswordRowChangeEvent(((NewPasswordRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NewPasswordRowDeleting != null)) {
                    this.NewPasswordRowDeleting(this, new NewPasswordRowChangeEvent(((NewPasswordRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNewPasswordRow(NewPasswordRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NewPasswordDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServerPassword1DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnEncodedPassword;
            
            private System.Data.DataColumn columnEncodeNumber;
            
            private System.Data.DataColumn columnNewPassword_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword1DataTable() {
                this.TableName = "ServerPassword1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerPassword1DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServerPassword1DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EncodedPasswordColumn {
                get {
                    return this.columnEncodedPassword;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EncodeNumberColumn {
                get {
                    return this.columnEncodeNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NewPassword_IdColumn {
                get {
                    return this.columnNewPassword_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword1Row this[int index] {
                get {
                    return ((ServerPassword1Row)(this.Rows[index]));
                }
            }
            
            public event ServerPassword1RowChangeEventHandler ServerPassword1RowChanging;
            
            public event ServerPassword1RowChangeEventHandler ServerPassword1RowChanged;
            
            public event ServerPassword1RowChangeEventHandler ServerPassword1RowDeleting;
            
            public event ServerPassword1RowChangeEventHandler ServerPassword1RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServerPassword1Row(ServerPassword1Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword1Row AddServerPassword1Row(string EncodedPassword, string EncodeNumber, NewPasswordRow parentNewPasswordRowByNewPassword_ServerPassword1) {
                ServerPassword1Row rowServerPassword1Row = ((ServerPassword1Row)(this.NewRow()));
                rowServerPassword1Row.ItemArray = new object[] {
                        EncodedPassword,
                        EncodeNumber,
                        parentNewPasswordRowByNewPassword_ServerPassword1[0]};
                this.Rows.Add(rowServerPassword1Row);
                return rowServerPassword1Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ServerPassword1DataTable cln = ((ServerPassword1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ServerPassword1DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEncodedPassword = base.Columns["EncodedPassword"];
                this.columnEncodeNumber = base.Columns["EncodeNumber"];
                this.columnNewPassword_Id = base.Columns["NewPassword_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEncodedPassword = new System.Data.DataColumn("EncodedPassword", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEncodedPassword);
                this.columnEncodeNumber = new System.Data.DataColumn("EncodeNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEncodeNumber);
                this.columnNewPassword_Id = new System.Data.DataColumn("NewPassword_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnNewPassword_Id);
                this.columnEncodedPassword.AllowDBNull = false;
                this.columnEncodedPassword.Namespace = "";
                this.columnEncodeNumber.Namespace = "";
                this.columnEncodeNumber.DefaultValue = ((string)("7"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword1Row NewServerPassword1Row() {
                return ((ServerPassword1Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ServerPassword1Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ServerPassword1Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerPassword1RowChanged != null)) {
                    this.ServerPassword1RowChanged(this, new ServerPassword1RowChangeEvent(((ServerPassword1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerPassword1RowChanging != null)) {
                    this.ServerPassword1RowChanging(this, new ServerPassword1RowChangeEvent(((ServerPassword1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerPassword1RowDeleted != null)) {
                    this.ServerPassword1RowDeleted(this, new ServerPassword1RowChangeEvent(((ServerPassword1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerPassword1RowDeleting != null)) {
                    this.ServerPassword1RowDeleting(this, new ServerPassword1RowChangeEvent(((ServerPassword1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServerPassword1Row(ServerPassword1Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServerPassword1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class VerifyServerPasswordDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnVerifyServerPassword_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyServerPasswordDataTable() {
                this.TableName = "VerifyServerPassword";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VerifyServerPasswordDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected VerifyServerPasswordDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VerifyServerPassword_IdColumn {
                get {
                    return this.columnVerifyServerPassword_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyServerPasswordRow this[int index] {
                get {
                    return ((VerifyServerPasswordRow)(this.Rows[index]));
                }
            }
            
            public event VerifyServerPasswordRowChangeEventHandler VerifyServerPasswordRowChanging;
            
            public event VerifyServerPasswordRowChangeEventHandler VerifyServerPasswordRowChanged;
            
            public event VerifyServerPasswordRowChangeEventHandler VerifyServerPasswordRowDeleting;
            
            public event VerifyServerPasswordRowChangeEventHandler VerifyServerPasswordRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddVerifyServerPasswordRow(VerifyServerPasswordRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyServerPasswordRow AddVerifyServerPasswordRow() {
                VerifyServerPasswordRow rowVerifyServerPasswordRow = ((VerifyServerPasswordRow)(this.NewRow()));
                rowVerifyServerPasswordRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowVerifyServerPasswordRow);
                return rowVerifyServerPasswordRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                VerifyServerPasswordDataTable cln = ((VerifyServerPasswordDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new VerifyServerPasswordDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnVerifyServerPassword_Id = base.Columns["VerifyServerPassword_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnVerifyServerPassword_Id = new System.Data.DataColumn("VerifyServerPassword_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnVerifyServerPassword_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnVerifyServerPassword_Id}, true));
                this.columnVerifyServerPassword_Id.AutoIncrement = true;
                this.columnVerifyServerPassword_Id.AllowDBNull = false;
                this.columnVerifyServerPassword_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyServerPasswordRow NewVerifyServerPasswordRow() {
                return ((VerifyServerPasswordRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new VerifyServerPasswordRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(VerifyServerPasswordRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VerifyServerPasswordRowChanged != null)) {
                    this.VerifyServerPasswordRowChanged(this, new VerifyServerPasswordRowChangeEvent(((VerifyServerPasswordRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VerifyServerPasswordRowChanging != null)) {
                    this.VerifyServerPasswordRowChanging(this, new VerifyServerPasswordRowChangeEvent(((VerifyServerPasswordRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VerifyServerPasswordRowDeleted != null)) {
                    this.VerifyServerPasswordRowDeleted(this, new VerifyServerPasswordRowChangeEvent(((VerifyServerPasswordRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VerifyServerPasswordRowDeleting != null)) {
                    this.VerifyServerPasswordRowDeleting(this, new VerifyServerPasswordRowChangeEvent(((VerifyServerPasswordRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveVerifyServerPasswordRow(VerifyServerPasswordRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VerifyServerPasswordDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServerPassword2DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnEncodedPassword;
            
            private System.Data.DataColumn columnEncodeNumber;
            
            private System.Data.DataColumn columnVerifyServerPassword_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword2DataTable() {
                this.TableName = "ServerPassword2";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerPassword2DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServerPassword2DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EncodedPasswordColumn {
                get {
                    return this.columnEncodedPassword;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EncodeNumberColumn {
                get {
                    return this.columnEncodeNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VerifyServerPassword_IdColumn {
                get {
                    return this.columnVerifyServerPassword_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword2Row this[int index] {
                get {
                    return ((ServerPassword2Row)(this.Rows[index]));
                }
            }
            
            public event ServerPassword2RowChangeEventHandler ServerPassword2RowChanging;
            
            public event ServerPassword2RowChangeEventHandler ServerPassword2RowChanged;
            
            public event ServerPassword2RowChangeEventHandler ServerPassword2RowDeleting;
            
            public event ServerPassword2RowChangeEventHandler ServerPassword2RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServerPassword2Row(ServerPassword2Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword2Row AddServerPassword2Row(string EncodedPassword, string EncodeNumber, VerifyServerPasswordRow parentVerifyServerPasswordRowByVerifyServerPassword_ServerPassword2) {
                ServerPassword2Row rowServerPassword2Row = ((ServerPassword2Row)(this.NewRow()));
                rowServerPassword2Row.ItemArray = new object[] {
                        EncodedPassword,
                        EncodeNumber,
                        parentVerifyServerPasswordRowByVerifyServerPassword_ServerPassword2[0]};
                this.Rows.Add(rowServerPassword2Row);
                return rowServerPassword2Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ServerPassword2DataTable cln = ((ServerPassword2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ServerPassword2DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEncodedPassword = base.Columns["EncodedPassword"];
                this.columnEncodeNumber = base.Columns["EncodeNumber"];
                this.columnVerifyServerPassword_Id = base.Columns["VerifyServerPassword_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEncodedPassword = new System.Data.DataColumn("EncodedPassword", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEncodedPassword);
                this.columnEncodeNumber = new System.Data.DataColumn("EncodeNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEncodeNumber);
                this.columnVerifyServerPassword_Id = new System.Data.DataColumn("VerifyServerPassword_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnVerifyServerPassword_Id);
                this.columnEncodedPassword.AllowDBNull = false;
                this.columnEncodedPassword.Namespace = "";
                this.columnEncodeNumber.Namespace = "";
                this.columnEncodeNumber.DefaultValue = ((string)("7"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword2Row NewServerPassword2Row() {
                return ((ServerPassword2Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ServerPassword2Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ServerPassword2Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerPassword2RowChanged != null)) {
                    this.ServerPassword2RowChanged(this, new ServerPassword2RowChangeEvent(((ServerPassword2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerPassword2RowChanging != null)) {
                    this.ServerPassword2RowChanging(this, new ServerPassword2RowChangeEvent(((ServerPassword2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerPassword2RowDeleted != null)) {
                    this.ServerPassword2RowDeleted(this, new ServerPassword2RowChangeEvent(((ServerPassword2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerPassword2RowDeleting != null)) {
                    this.ServerPassword2RowDeleting(this, new ServerPassword2RowChangeEvent(((ServerPassword2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServerPassword2Row(ServerPassword2Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServerPassword2DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CancelOrderDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnOrderId;
            
            private System.Data.DataColumn columnClientId;
            
            private System.Data.DataColumn columnAbortRecordingsInProcess;
            
            private System.Data.DataColumn columnCancelOrder_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CancelOrderDataTable() {
                this.TableName = "CancelOrder";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CancelOrderDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CancelOrderDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrderIdColumn {
                get {
                    return this.columnOrderId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClientIdColumn {
                get {
                    return this.columnClientId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AbortRecordingsInProcessColumn {
                get {
                    return this.columnAbortRecordingsInProcess;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CancelOrder_IdColumn {
                get {
                    return this.columnCancelOrder_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CancelOrderRow this[int index] {
                get {
                    return ((CancelOrderRow)(this.Rows[index]));
                }
            }
            
            public event CancelOrderRowChangeEventHandler CancelOrderRowChanging;
            
            public event CancelOrderRowChangeEventHandler CancelOrderRowChanged;
            
            public event CancelOrderRowChangeEventHandler CancelOrderRowDeleting;
            
            public event CancelOrderRowChangeEventHandler CancelOrderRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCancelOrderRow(CancelOrderRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CancelOrderRow AddCancelOrderRow(string OrderId, string ClientId, string AbortRecordingsInProcess) {
                CancelOrderRow rowCancelOrderRow = ((CancelOrderRow)(this.NewRow()));
                rowCancelOrderRow.ItemArray = new object[] {
                        OrderId,
                        ClientId,
                        AbortRecordingsInProcess,
                        null};
                this.Rows.Add(rowCancelOrderRow);
                return rowCancelOrderRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CancelOrderDataTable cln = ((CancelOrderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CancelOrderDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOrderId = base.Columns["OrderId"];
                this.columnClientId = base.Columns["ClientId"];
                this.columnAbortRecordingsInProcess = base.Columns["AbortRecordingsInProcess"];
                this.columnCancelOrder_Id = base.Columns["CancelOrder_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOrderId = new System.Data.DataColumn("OrderId", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOrderId);
                this.columnClientId = new System.Data.DataColumn("ClientId", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnClientId);
                this.columnAbortRecordingsInProcess = new System.Data.DataColumn("AbortRecordingsInProcess", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAbortRecordingsInProcess);
                this.columnCancelOrder_Id = new System.Data.DataColumn("CancelOrder_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCancelOrder_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCancelOrder_Id}, true));
                this.columnOrderId.AllowDBNull = false;
                this.columnOrderId.Namespace = "";
                this.columnClientId.AllowDBNull = false;
                this.columnClientId.Namespace = "";
                this.columnAbortRecordingsInProcess.Namespace = "";
                this.columnAbortRecordingsInProcess.DefaultValue = ((string)("true"));
                this.columnCancelOrder_Id.AutoIncrement = true;
                this.columnCancelOrder_Id.AllowDBNull = false;
                this.columnCancelOrder_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CancelOrderRow NewCancelOrderRow() {
                return ((CancelOrderRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CancelOrderRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CancelOrderRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CancelOrderRowChanged != null)) {
                    this.CancelOrderRowChanged(this, new CancelOrderRowChangeEvent(((CancelOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CancelOrderRowChanging != null)) {
                    this.CancelOrderRowChanging(this, new CancelOrderRowChangeEvent(((CancelOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CancelOrderRowDeleted != null)) {
                    this.CancelOrderRowDeleted(this, new CancelOrderRowChangeEvent(((CancelOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CancelOrderRowDeleting != null)) {
                    this.CancelOrderRowDeleting(this, new CancelOrderRowChangeEvent(((CancelOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCancelOrderRow(CancelOrderRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CancelOrderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServerPassword3DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnEncodedPassword;
            
            private System.Data.DataColumn columnEncodeNumber;
            
            private System.Data.DataColumn columnCancelOrder_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword3DataTable() {
                this.TableName = "ServerPassword3";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerPassword3DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServerPassword3DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EncodedPasswordColumn {
                get {
                    return this.columnEncodedPassword;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EncodeNumberColumn {
                get {
                    return this.columnEncodeNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CancelOrder_IdColumn {
                get {
                    return this.columnCancelOrder_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword3Row this[int index] {
                get {
                    return ((ServerPassword3Row)(this.Rows[index]));
                }
            }
            
            public event ServerPassword3RowChangeEventHandler ServerPassword3RowChanging;
            
            public event ServerPassword3RowChangeEventHandler ServerPassword3RowChanged;
            
            public event ServerPassword3RowChangeEventHandler ServerPassword3RowDeleting;
            
            public event ServerPassword3RowChangeEventHandler ServerPassword3RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServerPassword3Row(ServerPassword3Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword3Row AddServerPassword3Row(string EncodedPassword, string EncodeNumber, CancelOrderRow parentCancelOrderRowByCancelOrder_ServerPassword3) {
                ServerPassword3Row rowServerPassword3Row = ((ServerPassword3Row)(this.NewRow()));
                rowServerPassword3Row.ItemArray = new object[] {
                        EncodedPassword,
                        EncodeNumber,
                        parentCancelOrderRowByCancelOrder_ServerPassword3[3]};
                this.Rows.Add(rowServerPassword3Row);
                return rowServerPassword3Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ServerPassword3DataTable cln = ((ServerPassword3DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ServerPassword3DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEncodedPassword = base.Columns["EncodedPassword"];
                this.columnEncodeNumber = base.Columns["EncodeNumber"];
                this.columnCancelOrder_Id = base.Columns["CancelOrder_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEncodedPassword = new System.Data.DataColumn("EncodedPassword", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEncodedPassword);
                this.columnEncodeNumber = new System.Data.DataColumn("EncodeNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEncodeNumber);
                this.columnCancelOrder_Id = new System.Data.DataColumn("CancelOrder_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCancelOrder_Id);
                this.columnEncodedPassword.AllowDBNull = false;
                this.columnEncodedPassword.Namespace = "";
                this.columnEncodeNumber.Namespace = "";
                this.columnEncodeNumber.DefaultValue = ((string)("7"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword3Row NewServerPassword3Row() {
                return ((ServerPassword3Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ServerPassword3Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ServerPassword3Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerPassword3RowChanged != null)) {
                    this.ServerPassword3RowChanged(this, new ServerPassword3RowChangeEvent(((ServerPassword3Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerPassword3RowChanging != null)) {
                    this.ServerPassword3RowChanging(this, new ServerPassword3RowChangeEvent(((ServerPassword3Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerPassword3RowDeleted != null)) {
                    this.ServerPassword3RowDeleted(this, new ServerPassword3RowChangeEvent(((ServerPassword3Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerPassword3RowDeleting != null)) {
                    this.ServerPassword3RowDeleting(this, new ServerPassword3RowChangeEvent(((ServerPassword3Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServerPassword3Row(ServerPassword3Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServerPassword3DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ChangeOrderDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnOrderId;
            
            private System.Data.DataColumn columnClientId;
            
            private System.Data.DataColumn columnChangeOrder_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChangeOrderDataTable() {
                this.TableName = "ChangeOrder";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ChangeOrderDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ChangeOrderDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrderIdColumn {
                get {
                    return this.columnOrderId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ClientIdColumn {
                get {
                    return this.columnClientId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ChangeOrder_IdColumn {
                get {
                    return this.columnChangeOrder_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChangeOrderRow this[int index] {
                get {
                    return ((ChangeOrderRow)(this.Rows[index]));
                }
            }
            
            public event ChangeOrderRowChangeEventHandler ChangeOrderRowChanging;
            
            public event ChangeOrderRowChangeEventHandler ChangeOrderRowChanged;
            
            public event ChangeOrderRowChangeEventHandler ChangeOrderRowDeleting;
            
            public event ChangeOrderRowChangeEventHandler ChangeOrderRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddChangeOrderRow(ChangeOrderRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChangeOrderRow AddChangeOrderRow(string OrderId, string ClientId) {
                ChangeOrderRow rowChangeOrderRow = ((ChangeOrderRow)(this.NewRow()));
                rowChangeOrderRow.ItemArray = new object[] {
                        OrderId,
                        ClientId,
                        null};
                this.Rows.Add(rowChangeOrderRow);
                return rowChangeOrderRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ChangeOrderDataTable cln = ((ChangeOrderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ChangeOrderDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOrderId = base.Columns["OrderId"];
                this.columnClientId = base.Columns["ClientId"];
                this.columnChangeOrder_Id = base.Columns["ChangeOrder_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOrderId = new System.Data.DataColumn("OrderId", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOrderId);
                this.columnClientId = new System.Data.DataColumn("ClientId", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnClientId);
                this.columnChangeOrder_Id = new System.Data.DataColumn("ChangeOrder_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnChangeOrder_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnChangeOrder_Id}, true));
                this.columnOrderId.AllowDBNull = false;
                this.columnOrderId.Namespace = "";
                this.columnClientId.AllowDBNull = false;
                this.columnClientId.Namespace = "";
                this.columnChangeOrder_Id.AutoIncrement = true;
                this.columnChangeOrder_Id.AllowDBNull = false;
                this.columnChangeOrder_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChangeOrderRow NewChangeOrderRow() {
                return ((ChangeOrderRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ChangeOrderRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ChangeOrderRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ChangeOrderRowChanged != null)) {
                    this.ChangeOrderRowChanged(this, new ChangeOrderRowChangeEvent(((ChangeOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ChangeOrderRowChanging != null)) {
                    this.ChangeOrderRowChanging(this, new ChangeOrderRowChangeEvent(((ChangeOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ChangeOrderRowDeleted != null)) {
                    this.ChangeOrderRowDeleted(this, new ChangeOrderRowChangeEvent(((ChangeOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ChangeOrderRowDeleting != null)) {
                    this.ChangeOrderRowDeleting(this, new ChangeOrderRowChangeEvent(((ChangeOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveChangeOrderRow(ChangeOrderRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ChangeOrderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServerPassword4DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnEncodedPassword;
            
            private System.Data.DataColumn columnEncodeNumber;
            
            private System.Data.DataColumn columnChangeOrder_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword4DataTable() {
                this.TableName = "ServerPassword4";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerPassword4DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServerPassword4DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EncodedPasswordColumn {
                get {
                    return this.columnEncodedPassword;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EncodeNumberColumn {
                get {
                    return this.columnEncodeNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ChangeOrder_IdColumn {
                get {
                    return this.columnChangeOrder_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword4Row this[int index] {
                get {
                    return ((ServerPassword4Row)(this.Rows[index]));
                }
            }
            
            public event ServerPassword4RowChangeEventHandler ServerPassword4RowChanging;
            
            public event ServerPassword4RowChangeEventHandler ServerPassword4RowChanged;
            
            public event ServerPassword4RowChangeEventHandler ServerPassword4RowDeleting;
            
            public event ServerPassword4RowChangeEventHandler ServerPassword4RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServerPassword4Row(ServerPassword4Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword4Row AddServerPassword4Row(string EncodedPassword, string EncodeNumber, ChangeOrderRow parentChangeOrderRowByChangeOrder_ServerPassword4) {
                ServerPassword4Row rowServerPassword4Row = ((ServerPassword4Row)(this.NewRow()));
                rowServerPassword4Row.ItemArray = new object[] {
                        EncodedPassword,
                        EncodeNumber,
                        parentChangeOrderRowByChangeOrder_ServerPassword4[2]};
                this.Rows.Add(rowServerPassword4Row);
                return rowServerPassword4Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ServerPassword4DataTable cln = ((ServerPassword4DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ServerPassword4DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEncodedPassword = base.Columns["EncodedPassword"];
                this.columnEncodeNumber = base.Columns["EncodeNumber"];
                this.columnChangeOrder_Id = base.Columns["ChangeOrder_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEncodedPassword = new System.Data.DataColumn("EncodedPassword", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEncodedPassword);
                this.columnEncodeNumber = new System.Data.DataColumn("EncodeNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEncodeNumber);
                this.columnChangeOrder_Id = new System.Data.DataColumn("ChangeOrder_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnChangeOrder_Id);
                this.columnEncodedPassword.AllowDBNull = false;
                this.columnEncodedPassword.Namespace = "";
                this.columnEncodeNumber.Namespace = "";
                this.columnEncodeNumber.DefaultValue = ((string)("7"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword4Row NewServerPassword4Row() {
                return ((ServerPassword4Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ServerPassword4Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ServerPassword4Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerPassword4RowChanged != null)) {
                    this.ServerPassword4RowChanged(this, new ServerPassword4RowChangeEvent(((ServerPassword4Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerPassword4RowChanging != null)) {
                    this.ServerPassword4RowChanging(this, new ServerPassword4RowChangeEvent(((ServerPassword4Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerPassword4RowDeleted != null)) {
                    this.ServerPassword4RowDeleted(this, new ServerPassword4RowChangeEvent(((ServerPassword4Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerPassword4RowDeleting != null)) {
                    this.ServerPassword4RowDeleting(this, new ServerPassword4RowChangeEvent(((ServerPassword4Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServerPassword4Row(ServerPassword4Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServerPassword4DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SuspendOrderDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnChangeOrder_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SuspendOrderDataTable() {
                this.TableName = "SuspendOrder";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SuspendOrderDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SuspendOrderDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ChangeOrder_IdColumn {
                get {
                    return this.columnChangeOrder_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SuspendOrderRow this[int index] {
                get {
                    return ((SuspendOrderRow)(this.Rows[index]));
                }
            }
            
            public event SuspendOrderRowChangeEventHandler SuspendOrderRowChanging;
            
            public event SuspendOrderRowChangeEventHandler SuspendOrderRowChanged;
            
            public event SuspendOrderRowChangeEventHandler SuspendOrderRowDeleting;
            
            public event SuspendOrderRowChangeEventHandler SuspendOrderRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSuspendOrderRow(SuspendOrderRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SuspendOrderRow AddSuspendOrderRow(ChangeOrderRow parentChangeOrderRowByChangeOrder_SuspendOrder) {
                SuspendOrderRow rowSuspendOrderRow = ((SuspendOrderRow)(this.NewRow()));
                rowSuspendOrderRow.ItemArray = new object[] {
                        parentChangeOrderRowByChangeOrder_SuspendOrder[2]};
                this.Rows.Add(rowSuspendOrderRow);
                return rowSuspendOrderRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SuspendOrderDataTable cln = ((SuspendOrderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SuspendOrderDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnChangeOrder_Id = base.Columns["ChangeOrder_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnChangeOrder_Id = new System.Data.DataColumn("ChangeOrder_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnChangeOrder_Id);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SuspendOrderRow NewSuspendOrderRow() {
                return ((SuspendOrderRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SuspendOrderRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SuspendOrderRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SuspendOrderRowChanged != null)) {
                    this.SuspendOrderRowChanged(this, new SuspendOrderRowChangeEvent(((SuspendOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SuspendOrderRowChanging != null)) {
                    this.SuspendOrderRowChanging(this, new SuspendOrderRowChangeEvent(((SuspendOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SuspendOrderRowDeleted != null)) {
                    this.SuspendOrderRowDeleted(this, new SuspendOrderRowChangeEvent(((SuspendOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SuspendOrderRowDeleting != null)) {
                    this.SuspendOrderRowDeleting(this, new SuspendOrderRowChangeEvent(((SuspendOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSuspendOrderRow(SuspendOrderRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SuspendOrderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ResumeOrderDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnChangeOrder_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResumeOrderDataTable() {
                this.TableName = "ResumeOrder";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ResumeOrderDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ResumeOrderDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ChangeOrder_IdColumn {
                get {
                    return this.columnChangeOrder_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResumeOrderRow this[int index] {
                get {
                    return ((ResumeOrderRow)(this.Rows[index]));
                }
            }
            
            public event ResumeOrderRowChangeEventHandler ResumeOrderRowChanging;
            
            public event ResumeOrderRowChangeEventHandler ResumeOrderRowChanged;
            
            public event ResumeOrderRowChangeEventHandler ResumeOrderRowDeleting;
            
            public event ResumeOrderRowChangeEventHandler ResumeOrderRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddResumeOrderRow(ResumeOrderRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResumeOrderRow AddResumeOrderRow(ChangeOrderRow parentChangeOrderRowByChangeOrder_ResumeOrder) {
                ResumeOrderRow rowResumeOrderRow = ((ResumeOrderRow)(this.NewRow()));
                rowResumeOrderRow.ItemArray = new object[] {
                        parentChangeOrderRowByChangeOrder_ResumeOrder[2]};
                this.Rows.Add(rowResumeOrderRow);
                return rowResumeOrderRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ResumeOrderDataTable cln = ((ResumeOrderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ResumeOrderDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnChangeOrder_Id = base.Columns["ChangeOrder_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnChangeOrder_Id = new System.Data.DataColumn("ChangeOrder_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnChangeOrder_Id);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResumeOrderRow NewResumeOrderRow() {
                return ((ResumeOrderRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ResumeOrderRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ResumeOrderRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ResumeOrderRowChanged != null)) {
                    this.ResumeOrderRowChanged(this, new ResumeOrderRowChangeEvent(((ResumeOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ResumeOrderRowChanging != null)) {
                    this.ResumeOrderRowChanging(this, new ResumeOrderRowChangeEvent(((ResumeOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ResumeOrderRowDeleted != null)) {
                    this.ResumeOrderRowDeleted(this, new ResumeOrderRowChangeEvent(((ResumeOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ResumeOrderRowDeleting != null)) {
                    this.ResumeOrderRowDeleting(this, new ResumeOrderRowChangeEvent(((ResumeOrderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveResumeOrderRow(ResumeOrderRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ResumeOrderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class QuantityDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnNumberOfDiscs;
            
            private System.Data.DataColumn columnChangeOrder_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuantityDataTable() {
                this.TableName = "Quantity";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QuantityDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected QuantityDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberOfDiscsColumn {
                get {
                    return this.columnNumberOfDiscs;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ChangeOrder_IdColumn {
                get {
                    return this.columnChangeOrder_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuantityRow this[int index] {
                get {
                    return ((QuantityRow)(this.Rows[index]));
                }
            }
            
            public event QuantityRowChangeEventHandler QuantityRowChanging;
            
            public event QuantityRowChangeEventHandler QuantityRowChanged;
            
            public event QuantityRowChangeEventHandler QuantityRowDeleting;
            
            public event QuantityRowChangeEventHandler QuantityRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddQuantityRow(QuantityRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuantityRow AddQuantityRow(string NumberOfDiscs, ChangeOrderRow parentChangeOrderRowByChangeOrder_Quantity) {
                QuantityRow rowQuantityRow = ((QuantityRow)(this.NewRow()));
                rowQuantityRow.ItemArray = new object[] {
                        NumberOfDiscs,
                        parentChangeOrderRowByChangeOrder_Quantity[2]};
                this.Rows.Add(rowQuantityRow);
                return rowQuantityRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                QuantityDataTable cln = ((QuantityDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new QuantityDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNumberOfDiscs = base.Columns["NumberOfDiscs"];
                this.columnChangeOrder_Id = base.Columns["ChangeOrder_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNumberOfDiscs = new System.Data.DataColumn("NumberOfDiscs", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNumberOfDiscs);
                this.columnChangeOrder_Id = new System.Data.DataColumn("ChangeOrder_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnChangeOrder_Id);
                this.columnNumberOfDiscs.AllowDBNull = false;
                this.columnNumberOfDiscs.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuantityRow NewQuantityRow() {
                return ((QuantityRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new QuantityRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(QuantityRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.QuantityRowChanged != null)) {
                    this.QuantityRowChanged(this, new QuantityRowChangeEvent(((QuantityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.QuantityRowChanging != null)) {
                    this.QuantityRowChanging(this, new QuantityRowChangeEvent(((QuantityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.QuantityRowDeleted != null)) {
                    this.QuantityRowDeleted(this, new QuantityRowChangeEvent(((QuantityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.QuantityRowDeleting != null)) {
                    this.QuantityRowDeleting(this, new QuantityRowChangeEvent(((QuantityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveQuantityRow(QuantityRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "QuantityDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EnableDeviceDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnLoaderNumber;
            
            private System.Data.DataColumn columnEnableDevice_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnableDeviceDataTable() {
                this.TableName = "EnableDevice";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EnableDeviceDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EnableDeviceDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LoaderNumberColumn {
                get {
                    return this.columnLoaderNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EnableDevice_IdColumn {
                get {
                    return this.columnEnableDevice_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnableDeviceRow this[int index] {
                get {
                    return ((EnableDeviceRow)(this.Rows[index]));
                }
            }
            
            public event EnableDeviceRowChangeEventHandler EnableDeviceRowChanging;
            
            public event EnableDeviceRowChangeEventHandler EnableDeviceRowChanged;
            
            public event EnableDeviceRowChangeEventHandler EnableDeviceRowDeleting;
            
            public event EnableDeviceRowChangeEventHandler EnableDeviceRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEnableDeviceRow(EnableDeviceRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnableDeviceRow AddEnableDeviceRow(string LoaderNumber) {
                EnableDeviceRow rowEnableDeviceRow = ((EnableDeviceRow)(this.NewRow()));
                rowEnableDeviceRow.ItemArray = new object[] {
                        LoaderNumber,
                        null};
                this.Rows.Add(rowEnableDeviceRow);
                return rowEnableDeviceRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EnableDeviceDataTable cln = ((EnableDeviceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EnableDeviceDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLoaderNumber = base.Columns["LoaderNumber"];
                this.columnEnableDevice_Id = base.Columns["EnableDevice_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLoaderNumber = new System.Data.DataColumn("LoaderNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLoaderNumber);
                this.columnEnableDevice_Id = new System.Data.DataColumn("EnableDevice_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnEnableDevice_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnEnableDevice_Id}, true));
                this.columnLoaderNumber.AllowDBNull = false;
                this.columnLoaderNumber.Namespace = "";
                this.columnEnableDevice_Id.AutoIncrement = true;
                this.columnEnableDevice_Id.AllowDBNull = false;
                this.columnEnableDevice_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnableDeviceRow NewEnableDeviceRow() {
                return ((EnableDeviceRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EnableDeviceRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EnableDeviceRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EnableDeviceRowChanged != null)) {
                    this.EnableDeviceRowChanged(this, new EnableDeviceRowChangeEvent(((EnableDeviceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EnableDeviceRowChanging != null)) {
                    this.EnableDeviceRowChanging(this, new EnableDeviceRowChangeEvent(((EnableDeviceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EnableDeviceRowDeleted != null)) {
                    this.EnableDeviceRowDeleted(this, new EnableDeviceRowChangeEvent(((EnableDeviceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EnableDeviceRowDeleting != null)) {
                    this.EnableDeviceRowDeleting(this, new EnableDeviceRowChangeEvent(((EnableDeviceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEnableDeviceRow(EnableDeviceRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EnableDeviceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServerPassword5DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnEncodedPassword;
            
            private System.Data.DataColumn columnEncodeNumber;
            
            private System.Data.DataColumn columnEnableDevice_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword5DataTable() {
                this.TableName = "ServerPassword5";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerPassword5DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServerPassword5DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EncodedPasswordColumn {
                get {
                    return this.columnEncodedPassword;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EncodeNumberColumn {
                get {
                    return this.columnEncodeNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EnableDevice_IdColumn {
                get {
                    return this.columnEnableDevice_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword5Row this[int index] {
                get {
                    return ((ServerPassword5Row)(this.Rows[index]));
                }
            }
            
            public event ServerPassword5RowChangeEventHandler ServerPassword5RowChanging;
            
            public event ServerPassword5RowChangeEventHandler ServerPassword5RowChanged;
            
            public event ServerPassword5RowChangeEventHandler ServerPassword5RowDeleting;
            
            public event ServerPassword5RowChangeEventHandler ServerPassword5RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServerPassword5Row(ServerPassword5Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword5Row AddServerPassword5Row(string EncodedPassword, string EncodeNumber, EnableDeviceRow parentEnableDeviceRowByEnableDevice_ServerPassword5) {
                ServerPassword5Row rowServerPassword5Row = ((ServerPassword5Row)(this.NewRow()));
                rowServerPassword5Row.ItemArray = new object[] {
                        EncodedPassword,
                        EncodeNumber,
                        parentEnableDeviceRowByEnableDevice_ServerPassword5[1]};
                this.Rows.Add(rowServerPassword5Row);
                return rowServerPassword5Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ServerPassword5DataTable cln = ((ServerPassword5DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ServerPassword5DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEncodedPassword = base.Columns["EncodedPassword"];
                this.columnEncodeNumber = base.Columns["EncodeNumber"];
                this.columnEnableDevice_Id = base.Columns["EnableDevice_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEncodedPassword = new System.Data.DataColumn("EncodedPassword", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEncodedPassword);
                this.columnEncodeNumber = new System.Data.DataColumn("EncodeNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEncodeNumber);
                this.columnEnableDevice_Id = new System.Data.DataColumn("EnableDevice_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnEnableDevice_Id);
                this.columnEncodedPassword.AllowDBNull = false;
                this.columnEncodedPassword.Namespace = "";
                this.columnEncodeNumber.Namespace = "";
                this.columnEncodeNumber.DefaultValue = ((string)("7"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword5Row NewServerPassword5Row() {
                return ((ServerPassword5Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ServerPassword5Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ServerPassword5Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerPassword5RowChanged != null)) {
                    this.ServerPassword5RowChanged(this, new ServerPassword5RowChangeEvent(((ServerPassword5Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerPassword5RowChanging != null)) {
                    this.ServerPassword5RowChanging(this, new ServerPassword5RowChangeEvent(((ServerPassword5Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerPassword5RowDeleted != null)) {
                    this.ServerPassword5RowDeleted(this, new ServerPassword5RowChangeEvent(((ServerPassword5Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerPassword5RowDeleting != null)) {
                    this.ServerPassword5RowDeleting(this, new ServerPassword5RowChangeEvent(((ServerPassword5Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServerPassword5Row(ServerPassword5Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServerPassword5DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AutoloaderDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnEnableDevice_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderDataTable() {
                this.TableName = "Autoloader";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AutoloaderDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AutoloaderDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EnableDevice_IdColumn {
                get {
                    return this.columnEnableDevice_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderRow this[int index] {
                get {
                    return ((AutoloaderRow)(this.Rows[index]));
                }
            }
            
            public event AutoloaderRowChangeEventHandler AutoloaderRowChanging;
            
            public event AutoloaderRowChangeEventHandler AutoloaderRowChanged;
            
            public event AutoloaderRowChangeEventHandler AutoloaderRowDeleting;
            
            public event AutoloaderRowChangeEventHandler AutoloaderRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAutoloaderRow(AutoloaderRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderRow AddAutoloaderRow(EnableDeviceRow parentEnableDeviceRowByEnableDevice_Autoloader) {
                AutoloaderRow rowAutoloaderRow = ((AutoloaderRow)(this.NewRow()));
                rowAutoloaderRow.ItemArray = new object[] {
                        parentEnableDeviceRowByEnableDevice_Autoloader[1]};
                this.Rows.Add(rowAutoloaderRow);
                return rowAutoloaderRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                AutoloaderDataTable cln = ((AutoloaderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new AutoloaderDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEnableDevice_Id = base.Columns["EnableDevice_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEnableDevice_Id = new System.Data.DataColumn("EnableDevice_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnEnableDevice_Id);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderRow NewAutoloaderRow() {
                return ((AutoloaderRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AutoloaderRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(AutoloaderRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AutoloaderRowChanged != null)) {
                    this.AutoloaderRowChanged(this, new AutoloaderRowChangeEvent(((AutoloaderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AutoloaderRowChanging != null)) {
                    this.AutoloaderRowChanging(this, new AutoloaderRowChangeEvent(((AutoloaderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AutoloaderRowDeleted != null)) {
                    this.AutoloaderRowDeleted(this, new AutoloaderRowChangeEvent(((AutoloaderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AutoloaderRowDeleting != null)) {
                    this.AutoloaderRowDeleting(this, new AutoloaderRowChangeEvent(((AutoloaderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAutoloaderRow(AutoloaderRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AutoloaderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RecorderDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnNumber;
            
            private System.Data.DataColumn columnEnableDevice_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecorderDataTable() {
                this.TableName = "Recorder";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RecorderDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RecorderDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EnableDevice_IdColumn {
                get {
                    return this.columnEnableDevice_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecorderRow this[int index] {
                get {
                    return ((RecorderRow)(this.Rows[index]));
                }
            }
            
            public event RecorderRowChangeEventHandler RecorderRowChanging;
            
            public event RecorderRowChangeEventHandler RecorderRowChanged;
            
            public event RecorderRowChangeEventHandler RecorderRowDeleting;
            
            public event RecorderRowChangeEventHandler RecorderRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRecorderRow(RecorderRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecorderRow AddRecorderRow(string Number, EnableDeviceRow parentEnableDeviceRowByEnableDevice_Recorder) {
                RecorderRow rowRecorderRow = ((RecorderRow)(this.NewRow()));
                rowRecorderRow.ItemArray = new object[] {
                        Number,
                        parentEnableDeviceRowByEnableDevice_Recorder[1]};
                this.Rows.Add(rowRecorderRow);
                return rowRecorderRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RecorderDataTable cln = ((RecorderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RecorderDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNumber = base.Columns["Number"];
                this.columnEnableDevice_Id = base.Columns["EnableDevice_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNumber = new System.Data.DataColumn("Number", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNumber);
                this.columnEnableDevice_Id = new System.Data.DataColumn("EnableDevice_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnEnableDevice_Id);
                this.columnNumber.AllowDBNull = false;
                this.columnNumber.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecorderRow NewRecorderRow() {
                return ((RecorderRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RecorderRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RecorderRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RecorderRowChanged != null)) {
                    this.RecorderRowChanged(this, new RecorderRowChangeEvent(((RecorderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RecorderRowChanging != null)) {
                    this.RecorderRowChanging(this, new RecorderRowChangeEvent(((RecorderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RecorderRowDeleted != null)) {
                    this.RecorderRowDeleted(this, new RecorderRowChangeEvent(((RecorderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RecorderRowDeleting != null)) {
                    this.RecorderRowDeleting(this, new RecorderRowChangeEvent(((RecorderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRecorderRow(RecorderRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RecorderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrinterDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnNumber;
            
            private System.Data.DataColumn columnEnableDevice_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrinterDataTable() {
                this.TableName = "Printer";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrinterDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PrinterDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EnableDevice_IdColumn {
                get {
                    return this.columnEnableDevice_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrinterRow this[int index] {
                get {
                    return ((PrinterRow)(this.Rows[index]));
                }
            }
            
            public event PrinterRowChangeEventHandler PrinterRowChanging;
            
            public event PrinterRowChangeEventHandler PrinterRowChanged;
            
            public event PrinterRowChangeEventHandler PrinterRowDeleting;
            
            public event PrinterRowChangeEventHandler PrinterRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrinterRow(PrinterRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrinterRow AddPrinterRow(string Number, EnableDeviceRow parentEnableDeviceRowByEnableDevice_Printer) {
                PrinterRow rowPrinterRow = ((PrinterRow)(this.NewRow()));
                rowPrinterRow.ItemArray = new object[] {
                        Number,
                        parentEnableDeviceRowByEnableDevice_Printer[1]};
                this.Rows.Add(rowPrinterRow);
                return rowPrinterRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PrinterDataTable cln = ((PrinterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PrinterDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNumber = base.Columns["Number"];
                this.columnEnableDevice_Id = base.Columns["EnableDevice_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNumber = new System.Data.DataColumn("Number", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNumber);
                this.columnEnableDevice_Id = new System.Data.DataColumn("EnableDevice_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnEnableDevice_Id);
                this.columnNumber.AllowDBNull = false;
                this.columnNumber.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrinterRow NewPrinterRow() {
                return ((PrinterRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PrinterRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PrinterRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrinterRowChanged != null)) {
                    this.PrinterRowChanged(this, new PrinterRowChangeEvent(((PrinterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrinterRowChanging != null)) {
                    this.PrinterRowChanging(this, new PrinterRowChangeEvent(((PrinterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrinterRowDeleted != null)) {
                    this.PrinterRowDeleted(this, new PrinterRowChangeEvent(((PrinterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrinterRowDeleting != null)) {
                    this.PrinterRowDeleting(this, new PrinterRowChangeEvent(((PrinterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrinterRow(PrinterRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrinterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ResetInputBinsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnLoaderNumber;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResetInputBinsDataTable() {
                this.TableName = "ResetInputBins";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ResetInputBinsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ResetInputBinsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LoaderNumberColumn {
                get {
                    return this.columnLoaderNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResetInputBinsRow this[int index] {
                get {
                    return ((ResetInputBinsRow)(this.Rows[index]));
                }
            }
            
            public event ResetInputBinsRowChangeEventHandler ResetInputBinsRowChanging;
            
            public event ResetInputBinsRowChangeEventHandler ResetInputBinsRowChanged;
            
            public event ResetInputBinsRowChangeEventHandler ResetInputBinsRowDeleting;
            
            public event ResetInputBinsRowChangeEventHandler ResetInputBinsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddResetInputBinsRow(ResetInputBinsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResetInputBinsRow AddResetInputBinsRow(string LoaderNumber) {
                ResetInputBinsRow rowResetInputBinsRow = ((ResetInputBinsRow)(this.NewRow()));
                rowResetInputBinsRow.ItemArray = new object[] {
                        LoaderNumber};
                this.Rows.Add(rowResetInputBinsRow);
                return rowResetInputBinsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ResetInputBinsDataTable cln = ((ResetInputBinsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ResetInputBinsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLoaderNumber = base.Columns["LoaderNumber"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLoaderNumber = new System.Data.DataColumn("LoaderNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLoaderNumber);
                this.columnLoaderNumber.AllowDBNull = false;
                this.columnLoaderNumber.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResetInputBinsRow NewResetInputBinsRow() {
                return ((ResetInputBinsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ResetInputBinsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ResetInputBinsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ResetInputBinsRowChanged != null)) {
                    this.ResetInputBinsRowChanged(this, new ResetInputBinsRowChangeEvent(((ResetInputBinsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ResetInputBinsRowChanging != null)) {
                    this.ResetInputBinsRowChanging(this, new ResetInputBinsRowChangeEvent(((ResetInputBinsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ResetInputBinsRowDeleted != null)) {
                    this.ResetInputBinsRowDeleted(this, new ResetInputBinsRowChangeEvent(((ResetInputBinsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ResetInputBinsRowDeleting != null)) {
                    this.ResetInputBinsRowDeleting(this, new ResetInputBinsRowChangeEvent(((ResetInputBinsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveResetInputBinsRow(ResetInputBinsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ResetInputBinsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SetDialogActionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDialogId;
            
            private System.Data.DataColumn columnButton;
            
            private System.Data.DataColumn columnFlag;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetDialogActionDataTable() {
                this.TableName = "SetDialogAction";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SetDialogActionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SetDialogActionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DialogIdColumn {
                get {
                    return this.columnDialogId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ButtonColumn {
                get {
                    return this.columnButton;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FlagColumn {
                get {
                    return this.columnFlag;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetDialogActionRow this[int index] {
                get {
                    return ((SetDialogActionRow)(this.Rows[index]));
                }
            }
            
            public event SetDialogActionRowChangeEventHandler SetDialogActionRowChanging;
            
            public event SetDialogActionRowChangeEventHandler SetDialogActionRowChanged;
            
            public event SetDialogActionRowChangeEventHandler SetDialogActionRowDeleting;
            
            public event SetDialogActionRowChangeEventHandler SetDialogActionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSetDialogActionRow(SetDialogActionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetDialogActionRow AddSetDialogActionRow(string DialogId, string Button, string Flag) {
                SetDialogActionRow rowSetDialogActionRow = ((SetDialogActionRow)(this.NewRow()));
                rowSetDialogActionRow.ItemArray = new object[] {
                        DialogId,
                        Button,
                        Flag};
                this.Rows.Add(rowSetDialogActionRow);
                return rowSetDialogActionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SetDialogActionDataTable cln = ((SetDialogActionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SetDialogActionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDialogId = base.Columns["DialogId"];
                this.columnButton = base.Columns["Button"];
                this.columnFlag = base.Columns["Flag"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDialogId = new System.Data.DataColumn("DialogId", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDialogId);
                this.columnButton = new System.Data.DataColumn("Button", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnButton);
                this.columnFlag = new System.Data.DataColumn("Flag", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFlag);
                this.columnDialogId.AllowDBNull = false;
                this.columnDialogId.Namespace = "";
                this.columnButton.AllowDBNull = false;
                this.columnButton.Namespace = "";
                this.columnFlag.Namespace = "";
                this.columnFlag.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetDialogActionRow NewSetDialogActionRow() {
                return ((SetDialogActionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SetDialogActionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SetDialogActionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SetDialogActionRowChanged != null)) {
                    this.SetDialogActionRowChanged(this, new SetDialogActionRowChangeEvent(((SetDialogActionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SetDialogActionRowChanging != null)) {
                    this.SetDialogActionRowChanging(this, new SetDialogActionRowChangeEvent(((SetDialogActionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SetDialogActionRowDeleted != null)) {
                    this.SetDialogActionRowDeleted(this, new SetDialogActionRowChangeEvent(((SetDialogActionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SetDialogActionRowDeleting != null)) {
                    this.SetDialogActionRowDeleting(this, new SetDialogActionRowChangeEvent(((SetDialogActionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSetDialogActionRow(SetDialogActionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SetDialogActionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetSessionLogDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnNumberEvents;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSessionLogDataTable() {
                this.TableName = "GetSessionLog";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetSessionLogDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetSessionLogDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberEventsColumn {
                get {
                    return this.columnNumberEvents;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSessionLogRow this[int index] {
                get {
                    return ((GetSessionLogRow)(this.Rows[index]));
                }
            }
            
            public event GetSessionLogRowChangeEventHandler GetSessionLogRowChanging;
            
            public event GetSessionLogRowChangeEventHandler GetSessionLogRowChanged;
            
            public event GetSessionLogRowChangeEventHandler GetSessionLogRowDeleting;
            
            public event GetSessionLogRowChangeEventHandler GetSessionLogRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetSessionLogRow(GetSessionLogRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSessionLogRow AddGetSessionLogRow(string NumberEvents) {
                GetSessionLogRow rowGetSessionLogRow = ((GetSessionLogRow)(this.NewRow()));
                rowGetSessionLogRow.ItemArray = new object[] {
                        NumberEvents};
                this.Rows.Add(rowGetSessionLogRow);
                return rowGetSessionLogRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                GetSessionLogDataTable cln = ((GetSessionLogDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new GetSessionLogDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNumberEvents = base.Columns["NumberEvents"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNumberEvents = new System.Data.DataColumn("NumberEvents", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNumberEvents);
                this.columnNumberEvents.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSessionLogRow NewGetSessionLogRow() {
                return ((GetSessionLogRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GetSessionLogRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(GetSessionLogRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetSessionLogRowChanged != null)) {
                    this.GetSessionLogRowChanged(this, new GetSessionLogRowChangeEvent(((GetSessionLogRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetSessionLogRowChanging != null)) {
                    this.GetSessionLogRowChanging(this, new GetSessionLogRowChangeEvent(((GetSessionLogRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetSessionLogRowDeleted != null)) {
                    this.GetSessionLogRowDeleted(this, new GetSessionLogRowChangeEvent(((GetSessionLogRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetSessionLogRowDeleting != null)) {
                    this.GetSessionLogRowDeleting(this, new GetSessionLogRowChangeEvent(((GetSessionLogRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetSessionLogRow(GetSessionLogRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetSessionLogDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClearSessionLogDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClearSessionLogDataTable() {
                this.TableName = "ClearSessionLog";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClearSessionLogDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ClearSessionLogDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClearSessionLogRow this[int index] {
                get {
                    return ((ClearSessionLogRow)(this.Rows[index]));
                }
            }
            
            public event ClearSessionLogRowChangeEventHandler ClearSessionLogRowChanging;
            
            public event ClearSessionLogRowChangeEventHandler ClearSessionLogRowChanged;
            
            public event ClearSessionLogRowChangeEventHandler ClearSessionLogRowDeleting;
            
            public event ClearSessionLogRowChangeEventHandler ClearSessionLogRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClearSessionLogRow(ClearSessionLogRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClearSessionLogRow AddClearSessionLogRow() {
                ClearSessionLogRow rowClearSessionLogRow = ((ClearSessionLogRow)(this.NewRow()));
                rowClearSessionLogRow.ItemArray = new object[0];
                this.Rows.Add(rowClearSessionLogRow);
                return rowClearSessionLogRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ClearSessionLogDataTable cln = ((ClearSessionLogDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ClearSessionLogDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClearSessionLogRow NewClearSessionLogRow() {
                return ((ClearSessionLogRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ClearSessionLogRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ClearSessionLogRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClearSessionLogRowChanged != null)) {
                    this.ClearSessionLogRowChanged(this, new ClearSessionLogRowChangeEvent(((ClearSessionLogRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClearSessionLogRowChanging != null)) {
                    this.ClearSessionLogRowChanging(this, new ClearSessionLogRowChangeEvent(((ClearSessionLogRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClearSessionLogRowDeleted != null)) {
                    this.ClearSessionLogRowDeleted(this, new ClearSessionLogRowChangeEvent(((ClearSessionLogRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClearSessionLogRowDeleting != null)) {
                    this.ClearSessionLogRowDeleting(this, new ClearSessionLogRowChangeEvent(((ClearSessionLogRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClearSessionLogRow(ClearSessionLogRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClearSessionLogDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SetParameterDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnIgnoreReadOnly;
            
            private System.Data.DataColumn columnSetParameter_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetParameterDataTable() {
                this.TableName = "SetParameter";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SetParameterDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SetParameterDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IgnoreReadOnlyColumn {
                get {
                    return this.columnIgnoreReadOnly;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SetParameter_IdColumn {
                get {
                    return this.columnSetParameter_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetParameterRow this[int index] {
                get {
                    return ((SetParameterRow)(this.Rows[index]));
                }
            }
            
            public event SetParameterRowChangeEventHandler SetParameterRowChanging;
            
            public event SetParameterRowChangeEventHandler SetParameterRowChanged;
            
            public event SetParameterRowChangeEventHandler SetParameterRowDeleting;
            
            public event SetParameterRowChangeEventHandler SetParameterRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSetParameterRow(SetParameterRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetParameterRow AddSetParameterRow(string IgnoreReadOnly) {
                SetParameterRow rowSetParameterRow = ((SetParameterRow)(this.NewRow()));
                rowSetParameterRow.ItemArray = new object[] {
                        IgnoreReadOnly,
                        null};
                this.Rows.Add(rowSetParameterRow);
                return rowSetParameterRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SetParameterDataTable cln = ((SetParameterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SetParameterDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIgnoreReadOnly = base.Columns["IgnoreReadOnly"];
                this.columnSetParameter_Id = base.Columns["SetParameter_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIgnoreReadOnly = new System.Data.DataColumn("IgnoreReadOnly", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIgnoreReadOnly);
                this.columnSetParameter_Id = new System.Data.DataColumn("SetParameter_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSetParameter_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnSetParameter_Id}, true));
                this.columnIgnoreReadOnly.Namespace = "";
                this.columnIgnoreReadOnly.DefaultValue = ((string)("false"));
                this.columnSetParameter_Id.AutoIncrement = true;
                this.columnSetParameter_Id.AllowDBNull = false;
                this.columnSetParameter_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetParameterRow NewSetParameterRow() {
                return ((SetParameterRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SetParameterRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SetParameterRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SetParameterRowChanged != null)) {
                    this.SetParameterRowChanged(this, new SetParameterRowChangeEvent(((SetParameterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SetParameterRowChanging != null)) {
                    this.SetParameterRowChanging(this, new SetParameterRowChangeEvent(((SetParameterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SetParameterRowDeleted != null)) {
                    this.SetParameterRowDeleted(this, new SetParameterRowChangeEvent(((SetParameterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SetParameterRowDeleting != null)) {
                    this.SetParameterRowDeleting(this, new SetParameterRowChangeEvent(((SetParameterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSetParameterRow(SetParameterRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SetParameterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServerPassword6DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnEncodedPassword;
            
            private System.Data.DataColumn columnEncodeNumber;
            
            private System.Data.DataColumn columnSetParameter_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword6DataTable() {
                this.TableName = "ServerPassword6";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerPassword6DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServerPassword6DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EncodedPasswordColumn {
                get {
                    return this.columnEncodedPassword;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EncodeNumberColumn {
                get {
                    return this.columnEncodeNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SetParameter_IdColumn {
                get {
                    return this.columnSetParameter_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword6Row this[int index] {
                get {
                    return ((ServerPassword6Row)(this.Rows[index]));
                }
            }
            
            public event ServerPassword6RowChangeEventHandler ServerPassword6RowChanging;
            
            public event ServerPassword6RowChangeEventHandler ServerPassword6RowChanged;
            
            public event ServerPassword6RowChangeEventHandler ServerPassword6RowDeleting;
            
            public event ServerPassword6RowChangeEventHandler ServerPassword6RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServerPassword6Row(ServerPassword6Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword6Row AddServerPassword6Row(string EncodedPassword, string EncodeNumber, SetParameterRow parentSetParameterRowBySetParameter_ServerPassword6) {
                ServerPassword6Row rowServerPassword6Row = ((ServerPassword6Row)(this.NewRow()));
                rowServerPassword6Row.ItemArray = new object[] {
                        EncodedPassword,
                        EncodeNumber,
                        parentSetParameterRowBySetParameter_ServerPassword6[1]};
                this.Rows.Add(rowServerPassword6Row);
                return rowServerPassword6Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ServerPassword6DataTable cln = ((ServerPassword6DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ServerPassword6DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEncodedPassword = base.Columns["EncodedPassword"];
                this.columnEncodeNumber = base.Columns["EncodeNumber"];
                this.columnSetParameter_Id = base.Columns["SetParameter_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEncodedPassword = new System.Data.DataColumn("EncodedPassword", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEncodedPassword);
                this.columnEncodeNumber = new System.Data.DataColumn("EncodeNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEncodeNumber);
                this.columnSetParameter_Id = new System.Data.DataColumn("SetParameter_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSetParameter_Id);
                this.columnEncodedPassword.AllowDBNull = false;
                this.columnEncodedPassword.Namespace = "";
                this.columnEncodeNumber.Namespace = "";
                this.columnEncodeNumber.DefaultValue = ((string)("7"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword6Row NewServerPassword6Row() {
                return ((ServerPassword6Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ServerPassword6Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ServerPassword6Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerPassword6RowChanged != null)) {
                    this.ServerPassword6RowChanged(this, new ServerPassword6RowChangeEvent(((ServerPassword6Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerPassword6RowChanging != null)) {
                    this.ServerPassword6RowChanging(this, new ServerPassword6RowChangeEvent(((ServerPassword6Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerPassword6RowDeleted != null)) {
                    this.ServerPassword6RowDeleted(this, new ServerPassword6RowChangeEvent(((ServerPassword6Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerPassword6RowDeleting != null)) {
                    this.ServerPassword6RowDeleting(this, new ServerPassword6RowChangeEvent(((ServerPassword6Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServerPassword6Row(ServerPassword6Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServerPassword6DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SettingDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSetting_Id;
            
            private System.Data.DataColumn columnSetParameter_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingDataTable() {
                this.TableName = "Setting";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SettingDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SettingDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Setting_IdColumn {
                get {
                    return this.columnSetting_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SetParameter_IdColumn {
                get {
                    return this.columnSetParameter_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingRow this[int index] {
                get {
                    return ((SettingRow)(this.Rows[index]));
                }
            }
            
            public event SettingRowChangeEventHandler SettingRowChanging;
            
            public event SettingRowChangeEventHandler SettingRowChanged;
            
            public event SettingRowChangeEventHandler SettingRowDeleting;
            
            public event SettingRowChangeEventHandler SettingRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSettingRow(SettingRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingRow AddSettingRow(SetParameterRow parentSetParameterRowBySetParameter_Setting) {
                SettingRow rowSettingRow = ((SettingRow)(this.NewRow()));
                rowSettingRow.ItemArray = new object[] {
                        null,
                        parentSetParameterRowBySetParameter_Setting[1]};
                this.Rows.Add(rowSettingRow);
                return rowSettingRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SettingDataTable cln = ((SettingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SettingDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSetting_Id = base.Columns["Setting_Id"];
                this.columnSetParameter_Id = base.Columns["SetParameter_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSetting_Id = new System.Data.DataColumn("Setting_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSetting_Id);
                this.columnSetParameter_Id = new System.Data.DataColumn("SetParameter_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSetParameter_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnSetting_Id}, true));
                this.columnSetting_Id.AutoIncrement = true;
                this.columnSetting_Id.AllowDBNull = false;
                this.columnSetting_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingRow NewSettingRow() {
                return ((SettingRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SettingRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SettingRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SettingRowChanged != null)) {
                    this.SettingRowChanged(this, new SettingRowChangeEvent(((SettingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SettingRowChanging != null)) {
                    this.SettingRowChanging(this, new SettingRowChangeEvent(((SettingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SettingRowDeleted != null)) {
                    this.SettingRowDeleted(this, new SettingRowChangeEvent(((SettingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SettingRowDeleting != null)) {
                    this.SettingRowDeleting(this, new SettingRowChangeEvent(((SettingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSettingRow(SettingRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SettingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServerDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDescription;
            
            private System.Data.DataColumn columnOrderStatusInterval;
            
            private System.Data.DataColumn columnSetting_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerDataTable() {
                this.TableName = "Server";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServerDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OrderStatusIntervalColumn {
                get {
                    return this.columnOrderStatusInterval;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Setting_IdColumn {
                get {
                    return this.columnSetting_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerRow this[int index] {
                get {
                    return ((ServerRow)(this.Rows[index]));
                }
            }
            
            public event ServerRowChangeEventHandler ServerRowChanging;
            
            public event ServerRowChangeEventHandler ServerRowChanged;
            
            public event ServerRowChangeEventHandler ServerRowDeleting;
            
            public event ServerRowChangeEventHandler ServerRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServerRow(ServerRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerRow AddServerRow(string Description, string OrderStatusInterval, SettingRow parentSettingRowBySetting_Server) {
                ServerRow rowServerRow = ((ServerRow)(this.NewRow()));
                rowServerRow.ItemArray = new object[] {
                        Description,
                        OrderStatusInterval,
                        parentSettingRowBySetting_Server[0]};
                this.Rows.Add(rowServerRow);
                return rowServerRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ServerDataTable cln = ((ServerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ServerDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDescription = base.Columns["Description"];
                this.columnOrderStatusInterval = base.Columns["OrderStatusInterval"];
                this.columnSetting_Id = base.Columns["Setting_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDescription);
                this.columnOrderStatusInterval = new System.Data.DataColumn("OrderStatusInterval", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOrderStatusInterval);
                this.columnSetting_Id = new System.Data.DataColumn("Setting_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSetting_Id);
                this.columnDescription.Namespace = "";
                this.columnOrderStatusInterval.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerRow NewServerRow() {
                return ((ServerRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ServerRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ServerRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerRowChanged != null)) {
                    this.ServerRowChanged(this, new ServerRowChangeEvent(((ServerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerRowChanging != null)) {
                    this.ServerRowChanging(this, new ServerRowChangeEvent(((ServerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerRowDeleted != null)) {
                    this.ServerRowDeleted(this, new ServerRowChangeEvent(((ServerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerRowDeleting != null)) {
                    this.ServerRowDeleting(this, new ServerRowChangeEvent(((ServerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServerRow(ServerRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ModeSettingsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnModeSettings_Id;
            
            private System.Data.DataColumn columnSetting_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModeSettingsDataTable() {
                this.TableName = "ModeSettings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ModeSettingsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ModeSettingsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ModeSettings_IdColumn {
                get {
                    return this.columnModeSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Setting_IdColumn {
                get {
                    return this.columnSetting_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModeSettingsRow this[int index] {
                get {
                    return ((ModeSettingsRow)(this.Rows[index]));
                }
            }
            
            public event ModeSettingsRowChangeEventHandler ModeSettingsRowChanging;
            
            public event ModeSettingsRowChangeEventHandler ModeSettingsRowChanged;
            
            public event ModeSettingsRowChangeEventHandler ModeSettingsRowDeleting;
            
            public event ModeSettingsRowChangeEventHandler ModeSettingsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddModeSettingsRow(ModeSettingsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModeSettingsRow AddModeSettingsRow(SettingRow parentSettingRowBySetting_ModeSettings) {
                ModeSettingsRow rowModeSettingsRow = ((ModeSettingsRow)(this.NewRow()));
                rowModeSettingsRow.ItemArray = new object[] {
                        null,
                        parentSettingRowBySetting_ModeSettings[0]};
                this.Rows.Add(rowModeSettingsRow);
                return rowModeSettingsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ModeSettingsDataTable cln = ((ModeSettingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ModeSettingsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnModeSettings_Id = base.Columns["ModeSettings_Id"];
                this.columnSetting_Id = base.Columns["Setting_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnModeSettings_Id = new System.Data.DataColumn("ModeSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnModeSettings_Id);
                this.columnSetting_Id = new System.Data.DataColumn("Setting_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSetting_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnModeSettings_Id}, true));
                this.columnModeSettings_Id.AutoIncrement = true;
                this.columnModeSettings_Id.AllowDBNull = false;
                this.columnModeSettings_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModeSettingsRow NewModeSettingsRow() {
                return ((ModeSettingsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ModeSettingsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ModeSettingsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ModeSettingsRowChanged != null)) {
                    this.ModeSettingsRowChanged(this, new ModeSettingsRowChangeEvent(((ModeSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ModeSettingsRowChanging != null)) {
                    this.ModeSettingsRowChanging(this, new ModeSettingsRowChangeEvent(((ModeSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ModeSettingsRowDeleted != null)) {
                    this.ModeSettingsRowDeleted(this, new ModeSettingsRowChangeEvent(((ModeSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ModeSettingsRowDeleting != null)) {
                    this.ModeSettingsRowDeleting(this, new ModeSettingsRowChangeEvent(((ModeSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveModeSettingsRow(ModeSettingsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ModeSettingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServerModeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnModeSettings_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerModeDataTable() {
                this.TableName = "ServerMode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerModeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServerModeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ModeSettings_IdColumn {
                get {
                    return this.columnModeSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerModeRow this[int index] {
                get {
                    return ((ServerModeRow)(this.Rows[index]));
                }
            }
            
            public event ServerModeRowChangeEventHandler ServerModeRowChanging;
            
            public event ServerModeRowChangeEventHandler ServerModeRowChanged;
            
            public event ServerModeRowChangeEventHandler ServerModeRowDeleting;
            
            public event ServerModeRowChangeEventHandler ServerModeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServerModeRow(ServerModeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerModeRow AddServerModeRow(string Value, ModeSettingsRow parentModeSettingsRowByModeSettings_ServerMode) {
                ServerModeRow rowServerModeRow = ((ServerModeRow)(this.NewRow()));
                rowServerModeRow.ItemArray = new object[] {
                        Value,
                        parentModeSettingsRowByModeSettings_ServerMode[0]};
                this.Rows.Add(rowServerModeRow);
                return rowServerModeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ServerModeDataTable cln = ((ServerModeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ServerModeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnModeSettings_Id = base.Columns["ModeSettings_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnModeSettings_Id = new System.Data.DataColumn("ModeSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnModeSettings_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("Attended"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerModeRow NewServerModeRow() {
                return ((ServerModeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ServerModeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ServerModeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerModeRowChanged != null)) {
                    this.ServerModeRowChanged(this, new ServerModeRowChangeEvent(((ServerModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerModeRowChanging != null)) {
                    this.ServerModeRowChanging(this, new ServerModeRowChangeEvent(((ServerModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerModeRowDeleted != null)) {
                    this.ServerModeRowDeleted(this, new ServerModeRowChangeEvent(((ServerModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerModeRowDeleting != null)) {
                    this.ServerModeRowDeleting(this, new ServerModeRowChangeEvent(((ServerModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServerModeRow(ServerModeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServerModeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OperatingModeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnModeSettings_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperatingModeDataTable() {
                this.TableName = "OperatingMode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OperatingModeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OperatingModeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ModeSettings_IdColumn {
                get {
                    return this.columnModeSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperatingModeRow this[int index] {
                get {
                    return ((OperatingModeRow)(this.Rows[index]));
                }
            }
            
            public event OperatingModeRowChangeEventHandler OperatingModeRowChanging;
            
            public event OperatingModeRowChangeEventHandler OperatingModeRowChanged;
            
            public event OperatingModeRowChangeEventHandler OperatingModeRowDeleting;
            
            public event OperatingModeRowChangeEventHandler OperatingModeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOperatingModeRow(OperatingModeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperatingModeRow AddOperatingModeRow(string Value, ModeSettingsRow parentModeSettingsRowByModeSettings_OperatingMode) {
                OperatingModeRow rowOperatingModeRow = ((OperatingModeRow)(this.NewRow()));
                rowOperatingModeRow.ItemArray = new object[] {
                        Value,
                        parentModeSettingsRowByModeSettings_OperatingMode[0]};
                this.Rows.Add(rowOperatingModeRow);
                return rowOperatingModeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                OperatingModeDataTable cln = ((OperatingModeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new OperatingModeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnModeSettings_Id = base.Columns["ModeSettings_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnModeSettings_Id = new System.Data.DataColumn("ModeSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnModeSettings_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("Normal"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperatingModeRow NewOperatingModeRow() {
                return ((OperatingModeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OperatingModeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(OperatingModeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OperatingModeRowChanged != null)) {
                    this.OperatingModeRowChanged(this, new OperatingModeRowChangeEvent(((OperatingModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OperatingModeRowChanging != null)) {
                    this.OperatingModeRowChanging(this, new OperatingModeRowChangeEvent(((OperatingModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OperatingModeRowDeleted != null)) {
                    this.OperatingModeRowDeleted(this, new OperatingModeRowChangeEvent(((OperatingModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OperatingModeRowDeleting != null)) {
                    this.OperatingModeRowDeleting(this, new OperatingModeRowChangeEvent(((OperatingModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOperatingModeRow(OperatingModeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OperatingModeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UseFIFOModeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnModeSettings_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseFIFOModeDataTable() {
                this.TableName = "UseFIFOMode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UseFIFOModeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UseFIFOModeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ModeSettings_IdColumn {
                get {
                    return this.columnModeSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseFIFOModeRow this[int index] {
                get {
                    return ((UseFIFOModeRow)(this.Rows[index]));
                }
            }
            
            public event UseFIFOModeRowChangeEventHandler UseFIFOModeRowChanging;
            
            public event UseFIFOModeRowChangeEventHandler UseFIFOModeRowChanged;
            
            public event UseFIFOModeRowChangeEventHandler UseFIFOModeRowDeleting;
            
            public event UseFIFOModeRowChangeEventHandler UseFIFOModeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUseFIFOModeRow(UseFIFOModeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseFIFOModeRow AddUseFIFOModeRow(string Value, ModeSettingsRow parentModeSettingsRowByModeSettings_UseFIFOMode) {
                UseFIFOModeRow rowUseFIFOModeRow = ((UseFIFOModeRow)(this.NewRow()));
                rowUseFIFOModeRow.ItemArray = new object[] {
                        Value,
                        parentModeSettingsRowByModeSettings_UseFIFOMode[0]};
                this.Rows.Add(rowUseFIFOModeRow);
                return rowUseFIFOModeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UseFIFOModeDataTable cln = ((UseFIFOModeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UseFIFOModeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnModeSettings_Id = base.Columns["ModeSettings_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnModeSettings_Id = new System.Data.DataColumn("ModeSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnModeSettings_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseFIFOModeRow NewUseFIFOModeRow() {
                return ((UseFIFOModeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UseFIFOModeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UseFIFOModeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UseFIFOModeRowChanged != null)) {
                    this.UseFIFOModeRowChanged(this, new UseFIFOModeRowChangeEvent(((UseFIFOModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UseFIFOModeRowChanging != null)) {
                    this.UseFIFOModeRowChanging(this, new UseFIFOModeRowChangeEvent(((UseFIFOModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UseFIFOModeRowDeleted != null)) {
                    this.UseFIFOModeRowDeleted(this, new UseFIFOModeRowChangeEvent(((UseFIFOModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UseFIFOModeRowDeleting != null)) {
                    this.UseFIFOModeRowDeleting(this, new UseFIFOModeRowChangeEvent(((UseFIFOModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUseFIFOModeRow(UseFIFOModeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UseFIFOModeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CachingDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCaching_Id;
            
            private System.Data.DataColumn columnSetting_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CachingDataTable() {
                this.TableName = "Caching";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CachingDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CachingDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Caching_IdColumn {
                get {
                    return this.columnCaching_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Setting_IdColumn {
                get {
                    return this.columnSetting_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CachingRow this[int index] {
                get {
                    return ((CachingRow)(this.Rows[index]));
                }
            }
            
            public event CachingRowChangeEventHandler CachingRowChanging;
            
            public event CachingRowChangeEventHandler CachingRowChanged;
            
            public event CachingRowChangeEventHandler CachingRowDeleting;
            
            public event CachingRowChangeEventHandler CachingRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCachingRow(CachingRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CachingRow AddCachingRow(SettingRow parentSettingRowBySetting_Caching) {
                CachingRow rowCachingRow = ((CachingRow)(this.NewRow()));
                rowCachingRow.ItemArray = new object[] {
                        null,
                        parentSettingRowBySetting_Caching[0]};
                this.Rows.Add(rowCachingRow);
                return rowCachingRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CachingDataTable cln = ((CachingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CachingDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCaching_Id = base.Columns["Caching_Id"];
                this.columnSetting_Id = base.Columns["Setting_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCaching_Id = new System.Data.DataColumn("Caching_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCaching_Id);
                this.columnSetting_Id = new System.Data.DataColumn("Setting_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSetting_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCaching_Id}, true));
                this.columnCaching_Id.AutoIncrement = true;
                this.columnCaching_Id.AllowDBNull = false;
                this.columnCaching_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CachingRow NewCachingRow() {
                return ((CachingRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CachingRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CachingRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CachingRowChanged != null)) {
                    this.CachingRowChanged(this, new CachingRowChangeEvent(((CachingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CachingRowChanging != null)) {
                    this.CachingRowChanging(this, new CachingRowChangeEvent(((CachingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CachingRowDeleted != null)) {
                    this.CachingRowDeleted(this, new CachingRowChangeEvent(((CachingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CachingRowDeleting != null)) {
                    this.CachingRowDeleting(this, new CachingRowChangeEvent(((CachingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCachingRow(CachingRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CachingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UseStaticCachingDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnCaching_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseStaticCachingDataTable() {
                this.TableName = "UseStaticCaching";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UseStaticCachingDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UseStaticCachingDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Caching_IdColumn {
                get {
                    return this.columnCaching_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseStaticCachingRow this[int index] {
                get {
                    return ((UseStaticCachingRow)(this.Rows[index]));
                }
            }
            
            public event UseStaticCachingRowChangeEventHandler UseStaticCachingRowChanging;
            
            public event UseStaticCachingRowChangeEventHandler UseStaticCachingRowChanged;
            
            public event UseStaticCachingRowChangeEventHandler UseStaticCachingRowDeleting;
            
            public event UseStaticCachingRowChangeEventHandler UseStaticCachingRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUseStaticCachingRow(UseStaticCachingRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseStaticCachingRow AddUseStaticCachingRow(string Value, CachingRow parentCachingRowByCaching_UseStaticCaching) {
                UseStaticCachingRow rowUseStaticCachingRow = ((UseStaticCachingRow)(this.NewRow()));
                rowUseStaticCachingRow.ItemArray = new object[] {
                        Value,
                        parentCachingRowByCaching_UseStaticCaching[0]};
                this.Rows.Add(rowUseStaticCachingRow);
                return rowUseStaticCachingRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UseStaticCachingDataTable cln = ((UseStaticCachingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UseStaticCachingDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnCaching_Id = base.Columns["Caching_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnCaching_Id = new System.Data.DataColumn("Caching_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCaching_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseStaticCachingRow NewUseStaticCachingRow() {
                return ((UseStaticCachingRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UseStaticCachingRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UseStaticCachingRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UseStaticCachingRowChanged != null)) {
                    this.UseStaticCachingRowChanged(this, new UseStaticCachingRowChangeEvent(((UseStaticCachingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UseStaticCachingRowChanging != null)) {
                    this.UseStaticCachingRowChanging(this, new UseStaticCachingRowChangeEvent(((UseStaticCachingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UseStaticCachingRowDeleted != null)) {
                    this.UseStaticCachingRowDeleted(this, new UseStaticCachingRowChangeEvent(((UseStaticCachingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UseStaticCachingRowDeleting != null)) {
                    this.UseStaticCachingRowDeleting(this, new UseStaticCachingRowChangeEvent(((UseStaticCachingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUseStaticCachingRow(UseStaticCachingRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UseStaticCachingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CacheDriveLettersDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnCaching_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CacheDriveLettersDataTable() {
                this.TableName = "CacheDriveLetters";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CacheDriveLettersDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CacheDriveLettersDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Caching_IdColumn {
                get {
                    return this.columnCaching_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CacheDriveLettersRow this[int index] {
                get {
                    return ((CacheDriveLettersRow)(this.Rows[index]));
                }
            }
            
            public event CacheDriveLettersRowChangeEventHandler CacheDriveLettersRowChanging;
            
            public event CacheDriveLettersRowChangeEventHandler CacheDriveLettersRowChanged;
            
            public event CacheDriveLettersRowChangeEventHandler CacheDriveLettersRowDeleting;
            
            public event CacheDriveLettersRowChangeEventHandler CacheDriveLettersRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCacheDriveLettersRow(CacheDriveLettersRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CacheDriveLettersRow AddCacheDriveLettersRow(string Value, CachingRow parentCachingRowByCaching_CacheDriveLetters) {
                CacheDriveLettersRow rowCacheDriveLettersRow = ((CacheDriveLettersRow)(this.NewRow()));
                rowCacheDriveLettersRow.ItemArray = new object[] {
                        Value,
                        parentCachingRowByCaching_CacheDriveLetters[0]};
                this.Rows.Add(rowCacheDriveLettersRow);
                return rowCacheDriveLettersRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CacheDriveLettersDataTable cln = ((CacheDriveLettersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CacheDriveLettersDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnCaching_Id = base.Columns["Caching_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnCaching_Id = new System.Data.DataColumn("Caching_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnCaching_Id);
                this.columnValue.AllowDBNull = false;
                this.columnValue.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CacheDriveLettersRow NewCacheDriveLettersRow() {
                return ((CacheDriveLettersRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CacheDriveLettersRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CacheDriveLettersRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CacheDriveLettersRowChanged != null)) {
                    this.CacheDriveLettersRowChanged(this, new CacheDriveLettersRowChangeEvent(((CacheDriveLettersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CacheDriveLettersRowChanging != null)) {
                    this.CacheDriveLettersRowChanging(this, new CacheDriveLettersRowChangeEvent(((CacheDriveLettersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CacheDriveLettersRowDeleted != null)) {
                    this.CacheDriveLettersRowDeleted(this, new CacheDriveLettersRowChangeEvent(((CacheDriveLettersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CacheDriveLettersRowDeleting != null)) {
                    this.CacheDriveLettersRowDeleting(this, new CacheDriveLettersRowChangeEvent(((CacheDriveLettersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCacheDriveLettersRow(CacheDriveLettersRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CacheDriveLettersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RecordingDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnRecording_Id;
            
            private System.Data.DataColumn columnSetting_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingDataTable() {
                this.TableName = "Recording";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RecordingDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RecordingDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Recording_IdColumn {
                get {
                    return this.columnRecording_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Setting_IdColumn {
                get {
                    return this.columnSetting_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingRow this[int index] {
                get {
                    return ((RecordingRow)(this.Rows[index]));
                }
            }
            
            public event RecordingRowChangeEventHandler RecordingRowChanging;
            
            public event RecordingRowChangeEventHandler RecordingRowChanged;
            
            public event RecordingRowChangeEventHandler RecordingRowDeleting;
            
            public event RecordingRowChangeEventHandler RecordingRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRecordingRow(RecordingRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingRow AddRecordingRow(SettingRow parentSettingRowBySetting_Recording) {
                RecordingRow rowRecordingRow = ((RecordingRow)(this.NewRow()));
                rowRecordingRow.ItemArray = new object[] {
                        null,
                        parentSettingRowBySetting_Recording[0]};
                this.Rows.Add(rowRecordingRow);
                return rowRecordingRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RecordingDataTable cln = ((RecordingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RecordingDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRecording_Id = base.Columns["Recording_Id"];
                this.columnSetting_Id = base.Columns["Setting_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRecording_Id = new System.Data.DataColumn("Recording_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRecording_Id);
                this.columnSetting_Id = new System.Data.DataColumn("Setting_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSetting_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnRecording_Id}, true));
                this.columnRecording_Id.AutoIncrement = true;
                this.columnRecording_Id.AllowDBNull = false;
                this.columnRecording_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingRow NewRecordingRow() {
                return ((RecordingRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RecordingRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RecordingRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RecordingRowChanged != null)) {
                    this.RecordingRowChanged(this, new RecordingRowChangeEvent(((RecordingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RecordingRowChanging != null)) {
                    this.RecordingRowChanging(this, new RecordingRowChangeEvent(((RecordingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RecordingRowDeleted != null)) {
                    this.RecordingRowDeleted(this, new RecordingRowChangeEvent(((RecordingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RecordingRowDeleting != null)) {
                    this.RecordingRowDeleting(this, new RecordingRowChangeEvent(((RecordingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRecordingRow(RecordingRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RecordingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SimulateRecordingDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnRecording_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SimulateRecordingDataTable() {
                this.TableName = "SimulateRecording";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SimulateRecordingDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SimulateRecordingDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Recording_IdColumn {
                get {
                    return this.columnRecording_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SimulateRecordingRow this[int index] {
                get {
                    return ((SimulateRecordingRow)(this.Rows[index]));
                }
            }
            
            public event SimulateRecordingRowChangeEventHandler SimulateRecordingRowChanging;
            
            public event SimulateRecordingRowChangeEventHandler SimulateRecordingRowChanged;
            
            public event SimulateRecordingRowChangeEventHandler SimulateRecordingRowDeleting;
            
            public event SimulateRecordingRowChangeEventHandler SimulateRecordingRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSimulateRecordingRow(SimulateRecordingRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SimulateRecordingRow AddSimulateRecordingRow(string Value, RecordingRow parentRecordingRowByRecording_SimulateRecording) {
                SimulateRecordingRow rowSimulateRecordingRow = ((SimulateRecordingRow)(this.NewRow()));
                rowSimulateRecordingRow.ItemArray = new object[] {
                        Value,
                        parentRecordingRowByRecording_SimulateRecording[0]};
                this.Rows.Add(rowSimulateRecordingRow);
                return rowSimulateRecordingRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SimulateRecordingDataTable cln = ((SimulateRecordingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SimulateRecordingDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnRecording_Id = base.Columns["Recording_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnRecording_Id = new System.Data.DataColumn("Recording_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRecording_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SimulateRecordingRow NewSimulateRecordingRow() {
                return ((SimulateRecordingRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SimulateRecordingRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SimulateRecordingRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SimulateRecordingRowChanged != null)) {
                    this.SimulateRecordingRowChanged(this, new SimulateRecordingRowChangeEvent(((SimulateRecordingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SimulateRecordingRowChanging != null)) {
                    this.SimulateRecordingRowChanging(this, new SimulateRecordingRowChangeEvent(((SimulateRecordingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SimulateRecordingRowDeleted != null)) {
                    this.SimulateRecordingRowDeleted(this, new SimulateRecordingRowChangeEvent(((SimulateRecordingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SimulateRecordingRowDeleting != null)) {
                    this.SimulateRecordingRowDeleting(this, new SimulateRecordingRowChangeEvent(((SimulateRecordingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSimulateRecordingRow(SimulateRecordingRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SimulateRecordingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UseNewMediaOnlyDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnRecording_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseNewMediaOnlyDataTable() {
                this.TableName = "UseNewMediaOnly";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UseNewMediaOnlyDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UseNewMediaOnlyDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Recording_IdColumn {
                get {
                    return this.columnRecording_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseNewMediaOnlyRow this[int index] {
                get {
                    return ((UseNewMediaOnlyRow)(this.Rows[index]));
                }
            }
            
            public event UseNewMediaOnlyRowChangeEventHandler UseNewMediaOnlyRowChanging;
            
            public event UseNewMediaOnlyRowChangeEventHandler UseNewMediaOnlyRowChanged;
            
            public event UseNewMediaOnlyRowChangeEventHandler UseNewMediaOnlyRowDeleting;
            
            public event UseNewMediaOnlyRowChangeEventHandler UseNewMediaOnlyRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUseNewMediaOnlyRow(UseNewMediaOnlyRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseNewMediaOnlyRow AddUseNewMediaOnlyRow(string Value, RecordingRow parentRecordingRowByRecording_UseNewMediaOnly) {
                UseNewMediaOnlyRow rowUseNewMediaOnlyRow = ((UseNewMediaOnlyRow)(this.NewRow()));
                rowUseNewMediaOnlyRow.ItemArray = new object[] {
                        Value,
                        parentRecordingRowByRecording_UseNewMediaOnly[0]};
                this.Rows.Add(rowUseNewMediaOnlyRow);
                return rowUseNewMediaOnlyRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UseNewMediaOnlyDataTable cln = ((UseNewMediaOnlyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UseNewMediaOnlyDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnRecording_Id = base.Columns["Recording_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnRecording_Id = new System.Data.DataColumn("Recording_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRecording_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseNewMediaOnlyRow NewUseNewMediaOnlyRow() {
                return ((UseNewMediaOnlyRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UseNewMediaOnlyRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UseNewMediaOnlyRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UseNewMediaOnlyRowChanged != null)) {
                    this.UseNewMediaOnlyRowChanged(this, new UseNewMediaOnlyRowChangeEvent(((UseNewMediaOnlyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UseNewMediaOnlyRowChanging != null)) {
                    this.UseNewMediaOnlyRowChanging(this, new UseNewMediaOnlyRowChangeEvent(((UseNewMediaOnlyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UseNewMediaOnlyRowDeleted != null)) {
                    this.UseNewMediaOnlyRowDeleted(this, new UseNewMediaOnlyRowChangeEvent(((UseNewMediaOnlyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UseNewMediaOnlyRowDeleting != null)) {
                    this.UseNewMediaOnlyRowDeleting(this, new UseNewMediaOnlyRowChangeEvent(((UseNewMediaOnlyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUseNewMediaOnlyRow(UseNewMediaOnlyRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UseNewMediaOnlyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MaxRecordingSpeedDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnRecording_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaxRecordingSpeedDataTable() {
                this.TableName = "MaxRecordingSpeed";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MaxRecordingSpeedDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MaxRecordingSpeedDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Recording_IdColumn {
                get {
                    return this.columnRecording_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaxRecordingSpeedRow this[int index] {
                get {
                    return ((MaxRecordingSpeedRow)(this.Rows[index]));
                }
            }
            
            public event MaxRecordingSpeedRowChangeEventHandler MaxRecordingSpeedRowChanging;
            
            public event MaxRecordingSpeedRowChangeEventHandler MaxRecordingSpeedRowChanged;
            
            public event MaxRecordingSpeedRowChangeEventHandler MaxRecordingSpeedRowDeleting;
            
            public event MaxRecordingSpeedRowChangeEventHandler MaxRecordingSpeedRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMaxRecordingSpeedRow(MaxRecordingSpeedRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaxRecordingSpeedRow AddMaxRecordingSpeedRow(string Value, RecordingRow parentRecordingRowByRecording_MaxRecordingSpeed) {
                MaxRecordingSpeedRow rowMaxRecordingSpeedRow = ((MaxRecordingSpeedRow)(this.NewRow()));
                rowMaxRecordingSpeedRow.ItemArray = new object[] {
                        Value,
                        parentRecordingRowByRecording_MaxRecordingSpeed[0]};
                this.Rows.Add(rowMaxRecordingSpeedRow);
                return rowMaxRecordingSpeedRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MaxRecordingSpeedDataTable cln = ((MaxRecordingSpeedDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MaxRecordingSpeedDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnRecording_Id = base.Columns["Recording_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnRecording_Id = new System.Data.DataColumn("Recording_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRecording_Id);
                this.columnValue.AllowDBNull = false;
                this.columnValue.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaxRecordingSpeedRow NewMaxRecordingSpeedRow() {
                return ((MaxRecordingSpeedRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MaxRecordingSpeedRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MaxRecordingSpeedRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MaxRecordingSpeedRowChanged != null)) {
                    this.MaxRecordingSpeedRowChanged(this, new MaxRecordingSpeedRowChangeEvent(((MaxRecordingSpeedRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MaxRecordingSpeedRowChanging != null)) {
                    this.MaxRecordingSpeedRowChanging(this, new MaxRecordingSpeedRowChangeEvent(((MaxRecordingSpeedRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MaxRecordingSpeedRowDeleted != null)) {
                    this.MaxRecordingSpeedRowDeleted(this, new MaxRecordingSpeedRowChangeEvent(((MaxRecordingSpeedRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MaxRecordingSpeedRowDeleting != null)) {
                    this.MaxRecordingSpeedRowDeleting(this, new MaxRecordingSpeedRowChangeEvent(((MaxRecordingSpeedRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMaxRecordingSpeedRow(MaxRecordingSpeedRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MaxRecordingSpeedDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MaxDVDRecordingSpeedDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnRecording_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaxDVDRecordingSpeedDataTable() {
                this.TableName = "MaxDVDRecordingSpeed";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MaxDVDRecordingSpeedDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MaxDVDRecordingSpeedDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Recording_IdColumn {
                get {
                    return this.columnRecording_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaxDVDRecordingSpeedRow this[int index] {
                get {
                    return ((MaxDVDRecordingSpeedRow)(this.Rows[index]));
                }
            }
            
            public event MaxDVDRecordingSpeedRowChangeEventHandler MaxDVDRecordingSpeedRowChanging;
            
            public event MaxDVDRecordingSpeedRowChangeEventHandler MaxDVDRecordingSpeedRowChanged;
            
            public event MaxDVDRecordingSpeedRowChangeEventHandler MaxDVDRecordingSpeedRowDeleting;
            
            public event MaxDVDRecordingSpeedRowChangeEventHandler MaxDVDRecordingSpeedRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMaxDVDRecordingSpeedRow(MaxDVDRecordingSpeedRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaxDVDRecordingSpeedRow AddMaxDVDRecordingSpeedRow(string Value, RecordingRow parentRecordingRowByRecording_MaxDVDRecordingSpeed) {
                MaxDVDRecordingSpeedRow rowMaxDVDRecordingSpeedRow = ((MaxDVDRecordingSpeedRow)(this.NewRow()));
                rowMaxDVDRecordingSpeedRow.ItemArray = new object[] {
                        Value,
                        parentRecordingRowByRecording_MaxDVDRecordingSpeed[0]};
                this.Rows.Add(rowMaxDVDRecordingSpeedRow);
                return rowMaxDVDRecordingSpeedRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MaxDVDRecordingSpeedDataTable cln = ((MaxDVDRecordingSpeedDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MaxDVDRecordingSpeedDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnRecording_Id = base.Columns["Recording_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnRecording_Id = new System.Data.DataColumn("Recording_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRecording_Id);
                this.columnValue.AllowDBNull = false;
                this.columnValue.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaxDVDRecordingSpeedRow NewMaxDVDRecordingSpeedRow() {
                return ((MaxDVDRecordingSpeedRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MaxDVDRecordingSpeedRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MaxDVDRecordingSpeedRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MaxDVDRecordingSpeedRowChanged != null)) {
                    this.MaxDVDRecordingSpeedRowChanged(this, new MaxDVDRecordingSpeedRowChangeEvent(((MaxDVDRecordingSpeedRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MaxDVDRecordingSpeedRowChanging != null)) {
                    this.MaxDVDRecordingSpeedRowChanging(this, new MaxDVDRecordingSpeedRowChangeEvent(((MaxDVDRecordingSpeedRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MaxDVDRecordingSpeedRowDeleted != null)) {
                    this.MaxDVDRecordingSpeedRowDeleted(this, new MaxDVDRecordingSpeedRowChangeEvent(((MaxDVDRecordingSpeedRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MaxDVDRecordingSpeedRowDeleting != null)) {
                    this.MaxDVDRecordingSpeedRowDeleting(this, new MaxDVDRecordingSpeedRowChangeEvent(((MaxDVDRecordingSpeedRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMaxDVDRecordingSpeedRow(MaxDVDRecordingSpeedRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MaxDVDRecordingSpeedDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DisableISOExtentFixupsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnRecording_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DisableISOExtentFixupsDataTable() {
                this.TableName = "DisableISOExtentFixups";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DisableISOExtentFixupsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DisableISOExtentFixupsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Recording_IdColumn {
                get {
                    return this.columnRecording_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DisableISOExtentFixupsRow this[int index] {
                get {
                    return ((DisableISOExtentFixupsRow)(this.Rows[index]));
                }
            }
            
            public event DisableISOExtentFixupsRowChangeEventHandler DisableISOExtentFixupsRowChanging;
            
            public event DisableISOExtentFixupsRowChangeEventHandler DisableISOExtentFixupsRowChanged;
            
            public event DisableISOExtentFixupsRowChangeEventHandler DisableISOExtentFixupsRowDeleting;
            
            public event DisableISOExtentFixupsRowChangeEventHandler DisableISOExtentFixupsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDisableISOExtentFixupsRow(DisableISOExtentFixupsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DisableISOExtentFixupsRow AddDisableISOExtentFixupsRow(string Value, RecordingRow parentRecordingRowByRecording_DisableISOExtentFixups) {
                DisableISOExtentFixupsRow rowDisableISOExtentFixupsRow = ((DisableISOExtentFixupsRow)(this.NewRow()));
                rowDisableISOExtentFixupsRow.ItemArray = new object[] {
                        Value,
                        parentRecordingRowByRecording_DisableISOExtentFixups[0]};
                this.Rows.Add(rowDisableISOExtentFixupsRow);
                return rowDisableISOExtentFixupsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DisableISOExtentFixupsDataTable cln = ((DisableISOExtentFixupsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DisableISOExtentFixupsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnRecording_Id = base.Columns["Recording_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnRecording_Id = new System.Data.DataColumn("Recording_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRecording_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DisableISOExtentFixupsRow NewDisableISOExtentFixupsRow() {
                return ((DisableISOExtentFixupsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DisableISOExtentFixupsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DisableISOExtentFixupsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DisableISOExtentFixupsRowChanged != null)) {
                    this.DisableISOExtentFixupsRowChanged(this, new DisableISOExtentFixupsRowChangeEvent(((DisableISOExtentFixupsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DisableISOExtentFixupsRowChanging != null)) {
                    this.DisableISOExtentFixupsRowChanging(this, new DisableISOExtentFixupsRowChangeEvent(((DisableISOExtentFixupsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DisableISOExtentFixupsRowDeleted != null)) {
                    this.DisableISOExtentFixupsRowDeleted(this, new DisableISOExtentFixupsRowChangeEvent(((DisableISOExtentFixupsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DisableISOExtentFixupsRowDeleting != null)) {
                    this.DisableISOExtentFixupsRowDeleting(this, new DisableISOExtentFixupsRowChangeEvent(((DisableISOExtentFixupsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDisableISOExtentFixupsRow(DisableISOExtentFixupsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DisableISOExtentFixupsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RejectNonISODataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnRecording_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RejectNonISODataTable() {
                this.TableName = "RejectNonISO";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RejectNonISODataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RejectNonISODataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Recording_IdColumn {
                get {
                    return this.columnRecording_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RejectNonISORow this[int index] {
                get {
                    return ((RejectNonISORow)(this.Rows[index]));
                }
            }
            
            public event RejectNonISORowChangeEventHandler RejectNonISORowChanging;
            
            public event RejectNonISORowChangeEventHandler RejectNonISORowChanged;
            
            public event RejectNonISORowChangeEventHandler RejectNonISORowDeleting;
            
            public event RejectNonISORowChangeEventHandler RejectNonISORowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRejectNonISORow(RejectNonISORow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RejectNonISORow AddRejectNonISORow(string Value, RecordingRow parentRecordingRowByRecording_RejectNonISO) {
                RejectNonISORow rowRejectNonISORow = ((RejectNonISORow)(this.NewRow()));
                rowRejectNonISORow.ItemArray = new object[] {
                        Value,
                        parentRecordingRowByRecording_RejectNonISO[0]};
                this.Rows.Add(rowRejectNonISORow);
                return rowRejectNonISORow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RejectNonISODataTable cln = ((RejectNonISODataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RejectNonISODataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnRecording_Id = base.Columns["Recording_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnRecording_Id = new System.Data.DataColumn("Recording_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRecording_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RejectNonISORow NewRejectNonISORow() {
                return ((RejectNonISORow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RejectNonISORow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RejectNonISORow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RejectNonISORowChanged != null)) {
                    this.RejectNonISORowChanged(this, new RejectNonISORowChangeEvent(((RejectNonISORow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RejectNonISORowChanging != null)) {
                    this.RejectNonISORowChanging(this, new RejectNonISORowChangeEvent(((RejectNonISORow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RejectNonISORowDeleted != null)) {
                    this.RejectNonISORowDeleted(this, new RejectNonISORowChangeEvent(((RejectNonISORow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RejectNonISORowDeleting != null)) {
                    this.RejectNonISORowDeleting(this, new RejectNonISORowChangeEvent(((RejectNonISORow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRejectNonISORow(RejectNonISORow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RejectNonISODataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AddPostgapToISODataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnRecording_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AddPostgapToISODataTable() {
                this.TableName = "AddPostgapToISO";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AddPostgapToISODataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AddPostgapToISODataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Recording_IdColumn {
                get {
                    return this.columnRecording_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AddPostgapToISORow this[int index] {
                get {
                    return ((AddPostgapToISORow)(this.Rows[index]));
                }
            }
            
            public event AddPostgapToISORowChangeEventHandler AddPostgapToISORowChanging;
            
            public event AddPostgapToISORowChangeEventHandler AddPostgapToISORowChanged;
            
            public event AddPostgapToISORowChangeEventHandler AddPostgapToISORowDeleting;
            
            public event AddPostgapToISORowChangeEventHandler AddPostgapToISORowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAddPostgapToISORow(AddPostgapToISORow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AddPostgapToISORow AddAddPostgapToISORow(string Value, RecordingRow parentRecordingRowByRecording_AddPostgapToISO) {
                AddPostgapToISORow rowAddPostgapToISORow = ((AddPostgapToISORow)(this.NewRow()));
                rowAddPostgapToISORow.ItemArray = new object[] {
                        Value,
                        parentRecordingRowByRecording_AddPostgapToISO[0]};
                this.Rows.Add(rowAddPostgapToISORow);
                return rowAddPostgapToISORow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                AddPostgapToISODataTable cln = ((AddPostgapToISODataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new AddPostgapToISODataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnRecording_Id = base.Columns["Recording_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnRecording_Id = new System.Data.DataColumn("Recording_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRecording_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("Disabled"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AddPostgapToISORow NewAddPostgapToISORow() {
                return ((AddPostgapToISORow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AddPostgapToISORow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(AddPostgapToISORow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AddPostgapToISORowChanged != null)) {
                    this.AddPostgapToISORowChanged(this, new AddPostgapToISORowChangeEvent(((AddPostgapToISORow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AddPostgapToISORowChanging != null)) {
                    this.AddPostgapToISORowChanging(this, new AddPostgapToISORowChangeEvent(((AddPostgapToISORow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AddPostgapToISORowDeleted != null)) {
                    this.AddPostgapToISORowDeleted(this, new AddPostgapToISORowChangeEvent(((AddPostgapToISORow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AddPostgapToISORowDeleting != null)) {
                    this.AddPostgapToISORowDeleting(this, new AddPostgapToISORowChangeEvent(((AddPostgapToISORow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAddPostgapToISORow(AddPostgapToISORow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AddPostgapToISODataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EnableUsing90_100MinuteCDRsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnRecording_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnableUsing90_100MinuteCDRsDataTable() {
                this.TableName = "EnableUsing90_100MinuteCDRs";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EnableUsing90_100MinuteCDRsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EnableUsing90_100MinuteCDRsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Recording_IdColumn {
                get {
                    return this.columnRecording_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnableUsing90_100MinuteCDRsRow this[int index] {
                get {
                    return ((EnableUsing90_100MinuteCDRsRow)(this.Rows[index]));
                }
            }
            
            public event EnableUsing90_100MinuteCDRsRowChangeEventHandler EnableUsing90_100MinuteCDRsRowChanging;
            
            public event EnableUsing90_100MinuteCDRsRowChangeEventHandler EnableUsing90_100MinuteCDRsRowChanged;
            
            public event EnableUsing90_100MinuteCDRsRowChangeEventHandler EnableUsing90_100MinuteCDRsRowDeleting;
            
            public event EnableUsing90_100MinuteCDRsRowChangeEventHandler EnableUsing90_100MinuteCDRsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEnableUsing90_100MinuteCDRsRow(EnableUsing90_100MinuteCDRsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnableUsing90_100MinuteCDRsRow AddEnableUsing90_100MinuteCDRsRow(string Value, RecordingRow parentRecordingRowByRecording_EnableUsing90_100MinuteCDRs) {
                EnableUsing90_100MinuteCDRsRow rowEnableUsing90_100MinuteCDRsRow = ((EnableUsing90_100MinuteCDRsRow)(this.NewRow()));
                rowEnableUsing90_100MinuteCDRsRow.ItemArray = new object[] {
                        Value,
                        parentRecordingRowByRecording_EnableUsing90_100MinuteCDRs[0]};
                this.Rows.Add(rowEnableUsing90_100MinuteCDRsRow);
                return rowEnableUsing90_100MinuteCDRsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EnableUsing90_100MinuteCDRsDataTable cln = ((EnableUsing90_100MinuteCDRsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EnableUsing90_100MinuteCDRsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnRecording_Id = base.Columns["Recording_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnRecording_Id = new System.Data.DataColumn("Recording_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRecording_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnableUsing90_100MinuteCDRsRow NewEnableUsing90_100MinuteCDRsRow() {
                return ((EnableUsing90_100MinuteCDRsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EnableUsing90_100MinuteCDRsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EnableUsing90_100MinuteCDRsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EnableUsing90_100MinuteCDRsRowChanged != null)) {
                    this.EnableUsing90_100MinuteCDRsRowChanged(this, new EnableUsing90_100MinuteCDRsRowChangeEvent(((EnableUsing90_100MinuteCDRsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EnableUsing90_100MinuteCDRsRowChanging != null)) {
                    this.EnableUsing90_100MinuteCDRsRowChanging(this, new EnableUsing90_100MinuteCDRsRowChangeEvent(((EnableUsing90_100MinuteCDRsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EnableUsing90_100MinuteCDRsRowDeleted != null)) {
                    this.EnableUsing90_100MinuteCDRsRowDeleted(this, new EnableUsing90_100MinuteCDRsRowChangeEvent(((EnableUsing90_100MinuteCDRsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EnableUsing90_100MinuteCDRsRowDeleting != null)) {
                    this.EnableUsing90_100MinuteCDRsRowDeleting(this, new EnableUsing90_100MinuteCDRsRowChangeEvent(((EnableUsing90_100MinuteCDRsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEnableUsing90_100MinuteCDRsRow(EnableUsing90_100MinuteCDRsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EnableUsing90_100MinuteCDRsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DestroyFailedRecordingsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnRecording_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DestroyFailedRecordingsDataTable() {
                this.TableName = "DestroyFailedRecordings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DestroyFailedRecordingsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DestroyFailedRecordingsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Recording_IdColumn {
                get {
                    return this.columnRecording_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DestroyFailedRecordingsRow this[int index] {
                get {
                    return ((DestroyFailedRecordingsRow)(this.Rows[index]));
                }
            }
            
            public event DestroyFailedRecordingsRowChangeEventHandler DestroyFailedRecordingsRowChanging;
            
            public event DestroyFailedRecordingsRowChangeEventHandler DestroyFailedRecordingsRowChanged;
            
            public event DestroyFailedRecordingsRowChangeEventHandler DestroyFailedRecordingsRowDeleting;
            
            public event DestroyFailedRecordingsRowChangeEventHandler DestroyFailedRecordingsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDestroyFailedRecordingsRow(DestroyFailedRecordingsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DestroyFailedRecordingsRow AddDestroyFailedRecordingsRow(string Value, RecordingRow parentRecordingRowByRecording_DestroyFailedRecordings) {
                DestroyFailedRecordingsRow rowDestroyFailedRecordingsRow = ((DestroyFailedRecordingsRow)(this.NewRow()));
                rowDestroyFailedRecordingsRow.ItemArray = new object[] {
                        Value,
                        parentRecordingRowByRecording_DestroyFailedRecordings[0]};
                this.Rows.Add(rowDestroyFailedRecordingsRow);
                return rowDestroyFailedRecordingsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DestroyFailedRecordingsDataTable cln = ((DestroyFailedRecordingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DestroyFailedRecordingsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnRecording_Id = base.Columns["Recording_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnRecording_Id = new System.Data.DataColumn("Recording_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnRecording_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DestroyFailedRecordingsRow NewDestroyFailedRecordingsRow() {
                return ((DestroyFailedRecordingsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DestroyFailedRecordingsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DestroyFailedRecordingsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DestroyFailedRecordingsRowChanged != null)) {
                    this.DestroyFailedRecordingsRowChanged(this, new DestroyFailedRecordingsRowChangeEvent(((DestroyFailedRecordingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DestroyFailedRecordingsRowChanging != null)) {
                    this.DestroyFailedRecordingsRowChanging(this, new DestroyFailedRecordingsRowChangeEvent(((DestroyFailedRecordingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DestroyFailedRecordingsRowDeleted != null)) {
                    this.DestroyFailedRecordingsRowDeleted(this, new DestroyFailedRecordingsRowChangeEvent(((DestroyFailedRecordingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DestroyFailedRecordingsRowDeleting != null)) {
                    this.DestroyFailedRecordingsRowDeleting(this, new DestroyFailedRecordingsRowChangeEvent(((DestroyFailedRecordingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDestroyFailedRecordingsRow(DestroyFailedRecordingsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DestroyFailedRecordingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class VerifyDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnVerify_Id;
            
            private System.Data.DataColumn columnSetting_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyDataTable() {
                this.TableName = "Verify";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VerifyDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected VerifyDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Verify_IdColumn {
                get {
                    return this.columnVerify_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Setting_IdColumn {
                get {
                    return this.columnSetting_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyRow this[int index] {
                get {
                    return ((VerifyRow)(this.Rows[index]));
                }
            }
            
            public event VerifyRowChangeEventHandler VerifyRowChanging;
            
            public event VerifyRowChangeEventHandler VerifyRowChanged;
            
            public event VerifyRowChangeEventHandler VerifyRowDeleting;
            
            public event VerifyRowChangeEventHandler VerifyRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddVerifyRow(VerifyRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyRow AddVerifyRow(SettingRow parentSettingRowBySetting_Verify) {
                VerifyRow rowVerifyRow = ((VerifyRow)(this.NewRow()));
                rowVerifyRow.ItemArray = new object[] {
                        null,
                        parentSettingRowBySetting_Verify[0]};
                this.Rows.Add(rowVerifyRow);
                return rowVerifyRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                VerifyDataTable cln = ((VerifyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new VerifyDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnVerify_Id = base.Columns["Verify_Id"];
                this.columnSetting_Id = base.Columns["Setting_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnVerify_Id = new System.Data.DataColumn("Verify_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnVerify_Id);
                this.columnSetting_Id = new System.Data.DataColumn("Setting_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSetting_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnVerify_Id}, true));
                this.columnVerify_Id.AutoIncrement = true;
                this.columnVerify_Id.AllowDBNull = false;
                this.columnVerify_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyRow NewVerifyRow() {
                return ((VerifyRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new VerifyRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(VerifyRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VerifyRowChanged != null)) {
                    this.VerifyRowChanged(this, new VerifyRowChangeEvent(((VerifyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VerifyRowChanging != null)) {
                    this.VerifyRowChanging(this, new VerifyRowChangeEvent(((VerifyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VerifyRowDeleted != null)) {
                    this.VerifyRowDeleted(this, new VerifyRowChangeEvent(((VerifyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VerifyRowDeleting != null)) {
                    this.VerifyRowDeleting(this, new VerifyRowChangeEvent(((VerifyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveVerifyRow(VerifyRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VerifyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UseVerifyDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnVerify_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseVerifyDataTable() {
                this.TableName = "UseVerify";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UseVerifyDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UseVerifyDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Verify_IdColumn {
                get {
                    return this.columnVerify_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseVerifyRow this[int index] {
                get {
                    return ((UseVerifyRow)(this.Rows[index]));
                }
            }
            
            public event UseVerifyRowChangeEventHandler UseVerifyRowChanging;
            
            public event UseVerifyRowChangeEventHandler UseVerifyRowChanged;
            
            public event UseVerifyRowChangeEventHandler UseVerifyRowDeleting;
            
            public event UseVerifyRowChangeEventHandler UseVerifyRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUseVerifyRow(UseVerifyRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseVerifyRow AddUseVerifyRow(string Value, VerifyRow parentVerifyRowByVerify_UseVerify) {
                UseVerifyRow rowUseVerifyRow = ((UseVerifyRow)(this.NewRow()));
                rowUseVerifyRow.ItemArray = new object[] {
                        Value,
                        parentVerifyRowByVerify_UseVerify[0]};
                this.Rows.Add(rowUseVerifyRow);
                return rowUseVerifyRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UseVerifyDataTable cln = ((UseVerifyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UseVerifyDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnVerify_Id = base.Columns["Verify_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnVerify_Id = new System.Data.DataColumn("Verify_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnVerify_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseVerifyRow NewUseVerifyRow() {
                return ((UseVerifyRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UseVerifyRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UseVerifyRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UseVerifyRowChanged != null)) {
                    this.UseVerifyRowChanged(this, new UseVerifyRowChangeEvent(((UseVerifyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UseVerifyRowChanging != null)) {
                    this.UseVerifyRowChanging(this, new UseVerifyRowChangeEvent(((UseVerifyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UseVerifyRowDeleted != null)) {
                    this.UseVerifyRowDeleted(this, new UseVerifyRowChangeEvent(((UseVerifyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UseVerifyRowDeleting != null)) {
                    this.UseVerifyRowDeleting(this, new UseVerifyRowChangeEvent(((UseVerifyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUseVerifyRow(UseVerifyRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UseVerifyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FrequencyDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnVerify_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FrequencyDataTable() {
                this.TableName = "Frequency";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FrequencyDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FrequencyDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Verify_IdColumn {
                get {
                    return this.columnVerify_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FrequencyRow this[int index] {
                get {
                    return ((FrequencyRow)(this.Rows[index]));
                }
            }
            
            public event FrequencyRowChangeEventHandler FrequencyRowChanging;
            
            public event FrequencyRowChangeEventHandler FrequencyRowChanged;
            
            public event FrequencyRowChangeEventHandler FrequencyRowDeleting;
            
            public event FrequencyRowChangeEventHandler FrequencyRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFrequencyRow(FrequencyRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FrequencyRow AddFrequencyRow(string Value, VerifyRow parentVerifyRowByVerify_Frequency) {
                FrequencyRow rowFrequencyRow = ((FrequencyRow)(this.NewRow()));
                rowFrequencyRow.ItemArray = new object[] {
                        Value,
                        parentVerifyRowByVerify_Frequency[0]};
                this.Rows.Add(rowFrequencyRow);
                return rowFrequencyRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FrequencyDataTable cln = ((FrequencyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FrequencyDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnVerify_Id = base.Columns["Verify_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnVerify_Id = new System.Data.DataColumn("Verify_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnVerify_Id);
                this.columnValue.AllowDBNull = false;
                this.columnValue.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FrequencyRow NewFrequencyRow() {
                return ((FrequencyRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FrequencyRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FrequencyRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FrequencyRowChanged != null)) {
                    this.FrequencyRowChanged(this, new FrequencyRowChangeEvent(((FrequencyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FrequencyRowChanging != null)) {
                    this.FrequencyRowChanging(this, new FrequencyRowChangeEvent(((FrequencyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FrequencyRowDeleted != null)) {
                    this.FrequencyRowDeleted(this, new FrequencyRowChangeEvent(((FrequencyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FrequencyRowDeleting != null)) {
                    this.FrequencyRowDeleting(this, new FrequencyRowChangeEvent(((FrequencyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFrequencyRow(FrequencyRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FrequencyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UseChecksumDLLDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnVerify_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseChecksumDLLDataTable() {
                this.TableName = "UseChecksumDLL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UseChecksumDLLDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UseChecksumDLLDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Verify_IdColumn {
                get {
                    return this.columnVerify_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseChecksumDLLRow this[int index] {
                get {
                    return ((UseChecksumDLLRow)(this.Rows[index]));
                }
            }
            
            public event UseChecksumDLLRowChangeEventHandler UseChecksumDLLRowChanging;
            
            public event UseChecksumDLLRowChangeEventHandler UseChecksumDLLRowChanged;
            
            public event UseChecksumDLLRowChangeEventHandler UseChecksumDLLRowDeleting;
            
            public event UseChecksumDLLRowChangeEventHandler UseChecksumDLLRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUseChecksumDLLRow(UseChecksumDLLRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseChecksumDLLRow AddUseChecksumDLLRow(string Value, VerifyRow parentVerifyRowByVerify_UseChecksumDLL) {
                UseChecksumDLLRow rowUseChecksumDLLRow = ((UseChecksumDLLRow)(this.NewRow()));
                rowUseChecksumDLLRow.ItemArray = new object[] {
                        Value,
                        parentVerifyRowByVerify_UseChecksumDLL[0]};
                this.Rows.Add(rowUseChecksumDLLRow);
                return rowUseChecksumDLLRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UseChecksumDLLDataTable cln = ((UseChecksumDLLDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UseChecksumDLLDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnVerify_Id = base.Columns["Verify_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnVerify_Id = new System.Data.DataColumn("Verify_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnVerify_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseChecksumDLLRow NewUseChecksumDLLRow() {
                return ((UseChecksumDLLRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UseChecksumDLLRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UseChecksumDLLRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UseChecksumDLLRowChanged != null)) {
                    this.UseChecksumDLLRowChanged(this, new UseChecksumDLLRowChangeEvent(((UseChecksumDLLRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UseChecksumDLLRowChanging != null)) {
                    this.UseChecksumDLLRowChanging(this, new UseChecksumDLLRowChangeEvent(((UseChecksumDLLRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UseChecksumDLLRowDeleted != null)) {
                    this.UseChecksumDLLRowDeleted(this, new UseChecksumDLLRowChangeEvent(((UseChecksumDLLRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UseChecksumDLLRowDeleting != null)) {
                    this.UseChecksumDLLRowDeleting(this, new UseChecksumDLLRowChangeEvent(((UseChecksumDLLRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUseChecksumDLLRow(UseChecksumDLLRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UseChecksumDLLDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrintingDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnPrinting_Id;
            
            private System.Data.DataColumn columnSetting_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintingDataTable() {
                this.TableName = "Printing";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintingDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PrintingDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Printing_IdColumn {
                get {
                    return this.columnPrinting_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Setting_IdColumn {
                get {
                    return this.columnSetting_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintingRow this[int index] {
                get {
                    return ((PrintingRow)(this.Rows[index]));
                }
            }
            
            public event PrintingRowChangeEventHandler PrintingRowChanging;
            
            public event PrintingRowChangeEventHandler PrintingRowChanged;
            
            public event PrintingRowChangeEventHandler PrintingRowDeleting;
            
            public event PrintingRowChangeEventHandler PrintingRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrintingRow(PrintingRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintingRow AddPrintingRow(SettingRow parentSettingRowBySetting_Printing) {
                PrintingRow rowPrintingRow = ((PrintingRow)(this.NewRow()));
                rowPrintingRow.ItemArray = new object[] {
                        null,
                        parentSettingRowBySetting_Printing[0]};
                this.Rows.Add(rowPrintingRow);
                return rowPrintingRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PrintingDataTable cln = ((PrintingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PrintingDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPrinting_Id = base.Columns["Printing_Id"];
                this.columnSetting_Id = base.Columns["Setting_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPrinting_Id = new System.Data.DataColumn("Printing_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnPrinting_Id);
                this.columnSetting_Id = new System.Data.DataColumn("Setting_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSetting_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnPrinting_Id}, true));
                this.columnPrinting_Id.AutoIncrement = true;
                this.columnPrinting_Id.AllowDBNull = false;
                this.columnPrinting_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintingRow NewPrintingRow() {
                return ((PrintingRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PrintingRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PrintingRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrintingRowChanged != null)) {
                    this.PrintingRowChanged(this, new PrintingRowChangeEvent(((PrintingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrintingRowChanging != null)) {
                    this.PrintingRowChanging(this, new PrintingRowChangeEvent(((PrintingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrintingRowDeleted != null)) {
                    this.PrintingRowDeleted(this, new PrintingRowChangeEvent(((PrintingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrintingRowDeleting != null)) {
                    this.PrintingRowDeleting(this, new PrintingRowChangeEvent(((PrintingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrintingRow(PrintingRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrintingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SimulatePrintingDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnPrinting_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SimulatePrintingDataTable() {
                this.TableName = "SimulatePrinting";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SimulatePrintingDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SimulatePrintingDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Printing_IdColumn {
                get {
                    return this.columnPrinting_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SimulatePrintingRow this[int index] {
                get {
                    return ((SimulatePrintingRow)(this.Rows[index]));
                }
            }
            
            public event SimulatePrintingRowChangeEventHandler SimulatePrintingRowChanging;
            
            public event SimulatePrintingRowChangeEventHandler SimulatePrintingRowChanged;
            
            public event SimulatePrintingRowChangeEventHandler SimulatePrintingRowDeleting;
            
            public event SimulatePrintingRowChangeEventHandler SimulatePrintingRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSimulatePrintingRow(SimulatePrintingRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SimulatePrintingRow AddSimulatePrintingRow(string Value, PrintingRow parentPrintingRowByPrinting_SimulatePrinting) {
                SimulatePrintingRow rowSimulatePrintingRow = ((SimulatePrintingRow)(this.NewRow()));
                rowSimulatePrintingRow.ItemArray = new object[] {
                        Value,
                        parentPrintingRowByPrinting_SimulatePrinting[0]};
                this.Rows.Add(rowSimulatePrintingRow);
                return rowSimulatePrintingRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SimulatePrintingDataTable cln = ((SimulatePrintingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SimulatePrintingDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnPrinting_Id = base.Columns["Printing_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnPrinting_Id = new System.Data.DataColumn("Printing_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnPrinting_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SimulatePrintingRow NewSimulatePrintingRow() {
                return ((SimulatePrintingRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SimulatePrintingRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SimulatePrintingRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SimulatePrintingRowChanged != null)) {
                    this.SimulatePrintingRowChanged(this, new SimulatePrintingRowChangeEvent(((SimulatePrintingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SimulatePrintingRowChanging != null)) {
                    this.SimulatePrintingRowChanging(this, new SimulatePrintingRowChangeEvent(((SimulatePrintingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SimulatePrintingRowDeleted != null)) {
                    this.SimulatePrintingRowDeleted(this, new SimulatePrintingRowChangeEvent(((SimulatePrintingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SimulatePrintingRowDeleting != null)) {
                    this.SimulatePrintingRowDeleting(this, new SimulatePrintingRowChangeEvent(((SimulatePrintingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSimulatePrintingRow(SimulatePrintingRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SimulatePrintingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RejectPatternDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnPrinting_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RejectPatternDataTable() {
                this.TableName = "RejectPattern";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RejectPatternDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RejectPatternDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Printing_IdColumn {
                get {
                    return this.columnPrinting_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RejectPatternRow this[int index] {
                get {
                    return ((RejectPatternRow)(this.Rows[index]));
                }
            }
            
            public event RejectPatternRowChangeEventHandler RejectPatternRowChanging;
            
            public event RejectPatternRowChangeEventHandler RejectPatternRowChanged;
            
            public event RejectPatternRowChangeEventHandler RejectPatternRowDeleting;
            
            public event RejectPatternRowChangeEventHandler RejectPatternRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRejectPatternRow(RejectPatternRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RejectPatternRow AddRejectPatternRow(string Value, PrintingRow parentPrintingRowByPrinting_RejectPattern) {
                RejectPatternRow rowRejectPatternRow = ((RejectPatternRow)(this.NewRow()));
                rowRejectPatternRow.ItemArray = new object[] {
                        Value,
                        parentPrintingRowByPrinting_RejectPattern[0]};
                this.Rows.Add(rowRejectPatternRow);
                return rowRejectPatternRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RejectPatternDataTable cln = ((RejectPatternDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RejectPatternDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnPrinting_Id = base.Columns["Printing_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnPrinting_Id = new System.Data.DataColumn("Printing_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnPrinting_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("Disabled"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RejectPatternRow NewRejectPatternRow() {
                return ((RejectPatternRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RejectPatternRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RejectPatternRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RejectPatternRowChanged != null)) {
                    this.RejectPatternRowChanged(this, new RejectPatternRowChangeEvent(((RejectPatternRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RejectPatternRowChanging != null)) {
                    this.RejectPatternRowChanging(this, new RejectPatternRowChangeEvent(((RejectPatternRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RejectPatternRowDeleted != null)) {
                    this.RejectPatternRowDeleted(this, new RejectPatternRowChangeEvent(((RejectPatternRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RejectPatternRowDeleting != null)) {
                    this.RejectPatternRowDeleting(this, new RejectPatternRowChangeEvent(((RejectPatternRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRejectPatternRow(RejectPatternRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RejectPatternDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TakeOrdersWithLabelWithoutPrinterDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnPrinting_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TakeOrdersWithLabelWithoutPrinterDataTable() {
                this.TableName = "TakeOrdersWithLabelWithoutPrinter";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TakeOrdersWithLabelWithoutPrinterDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TakeOrdersWithLabelWithoutPrinterDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Printing_IdColumn {
                get {
                    return this.columnPrinting_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TakeOrdersWithLabelWithoutPrinterRow this[int index] {
                get {
                    return ((TakeOrdersWithLabelWithoutPrinterRow)(this.Rows[index]));
                }
            }
            
            public event TakeOrdersWithLabelWithoutPrinterRowChangeEventHandler TakeOrdersWithLabelWithoutPrinterRowChanging;
            
            public event TakeOrdersWithLabelWithoutPrinterRowChangeEventHandler TakeOrdersWithLabelWithoutPrinterRowChanged;
            
            public event TakeOrdersWithLabelWithoutPrinterRowChangeEventHandler TakeOrdersWithLabelWithoutPrinterRowDeleting;
            
            public event TakeOrdersWithLabelWithoutPrinterRowChangeEventHandler TakeOrdersWithLabelWithoutPrinterRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTakeOrdersWithLabelWithoutPrinterRow(TakeOrdersWithLabelWithoutPrinterRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TakeOrdersWithLabelWithoutPrinterRow AddTakeOrdersWithLabelWithoutPrinterRow(string Value, PrintingRow parentPrintingRowByPrinting_TakeOrdersWithLabelWithoutPrinter) {
                TakeOrdersWithLabelWithoutPrinterRow rowTakeOrdersWithLabelWithoutPrinterRow = ((TakeOrdersWithLabelWithoutPrinterRow)(this.NewRow()));
                rowTakeOrdersWithLabelWithoutPrinterRow.ItemArray = new object[] {
                        Value,
                        parentPrintingRowByPrinting_TakeOrdersWithLabelWithoutPrinter[0]};
                this.Rows.Add(rowTakeOrdersWithLabelWithoutPrinterRow);
                return rowTakeOrdersWithLabelWithoutPrinterRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TakeOrdersWithLabelWithoutPrinterDataTable cln = ((TakeOrdersWithLabelWithoutPrinterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TakeOrdersWithLabelWithoutPrinterDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnPrinting_Id = base.Columns["Printing_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnPrinting_Id = new System.Data.DataColumn("Printing_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnPrinting_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TakeOrdersWithLabelWithoutPrinterRow NewTakeOrdersWithLabelWithoutPrinterRow() {
                return ((TakeOrdersWithLabelWithoutPrinterRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TakeOrdersWithLabelWithoutPrinterRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TakeOrdersWithLabelWithoutPrinterRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TakeOrdersWithLabelWithoutPrinterRowChanged != null)) {
                    this.TakeOrdersWithLabelWithoutPrinterRowChanged(this, new TakeOrdersWithLabelWithoutPrinterRowChangeEvent(((TakeOrdersWithLabelWithoutPrinterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TakeOrdersWithLabelWithoutPrinterRowChanging != null)) {
                    this.TakeOrdersWithLabelWithoutPrinterRowChanging(this, new TakeOrdersWithLabelWithoutPrinterRowChangeEvent(((TakeOrdersWithLabelWithoutPrinterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TakeOrdersWithLabelWithoutPrinterRowDeleted != null)) {
                    this.TakeOrdersWithLabelWithoutPrinterRowDeleted(this, new TakeOrdersWithLabelWithoutPrinterRowChangeEvent(((TakeOrdersWithLabelWithoutPrinterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TakeOrdersWithLabelWithoutPrinterRowDeleting != null)) {
                    this.TakeOrdersWithLabelWithoutPrinterRowDeleting(this, new TakeOrdersWithLabelWithoutPrinterRowChangeEvent(((TakeOrdersWithLabelWithoutPrinterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTakeOrdersWithLabelWithoutPrinterRow(TakeOrdersWithLabelWithoutPrinterRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TakeOrdersWithLabelWithoutPrinterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ErrorOnLowInkLevelDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnPrinting_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorOnLowInkLevelDataTable() {
                this.TableName = "ErrorOnLowInkLevel";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ErrorOnLowInkLevelDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ErrorOnLowInkLevelDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Printing_IdColumn {
                get {
                    return this.columnPrinting_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorOnLowInkLevelRow this[int index] {
                get {
                    return ((ErrorOnLowInkLevelRow)(this.Rows[index]));
                }
            }
            
            public event ErrorOnLowInkLevelRowChangeEventHandler ErrorOnLowInkLevelRowChanging;
            
            public event ErrorOnLowInkLevelRowChangeEventHandler ErrorOnLowInkLevelRowChanged;
            
            public event ErrorOnLowInkLevelRowChangeEventHandler ErrorOnLowInkLevelRowDeleting;
            
            public event ErrorOnLowInkLevelRowChangeEventHandler ErrorOnLowInkLevelRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddErrorOnLowInkLevelRow(ErrorOnLowInkLevelRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorOnLowInkLevelRow AddErrorOnLowInkLevelRow(string Value, PrintingRow parentPrintingRowByPrinting_ErrorOnLowInkLevel) {
                ErrorOnLowInkLevelRow rowErrorOnLowInkLevelRow = ((ErrorOnLowInkLevelRow)(this.NewRow()));
                rowErrorOnLowInkLevelRow.ItemArray = new object[] {
                        Value,
                        parentPrintingRowByPrinting_ErrorOnLowInkLevel[0]};
                this.Rows.Add(rowErrorOnLowInkLevelRow);
                return rowErrorOnLowInkLevelRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ErrorOnLowInkLevelDataTable cln = ((ErrorOnLowInkLevelDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ErrorOnLowInkLevelDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnPrinting_Id = base.Columns["Printing_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnPrinting_Id = new System.Data.DataColumn("Printing_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnPrinting_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorOnLowInkLevelRow NewErrorOnLowInkLevelRow() {
                return ((ErrorOnLowInkLevelRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ErrorOnLowInkLevelRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ErrorOnLowInkLevelRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ErrorOnLowInkLevelRowChanged != null)) {
                    this.ErrorOnLowInkLevelRowChanged(this, new ErrorOnLowInkLevelRowChangeEvent(((ErrorOnLowInkLevelRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ErrorOnLowInkLevelRowChanging != null)) {
                    this.ErrorOnLowInkLevelRowChanging(this, new ErrorOnLowInkLevelRowChangeEvent(((ErrorOnLowInkLevelRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ErrorOnLowInkLevelRowDeleted != null)) {
                    this.ErrorOnLowInkLevelRowDeleted(this, new ErrorOnLowInkLevelRowChangeEvent(((ErrorOnLowInkLevelRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ErrorOnLowInkLevelRowDeleting != null)) {
                    this.ErrorOnLowInkLevelRowDeleting(this, new ErrorOnLowInkLevelRowChangeEvent(((ErrorOnLowInkLevelRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveErrorOnLowInkLevelRow(ErrorOnLowInkLevelRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ErrorOnLowInkLevelDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LowInkThresholdPercentDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnPrinting_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LowInkThresholdPercentDataTable() {
                this.TableName = "LowInkThresholdPercent";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LowInkThresholdPercentDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LowInkThresholdPercentDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Printing_IdColumn {
                get {
                    return this.columnPrinting_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LowInkThresholdPercentRow this[int index] {
                get {
                    return ((LowInkThresholdPercentRow)(this.Rows[index]));
                }
            }
            
            public event LowInkThresholdPercentRowChangeEventHandler LowInkThresholdPercentRowChanging;
            
            public event LowInkThresholdPercentRowChangeEventHandler LowInkThresholdPercentRowChanged;
            
            public event LowInkThresholdPercentRowChangeEventHandler LowInkThresholdPercentRowDeleting;
            
            public event LowInkThresholdPercentRowChangeEventHandler LowInkThresholdPercentRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLowInkThresholdPercentRow(LowInkThresholdPercentRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LowInkThresholdPercentRow AddLowInkThresholdPercentRow(string Value, PrintingRow parentPrintingRowByPrinting_LowInkThresholdPercent) {
                LowInkThresholdPercentRow rowLowInkThresholdPercentRow = ((LowInkThresholdPercentRow)(this.NewRow()));
                rowLowInkThresholdPercentRow.ItemArray = new object[] {
                        Value,
                        parentPrintingRowByPrinting_LowInkThresholdPercent[0]};
                this.Rows.Add(rowLowInkThresholdPercentRow);
                return rowLowInkThresholdPercentRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LowInkThresholdPercentDataTable cln = ((LowInkThresholdPercentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LowInkThresholdPercentDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnPrinting_Id = base.Columns["Printing_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnPrinting_Id = new System.Data.DataColumn("Printing_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnPrinting_Id);
                this.columnValue.AllowDBNull = false;
                this.columnValue.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LowInkThresholdPercentRow NewLowInkThresholdPercentRow() {
                return ((LowInkThresholdPercentRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LowInkThresholdPercentRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LowInkThresholdPercentRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LowInkThresholdPercentRowChanged != null)) {
                    this.LowInkThresholdPercentRowChanged(this, new LowInkThresholdPercentRowChangeEvent(((LowInkThresholdPercentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LowInkThresholdPercentRowChanging != null)) {
                    this.LowInkThresholdPercentRowChanging(this, new LowInkThresholdPercentRowChangeEvent(((LowInkThresholdPercentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LowInkThresholdPercentRowDeleted != null)) {
                    this.LowInkThresholdPercentRowDeleted(this, new LowInkThresholdPercentRowChangeEvent(((LowInkThresholdPercentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LowInkThresholdPercentRowDeleting != null)) {
                    this.LowInkThresholdPercentRowDeleting(this, new LowInkThresholdPercentRowChangeEvent(((LowInkThresholdPercentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLowInkThresholdPercentRow(LowInkThresholdPercentRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LowInkThresholdPercentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AutoloaderSettingsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnLoaderNumber;
            
            private System.Data.DataColumn columnAutoloaderSettings_Id;
            
            private System.Data.DataColumn columnSetting_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderSettingsDataTable() {
                this.TableName = "AutoloaderSettings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AutoloaderSettingsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AutoloaderSettingsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LoaderNumberColumn {
                get {
                    return this.columnLoaderNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AutoloaderSettings_IdColumn {
                get {
                    return this.columnAutoloaderSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Setting_IdColumn {
                get {
                    return this.columnSetting_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderSettingsRow this[int index] {
                get {
                    return ((AutoloaderSettingsRow)(this.Rows[index]));
                }
            }
            
            public event AutoloaderSettingsRowChangeEventHandler AutoloaderSettingsRowChanging;
            
            public event AutoloaderSettingsRowChangeEventHandler AutoloaderSettingsRowChanged;
            
            public event AutoloaderSettingsRowChangeEventHandler AutoloaderSettingsRowDeleting;
            
            public event AutoloaderSettingsRowChangeEventHandler AutoloaderSettingsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAutoloaderSettingsRow(AutoloaderSettingsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderSettingsRow AddAutoloaderSettingsRow(string LoaderNumber, SettingRow parentSettingRowBySetting_AutoloaderSettings) {
                AutoloaderSettingsRow rowAutoloaderSettingsRow = ((AutoloaderSettingsRow)(this.NewRow()));
                rowAutoloaderSettingsRow.ItemArray = new object[] {
                        LoaderNumber,
                        null,
                        parentSettingRowBySetting_AutoloaderSettings[0]};
                this.Rows.Add(rowAutoloaderSettingsRow);
                return rowAutoloaderSettingsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                AutoloaderSettingsDataTable cln = ((AutoloaderSettingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new AutoloaderSettingsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLoaderNumber = base.Columns["LoaderNumber"];
                this.columnAutoloaderSettings_Id = base.Columns["AutoloaderSettings_Id"];
                this.columnSetting_Id = base.Columns["Setting_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLoaderNumber = new System.Data.DataColumn("LoaderNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLoaderNumber);
                this.columnAutoloaderSettings_Id = new System.Data.DataColumn("AutoloaderSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAutoloaderSettings_Id);
                this.columnSetting_Id = new System.Data.DataColumn("Setting_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSetting_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnAutoloaderSettings_Id}, true));
                this.columnLoaderNumber.AllowDBNull = false;
                this.columnLoaderNumber.Namespace = "";
                this.columnAutoloaderSettings_Id.AutoIncrement = true;
                this.columnAutoloaderSettings_Id.AllowDBNull = false;
                this.columnAutoloaderSettings_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderSettingsRow NewAutoloaderSettingsRow() {
                return ((AutoloaderSettingsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AutoloaderSettingsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(AutoloaderSettingsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AutoloaderSettingsRowChanged != null)) {
                    this.AutoloaderSettingsRowChanged(this, new AutoloaderSettingsRowChangeEvent(((AutoloaderSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AutoloaderSettingsRowChanging != null)) {
                    this.AutoloaderSettingsRowChanging(this, new AutoloaderSettingsRowChangeEvent(((AutoloaderSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AutoloaderSettingsRowDeleted != null)) {
                    this.AutoloaderSettingsRowDeleted(this, new AutoloaderSettingsRowChangeEvent(((AutoloaderSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AutoloaderSettingsRowDeleting != null)) {
                    this.AutoloaderSettingsRowDeleting(this, new AutoloaderSettingsRowChangeEvent(((AutoloaderSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAutoloaderSettingsRow(AutoloaderSettingsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AutoloaderSettingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BinSettingDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnBinNumber;
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnAutoloaderSettings_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BinSettingDataTable() {
                this.TableName = "BinSetting";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BinSettingDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BinSettingDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BinNumberColumn {
                get {
                    return this.columnBinNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AutoloaderSettings_IdColumn {
                get {
                    return this.columnAutoloaderSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BinSettingRow this[int index] {
                get {
                    return ((BinSettingRow)(this.Rows[index]));
                }
            }
            
            public event BinSettingRowChangeEventHandler BinSettingRowChanging;
            
            public event BinSettingRowChangeEventHandler BinSettingRowChanged;
            
            public event BinSettingRowChangeEventHandler BinSettingRowDeleting;
            
            public event BinSettingRowChangeEventHandler BinSettingRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBinSettingRow(BinSettingRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BinSettingRow AddBinSettingRow(string BinNumber, string Value, AutoloaderSettingsRow parentAutoloaderSettingsRowByAutoloaderSettings_BinSetting) {
                BinSettingRow rowBinSettingRow = ((BinSettingRow)(this.NewRow()));
                rowBinSettingRow.ItemArray = new object[] {
                        BinNumber,
                        Value,
                        parentAutoloaderSettingsRowByAutoloaderSettings_BinSetting[1]};
                this.Rows.Add(rowBinSettingRow);
                return rowBinSettingRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BinSettingDataTable cln = ((BinSettingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BinSettingDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBinNumber = base.Columns["BinNumber"];
                this.columnValue = base.Columns["Value"];
                this.columnAutoloaderSettings_Id = base.Columns["AutoloaderSettings_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBinNumber = new System.Data.DataColumn("BinNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnBinNumber);
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnAutoloaderSettings_Id = new System.Data.DataColumn("AutoloaderSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAutoloaderSettings_Id);
                this.columnBinNumber.AllowDBNull = false;
                this.columnBinNumber.Namespace = "";
                this.columnValue.AllowDBNull = false;
                this.columnValue.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BinSettingRow NewBinSettingRow() {
                return ((BinSettingRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BinSettingRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BinSettingRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BinSettingRowChanged != null)) {
                    this.BinSettingRowChanged(this, new BinSettingRowChangeEvent(((BinSettingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BinSettingRowChanging != null)) {
                    this.BinSettingRowChanging(this, new BinSettingRowChangeEvent(((BinSettingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BinSettingRowDeleted != null)) {
                    this.BinSettingRowDeleted(this, new BinSettingRowChangeEvent(((BinSettingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BinSettingRowDeleting != null)) {
                    this.BinSettingRowDeleting(this, new BinSettingRowChangeEvent(((BinSettingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBinSettingRow(BinSettingRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BinSettingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MailslotSettingDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnAutoloaderSettings_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MailslotSettingDataTable() {
                this.TableName = "MailslotSetting";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MailslotSettingDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MailslotSettingDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AutoloaderSettings_IdColumn {
                get {
                    return this.columnAutoloaderSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MailslotSettingRow this[int index] {
                get {
                    return ((MailslotSettingRow)(this.Rows[index]));
                }
            }
            
            public event MailslotSettingRowChangeEventHandler MailslotSettingRowChanging;
            
            public event MailslotSettingRowChangeEventHandler MailslotSettingRowChanged;
            
            public event MailslotSettingRowChangeEventHandler MailslotSettingRowDeleting;
            
            public event MailslotSettingRowChangeEventHandler MailslotSettingRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMailslotSettingRow(MailslotSettingRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MailslotSettingRow AddMailslotSettingRow(string Value, AutoloaderSettingsRow parentAutoloaderSettingsRowByAutoloaderSettings_MailslotSetting) {
                MailslotSettingRow rowMailslotSettingRow = ((MailslotSettingRow)(this.NewRow()));
                rowMailslotSettingRow.ItemArray = new object[] {
                        Value,
                        parentAutoloaderSettingsRowByAutoloaderSettings_MailslotSetting[1]};
                this.Rows.Add(rowMailslotSettingRow);
                return rowMailslotSettingRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MailslotSettingDataTable cln = ((MailslotSettingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MailslotSettingDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnAutoloaderSettings_Id = base.Columns["AutoloaderSettings_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnAutoloaderSettings_Id = new System.Data.DataColumn("AutoloaderSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAutoloaderSettings_Id);
                this.columnValue.AllowDBNull = false;
                this.columnValue.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MailslotSettingRow NewMailslotSettingRow() {
                return ((MailslotSettingRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MailslotSettingRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MailslotSettingRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MailslotSettingRowChanged != null)) {
                    this.MailslotSettingRowChanged(this, new MailslotSettingRowChangeEvent(((MailslotSettingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MailslotSettingRowChanging != null)) {
                    this.MailslotSettingRowChanging(this, new MailslotSettingRowChangeEvent(((MailslotSettingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MailslotSettingRowDeleted != null)) {
                    this.MailslotSettingRowDeleted(this, new MailslotSettingRowChangeEvent(((MailslotSettingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MailslotSettingRowDeleting != null)) {
                    this.MailslotSettingRowDeleting(this, new MailslotSettingRowChangeEvent(((MailslotSettingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMailslotSettingRow(MailslotSettingRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MailslotSettingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MediaSizeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnAutoloaderSettings_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaSizeDataTable() {
                this.TableName = "MediaSize";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MediaSizeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MediaSizeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AutoloaderSettings_IdColumn {
                get {
                    return this.columnAutoloaderSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaSizeRow this[int index] {
                get {
                    return ((MediaSizeRow)(this.Rows[index]));
                }
            }
            
            public event MediaSizeRowChangeEventHandler MediaSizeRowChanging;
            
            public event MediaSizeRowChangeEventHandler MediaSizeRowChanged;
            
            public event MediaSizeRowChangeEventHandler MediaSizeRowDeleting;
            
            public event MediaSizeRowChangeEventHandler MediaSizeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMediaSizeRow(MediaSizeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaSizeRow AddMediaSizeRow(string Value, AutoloaderSettingsRow parentAutoloaderSettingsRowByAutoloaderSettings_MediaSize) {
                MediaSizeRow rowMediaSizeRow = ((MediaSizeRow)(this.NewRow()));
                rowMediaSizeRow.ItemArray = new object[] {
                        Value,
                        parentAutoloaderSettingsRowByAutoloaderSettings_MediaSize[1]};
                this.Rows.Add(rowMediaSizeRow);
                return rowMediaSizeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MediaSizeDataTable cln = ((MediaSizeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MediaSizeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnAutoloaderSettings_Id = base.Columns["AutoloaderSettings_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnAutoloaderSettings_Id = new System.Data.DataColumn("AutoloaderSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAutoloaderSettings_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("120mm"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaSizeRow NewMediaSizeRow() {
                return ((MediaSizeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MediaSizeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MediaSizeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MediaSizeRowChanged != null)) {
                    this.MediaSizeRowChanged(this, new MediaSizeRowChangeEvent(((MediaSizeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MediaSizeRowChanging != null)) {
                    this.MediaSizeRowChanging(this, new MediaSizeRowChangeEvent(((MediaSizeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MediaSizeRowDeleted != null)) {
                    this.MediaSizeRowDeleted(this, new MediaSizeRowChangeEvent(((MediaSizeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MediaSizeRowDeleting != null)) {
                    this.MediaSizeRowDeleting(this, new MediaSizeRowChangeEvent(((MediaSizeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMediaSizeRow(MediaSizeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MediaSizeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MediaTypeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnAutoloaderSettings_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaTypeDataTable() {
                this.TableName = "MediaType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MediaTypeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MediaTypeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AutoloaderSettings_IdColumn {
                get {
                    return this.columnAutoloaderSettings_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaTypeRow this[int index] {
                get {
                    return ((MediaTypeRow)(this.Rows[index]));
                }
            }
            
            public event MediaTypeRowChangeEventHandler MediaTypeRowChanging;
            
            public event MediaTypeRowChangeEventHandler MediaTypeRowChanged;
            
            public event MediaTypeRowChangeEventHandler MediaTypeRowDeleting;
            
            public event MediaTypeRowChangeEventHandler MediaTypeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMediaTypeRow(MediaTypeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaTypeRow AddMediaTypeRow(string Value, AutoloaderSettingsRow parentAutoloaderSettingsRowByAutoloaderSettings_MediaType) {
                MediaTypeRow rowMediaTypeRow = ((MediaTypeRow)(this.NewRow()));
                rowMediaTypeRow.ItemArray = new object[] {
                        Value,
                        parentAutoloaderSettingsRowByAutoloaderSettings_MediaType[1]};
                this.Rows.Add(rowMediaTypeRow);
                return rowMediaTypeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MediaTypeDataTable cln = ((MediaTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MediaTypeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnAutoloaderSettings_Id = base.Columns["AutoloaderSettings_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnAutoloaderSettings_Id = new System.Data.DataColumn("AutoloaderSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAutoloaderSettings_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("CDR"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaTypeRow NewMediaTypeRow() {
                return ((MediaTypeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MediaTypeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MediaTypeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MediaTypeRowChanged != null)) {
                    this.MediaTypeRowChanged(this, new MediaTypeRowChangeEvent(((MediaTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MediaTypeRowChanging != null)) {
                    this.MediaTypeRowChanging(this, new MediaTypeRowChangeEvent(((MediaTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MediaTypeRowDeleted != null)) {
                    this.MediaTypeRowDeleted(this, new MediaTypeRowChangeEvent(((MediaTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MediaTypeRowDeleting != null)) {
                    this.MediaTypeRowDeleting(this, new MediaTypeRowChangeEvent(((MediaTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMediaTypeRow(MediaTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MediaTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReadingDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnReading_Id;
            
            private System.Data.DataColumn columnSetting_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadingDataTable() {
                this.TableName = "Reading";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReadingDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReadingDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Reading_IdColumn {
                get {
                    return this.columnReading_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Setting_IdColumn {
                get {
                    return this.columnSetting_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadingRow this[int index] {
                get {
                    return ((ReadingRow)(this.Rows[index]));
                }
            }
            
            public event ReadingRowChangeEventHandler ReadingRowChanging;
            
            public event ReadingRowChangeEventHandler ReadingRowChanged;
            
            public event ReadingRowChangeEventHandler ReadingRowDeleting;
            
            public event ReadingRowChangeEventHandler ReadingRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReadingRow(ReadingRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadingRow AddReadingRow(SettingRow parentSettingRowBySetting_Reading) {
                ReadingRow rowReadingRow = ((ReadingRow)(this.NewRow()));
                rowReadingRow.ItemArray = new object[] {
                        null,
                        parentSettingRowBySetting_Reading[0]};
                this.Rows.Add(rowReadingRow);
                return rowReadingRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ReadingDataTable cln = ((ReadingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ReadingDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnReading_Id = base.Columns["Reading_Id"];
                this.columnSetting_Id = base.Columns["Setting_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnReading_Id = new System.Data.DataColumn("Reading_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnReading_Id);
                this.columnSetting_Id = new System.Data.DataColumn("Setting_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSetting_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnReading_Id}, true));
                this.columnReading_Id.AutoIncrement = true;
                this.columnReading_Id.AllowDBNull = false;
                this.columnReading_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadingRow NewReadingRow() {
                return ((ReadingRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ReadingRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ReadingRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReadingRowChanged != null)) {
                    this.ReadingRowChanged(this, new ReadingRowChangeEvent(((ReadingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReadingRowChanging != null)) {
                    this.ReadingRowChanging(this, new ReadingRowChangeEvent(((ReadingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReadingRowDeleted != null)) {
                    this.ReadingRowDeleted(this, new ReadingRowChangeEvent(((ReadingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReadingRowDeleting != null)) {
                    this.ReadingRowDeleting(this, new ReadingRowChangeEvent(((ReadingRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReadingRow(ReadingRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReadingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BarcodePortDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnReading_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarcodePortDataTable() {
                this.TableName = "BarcodePort";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BarcodePortDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BarcodePortDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Reading_IdColumn {
                get {
                    return this.columnReading_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarcodePortRow this[int index] {
                get {
                    return ((BarcodePortRow)(this.Rows[index]));
                }
            }
            
            public event BarcodePortRowChangeEventHandler BarcodePortRowChanging;
            
            public event BarcodePortRowChangeEventHandler BarcodePortRowChanged;
            
            public event BarcodePortRowChangeEventHandler BarcodePortRowDeleting;
            
            public event BarcodePortRowChangeEventHandler BarcodePortRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBarcodePortRow(BarcodePortRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarcodePortRow AddBarcodePortRow(string Value, ReadingRow parentReadingRowByReading_BarcodePort) {
                BarcodePortRow rowBarcodePortRow = ((BarcodePortRow)(this.NewRow()));
                rowBarcodePortRow.ItemArray = new object[] {
                        Value,
                        parentReadingRowByReading_BarcodePort[0]};
                this.Rows.Add(rowBarcodePortRow);
                return rowBarcodePortRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BarcodePortDataTable cln = ((BarcodePortDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BarcodePortDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnReading_Id = base.Columns["Reading_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnReading_Id = new System.Data.DataColumn("Reading_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnReading_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("None"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarcodePortRow NewBarcodePortRow() {
                return ((BarcodePortRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BarcodePortRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BarcodePortRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BarcodePortRowChanged != null)) {
                    this.BarcodePortRowChanged(this, new BarcodePortRowChangeEvent(((BarcodePortRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BarcodePortRowChanging != null)) {
                    this.BarcodePortRowChanging(this, new BarcodePortRowChangeEvent(((BarcodePortRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BarcodePortRowDeleted != null)) {
                    this.BarcodePortRowDeleted(this, new BarcodePortRowChangeEvent(((BarcodePortRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BarcodePortRowDeleting != null)) {
                    this.BarcodePortRowDeleting(this, new BarcodePortRowChangeEvent(((BarcodePortRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBarcodePortRow(BarcodePortRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BarcodePortDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BarcodeAngleDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnReading_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarcodeAngleDataTable() {
                this.TableName = "BarcodeAngle";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BarcodeAngleDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BarcodeAngleDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Reading_IdColumn {
                get {
                    return this.columnReading_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarcodeAngleRow this[int index] {
                get {
                    return ((BarcodeAngleRow)(this.Rows[index]));
                }
            }
            
            public event BarcodeAngleRowChangeEventHandler BarcodeAngleRowChanging;
            
            public event BarcodeAngleRowChangeEventHandler BarcodeAngleRowChanged;
            
            public event BarcodeAngleRowChangeEventHandler BarcodeAngleRowDeleting;
            
            public event BarcodeAngleRowChangeEventHandler BarcodeAngleRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBarcodeAngleRow(BarcodeAngleRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarcodeAngleRow AddBarcodeAngleRow(string Value, ReadingRow parentReadingRowByReading_BarcodeAngle) {
                BarcodeAngleRow rowBarcodeAngleRow = ((BarcodeAngleRow)(this.NewRow()));
                rowBarcodeAngleRow.ItemArray = new object[] {
                        Value,
                        parentReadingRowByReading_BarcodeAngle[0]};
                this.Rows.Add(rowBarcodeAngleRow);
                return rowBarcodeAngleRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BarcodeAngleDataTable cln = ((BarcodeAngleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BarcodeAngleDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnReading_Id = base.Columns["Reading_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnReading_Id = new System.Data.DataColumn("Reading_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnReading_Id);
                this.columnValue.AllowDBNull = false;
                this.columnValue.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarcodeAngleRow NewBarcodeAngleRow() {
                return ((BarcodeAngleRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BarcodeAngleRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BarcodeAngleRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BarcodeAngleRowChanged != null)) {
                    this.BarcodeAngleRowChanged(this, new BarcodeAngleRowChangeEvent(((BarcodeAngleRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BarcodeAngleRowChanging != null)) {
                    this.BarcodeAngleRowChanging(this, new BarcodeAngleRowChangeEvent(((BarcodeAngleRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BarcodeAngleRowDeleted != null)) {
                    this.BarcodeAngleRowDeleted(this, new BarcodeAngleRowChangeEvent(((BarcodeAngleRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BarcodeAngleRowDeleting != null)) {
                    this.BarcodeAngleRowDeleting(this, new BarcodeAngleRowChangeEvent(((BarcodeAngleRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBarcodeAngleRow(BarcodeAngleRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BarcodeAngleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UseBarcodeIndexDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnReading_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseBarcodeIndexDataTable() {
                this.TableName = "UseBarcodeIndex";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UseBarcodeIndexDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UseBarcodeIndexDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Reading_IdColumn {
                get {
                    return this.columnReading_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseBarcodeIndexRow this[int index] {
                get {
                    return ((UseBarcodeIndexRow)(this.Rows[index]));
                }
            }
            
            public event UseBarcodeIndexRowChangeEventHandler UseBarcodeIndexRowChanging;
            
            public event UseBarcodeIndexRowChangeEventHandler UseBarcodeIndexRowChanged;
            
            public event UseBarcodeIndexRowChangeEventHandler UseBarcodeIndexRowDeleting;
            
            public event UseBarcodeIndexRowChangeEventHandler UseBarcodeIndexRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUseBarcodeIndexRow(UseBarcodeIndexRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseBarcodeIndexRow AddUseBarcodeIndexRow(string Value, ReadingRow parentReadingRowByReading_UseBarcodeIndex) {
                UseBarcodeIndexRow rowUseBarcodeIndexRow = ((UseBarcodeIndexRow)(this.NewRow()));
                rowUseBarcodeIndexRow.ItemArray = new object[] {
                        Value,
                        parentReadingRowByReading_UseBarcodeIndex[0]};
                this.Rows.Add(rowUseBarcodeIndexRow);
                return rowUseBarcodeIndexRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UseBarcodeIndexDataTable cln = ((UseBarcodeIndexDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UseBarcodeIndexDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnReading_Id = base.Columns["Reading_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnReading_Id = new System.Data.DataColumn("Reading_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnReading_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseBarcodeIndexRow NewUseBarcodeIndexRow() {
                return ((UseBarcodeIndexRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UseBarcodeIndexRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UseBarcodeIndexRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UseBarcodeIndexRowChanged != null)) {
                    this.UseBarcodeIndexRowChanged(this, new UseBarcodeIndexRowChangeEvent(((UseBarcodeIndexRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UseBarcodeIndexRowChanging != null)) {
                    this.UseBarcodeIndexRowChanging(this, new UseBarcodeIndexRowChangeEvent(((UseBarcodeIndexRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UseBarcodeIndexRowDeleted != null)) {
                    this.UseBarcodeIndexRowDeleted(this, new UseBarcodeIndexRowChangeEvent(((UseBarcodeIndexRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UseBarcodeIndexRowDeleting != null)) {
                    this.UseBarcodeIndexRowDeleting(this, new UseBarcodeIndexRowChangeEvent(((UseBarcodeIndexRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUseBarcodeIndexRow(UseBarcodeIndexRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UseBarcodeIndexDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AutoBulkReadDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnAutoBulkRead_Id;
            
            private System.Data.DataColumn columnReading_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoBulkReadDataTable() {
                this.TableName = "AutoBulkRead";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AutoBulkReadDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AutoBulkReadDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AutoBulkRead_IdColumn {
                get {
                    return this.columnAutoBulkRead_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Reading_IdColumn {
                get {
                    return this.columnReading_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoBulkReadRow this[int index] {
                get {
                    return ((AutoBulkReadRow)(this.Rows[index]));
                }
            }
            
            public event AutoBulkReadRowChangeEventHandler AutoBulkReadRowChanging;
            
            public event AutoBulkReadRowChangeEventHandler AutoBulkReadRowChanged;
            
            public event AutoBulkReadRowChangeEventHandler AutoBulkReadRowDeleting;
            
            public event AutoBulkReadRowChangeEventHandler AutoBulkReadRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAutoBulkReadRow(AutoBulkReadRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoBulkReadRow AddAutoBulkReadRow(ReadingRow parentReadingRowByReading_AutoBulkRead) {
                AutoBulkReadRow rowAutoBulkReadRow = ((AutoBulkReadRow)(this.NewRow()));
                rowAutoBulkReadRow.ItemArray = new object[] {
                        null,
                        parentReadingRowByReading_AutoBulkRead[0]};
                this.Rows.Add(rowAutoBulkReadRow);
                return rowAutoBulkReadRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                AutoBulkReadDataTable cln = ((AutoBulkReadDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new AutoBulkReadDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAutoBulkRead_Id = base.Columns["AutoBulkRead_Id"];
                this.columnReading_Id = base.Columns["Reading_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAutoBulkRead_Id = new System.Data.DataColumn("AutoBulkRead_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAutoBulkRead_Id);
                this.columnReading_Id = new System.Data.DataColumn("Reading_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnReading_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnAutoBulkRead_Id}, true));
                this.columnAutoBulkRead_Id.AutoIncrement = true;
                this.columnAutoBulkRead_Id.AllowDBNull = false;
                this.columnAutoBulkRead_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoBulkReadRow NewAutoBulkReadRow() {
                return ((AutoBulkReadRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AutoBulkReadRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(AutoBulkReadRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AutoBulkReadRowChanged != null)) {
                    this.AutoBulkReadRowChanged(this, new AutoBulkReadRowChangeEvent(((AutoBulkReadRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AutoBulkReadRowChanging != null)) {
                    this.AutoBulkReadRowChanging(this, new AutoBulkReadRowChangeEvent(((AutoBulkReadRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AutoBulkReadRowDeleted != null)) {
                    this.AutoBulkReadRowDeleted(this, new AutoBulkReadRowChangeEvent(((AutoBulkReadRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AutoBulkReadRowDeleting != null)) {
                    this.AutoBulkReadRowDeleting(this, new AutoBulkReadRowChangeEvent(((AutoBulkReadRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAutoBulkReadRow(AutoBulkReadRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AutoBulkReadDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BaseFolderForImagesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnAutoBulkRead_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseFolderForImagesDataTable() {
                this.TableName = "BaseFolderForImages";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BaseFolderForImagesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BaseFolderForImagesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AutoBulkRead_IdColumn {
                get {
                    return this.columnAutoBulkRead_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseFolderForImagesRow this[int index] {
                get {
                    return ((BaseFolderForImagesRow)(this.Rows[index]));
                }
            }
            
            public event BaseFolderForImagesRowChangeEventHandler BaseFolderForImagesRowChanging;
            
            public event BaseFolderForImagesRowChangeEventHandler BaseFolderForImagesRowChanged;
            
            public event BaseFolderForImagesRowChangeEventHandler BaseFolderForImagesRowDeleting;
            
            public event BaseFolderForImagesRowChangeEventHandler BaseFolderForImagesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBaseFolderForImagesRow(BaseFolderForImagesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseFolderForImagesRow AddBaseFolderForImagesRow(string Value, AutoBulkReadRow parentAutoBulkReadRowByAutoBulkRead_BaseFolderForImages) {
                BaseFolderForImagesRow rowBaseFolderForImagesRow = ((BaseFolderForImagesRow)(this.NewRow()));
                rowBaseFolderForImagesRow.ItemArray = new object[] {
                        Value,
                        parentAutoBulkReadRowByAutoBulkRead_BaseFolderForImages[0]};
                this.Rows.Add(rowBaseFolderForImagesRow);
                return rowBaseFolderForImagesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BaseFolderForImagesDataTable cln = ((BaseFolderForImagesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BaseFolderForImagesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnAutoBulkRead_Id = base.Columns["AutoBulkRead_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnAutoBulkRead_Id = new System.Data.DataColumn("AutoBulkRead_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAutoBulkRead_Id);
                this.columnValue.AllowDBNull = false;
                this.columnValue.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseFolderForImagesRow NewBaseFolderForImagesRow() {
                return ((BaseFolderForImagesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BaseFolderForImagesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BaseFolderForImagesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BaseFolderForImagesRowChanged != null)) {
                    this.BaseFolderForImagesRowChanged(this, new BaseFolderForImagesRowChangeEvent(((BaseFolderForImagesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BaseFolderForImagesRowChanging != null)) {
                    this.BaseFolderForImagesRowChanging(this, new BaseFolderForImagesRowChangeEvent(((BaseFolderForImagesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BaseFolderForImagesRowDeleted != null)) {
                    this.BaseFolderForImagesRowDeleted(this, new BaseFolderForImagesRowChangeEvent(((BaseFolderForImagesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BaseFolderForImagesRowDeleting != null)) {
                    this.BaseFolderForImagesRowDeleting(this, new BaseFolderForImagesRowChangeEvent(((BaseFolderForImagesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBaseFolderForImagesRow(BaseFolderForImagesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BaseFolderForImagesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UseVolumeIDAsFolderNameDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnAutoBulkRead_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseVolumeIDAsFolderNameDataTable() {
                this.TableName = "UseVolumeIDAsFolderName";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UseVolumeIDAsFolderNameDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UseVolumeIDAsFolderNameDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AutoBulkRead_IdColumn {
                get {
                    return this.columnAutoBulkRead_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseVolumeIDAsFolderNameRow this[int index] {
                get {
                    return ((UseVolumeIDAsFolderNameRow)(this.Rows[index]));
                }
            }
            
            public event UseVolumeIDAsFolderNameRowChangeEventHandler UseVolumeIDAsFolderNameRowChanging;
            
            public event UseVolumeIDAsFolderNameRowChangeEventHandler UseVolumeIDAsFolderNameRowChanged;
            
            public event UseVolumeIDAsFolderNameRowChangeEventHandler UseVolumeIDAsFolderNameRowDeleting;
            
            public event UseVolumeIDAsFolderNameRowChangeEventHandler UseVolumeIDAsFolderNameRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUseVolumeIDAsFolderNameRow(UseVolumeIDAsFolderNameRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseVolumeIDAsFolderNameRow AddUseVolumeIDAsFolderNameRow(string Value, AutoBulkReadRow parentAutoBulkReadRowByAutoBulkRead_UseVolumeIDAsFolderName) {
                UseVolumeIDAsFolderNameRow rowUseVolumeIDAsFolderNameRow = ((UseVolumeIDAsFolderNameRow)(this.NewRow()));
                rowUseVolumeIDAsFolderNameRow.ItemArray = new object[] {
                        Value,
                        parentAutoBulkReadRowByAutoBulkRead_UseVolumeIDAsFolderName[0]};
                this.Rows.Add(rowUseVolumeIDAsFolderNameRow);
                return rowUseVolumeIDAsFolderNameRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UseVolumeIDAsFolderNameDataTable cln = ((UseVolumeIDAsFolderNameDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UseVolumeIDAsFolderNameDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnAutoBulkRead_Id = base.Columns["AutoBulkRead_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnAutoBulkRead_Id = new System.Data.DataColumn("AutoBulkRead_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAutoBulkRead_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseVolumeIDAsFolderNameRow NewUseVolumeIDAsFolderNameRow() {
                return ((UseVolumeIDAsFolderNameRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UseVolumeIDAsFolderNameRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UseVolumeIDAsFolderNameRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UseVolumeIDAsFolderNameRowChanged != null)) {
                    this.UseVolumeIDAsFolderNameRowChanged(this, new UseVolumeIDAsFolderNameRowChangeEvent(((UseVolumeIDAsFolderNameRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UseVolumeIDAsFolderNameRowChanging != null)) {
                    this.UseVolumeIDAsFolderNameRowChanging(this, new UseVolumeIDAsFolderNameRowChangeEvent(((UseVolumeIDAsFolderNameRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UseVolumeIDAsFolderNameRowDeleted != null)) {
                    this.UseVolumeIDAsFolderNameRowDeleted(this, new UseVolumeIDAsFolderNameRowChangeEvent(((UseVolumeIDAsFolderNameRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UseVolumeIDAsFolderNameRowDeleting != null)) {
                    this.UseVolumeIDAsFolderNameRowDeleting(this, new UseVolumeIDAsFolderNameRowChangeEvent(((UseVolumeIDAsFolderNameRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUseVolumeIDAsFolderNameRow(UseVolumeIDAsFolderNameRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UseVolumeIDAsFolderNameDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UseBarcodeAsFolderNameDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnAutoBulkRead_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseBarcodeAsFolderNameDataTable() {
                this.TableName = "UseBarcodeAsFolderName";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UseBarcodeAsFolderNameDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UseBarcodeAsFolderNameDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AutoBulkRead_IdColumn {
                get {
                    return this.columnAutoBulkRead_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseBarcodeAsFolderNameRow this[int index] {
                get {
                    return ((UseBarcodeAsFolderNameRow)(this.Rows[index]));
                }
            }
            
            public event UseBarcodeAsFolderNameRowChangeEventHandler UseBarcodeAsFolderNameRowChanging;
            
            public event UseBarcodeAsFolderNameRowChangeEventHandler UseBarcodeAsFolderNameRowChanged;
            
            public event UseBarcodeAsFolderNameRowChangeEventHandler UseBarcodeAsFolderNameRowDeleting;
            
            public event UseBarcodeAsFolderNameRowChangeEventHandler UseBarcodeAsFolderNameRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUseBarcodeAsFolderNameRow(UseBarcodeAsFolderNameRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseBarcodeAsFolderNameRow AddUseBarcodeAsFolderNameRow(string Value, AutoBulkReadRow parentAutoBulkReadRowByAutoBulkRead_UseBarcodeAsFolderName) {
                UseBarcodeAsFolderNameRow rowUseBarcodeAsFolderNameRow = ((UseBarcodeAsFolderNameRow)(this.NewRow()));
                rowUseBarcodeAsFolderNameRow.ItemArray = new object[] {
                        Value,
                        parentAutoBulkReadRowByAutoBulkRead_UseBarcodeAsFolderName[0]};
                this.Rows.Add(rowUseBarcodeAsFolderNameRow);
                return rowUseBarcodeAsFolderNameRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UseBarcodeAsFolderNameDataTable cln = ((UseBarcodeAsFolderNameDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UseBarcodeAsFolderNameDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnAutoBulkRead_Id = base.Columns["AutoBulkRead_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnAutoBulkRead_Id = new System.Data.DataColumn("AutoBulkRead_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAutoBulkRead_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseBarcodeAsFolderNameRow NewUseBarcodeAsFolderNameRow() {
                return ((UseBarcodeAsFolderNameRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UseBarcodeAsFolderNameRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UseBarcodeAsFolderNameRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UseBarcodeAsFolderNameRowChanged != null)) {
                    this.UseBarcodeAsFolderNameRowChanged(this, new UseBarcodeAsFolderNameRowChangeEvent(((UseBarcodeAsFolderNameRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UseBarcodeAsFolderNameRowChanging != null)) {
                    this.UseBarcodeAsFolderNameRowChanging(this, new UseBarcodeAsFolderNameRowChangeEvent(((UseBarcodeAsFolderNameRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UseBarcodeAsFolderNameRowDeleted != null)) {
                    this.UseBarcodeAsFolderNameRowDeleted(this, new UseBarcodeAsFolderNameRowChangeEvent(((UseBarcodeAsFolderNameRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UseBarcodeAsFolderNameRowDeleting != null)) {
                    this.UseBarcodeAsFolderNameRowDeleting(this, new UseBarcodeAsFolderNameRowChangeEvent(((UseBarcodeAsFolderNameRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUseBarcodeAsFolderNameRow(UseBarcodeAsFolderNameRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UseBarcodeAsFolderNameDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExtractISOImagesToFoldersAndFilesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnAutoBulkRead_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtractISOImagesToFoldersAndFilesDataTable() {
                this.TableName = "ExtractISOImagesToFoldersAndFiles";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExtractISOImagesToFoldersAndFilesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExtractISOImagesToFoldersAndFilesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AutoBulkRead_IdColumn {
                get {
                    return this.columnAutoBulkRead_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtractISOImagesToFoldersAndFilesRow this[int index] {
                get {
                    return ((ExtractISOImagesToFoldersAndFilesRow)(this.Rows[index]));
                }
            }
            
            public event ExtractISOImagesToFoldersAndFilesRowChangeEventHandler ExtractISOImagesToFoldersAndFilesRowChanging;
            
            public event ExtractISOImagesToFoldersAndFilesRowChangeEventHandler ExtractISOImagesToFoldersAndFilesRowChanged;
            
            public event ExtractISOImagesToFoldersAndFilesRowChangeEventHandler ExtractISOImagesToFoldersAndFilesRowDeleting;
            
            public event ExtractISOImagesToFoldersAndFilesRowChangeEventHandler ExtractISOImagesToFoldersAndFilesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExtractISOImagesToFoldersAndFilesRow(ExtractISOImagesToFoldersAndFilesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtractISOImagesToFoldersAndFilesRow AddExtractISOImagesToFoldersAndFilesRow(string Value, AutoBulkReadRow parentAutoBulkReadRowByAutoBulkRead_ExtractISOImagesToFoldersAndFiles) {
                ExtractISOImagesToFoldersAndFilesRow rowExtractISOImagesToFoldersAndFilesRow = ((ExtractISOImagesToFoldersAndFilesRow)(this.NewRow()));
                rowExtractISOImagesToFoldersAndFilesRow.ItemArray = new object[] {
                        Value,
                        parentAutoBulkReadRowByAutoBulkRead_ExtractISOImagesToFoldersAndFiles[0]};
                this.Rows.Add(rowExtractISOImagesToFoldersAndFilesRow);
                return rowExtractISOImagesToFoldersAndFilesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ExtractISOImagesToFoldersAndFilesDataTable cln = ((ExtractISOImagesToFoldersAndFilesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ExtractISOImagesToFoldersAndFilesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnAutoBulkRead_Id = base.Columns["AutoBulkRead_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnAutoBulkRead_Id = new System.Data.DataColumn("AutoBulkRead_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAutoBulkRead_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtractISOImagesToFoldersAndFilesRow NewExtractISOImagesToFoldersAndFilesRow() {
                return ((ExtractISOImagesToFoldersAndFilesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ExtractISOImagesToFoldersAndFilesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ExtractISOImagesToFoldersAndFilesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExtractISOImagesToFoldersAndFilesRowChanged != null)) {
                    this.ExtractISOImagesToFoldersAndFilesRowChanged(this, new ExtractISOImagesToFoldersAndFilesRowChangeEvent(((ExtractISOImagesToFoldersAndFilesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExtractISOImagesToFoldersAndFilesRowChanging != null)) {
                    this.ExtractISOImagesToFoldersAndFilesRowChanging(this, new ExtractISOImagesToFoldersAndFilesRowChangeEvent(((ExtractISOImagesToFoldersAndFilesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExtractISOImagesToFoldersAndFilesRowDeleted != null)) {
                    this.ExtractISOImagesToFoldersAndFilesRowDeleted(this, new ExtractISOImagesToFoldersAndFilesRowChangeEvent(((ExtractISOImagesToFoldersAndFilesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExtractISOImagesToFoldersAndFilesRowDeleting != null)) {
                    this.ExtractISOImagesToFoldersAndFilesRowDeleting(this, new ExtractISOImagesToFoldersAndFilesRowChangeEvent(((ExtractISOImagesToFoldersAndFilesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExtractISOImagesToFoldersAndFilesRow(ExtractISOImagesToFoldersAndFilesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExtractISOImagesToFoldersAndFilesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ImageTypeForAudioTracksDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnAutoBulkRead_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImageTypeForAudioTracksDataTable() {
                this.TableName = "ImageTypeForAudioTracks";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ImageTypeForAudioTracksDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ImageTypeForAudioTracksDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AutoBulkRead_IdColumn {
                get {
                    return this.columnAutoBulkRead_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImageTypeForAudioTracksRow this[int index] {
                get {
                    return ((ImageTypeForAudioTracksRow)(this.Rows[index]));
                }
            }
            
            public event ImageTypeForAudioTracksRowChangeEventHandler ImageTypeForAudioTracksRowChanging;
            
            public event ImageTypeForAudioTracksRowChangeEventHandler ImageTypeForAudioTracksRowChanged;
            
            public event ImageTypeForAudioTracksRowChangeEventHandler ImageTypeForAudioTracksRowDeleting;
            
            public event ImageTypeForAudioTracksRowChangeEventHandler ImageTypeForAudioTracksRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddImageTypeForAudioTracksRow(ImageTypeForAudioTracksRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImageTypeForAudioTracksRow AddImageTypeForAudioTracksRow(string Value, AutoBulkReadRow parentAutoBulkReadRowByAutoBulkRead_ImageTypeForAudioTracks) {
                ImageTypeForAudioTracksRow rowImageTypeForAudioTracksRow = ((ImageTypeForAudioTracksRow)(this.NewRow()));
                rowImageTypeForAudioTracksRow.ItemArray = new object[] {
                        Value,
                        parentAutoBulkReadRowByAutoBulkRead_ImageTypeForAudioTracks[0]};
                this.Rows.Add(rowImageTypeForAudioTracksRow);
                return rowImageTypeForAudioTracksRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ImageTypeForAudioTracksDataTable cln = ((ImageTypeForAudioTracksDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ImageTypeForAudioTracksDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnAutoBulkRead_Id = base.Columns["AutoBulkRead_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnAutoBulkRead_Id = new System.Data.DataColumn("AutoBulkRead_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAutoBulkRead_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("PCM"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImageTypeForAudioTracksRow NewImageTypeForAudioTracksRow() {
                return ((ImageTypeForAudioTracksRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ImageTypeForAudioTracksRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ImageTypeForAudioTracksRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ImageTypeForAudioTracksRowChanged != null)) {
                    this.ImageTypeForAudioTracksRowChanged(this, new ImageTypeForAudioTracksRowChangeEvent(((ImageTypeForAudioTracksRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ImageTypeForAudioTracksRowChanging != null)) {
                    this.ImageTypeForAudioTracksRowChanging(this, new ImageTypeForAudioTracksRowChangeEvent(((ImageTypeForAudioTracksRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ImageTypeForAudioTracksRowDeleted != null)) {
                    this.ImageTypeForAudioTracksRowDeleted(this, new ImageTypeForAudioTracksRowChangeEvent(((ImageTypeForAudioTracksRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ImageTypeForAudioTracksRowDeleting != null)) {
                    this.ImageTypeForAudioTracksRowDeleting(this, new ImageTypeForAudioTracksRowChangeEvent(((ImageTypeForAudioTracksRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveImageTypeForAudioTracksRow(ImageTypeForAudioTracksRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ImageTypeForAudioTracksDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UseISRCAsFilenameForAudioTracksDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnAutoBulkRead_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseISRCAsFilenameForAudioTracksDataTable() {
                this.TableName = "UseISRCAsFilenameForAudioTracks";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UseISRCAsFilenameForAudioTracksDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UseISRCAsFilenameForAudioTracksDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AutoBulkRead_IdColumn {
                get {
                    return this.columnAutoBulkRead_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseISRCAsFilenameForAudioTracksRow this[int index] {
                get {
                    return ((UseISRCAsFilenameForAudioTracksRow)(this.Rows[index]));
                }
            }
            
            public event UseISRCAsFilenameForAudioTracksRowChangeEventHandler UseISRCAsFilenameForAudioTracksRowChanging;
            
            public event UseISRCAsFilenameForAudioTracksRowChangeEventHandler UseISRCAsFilenameForAudioTracksRowChanged;
            
            public event UseISRCAsFilenameForAudioTracksRowChangeEventHandler UseISRCAsFilenameForAudioTracksRowDeleting;
            
            public event UseISRCAsFilenameForAudioTracksRowChangeEventHandler UseISRCAsFilenameForAudioTracksRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUseISRCAsFilenameForAudioTracksRow(UseISRCAsFilenameForAudioTracksRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseISRCAsFilenameForAudioTracksRow AddUseISRCAsFilenameForAudioTracksRow(string Value, AutoBulkReadRow parentAutoBulkReadRowByAutoBulkRead_UseISRCAsFilenameForAudioTracks) {
                UseISRCAsFilenameForAudioTracksRow rowUseISRCAsFilenameForAudioTracksRow = ((UseISRCAsFilenameForAudioTracksRow)(this.NewRow()));
                rowUseISRCAsFilenameForAudioTracksRow.ItemArray = new object[] {
                        Value,
                        parentAutoBulkReadRowByAutoBulkRead_UseISRCAsFilenameForAudioTracks[0]};
                this.Rows.Add(rowUseISRCAsFilenameForAudioTracksRow);
                return rowUseISRCAsFilenameForAudioTracksRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UseISRCAsFilenameForAudioTracksDataTable cln = ((UseISRCAsFilenameForAudioTracksDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UseISRCAsFilenameForAudioTracksDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnAutoBulkRead_Id = base.Columns["AutoBulkRead_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnAutoBulkRead_Id = new System.Data.DataColumn("AutoBulkRead_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAutoBulkRead_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseISRCAsFilenameForAudioTracksRow NewUseISRCAsFilenameForAudioTracksRow() {
                return ((UseISRCAsFilenameForAudioTracksRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UseISRCAsFilenameForAudioTracksRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UseISRCAsFilenameForAudioTracksRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UseISRCAsFilenameForAudioTracksRowChanged != null)) {
                    this.UseISRCAsFilenameForAudioTracksRowChanged(this, new UseISRCAsFilenameForAudioTracksRowChangeEvent(((UseISRCAsFilenameForAudioTracksRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UseISRCAsFilenameForAudioTracksRowChanging != null)) {
                    this.UseISRCAsFilenameForAudioTracksRowChanging(this, new UseISRCAsFilenameForAudioTracksRowChangeEvent(((UseISRCAsFilenameForAudioTracksRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UseISRCAsFilenameForAudioTracksRowDeleted != null)) {
                    this.UseISRCAsFilenameForAudioTracksRowDeleted(this, new UseISRCAsFilenameForAudioTracksRowChangeEvent(((UseISRCAsFilenameForAudioTracksRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UseISRCAsFilenameForAudioTracksRowDeleting != null)) {
                    this.UseISRCAsFilenameForAudioTracksRowDeleting(this, new UseISRCAsFilenameForAudioTracksRowChangeEvent(((UseISRCAsFilenameForAudioTracksRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUseISRCAsFilenameForAudioTracksRow(UseISRCAsFilenameForAudioTracksRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UseISRCAsFilenameForAudioTracksDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PutFailuresToRejectBinDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnAutoBulkRead_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PutFailuresToRejectBinDataTable() {
                this.TableName = "PutFailuresToRejectBin";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PutFailuresToRejectBinDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PutFailuresToRejectBinDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AutoBulkRead_IdColumn {
                get {
                    return this.columnAutoBulkRead_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PutFailuresToRejectBinRow this[int index] {
                get {
                    return ((PutFailuresToRejectBinRow)(this.Rows[index]));
                }
            }
            
            public event PutFailuresToRejectBinRowChangeEventHandler PutFailuresToRejectBinRowChanging;
            
            public event PutFailuresToRejectBinRowChangeEventHandler PutFailuresToRejectBinRowChanged;
            
            public event PutFailuresToRejectBinRowChangeEventHandler PutFailuresToRejectBinRowDeleting;
            
            public event PutFailuresToRejectBinRowChangeEventHandler PutFailuresToRejectBinRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPutFailuresToRejectBinRow(PutFailuresToRejectBinRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PutFailuresToRejectBinRow AddPutFailuresToRejectBinRow(string Value, AutoBulkReadRow parentAutoBulkReadRowByAutoBulkRead_PutFailuresToRejectBin) {
                PutFailuresToRejectBinRow rowPutFailuresToRejectBinRow = ((PutFailuresToRejectBinRow)(this.NewRow()));
                rowPutFailuresToRejectBinRow.ItemArray = new object[] {
                        Value,
                        parentAutoBulkReadRowByAutoBulkRead_PutFailuresToRejectBin[0]};
                this.Rows.Add(rowPutFailuresToRejectBinRow);
                return rowPutFailuresToRejectBinRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PutFailuresToRejectBinDataTable cln = ((PutFailuresToRejectBinDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PutFailuresToRejectBinDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnAutoBulkRead_Id = base.Columns["AutoBulkRead_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnAutoBulkRead_Id = new System.Data.DataColumn("AutoBulkRead_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnAutoBulkRead_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PutFailuresToRejectBinRow NewPutFailuresToRejectBinRow() {
                return ((PutFailuresToRejectBinRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PutFailuresToRejectBinRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PutFailuresToRejectBinRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PutFailuresToRejectBinRowChanged != null)) {
                    this.PutFailuresToRejectBinRowChanged(this, new PutFailuresToRejectBinRowChangeEvent(((PutFailuresToRejectBinRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PutFailuresToRejectBinRowChanging != null)) {
                    this.PutFailuresToRejectBinRowChanging(this, new PutFailuresToRejectBinRowChangeEvent(((PutFailuresToRejectBinRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PutFailuresToRejectBinRowDeleted != null)) {
                    this.PutFailuresToRejectBinRowDeleted(this, new PutFailuresToRejectBinRowChangeEvent(((PutFailuresToRejectBinRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PutFailuresToRejectBinRowDeleting != null)) {
                    this.PutFailuresToRejectBinRowDeleting(this, new PutFailuresToRejectBinRowChangeEvent(((PutFailuresToRejectBinRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePutFailuresToRejectBinRow(PutFailuresToRejectBinRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PutFailuresToRejectBinDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AudioReadSpeedDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnReading_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AudioReadSpeedDataTable() {
                this.TableName = "AudioReadSpeed";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AudioReadSpeedDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AudioReadSpeedDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Reading_IdColumn {
                get {
                    return this.columnReading_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AudioReadSpeedRow this[int index] {
                get {
                    return ((AudioReadSpeedRow)(this.Rows[index]));
                }
            }
            
            public event AudioReadSpeedRowChangeEventHandler AudioReadSpeedRowChanging;
            
            public event AudioReadSpeedRowChangeEventHandler AudioReadSpeedRowChanged;
            
            public event AudioReadSpeedRowChangeEventHandler AudioReadSpeedRowDeleting;
            
            public event AudioReadSpeedRowChangeEventHandler AudioReadSpeedRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAudioReadSpeedRow(AudioReadSpeedRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AudioReadSpeedRow AddAudioReadSpeedRow(string Value, ReadingRow parentReadingRowByReading_AudioReadSpeed) {
                AudioReadSpeedRow rowAudioReadSpeedRow = ((AudioReadSpeedRow)(this.NewRow()));
                rowAudioReadSpeedRow.ItemArray = new object[] {
                        Value,
                        parentReadingRowByReading_AudioReadSpeed[0]};
                this.Rows.Add(rowAudioReadSpeedRow);
                return rowAudioReadSpeedRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                AudioReadSpeedDataTable cln = ((AudioReadSpeedDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new AudioReadSpeedDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnReading_Id = base.Columns["Reading_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnReading_Id = new System.Data.DataColumn("Reading_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnReading_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("Max"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AudioReadSpeedRow NewAudioReadSpeedRow() {
                return ((AudioReadSpeedRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AudioReadSpeedRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(AudioReadSpeedRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AudioReadSpeedRowChanged != null)) {
                    this.AudioReadSpeedRowChanged(this, new AudioReadSpeedRowChangeEvent(((AudioReadSpeedRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AudioReadSpeedRowChanging != null)) {
                    this.AudioReadSpeedRowChanging(this, new AudioReadSpeedRowChangeEvent(((AudioReadSpeedRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AudioReadSpeedRowDeleted != null)) {
                    this.AudioReadSpeedRowDeleted(this, new AudioReadSpeedRowChangeEvent(((AudioReadSpeedRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AudioReadSpeedRowDeleting != null)) {
                    this.AudioReadSpeedRowDeleting(this, new AudioReadSpeedRowChangeEvent(((AudioReadSpeedRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAudioReadSpeedRow(AudioReadSpeedRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AudioReadSpeedDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PreferredReaderDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnReading_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PreferredReaderDataTable() {
                this.TableName = "PreferredReader";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PreferredReaderDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PreferredReaderDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Reading_IdColumn {
                get {
                    return this.columnReading_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PreferredReaderRow this[int index] {
                get {
                    return ((PreferredReaderRow)(this.Rows[index]));
                }
            }
            
            public event PreferredReaderRowChangeEventHandler PreferredReaderRowChanging;
            
            public event PreferredReaderRowChangeEventHandler PreferredReaderRowChanged;
            
            public event PreferredReaderRowChangeEventHandler PreferredReaderRowDeleting;
            
            public event PreferredReaderRowChangeEventHandler PreferredReaderRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPreferredReaderRow(PreferredReaderRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PreferredReaderRow AddPreferredReaderRow(string Value, ReadingRow parentReadingRowByReading_PreferredReader) {
                PreferredReaderRow rowPreferredReaderRow = ((PreferredReaderRow)(this.NewRow()));
                rowPreferredReaderRow.ItemArray = new object[] {
                        Value,
                        parentReadingRowByReading_PreferredReader[0]};
                this.Rows.Add(rowPreferredReaderRow);
                return rowPreferredReaderRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PreferredReaderDataTable cln = ((PreferredReaderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PreferredReaderDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnReading_Id = base.Columns["Reading_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnReading_Id = new System.Data.DataColumn("Reading_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnReading_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("Recorders"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PreferredReaderRow NewPreferredReaderRow() {
                return ((PreferredReaderRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PreferredReaderRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PreferredReaderRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PreferredReaderRowChanged != null)) {
                    this.PreferredReaderRowChanged(this, new PreferredReaderRowChangeEvent(((PreferredReaderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PreferredReaderRowChanging != null)) {
                    this.PreferredReaderRowChanging(this, new PreferredReaderRowChangeEvent(((PreferredReaderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PreferredReaderRowDeleted != null)) {
                    this.PreferredReaderRowDeleted(this, new PreferredReaderRowChangeEvent(((PreferredReaderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PreferredReaderRowDeleting != null)) {
                    this.PreferredReaderRowDeleting(this, new PreferredReaderRowChangeEvent(((PreferredReaderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePreferredReaderRow(PreferredReaderRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PreferredReaderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MediaCodesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnMediaCodes_Id;
            
            private System.Data.DataColumn columnSetting_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodesDataTable() {
                this.TableName = "MediaCodes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MediaCodesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MediaCodesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MediaCodes_IdColumn {
                get {
                    return this.columnMediaCodes_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Setting_IdColumn {
                get {
                    return this.columnSetting_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodesRow this[int index] {
                get {
                    return ((MediaCodesRow)(this.Rows[index]));
                }
            }
            
            public event MediaCodesRowChangeEventHandler MediaCodesRowChanging;
            
            public event MediaCodesRowChangeEventHandler MediaCodesRowChanged;
            
            public event MediaCodesRowChangeEventHandler MediaCodesRowDeleting;
            
            public event MediaCodesRowChangeEventHandler MediaCodesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMediaCodesRow(MediaCodesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodesRow AddMediaCodesRow(SettingRow parentSettingRowBySetting_MediaCodes) {
                MediaCodesRow rowMediaCodesRow = ((MediaCodesRow)(this.NewRow()));
                rowMediaCodesRow.ItemArray = new object[] {
                        null,
                        parentSettingRowBySetting_MediaCodes[0]};
                this.Rows.Add(rowMediaCodesRow);
                return rowMediaCodesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MediaCodesDataTable cln = ((MediaCodesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MediaCodesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMediaCodes_Id = base.Columns["MediaCodes_Id"];
                this.columnSetting_Id = base.Columns["Setting_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMediaCodes_Id = new System.Data.DataColumn("MediaCodes_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMediaCodes_Id);
                this.columnSetting_Id = new System.Data.DataColumn("Setting_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSetting_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnMediaCodes_Id}, true));
                this.columnMediaCodes_Id.AutoIncrement = true;
                this.columnMediaCodes_Id.AllowDBNull = false;
                this.columnMediaCodes_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodesRow NewMediaCodesRow() {
                return ((MediaCodesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MediaCodesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MediaCodesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MediaCodesRowChanged != null)) {
                    this.MediaCodesRowChanged(this, new MediaCodesRowChangeEvent(((MediaCodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MediaCodesRowChanging != null)) {
                    this.MediaCodesRowChanging(this, new MediaCodesRowChangeEvent(((MediaCodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MediaCodesRowDeleted != null)) {
                    this.MediaCodesRowDeleted(this, new MediaCodesRowChangeEvent(((MediaCodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MediaCodesRowDeleting != null)) {
                    this.MediaCodesRowDeleting(this, new MediaCodesRowChangeEvent(((MediaCodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMediaCodesRow(MediaCodesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MediaCodesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UseMediaCodesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnMediaCodes_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseMediaCodesDataTable() {
                this.TableName = "UseMediaCodes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UseMediaCodesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UseMediaCodesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MediaCodes_IdColumn {
                get {
                    return this.columnMediaCodes_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseMediaCodesRow this[int index] {
                get {
                    return ((UseMediaCodesRow)(this.Rows[index]));
                }
            }
            
            public event UseMediaCodesRowChangeEventHandler UseMediaCodesRowChanging;
            
            public event UseMediaCodesRowChangeEventHandler UseMediaCodesRowChanged;
            
            public event UseMediaCodesRowChangeEventHandler UseMediaCodesRowDeleting;
            
            public event UseMediaCodesRowChangeEventHandler UseMediaCodesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUseMediaCodesRow(UseMediaCodesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseMediaCodesRow AddUseMediaCodesRow(string Value, MediaCodesRow parentMediaCodesRowByMediaCodes_UseMediaCodes) {
                UseMediaCodesRow rowUseMediaCodesRow = ((UseMediaCodesRow)(this.NewRow()));
                rowUseMediaCodesRow.ItemArray = new object[] {
                        Value,
                        parentMediaCodesRowByMediaCodes_UseMediaCodes[0]};
                this.Rows.Add(rowUseMediaCodesRow);
                return rowUseMediaCodesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UseMediaCodesDataTable cln = ((UseMediaCodesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UseMediaCodesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnMediaCodes_Id = base.Columns["MediaCodes_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnMediaCodes_Id = new System.Data.DataColumn("MediaCodes_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMediaCodes_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseMediaCodesRow NewUseMediaCodesRow() {
                return ((UseMediaCodesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UseMediaCodesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UseMediaCodesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UseMediaCodesRowChanged != null)) {
                    this.UseMediaCodesRowChanged(this, new UseMediaCodesRowChangeEvent(((UseMediaCodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UseMediaCodesRowChanging != null)) {
                    this.UseMediaCodesRowChanging(this, new UseMediaCodesRowChangeEvent(((UseMediaCodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UseMediaCodesRowDeleted != null)) {
                    this.UseMediaCodesRowDeleted(this, new UseMediaCodesRowChangeEvent(((UseMediaCodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UseMediaCodesRowDeleting != null)) {
                    this.UseMediaCodesRowDeleting(this, new UseMediaCodesRowChangeEvent(((UseMediaCodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUseMediaCodesRow(UseMediaCodesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UseMediaCodesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MediaCodeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnMediaCodes_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodeDataTable() {
                this.TableName = "MediaCode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MediaCodeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MediaCodeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MediaCodes_IdColumn {
                get {
                    return this.columnMediaCodes_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodeRow this[int index] {
                get {
                    return ((MediaCodeRow)(this.Rows[index]));
                }
            }
            
            public event MediaCodeRowChangeEventHandler MediaCodeRowChanging;
            
            public event MediaCodeRowChangeEventHandler MediaCodeRowChanged;
            
            public event MediaCodeRowChangeEventHandler MediaCodeRowDeleting;
            
            public event MediaCodeRowChangeEventHandler MediaCodeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMediaCodeRow(MediaCodeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodeRow AddMediaCodeRow(string Value, MediaCodesRow parentMediaCodesRowByMediaCodes_MediaCode) {
                MediaCodeRow rowMediaCodeRow = ((MediaCodeRow)(this.NewRow()));
                rowMediaCodeRow.ItemArray = new object[] {
                        Value,
                        parentMediaCodesRowByMediaCodes_MediaCode[0]};
                this.Rows.Add(rowMediaCodeRow);
                return rowMediaCodeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MediaCodeDataTable cln = ((MediaCodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MediaCodeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnMediaCodes_Id = base.Columns["MediaCodes_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnMediaCodes_Id = new System.Data.DataColumn("MediaCodes_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMediaCodes_Id);
                this.columnValue.AllowDBNull = false;
                this.columnValue.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodeRow NewMediaCodeRow() {
                return ((MediaCodeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MediaCodeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MediaCodeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MediaCodeRowChanged != null)) {
                    this.MediaCodeRowChanged(this, new MediaCodeRowChangeEvent(((MediaCodeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MediaCodeRowChanging != null)) {
                    this.MediaCodeRowChanging(this, new MediaCodeRowChangeEvent(((MediaCodeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MediaCodeRowDeleted != null)) {
                    this.MediaCodeRowDeleted(this, new MediaCodeRowChangeEvent(((MediaCodeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MediaCodeRowDeleting != null)) {
                    this.MediaCodeRowDeleting(this, new MediaCodeRowChangeEvent(((MediaCodeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMediaCodeRow(MediaCodeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MediaCodeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClearAllCodesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnMediaCodes_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClearAllCodesDataTable() {
                this.TableName = "ClearAllCodes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClearAllCodesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ClearAllCodesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MediaCodes_IdColumn {
                get {
                    return this.columnMediaCodes_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClearAllCodesRow this[int index] {
                get {
                    return ((ClearAllCodesRow)(this.Rows[index]));
                }
            }
            
            public event ClearAllCodesRowChangeEventHandler ClearAllCodesRowChanging;
            
            public event ClearAllCodesRowChangeEventHandler ClearAllCodesRowChanged;
            
            public event ClearAllCodesRowChangeEventHandler ClearAllCodesRowDeleting;
            
            public event ClearAllCodesRowChangeEventHandler ClearAllCodesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClearAllCodesRow(ClearAllCodesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClearAllCodesRow AddClearAllCodesRow(MediaCodesRow parentMediaCodesRowByMediaCodes_ClearAllCodes) {
                ClearAllCodesRow rowClearAllCodesRow = ((ClearAllCodesRow)(this.NewRow()));
                rowClearAllCodesRow.ItemArray = new object[] {
                        parentMediaCodesRowByMediaCodes_ClearAllCodes[0]};
                this.Rows.Add(rowClearAllCodesRow);
                return rowClearAllCodesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ClearAllCodesDataTable cln = ((ClearAllCodesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ClearAllCodesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMediaCodes_Id = base.Columns["MediaCodes_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMediaCodes_Id = new System.Data.DataColumn("MediaCodes_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMediaCodes_Id);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClearAllCodesRow NewClearAllCodesRow() {
                return ((ClearAllCodesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ClearAllCodesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ClearAllCodesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClearAllCodesRowChanged != null)) {
                    this.ClearAllCodesRowChanged(this, new ClearAllCodesRowChangeEvent(((ClearAllCodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClearAllCodesRowChanging != null)) {
                    this.ClearAllCodesRowChanging(this, new ClearAllCodesRowChangeEvent(((ClearAllCodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClearAllCodesRowDeleted != null)) {
                    this.ClearAllCodesRowDeleted(this, new ClearAllCodesRowChangeEvent(((ClearAllCodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClearAllCodesRowDeleting != null)) {
                    this.ClearAllCodesRowDeleting(this, new ClearAllCodesRowChangeEvent(((ClearAllCodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClearAllCodesRow(ClearAllCodesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClearAllCodesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class KioskModeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnKioskMode_Id;
            
            private System.Data.DataColumn columnSetting_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KioskModeDataTable() {
                this.TableName = "KioskMode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KioskModeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected KioskModeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn KioskMode_IdColumn {
                get {
                    return this.columnKioskMode_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Setting_IdColumn {
                get {
                    return this.columnSetting_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KioskModeRow this[int index] {
                get {
                    return ((KioskModeRow)(this.Rows[index]));
                }
            }
            
            public event KioskModeRowChangeEventHandler KioskModeRowChanging;
            
            public event KioskModeRowChangeEventHandler KioskModeRowChanged;
            
            public event KioskModeRowChangeEventHandler KioskModeRowDeleting;
            
            public event KioskModeRowChangeEventHandler KioskModeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddKioskModeRow(KioskModeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KioskModeRow AddKioskModeRow(SettingRow parentSettingRowBySetting_KioskMode) {
                KioskModeRow rowKioskModeRow = ((KioskModeRow)(this.NewRow()));
                rowKioskModeRow.ItemArray = new object[] {
                        null,
                        parentSettingRowBySetting_KioskMode[0]};
                this.Rows.Add(rowKioskModeRow);
                return rowKioskModeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                KioskModeDataTable cln = ((KioskModeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new KioskModeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKioskMode_Id = base.Columns["KioskMode_Id"];
                this.columnSetting_Id = base.Columns["Setting_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKioskMode_Id = new System.Data.DataColumn("KioskMode_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnKioskMode_Id);
                this.columnSetting_Id = new System.Data.DataColumn("Setting_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSetting_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnKioskMode_Id}, true));
                this.columnKioskMode_Id.AutoIncrement = true;
                this.columnKioskMode_Id.AllowDBNull = false;
                this.columnKioskMode_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KioskModeRow NewKioskModeRow() {
                return ((KioskModeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new KioskModeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(KioskModeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.KioskModeRowChanged != null)) {
                    this.KioskModeRowChanged(this, new KioskModeRowChangeEvent(((KioskModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.KioskModeRowChanging != null)) {
                    this.KioskModeRowChanging(this, new KioskModeRowChangeEvent(((KioskModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.KioskModeRowDeleted != null)) {
                    this.KioskModeRowDeleted(this, new KioskModeRowChangeEvent(((KioskModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.KioskModeRowDeleting != null)) {
                    this.KioskModeRowDeleting(this, new KioskModeRowChangeEvent(((KioskModeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveKioskModeRow(KioskModeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "KioskModeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RecoverOrdersDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnKioskMode_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecoverOrdersDataTable() {
                this.TableName = "RecoverOrders";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RecoverOrdersDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RecoverOrdersDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn KioskMode_IdColumn {
                get {
                    return this.columnKioskMode_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecoverOrdersRow this[int index] {
                get {
                    return ((RecoverOrdersRow)(this.Rows[index]));
                }
            }
            
            public event RecoverOrdersRowChangeEventHandler RecoverOrdersRowChanging;
            
            public event RecoverOrdersRowChangeEventHandler RecoverOrdersRowChanged;
            
            public event RecoverOrdersRowChangeEventHandler RecoverOrdersRowDeleting;
            
            public event RecoverOrdersRowChangeEventHandler RecoverOrdersRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRecoverOrdersRow(RecoverOrdersRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecoverOrdersRow AddRecoverOrdersRow(string Value, KioskModeRow parentKioskModeRowByKioskMode_RecoverOrders) {
                RecoverOrdersRow rowRecoverOrdersRow = ((RecoverOrdersRow)(this.NewRow()));
                rowRecoverOrdersRow.ItemArray = new object[] {
                        Value,
                        parentKioskModeRowByKioskMode_RecoverOrders[0]};
                this.Rows.Add(rowRecoverOrdersRow);
                return rowRecoverOrdersRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RecoverOrdersDataTable cln = ((RecoverOrdersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RecoverOrdersDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnKioskMode_Id = base.Columns["KioskMode_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnKioskMode_Id = new System.Data.DataColumn("KioskMode_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnKioskMode_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("true"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecoverOrdersRow NewRecoverOrdersRow() {
                return ((RecoverOrdersRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RecoverOrdersRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RecoverOrdersRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RecoverOrdersRowChanged != null)) {
                    this.RecoverOrdersRowChanged(this, new RecoverOrdersRowChangeEvent(((RecoverOrdersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RecoverOrdersRowChanging != null)) {
                    this.RecoverOrdersRowChanging(this, new RecoverOrdersRowChangeEvent(((RecoverOrdersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RecoverOrdersRowDeleted != null)) {
                    this.RecoverOrdersRowDeleted(this, new RecoverOrdersRowChangeEvent(((RecoverOrdersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RecoverOrdersRowDeleting != null)) {
                    this.RecoverOrdersRowDeleting(this, new RecoverOrdersRowChangeEvent(((RecoverOrdersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRecoverOrdersRow(RecoverOrdersRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RecoverOrdersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RunNoPrinterDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnKioskMode_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RunNoPrinterDataTable() {
                this.TableName = "RunNoPrinter";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RunNoPrinterDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RunNoPrinterDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn KioskMode_IdColumn {
                get {
                    return this.columnKioskMode_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RunNoPrinterRow this[int index] {
                get {
                    return ((RunNoPrinterRow)(this.Rows[index]));
                }
            }
            
            public event RunNoPrinterRowChangeEventHandler RunNoPrinterRowChanging;
            
            public event RunNoPrinterRowChangeEventHandler RunNoPrinterRowChanged;
            
            public event RunNoPrinterRowChangeEventHandler RunNoPrinterRowDeleting;
            
            public event RunNoPrinterRowChangeEventHandler RunNoPrinterRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRunNoPrinterRow(RunNoPrinterRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RunNoPrinterRow AddRunNoPrinterRow(string Value, KioskModeRow parentKioskModeRowByKioskMode_RunNoPrinter) {
                RunNoPrinterRow rowRunNoPrinterRow = ((RunNoPrinterRow)(this.NewRow()));
                rowRunNoPrinterRow.ItemArray = new object[] {
                        Value,
                        parentKioskModeRowByKioskMode_RunNoPrinter[0]};
                this.Rows.Add(rowRunNoPrinterRow);
                return rowRunNoPrinterRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                RunNoPrinterDataTable cln = ((RunNoPrinterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new RunNoPrinterDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnKioskMode_Id = base.Columns["KioskMode_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnKioskMode_Id = new System.Data.DataColumn("KioskMode_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnKioskMode_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RunNoPrinterRow NewRunNoPrinterRow() {
                return ((RunNoPrinterRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new RunNoPrinterRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(RunNoPrinterRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RunNoPrinterRowChanged != null)) {
                    this.RunNoPrinterRowChanged(this, new RunNoPrinterRowChangeEvent(((RunNoPrinterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RunNoPrinterRowChanging != null)) {
                    this.RunNoPrinterRowChanging(this, new RunNoPrinterRowChangeEvent(((RunNoPrinterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RunNoPrinterRowDeleted != null)) {
                    this.RunNoPrinterRowDeleted(this, new RunNoPrinterRowChangeEvent(((RunNoPrinterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RunNoPrinterRowDeleting != null)) {
                    this.RunNoPrinterRowDeleting(this, new RunNoPrinterRowChangeEvent(((RunNoPrinterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRunNoPrinterRow(RunNoPrinterRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RunNoPrinterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AutoloaderRecoveryDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnKioskMode_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderRecoveryDataTable() {
                this.TableName = "AutoloaderRecovery";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AutoloaderRecoveryDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AutoloaderRecoveryDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn KioskMode_IdColumn {
                get {
                    return this.columnKioskMode_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderRecoveryRow this[int index] {
                get {
                    return ((AutoloaderRecoveryRow)(this.Rows[index]));
                }
            }
            
            public event AutoloaderRecoveryRowChangeEventHandler AutoloaderRecoveryRowChanging;
            
            public event AutoloaderRecoveryRowChangeEventHandler AutoloaderRecoveryRowChanged;
            
            public event AutoloaderRecoveryRowChangeEventHandler AutoloaderRecoveryRowDeleting;
            
            public event AutoloaderRecoveryRowChangeEventHandler AutoloaderRecoveryRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAutoloaderRecoveryRow(AutoloaderRecoveryRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderRecoveryRow AddAutoloaderRecoveryRow(string Value, KioskModeRow parentKioskModeRowByKioskMode_AutoloaderRecovery) {
                AutoloaderRecoveryRow rowAutoloaderRecoveryRow = ((AutoloaderRecoveryRow)(this.NewRow()));
                rowAutoloaderRecoveryRow.ItemArray = new object[] {
                        Value,
                        parentKioskModeRowByKioskMode_AutoloaderRecovery[0]};
                this.Rows.Add(rowAutoloaderRecoveryRow);
                return rowAutoloaderRecoveryRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                AutoloaderRecoveryDataTable cln = ((AutoloaderRecoveryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new AutoloaderRecoveryDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnKioskMode_Id = base.Columns["KioskMode_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnKioskMode_Id = new System.Data.DataColumn("KioskMode_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnKioskMode_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("Retry"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderRecoveryRow NewAutoloaderRecoveryRow() {
                return ((AutoloaderRecoveryRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AutoloaderRecoveryRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(AutoloaderRecoveryRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AutoloaderRecoveryRowChanged != null)) {
                    this.AutoloaderRecoveryRowChanged(this, new AutoloaderRecoveryRowChangeEvent(((AutoloaderRecoveryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AutoloaderRecoveryRowChanging != null)) {
                    this.AutoloaderRecoveryRowChanging(this, new AutoloaderRecoveryRowChangeEvent(((AutoloaderRecoveryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AutoloaderRecoveryRowDeleted != null)) {
                    this.AutoloaderRecoveryRowDeleted(this, new AutoloaderRecoveryRowChangeEvent(((AutoloaderRecoveryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AutoloaderRecoveryRowDeleting != null)) {
                    this.AutoloaderRecoveryRowDeleting(this, new AutoloaderRecoveryRowChangeEvent(((AutoloaderRecoveryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAutoloaderRecoveryRow(AutoloaderRecoveryRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AutoloaderRecoveryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrinterRecoveryDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnKioskMode_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrinterRecoveryDataTable() {
                this.TableName = "PrinterRecovery";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrinterRecoveryDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PrinterRecoveryDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn KioskMode_IdColumn {
                get {
                    return this.columnKioskMode_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrinterRecoveryRow this[int index] {
                get {
                    return ((PrinterRecoveryRow)(this.Rows[index]));
                }
            }
            
            public event PrinterRecoveryRowChangeEventHandler PrinterRecoveryRowChanging;
            
            public event PrinterRecoveryRowChangeEventHandler PrinterRecoveryRowChanged;
            
            public event PrinterRecoveryRowChangeEventHandler PrinterRecoveryRowDeleting;
            
            public event PrinterRecoveryRowChangeEventHandler PrinterRecoveryRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrinterRecoveryRow(PrinterRecoveryRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrinterRecoveryRow AddPrinterRecoveryRow(string Value, KioskModeRow parentKioskModeRowByKioskMode_PrinterRecovery) {
                PrinterRecoveryRow rowPrinterRecoveryRow = ((PrinterRecoveryRow)(this.NewRow()));
                rowPrinterRecoveryRow.ItemArray = new object[] {
                        Value,
                        parentKioskModeRowByKioskMode_PrinterRecovery[0]};
                this.Rows.Add(rowPrinterRecoveryRow);
                return rowPrinterRecoveryRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PrinterRecoveryDataTable cln = ((PrinterRecoveryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PrinterRecoveryDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnKioskMode_Id = base.Columns["KioskMode_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnKioskMode_Id = new System.Data.DataColumn("KioskMode_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnKioskMode_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("Retry"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrinterRecoveryRow NewPrinterRecoveryRow() {
                return ((PrinterRecoveryRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PrinterRecoveryRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PrinterRecoveryRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrinterRecoveryRowChanged != null)) {
                    this.PrinterRecoveryRowChanged(this, new PrinterRecoveryRowChangeEvent(((PrinterRecoveryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrinterRecoveryRowChanging != null)) {
                    this.PrinterRecoveryRowChanging(this, new PrinterRecoveryRowChangeEvent(((PrinterRecoveryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrinterRecoveryRowDeleted != null)) {
                    this.PrinterRecoveryRowDeleted(this, new PrinterRecoveryRowChangeEvent(((PrinterRecoveryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrinterRecoveryRowDeleting != null)) {
                    this.PrinterRecoveryRowDeleting(this, new PrinterRecoveryRowChangeEvent(((PrinterRecoveryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrinterRecoveryRow(PrinterRecoveryRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrinterRecoveryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AutoRespondOnStartupDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnKioskMode_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoRespondOnStartupDataTable() {
                this.TableName = "AutoRespondOnStartup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AutoRespondOnStartupDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AutoRespondOnStartupDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn KioskMode_IdColumn {
                get {
                    return this.columnKioskMode_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoRespondOnStartupRow this[int index] {
                get {
                    return ((AutoRespondOnStartupRow)(this.Rows[index]));
                }
            }
            
            public event AutoRespondOnStartupRowChangeEventHandler AutoRespondOnStartupRowChanging;
            
            public event AutoRespondOnStartupRowChangeEventHandler AutoRespondOnStartupRowChanged;
            
            public event AutoRespondOnStartupRowChangeEventHandler AutoRespondOnStartupRowDeleting;
            
            public event AutoRespondOnStartupRowChangeEventHandler AutoRespondOnStartupRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAutoRespondOnStartupRow(AutoRespondOnStartupRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoRespondOnStartupRow AddAutoRespondOnStartupRow(string Value, KioskModeRow parentKioskModeRowByKioskMode_AutoRespondOnStartup) {
                AutoRespondOnStartupRow rowAutoRespondOnStartupRow = ((AutoRespondOnStartupRow)(this.NewRow()));
                rowAutoRespondOnStartupRow.ItemArray = new object[] {
                        Value,
                        parentKioskModeRowByKioskMode_AutoRespondOnStartup[0]};
                this.Rows.Add(rowAutoRespondOnStartupRow);
                return rowAutoRespondOnStartupRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                AutoRespondOnStartupDataTable cln = ((AutoRespondOnStartupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new AutoRespondOnStartupDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnValue = base.Columns["Value"];
                this.columnKioskMode_Id = base.Columns["KioskMode_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnValue);
                this.columnKioskMode_Id = new System.Data.DataColumn("KioskMode_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnKioskMode_Id);
                this.columnValue.Namespace = "";
                this.columnValue.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoRespondOnStartupRow NewAutoRespondOnStartupRow() {
                return ((AutoRespondOnStartupRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new AutoRespondOnStartupRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(AutoRespondOnStartupRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AutoRespondOnStartupRowChanged != null)) {
                    this.AutoRespondOnStartupRowChanged(this, new AutoRespondOnStartupRowChangeEvent(((AutoRespondOnStartupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AutoRespondOnStartupRowChanging != null)) {
                    this.AutoRespondOnStartupRowChanging(this, new AutoRespondOnStartupRowChangeEvent(((AutoRespondOnStartupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AutoRespondOnStartupRowDeleted != null)) {
                    this.AutoRespondOnStartupRowDeleted(this, new AutoRespondOnStartupRowChangeEvent(((AutoRespondOnStartupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AutoRespondOnStartupRowDeleting != null)) {
                    this.AutoRespondOnStartupRowDeleting(this, new AutoRespondOnStartupRowChangeEvent(((AutoRespondOnStartupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAutoRespondOnStartupRow(AutoRespondOnStartupRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AutoRespondOnStartupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PauseServerDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnPauseServer_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PauseServerDataTable() {
                this.TableName = "PauseServer";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PauseServerDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PauseServerDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PauseServer_IdColumn {
                get {
                    return this.columnPauseServer_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PauseServerRow this[int index] {
                get {
                    return ((PauseServerRow)(this.Rows[index]));
                }
            }
            
            public event PauseServerRowChangeEventHandler PauseServerRowChanging;
            
            public event PauseServerRowChangeEventHandler PauseServerRowChanged;
            
            public event PauseServerRowChangeEventHandler PauseServerRowDeleting;
            
            public event PauseServerRowChangeEventHandler PauseServerRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPauseServerRow(PauseServerRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PauseServerRow AddPauseServerRow() {
                PauseServerRow rowPauseServerRow = ((PauseServerRow)(this.NewRow()));
                rowPauseServerRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowPauseServerRow);
                return rowPauseServerRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PauseServerDataTable cln = ((PauseServerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PauseServerDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPauseServer_Id = base.Columns["PauseServer_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPauseServer_Id = new System.Data.DataColumn("PauseServer_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnPauseServer_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnPauseServer_Id}, true));
                this.columnPauseServer_Id.AutoIncrement = true;
                this.columnPauseServer_Id.AllowDBNull = false;
                this.columnPauseServer_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PauseServerRow NewPauseServerRow() {
                return ((PauseServerRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PauseServerRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PauseServerRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PauseServerRowChanged != null)) {
                    this.PauseServerRowChanged(this, new PauseServerRowChangeEvent(((PauseServerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PauseServerRowChanging != null)) {
                    this.PauseServerRowChanging(this, new PauseServerRowChangeEvent(((PauseServerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PauseServerRowDeleted != null)) {
                    this.PauseServerRowDeleted(this, new PauseServerRowChangeEvent(((PauseServerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PauseServerRowDeleting != null)) {
                    this.PauseServerRowDeleting(this, new PauseServerRowChangeEvent(((PauseServerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePauseServerRow(PauseServerRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PauseServerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServerPassword7DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnEncodedPassword;
            
            private System.Data.DataColumn columnEncodeNumber;
            
            private System.Data.DataColumn columnPauseServer_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword7DataTable() {
                this.TableName = "ServerPassword7";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerPassword7DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServerPassword7DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EncodedPasswordColumn {
                get {
                    return this.columnEncodedPassword;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EncodeNumberColumn {
                get {
                    return this.columnEncodeNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PauseServer_IdColumn {
                get {
                    return this.columnPauseServer_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword7Row this[int index] {
                get {
                    return ((ServerPassword7Row)(this.Rows[index]));
                }
            }
            
            public event ServerPassword7RowChangeEventHandler ServerPassword7RowChanging;
            
            public event ServerPassword7RowChangeEventHandler ServerPassword7RowChanged;
            
            public event ServerPassword7RowChangeEventHandler ServerPassword7RowDeleting;
            
            public event ServerPassword7RowChangeEventHandler ServerPassword7RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServerPassword7Row(ServerPassword7Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword7Row AddServerPassword7Row(string EncodedPassword, string EncodeNumber, PauseServerRow parentPauseServerRowByPauseServer_ServerPassword7) {
                ServerPassword7Row rowServerPassword7Row = ((ServerPassword7Row)(this.NewRow()));
                rowServerPassword7Row.ItemArray = new object[] {
                        EncodedPassword,
                        EncodeNumber,
                        parentPauseServerRowByPauseServer_ServerPassword7[0]};
                this.Rows.Add(rowServerPassword7Row);
                return rowServerPassword7Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ServerPassword7DataTable cln = ((ServerPassword7DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ServerPassword7DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEncodedPassword = base.Columns["EncodedPassword"];
                this.columnEncodeNumber = base.Columns["EncodeNumber"];
                this.columnPauseServer_Id = base.Columns["PauseServer_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEncodedPassword = new System.Data.DataColumn("EncodedPassword", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEncodedPassword);
                this.columnEncodeNumber = new System.Data.DataColumn("EncodeNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEncodeNumber);
                this.columnPauseServer_Id = new System.Data.DataColumn("PauseServer_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnPauseServer_Id);
                this.columnEncodedPassword.AllowDBNull = false;
                this.columnEncodedPassword.Namespace = "";
                this.columnEncodeNumber.Namespace = "";
                this.columnEncodeNumber.DefaultValue = ((string)("7"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword7Row NewServerPassword7Row() {
                return ((ServerPassword7Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ServerPassword7Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ServerPassword7Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerPassword7RowChanged != null)) {
                    this.ServerPassword7RowChanged(this, new ServerPassword7RowChangeEvent(((ServerPassword7Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerPassword7RowChanging != null)) {
                    this.ServerPassword7RowChanging(this, new ServerPassword7RowChangeEvent(((ServerPassword7Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerPassword7RowDeleted != null)) {
                    this.ServerPassword7RowDeleted(this, new ServerPassword7RowChangeEvent(((ServerPassword7Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerPassword7RowDeleting != null)) {
                    this.ServerPassword7RowDeleting(this, new ServerPassword7RowChangeEvent(((ServerPassword7Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServerPassword7Row(ServerPassword7Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServerPassword7DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ResumeServerDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnResumeServer_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResumeServerDataTable() {
                this.TableName = "ResumeServer";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ResumeServerDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ResumeServerDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ResumeServer_IdColumn {
                get {
                    return this.columnResumeServer_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResumeServerRow this[int index] {
                get {
                    return ((ResumeServerRow)(this.Rows[index]));
                }
            }
            
            public event ResumeServerRowChangeEventHandler ResumeServerRowChanging;
            
            public event ResumeServerRowChangeEventHandler ResumeServerRowChanged;
            
            public event ResumeServerRowChangeEventHandler ResumeServerRowDeleting;
            
            public event ResumeServerRowChangeEventHandler ResumeServerRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddResumeServerRow(ResumeServerRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResumeServerRow AddResumeServerRow() {
                ResumeServerRow rowResumeServerRow = ((ResumeServerRow)(this.NewRow()));
                rowResumeServerRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowResumeServerRow);
                return rowResumeServerRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ResumeServerDataTable cln = ((ResumeServerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ResumeServerDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnResumeServer_Id = base.Columns["ResumeServer_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnResumeServer_Id = new System.Data.DataColumn("ResumeServer_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnResumeServer_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnResumeServer_Id}, true));
                this.columnResumeServer_Id.AutoIncrement = true;
                this.columnResumeServer_Id.AllowDBNull = false;
                this.columnResumeServer_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResumeServerRow NewResumeServerRow() {
                return ((ResumeServerRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ResumeServerRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ResumeServerRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ResumeServerRowChanged != null)) {
                    this.ResumeServerRowChanged(this, new ResumeServerRowChangeEvent(((ResumeServerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ResumeServerRowChanging != null)) {
                    this.ResumeServerRowChanging(this, new ResumeServerRowChangeEvent(((ResumeServerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ResumeServerRowDeleted != null)) {
                    this.ResumeServerRowDeleted(this, new ResumeServerRowChangeEvent(((ResumeServerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ResumeServerRowDeleting != null)) {
                    this.ResumeServerRowDeleting(this, new ResumeServerRowChangeEvent(((ResumeServerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveResumeServerRow(ResumeServerRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ResumeServerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServerPassword8DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnEncodedPassword;
            
            private System.Data.DataColumn columnEncodeNumber;
            
            private System.Data.DataColumn columnResumeServer_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword8DataTable() {
                this.TableName = "ServerPassword8";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerPassword8DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServerPassword8DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EncodedPasswordColumn {
                get {
                    return this.columnEncodedPassword;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EncodeNumberColumn {
                get {
                    return this.columnEncodeNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ResumeServer_IdColumn {
                get {
                    return this.columnResumeServer_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword8Row this[int index] {
                get {
                    return ((ServerPassword8Row)(this.Rows[index]));
                }
            }
            
            public event ServerPassword8RowChangeEventHandler ServerPassword8RowChanging;
            
            public event ServerPassword8RowChangeEventHandler ServerPassword8RowChanged;
            
            public event ServerPassword8RowChangeEventHandler ServerPassword8RowDeleting;
            
            public event ServerPassword8RowChangeEventHandler ServerPassword8RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServerPassword8Row(ServerPassword8Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword8Row AddServerPassword8Row(string EncodedPassword, string EncodeNumber, ResumeServerRow parentResumeServerRowByResumeServer_ServerPassword8) {
                ServerPassword8Row rowServerPassword8Row = ((ServerPassword8Row)(this.NewRow()));
                rowServerPassword8Row.ItemArray = new object[] {
                        EncodedPassword,
                        EncodeNumber,
                        parentResumeServerRowByResumeServer_ServerPassword8[0]};
                this.Rows.Add(rowServerPassword8Row);
                return rowServerPassword8Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ServerPassword8DataTable cln = ((ServerPassword8DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ServerPassword8DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEncodedPassword = base.Columns["EncodedPassword"];
                this.columnEncodeNumber = base.Columns["EncodeNumber"];
                this.columnResumeServer_Id = base.Columns["ResumeServer_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEncodedPassword = new System.Data.DataColumn("EncodedPassword", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEncodedPassword);
                this.columnEncodeNumber = new System.Data.DataColumn("EncodeNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEncodeNumber);
                this.columnResumeServer_Id = new System.Data.DataColumn("ResumeServer_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnResumeServer_Id);
                this.columnEncodedPassword.AllowDBNull = false;
                this.columnEncodedPassword.Namespace = "";
                this.columnEncodeNumber.Namespace = "";
                this.columnEncodeNumber.DefaultValue = ((string)("7"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword8Row NewServerPassword8Row() {
                return ((ServerPassword8Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ServerPassword8Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ServerPassword8Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerPassword8RowChanged != null)) {
                    this.ServerPassword8RowChanged(this, new ServerPassword8RowChangeEvent(((ServerPassword8Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerPassword8RowChanging != null)) {
                    this.ServerPassword8RowChanging(this, new ServerPassword8RowChangeEvent(((ServerPassword8Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerPassword8RowDeleted != null)) {
                    this.ServerPassword8RowDeleted(this, new ServerPassword8RowChangeEvent(((ServerPassword8Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerPassword8RowDeleting != null)) {
                    this.ServerPassword8RowDeleting(this, new ServerPassword8RowChangeEvent(((ServerPassword8Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServerPassword8Row(ServerPassword8Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServerPassword8DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StopServerDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnAbortRecordingsInProcess;
            
            private System.Data.DataColumn columnStopServer_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopServerDataTable() {
                this.TableName = "StopServer";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StopServerDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StopServerDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AbortRecordingsInProcessColumn {
                get {
                    return this.columnAbortRecordingsInProcess;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StopServer_IdColumn {
                get {
                    return this.columnStopServer_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopServerRow this[int index] {
                get {
                    return ((StopServerRow)(this.Rows[index]));
                }
            }
            
            public event StopServerRowChangeEventHandler StopServerRowChanging;
            
            public event StopServerRowChangeEventHandler StopServerRowChanged;
            
            public event StopServerRowChangeEventHandler StopServerRowDeleting;
            
            public event StopServerRowChangeEventHandler StopServerRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStopServerRow(StopServerRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopServerRow AddStopServerRow(string AbortRecordingsInProcess) {
                StopServerRow rowStopServerRow = ((StopServerRow)(this.NewRow()));
                rowStopServerRow.ItemArray = new object[] {
                        AbortRecordingsInProcess,
                        null};
                this.Rows.Add(rowStopServerRow);
                return rowStopServerRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                StopServerDataTable cln = ((StopServerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new StopServerDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAbortRecordingsInProcess = base.Columns["AbortRecordingsInProcess"];
                this.columnStopServer_Id = base.Columns["StopServer_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAbortRecordingsInProcess = new System.Data.DataColumn("AbortRecordingsInProcess", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAbortRecordingsInProcess);
                this.columnStopServer_Id = new System.Data.DataColumn("StopServer_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnStopServer_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnStopServer_Id}, true));
                this.columnAbortRecordingsInProcess.Namespace = "";
                this.columnAbortRecordingsInProcess.DefaultValue = ((string)("true"));
                this.columnStopServer_Id.AutoIncrement = true;
                this.columnStopServer_Id.AllowDBNull = false;
                this.columnStopServer_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopServerRow NewStopServerRow() {
                return ((StopServerRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new StopServerRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(StopServerRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StopServerRowChanged != null)) {
                    this.StopServerRowChanged(this, new StopServerRowChangeEvent(((StopServerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StopServerRowChanging != null)) {
                    this.StopServerRowChanging(this, new StopServerRowChangeEvent(((StopServerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StopServerRowDeleted != null)) {
                    this.StopServerRowDeleted(this, new StopServerRowChangeEvent(((StopServerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StopServerRowDeleting != null)) {
                    this.StopServerRowDeleting(this, new StopServerRowChangeEvent(((StopServerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStopServerRow(StopServerRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StopServerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServerPassword9DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnEncodedPassword;
            
            private System.Data.DataColumn columnEncodeNumber;
            
            private System.Data.DataColumn columnStopServer_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword9DataTable() {
                this.TableName = "ServerPassword9";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerPassword9DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServerPassword9DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EncodedPasswordColumn {
                get {
                    return this.columnEncodedPassword;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EncodeNumberColumn {
                get {
                    return this.columnEncodeNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StopServer_IdColumn {
                get {
                    return this.columnStopServer_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword9Row this[int index] {
                get {
                    return ((ServerPassword9Row)(this.Rows[index]));
                }
            }
            
            public event ServerPassword9RowChangeEventHandler ServerPassword9RowChanging;
            
            public event ServerPassword9RowChangeEventHandler ServerPassword9RowChanged;
            
            public event ServerPassword9RowChangeEventHandler ServerPassword9RowDeleting;
            
            public event ServerPassword9RowChangeEventHandler ServerPassword9RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServerPassword9Row(ServerPassword9Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword9Row AddServerPassword9Row(string EncodedPassword, string EncodeNumber, StopServerRow parentStopServerRowByStopServer_ServerPassword9) {
                ServerPassword9Row rowServerPassword9Row = ((ServerPassword9Row)(this.NewRow()));
                rowServerPassword9Row.ItemArray = new object[] {
                        EncodedPassword,
                        EncodeNumber,
                        parentStopServerRowByStopServer_ServerPassword9[1]};
                this.Rows.Add(rowServerPassword9Row);
                return rowServerPassword9Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ServerPassword9DataTable cln = ((ServerPassword9DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ServerPassword9DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEncodedPassword = base.Columns["EncodedPassword"];
                this.columnEncodeNumber = base.Columns["EncodeNumber"];
                this.columnStopServer_Id = base.Columns["StopServer_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEncodedPassword = new System.Data.DataColumn("EncodedPassword", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEncodedPassword);
                this.columnEncodeNumber = new System.Data.DataColumn("EncodeNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEncodeNumber);
                this.columnStopServer_Id = new System.Data.DataColumn("StopServer_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnStopServer_Id);
                this.columnEncodedPassword.AllowDBNull = false;
                this.columnEncodedPassword.Namespace = "";
                this.columnEncodeNumber.Namespace = "";
                this.columnEncodeNumber.DefaultValue = ((string)("7"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword9Row NewServerPassword9Row() {
                return ((ServerPassword9Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ServerPassword9Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ServerPassword9Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerPassword9RowChanged != null)) {
                    this.ServerPassword9RowChanged(this, new ServerPassword9RowChangeEvent(((ServerPassword9Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerPassword9RowChanging != null)) {
                    this.ServerPassword9RowChanging(this, new ServerPassword9RowChangeEvent(((ServerPassword9Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerPassword9RowDeleted != null)) {
                    this.ServerPassword9RowDeleted(this, new ServerPassword9RowChangeEvent(((ServerPassword9Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerPassword9RowDeleting != null)) {
                    this.ServerPassword9RowDeleting(this, new ServerPassword9RowChangeEvent(((ServerPassword9Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServerPassword9Row(ServerPassword9Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServerPassword9DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FlashUploadDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDevice;
            
            private System.Data.DataColumn columnFilepath;
            
            private System.Data.DataColumn columnFlashUpload_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlashUploadDataTable() {
                this.TableName = "FlashUpload";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FlashUploadDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FlashUploadDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DeviceColumn {
                get {
                    return this.columnDevice;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FilepathColumn {
                get {
                    return this.columnFilepath;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FlashUpload_IdColumn {
                get {
                    return this.columnFlashUpload_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlashUploadRow this[int index] {
                get {
                    return ((FlashUploadRow)(this.Rows[index]));
                }
            }
            
            public event FlashUploadRowChangeEventHandler FlashUploadRowChanging;
            
            public event FlashUploadRowChangeEventHandler FlashUploadRowChanged;
            
            public event FlashUploadRowChangeEventHandler FlashUploadRowDeleting;
            
            public event FlashUploadRowChangeEventHandler FlashUploadRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFlashUploadRow(FlashUploadRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlashUploadRow AddFlashUploadRow(string Device, string Filepath) {
                FlashUploadRow rowFlashUploadRow = ((FlashUploadRow)(this.NewRow()));
                rowFlashUploadRow.ItemArray = new object[] {
                        Device,
                        Filepath,
                        null};
                this.Rows.Add(rowFlashUploadRow);
                return rowFlashUploadRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FlashUploadDataTable cln = ((FlashUploadDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FlashUploadDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDevice = base.Columns["Device"];
                this.columnFilepath = base.Columns["Filepath"];
                this.columnFlashUpload_Id = base.Columns["FlashUpload_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDevice = new System.Data.DataColumn("Device", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDevice);
                this.columnFilepath = new System.Data.DataColumn("Filepath", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFilepath);
                this.columnFlashUpload_Id = new System.Data.DataColumn("FlashUpload_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnFlashUpload_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnFlashUpload_Id}, true));
                this.columnDevice.AllowDBNull = false;
                this.columnDevice.Namespace = "";
                this.columnFilepath.AllowDBNull = false;
                this.columnFilepath.Namespace = "";
                this.columnFlashUpload_Id.AutoIncrement = true;
                this.columnFlashUpload_Id.AllowDBNull = false;
                this.columnFlashUpload_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlashUploadRow NewFlashUploadRow() {
                return ((FlashUploadRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FlashUploadRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FlashUploadRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FlashUploadRowChanged != null)) {
                    this.FlashUploadRowChanged(this, new FlashUploadRowChangeEvent(((FlashUploadRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FlashUploadRowChanging != null)) {
                    this.FlashUploadRowChanging(this, new FlashUploadRowChangeEvent(((FlashUploadRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FlashUploadRowDeleted != null)) {
                    this.FlashUploadRowDeleted(this, new FlashUploadRowChangeEvent(((FlashUploadRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FlashUploadRowDeleting != null)) {
                    this.FlashUploadRowDeleting(this, new FlashUploadRowChangeEvent(((FlashUploadRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFlashUploadRow(FlashUploadRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FlashUploadDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServerPassword10DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnEncodedPassword;
            
            private System.Data.DataColumn columnEncodeNumber;
            
            private System.Data.DataColumn columnFlashUpload_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword10DataTable() {
                this.TableName = "ServerPassword10";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerPassword10DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServerPassword10DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EncodedPasswordColumn {
                get {
                    return this.columnEncodedPassword;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EncodeNumberColumn {
                get {
                    return this.columnEncodeNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FlashUpload_IdColumn {
                get {
                    return this.columnFlashUpload_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword10Row this[int index] {
                get {
                    return ((ServerPassword10Row)(this.Rows[index]));
                }
            }
            
            public event ServerPassword10RowChangeEventHandler ServerPassword10RowChanging;
            
            public event ServerPassword10RowChangeEventHandler ServerPassword10RowChanged;
            
            public event ServerPassword10RowChangeEventHandler ServerPassword10RowDeleting;
            
            public event ServerPassword10RowChangeEventHandler ServerPassword10RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServerPassword10Row(ServerPassword10Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword10Row AddServerPassword10Row(string EncodedPassword, string EncodeNumber, FlashUploadRow parentFlashUploadRowByFlashUpload_ServerPassword10) {
                ServerPassword10Row rowServerPassword10Row = ((ServerPassword10Row)(this.NewRow()));
                rowServerPassword10Row.ItemArray = new object[] {
                        EncodedPassword,
                        EncodeNumber,
                        parentFlashUploadRowByFlashUpload_ServerPassword10[2]};
                this.Rows.Add(rowServerPassword10Row);
                return rowServerPassword10Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ServerPassword10DataTable cln = ((ServerPassword10DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ServerPassword10DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEncodedPassword = base.Columns["EncodedPassword"];
                this.columnEncodeNumber = base.Columns["EncodeNumber"];
                this.columnFlashUpload_Id = base.Columns["FlashUpload_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEncodedPassword = new System.Data.DataColumn("EncodedPassword", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEncodedPassword);
                this.columnEncodeNumber = new System.Data.DataColumn("EncodeNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEncodeNumber);
                this.columnFlashUpload_Id = new System.Data.DataColumn("FlashUpload_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnFlashUpload_Id);
                this.columnEncodedPassword.AllowDBNull = false;
                this.columnEncodedPassword.Namespace = "";
                this.columnEncodeNumber.Namespace = "";
                this.columnEncodeNumber.DefaultValue = ((string)("7"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword10Row NewServerPassword10Row() {
                return ((ServerPassword10Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ServerPassword10Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ServerPassword10Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerPassword10RowChanged != null)) {
                    this.ServerPassword10RowChanged(this, new ServerPassword10RowChangeEvent(((ServerPassword10Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerPassword10RowChanging != null)) {
                    this.ServerPassword10RowChanging(this, new ServerPassword10RowChangeEvent(((ServerPassword10Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerPassword10RowDeleted != null)) {
                    this.ServerPassword10RowDeleted(this, new ServerPassword10RowChangeEvent(((ServerPassword10Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerPassword10RowDeleting != null)) {
                    this.ServerPassword10RowDeleting(this, new ServerPassword10RowChangeEvent(((ServerPassword10Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServerPassword10Row(ServerPassword10Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServerPassword10DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetUnlockingCodesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFeature;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetUnlockingCodesDataTable() {
                this.TableName = "GetUnlockingCodes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetUnlockingCodesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GetUnlockingCodesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FeatureColumn {
                get {
                    return this.columnFeature;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetUnlockingCodesRow this[int index] {
                get {
                    return ((GetUnlockingCodesRow)(this.Rows[index]));
                }
            }
            
            public event GetUnlockingCodesRowChangeEventHandler GetUnlockingCodesRowChanging;
            
            public event GetUnlockingCodesRowChangeEventHandler GetUnlockingCodesRowChanged;
            
            public event GetUnlockingCodesRowChangeEventHandler GetUnlockingCodesRowDeleting;
            
            public event GetUnlockingCodesRowChangeEventHandler GetUnlockingCodesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGetUnlockingCodesRow(GetUnlockingCodesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetUnlockingCodesRow AddGetUnlockingCodesRow(string Feature) {
                GetUnlockingCodesRow rowGetUnlockingCodesRow = ((GetUnlockingCodesRow)(this.NewRow()));
                rowGetUnlockingCodesRow.ItemArray = new object[] {
                        Feature};
                this.Rows.Add(rowGetUnlockingCodesRow);
                return rowGetUnlockingCodesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                GetUnlockingCodesDataTable cln = ((GetUnlockingCodesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new GetUnlockingCodesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFeature = base.Columns["Feature"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFeature = new System.Data.DataColumn("Feature", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFeature);
                this.columnFeature.Namespace = "";
                this.columnFeature.DefaultValue = ((string)("Base"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetUnlockingCodesRow NewGetUnlockingCodesRow() {
                return ((GetUnlockingCodesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GetUnlockingCodesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(GetUnlockingCodesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetUnlockingCodesRowChanged != null)) {
                    this.GetUnlockingCodesRowChanged(this, new GetUnlockingCodesRowChangeEvent(((GetUnlockingCodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetUnlockingCodesRowChanging != null)) {
                    this.GetUnlockingCodesRowChanging(this, new GetUnlockingCodesRowChangeEvent(((GetUnlockingCodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetUnlockingCodesRowDeleted != null)) {
                    this.GetUnlockingCodesRowDeleted(this, new GetUnlockingCodesRowChangeEvent(((GetUnlockingCodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetUnlockingCodesRowDeleting != null)) {
                    this.GetUnlockingCodesRowDeleting(this, new GetUnlockingCodesRowChangeEvent(((GetUnlockingCodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGetUnlockingCodesRow(GetUnlockingCodesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetUnlockingCodesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SetActivationCodesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFeature;
            
            private System.Data.DataColumn columnCode1;
            
            private System.Data.DataColumn columnCode2;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetActivationCodesDataTable() {
                this.TableName = "SetActivationCodes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SetActivationCodesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SetActivationCodesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FeatureColumn {
                get {
                    return this.columnFeature;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Code1Column {
                get {
                    return this.columnCode1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Code2Column {
                get {
                    return this.columnCode2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetActivationCodesRow this[int index] {
                get {
                    return ((SetActivationCodesRow)(this.Rows[index]));
                }
            }
            
            public event SetActivationCodesRowChangeEventHandler SetActivationCodesRowChanging;
            
            public event SetActivationCodesRowChangeEventHandler SetActivationCodesRowChanged;
            
            public event SetActivationCodesRowChangeEventHandler SetActivationCodesRowDeleting;
            
            public event SetActivationCodesRowChangeEventHandler SetActivationCodesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSetActivationCodesRow(SetActivationCodesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetActivationCodesRow AddSetActivationCodesRow(string Feature, string Code1, string Code2) {
                SetActivationCodesRow rowSetActivationCodesRow = ((SetActivationCodesRow)(this.NewRow()));
                rowSetActivationCodesRow.ItemArray = new object[] {
                        Feature,
                        Code1,
                        Code2};
                this.Rows.Add(rowSetActivationCodesRow);
                return rowSetActivationCodesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SetActivationCodesDataTable cln = ((SetActivationCodesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SetActivationCodesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFeature = base.Columns["Feature"];
                this.columnCode1 = base.Columns["Code1"];
                this.columnCode2 = base.Columns["Code2"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFeature = new System.Data.DataColumn("Feature", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFeature);
                this.columnCode1 = new System.Data.DataColumn("Code1", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCode1);
                this.columnCode2 = new System.Data.DataColumn("Code2", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCode2);
                this.columnFeature.Namespace = "";
                this.columnFeature.DefaultValue = ((string)("Base"));
                this.columnCode1.AllowDBNull = false;
                this.columnCode1.Namespace = "";
                this.columnCode2.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetActivationCodesRow NewSetActivationCodesRow() {
                return ((SetActivationCodesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SetActivationCodesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SetActivationCodesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SetActivationCodesRowChanged != null)) {
                    this.SetActivationCodesRowChanged(this, new SetActivationCodesRowChangeEvent(((SetActivationCodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SetActivationCodesRowChanging != null)) {
                    this.SetActivationCodesRowChanging(this, new SetActivationCodesRowChangeEvent(((SetActivationCodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SetActivationCodesRowDeleted != null)) {
                    this.SetActivationCodesRowDeleted(this, new SetActivationCodesRowChangeEvent(((SetActivationCodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SetActivationCodesRowDeleting != null)) {
                    this.SetActivationCodesRowDeleting(this, new SetActivationCodesRowChangeEvent(((SetActivationCodesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSetActivationCodesRow(SetActivationCodesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductionServerRequest ds = new ProductionServerRequest();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SetActivationCodesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetServerStatusRow : System.Data.DataRow {
            
            private GetServerStatusDataTable tableGetServerStatus;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetServerStatusRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetServerStatus = ((GetServerStatusDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GetCommandLineSwitches {
                get {
                    try {
                        return ((string)(this[this.tableGetServerStatus.GetCommandLineSwitchesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'GetCommandLineSwitches\' in table \'GetServerStatus\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGetServerStatus.GetCommandLineSwitchesColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GetAutoloaderStatus {
                get {
                    try {
                        return ((string)(this[this.tableGetServerStatus.GetAutoloaderStatusColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'GetAutoloaderStatus\' in table \'GetServerStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetServerStatus.GetAutoloaderStatusColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GetActivationInfo {
                get {
                    try {
                        return ((string)(this[this.tableGetServerStatus.GetActivationInfoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'GetActivationInfo\' in table \'GetServerStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetServerStatus.GetActivationInfoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGetCommandLineSwitchesNull() {
                return this.IsNull(this.tableGetServerStatus.GetCommandLineSwitchesColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGetCommandLineSwitchesNull() {
                this[this.tableGetServerStatus.GetCommandLineSwitchesColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGetAutoloaderStatusNull() {
                return this.IsNull(this.tableGetServerStatus.GetAutoloaderStatusColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGetAutoloaderStatusNull() {
                this[this.tableGetServerStatus.GetAutoloaderStatusColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGetActivationInfoNull() {
                return this.IsNull(this.tableGetServerStatus.GetActivationInfoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGetActivationInfoNull() {
                this[this.tableGetServerStatus.GetActivationInfoColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetParameterSettingsRow : System.Data.DataRow {
            
            private GetParameterSettingsDataTable tableGetParameterSettings;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetParameterSettingsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetParameterSettings = ((GetParameterSettingsDataTable)(this.Table));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetOrderListRow : System.Data.DataRow {
            
            private GetOrderListDataTable tableGetOrderList;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetOrderListRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetOrderList = ((GetOrderListDataTable)(this.Table));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServerPasswordRow : System.Data.DataRow {
            
            private ServerPasswordDataTable tableServerPassword;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerPasswordRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerPassword = ((ServerPasswordDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EncodedPassword {
                get {
                    return ((string)(this[this.tableServerPassword.EncodedPasswordColumn]));
                }
                set {
                    this[this.tableServerPassword.EncodedPasswordColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EncodeNumber {
                get {
                    try {
                        return ((string)(this[this.tableServerPassword.EncodeNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EncodeNumber\' in table \'ServerPassword\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerPassword.EncodeNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OldPassword_Id {
                get {
                    try {
                        return ((int)(this[this.tableServerPassword.OldPassword_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OldPassword_Id\' in table \'ServerPassword\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerPassword.OldPassword_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OldPasswordRow OldPasswordRow {
                get {
                    return ((OldPasswordRow)(this.GetParentRow(this.Table.ParentRelations["OldPassword_ServerPassword"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["OldPassword_ServerPassword"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEncodeNumberNull() {
                return this.IsNull(this.tableServerPassword.EncodeNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEncodeNumberNull() {
                this[this.tableServerPassword.EncodeNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOldPassword_IdNull() {
                return this.IsNull(this.tableServerPassword.OldPassword_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOldPassword_IdNull() {
                this[this.tableServerPassword.OldPassword_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SetServerPasswordRow : System.Data.DataRow {
            
            private SetServerPasswordDataTable tableSetServerPassword;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SetServerPasswordRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSetServerPassword = ((SetServerPasswordDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SetServerPassword_Id {
                get {
                    return ((int)(this[this.tableSetServerPassword.SetServerPassword_IdColumn]));
                }
                set {
                    this[this.tableSetServerPassword.SetServerPassword_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OldPasswordRow[] GetOldPasswordRows() {
                return ((OldPasswordRow[])(base.GetChildRows(this.Table.ChildRelations["SetServerPassword_OldPassword"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NewPasswordRow[] GetNewPasswordRows() {
                return ((NewPasswordRow[])(base.GetChildRows(this.Table.ChildRelations["SetServerPassword_NewPassword"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OldPasswordRow : System.Data.DataRow {
            
            private OldPasswordDataTable tableOldPassword;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OldPasswordRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOldPassword = ((OldPasswordDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OldPassword_Id {
                get {
                    return ((int)(this[this.tableOldPassword.OldPassword_IdColumn]));
                }
                set {
                    this[this.tableOldPassword.OldPassword_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SetServerPassword_Id {
                get {
                    try {
                        return ((int)(this[this.tableOldPassword.SetServerPassword_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SetServerPassword_Id\' in table \'OldPassword\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOldPassword.SetServerPassword_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetServerPasswordRow SetServerPasswordRow {
                get {
                    return ((SetServerPasswordRow)(this.GetParentRow(this.Table.ParentRelations["SetServerPassword_OldPassword"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SetServerPassword_OldPassword"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetServerPassword_IdNull() {
                return this.IsNull(this.tableOldPassword.SetServerPassword_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetServerPassword_IdNull() {
                this[this.tableOldPassword.SetServerPassword_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPasswordRow[] GetServerPasswordRows() {
                return ((ServerPasswordRow[])(base.GetChildRows(this.Table.ChildRelations["OldPassword_ServerPassword"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NewPasswordRow : System.Data.DataRow {
            
            private NewPasswordDataTable tableNewPassword;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NewPasswordRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNewPassword = ((NewPasswordDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NewPassword_Id {
                get {
                    return ((int)(this[this.tableNewPassword.NewPassword_IdColumn]));
                }
                set {
                    this[this.tableNewPassword.NewPassword_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SetServerPassword_Id {
                get {
                    try {
                        return ((int)(this[this.tableNewPassword.SetServerPassword_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SetServerPassword_Id\' in table \'NewPassword\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNewPassword.SetServerPassword_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetServerPasswordRow SetServerPasswordRow {
                get {
                    return ((SetServerPasswordRow)(this.GetParentRow(this.Table.ParentRelations["SetServerPassword_NewPassword"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SetServerPassword_NewPassword"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetServerPassword_IdNull() {
                return this.IsNull(this.tableNewPassword.SetServerPassword_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetServerPassword_IdNull() {
                this[this.tableNewPassword.SetServerPassword_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword1Row[] GetServerPassword1Rows() {
                return ((ServerPassword1Row[])(base.GetChildRows(this.Table.ChildRelations["NewPassword_ServerPassword1"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServerPassword1Row : System.Data.DataRow {
            
            private ServerPassword1DataTable tableServerPassword1;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerPassword1Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerPassword1 = ((ServerPassword1DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EncodedPassword {
                get {
                    return ((string)(this[this.tableServerPassword1.EncodedPasswordColumn]));
                }
                set {
                    this[this.tableServerPassword1.EncodedPasswordColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EncodeNumber {
                get {
                    try {
                        return ((string)(this[this.tableServerPassword1.EncodeNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EncodeNumber\' in table \'ServerPassword1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerPassword1.EncodeNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NewPassword_Id {
                get {
                    try {
                        return ((int)(this[this.tableServerPassword1.NewPassword_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NewPassword_Id\' in table \'ServerPassword1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerPassword1.NewPassword_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NewPasswordRow NewPasswordRow {
                get {
                    return ((NewPasswordRow)(this.GetParentRow(this.Table.ParentRelations["NewPassword_ServerPassword1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["NewPassword_ServerPassword1"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEncodeNumberNull() {
                return this.IsNull(this.tableServerPassword1.EncodeNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEncodeNumberNull() {
                this[this.tableServerPassword1.EncodeNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewPassword_IdNull() {
                return this.IsNull(this.tableServerPassword1.NewPassword_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNewPassword_IdNull() {
                this[this.tableServerPassword1.NewPassword_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class VerifyServerPasswordRow : System.Data.DataRow {
            
            private VerifyServerPasswordDataTable tableVerifyServerPassword;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VerifyServerPasswordRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVerifyServerPassword = ((VerifyServerPasswordDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int VerifyServerPassword_Id {
                get {
                    return ((int)(this[this.tableVerifyServerPassword.VerifyServerPassword_IdColumn]));
                }
                set {
                    this[this.tableVerifyServerPassword.VerifyServerPassword_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword2Row[] GetServerPassword2Rows() {
                return ((ServerPassword2Row[])(base.GetChildRows(this.Table.ChildRelations["VerifyServerPassword_ServerPassword2"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServerPassword2Row : System.Data.DataRow {
            
            private ServerPassword2DataTable tableServerPassword2;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerPassword2Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerPassword2 = ((ServerPassword2DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EncodedPassword {
                get {
                    return ((string)(this[this.tableServerPassword2.EncodedPasswordColumn]));
                }
                set {
                    this[this.tableServerPassword2.EncodedPasswordColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EncodeNumber {
                get {
                    try {
                        return ((string)(this[this.tableServerPassword2.EncodeNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EncodeNumber\' in table \'ServerPassword2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerPassword2.EncodeNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int VerifyServerPassword_Id {
                get {
                    try {
                        return ((int)(this[this.tableServerPassword2.VerifyServerPassword_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'VerifyServerPassword_Id\' in table \'ServerPassword2\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableServerPassword2.VerifyServerPassword_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyServerPasswordRow VerifyServerPasswordRow {
                get {
                    return ((VerifyServerPasswordRow)(this.GetParentRow(this.Table.ParentRelations["VerifyServerPassword_ServerPassword2"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["VerifyServerPassword_ServerPassword2"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEncodeNumberNull() {
                return this.IsNull(this.tableServerPassword2.EncodeNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEncodeNumberNull() {
                this[this.tableServerPassword2.EncodeNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVerifyServerPassword_IdNull() {
                return this.IsNull(this.tableServerPassword2.VerifyServerPassword_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVerifyServerPassword_IdNull() {
                this[this.tableServerPassword2.VerifyServerPassword_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CancelOrderRow : System.Data.DataRow {
            
            private CancelOrderDataTable tableCancelOrder;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CancelOrderRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCancelOrder = ((CancelOrderDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrderId {
                get {
                    return ((string)(this[this.tableCancelOrder.OrderIdColumn]));
                }
                set {
                    this[this.tableCancelOrder.OrderIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientId {
                get {
                    return ((string)(this[this.tableCancelOrder.ClientIdColumn]));
                }
                set {
                    this[this.tableCancelOrder.ClientIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AbortRecordingsInProcess {
                get {
                    try {
                        return ((string)(this[this.tableCancelOrder.AbortRecordingsInProcessColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AbortRecordingsInProcess\' in table \'CancelOrder\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableCancelOrder.AbortRecordingsInProcessColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CancelOrder_Id {
                get {
                    return ((int)(this[this.tableCancelOrder.CancelOrder_IdColumn]));
                }
                set {
                    this[this.tableCancelOrder.CancelOrder_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAbortRecordingsInProcessNull() {
                return this.IsNull(this.tableCancelOrder.AbortRecordingsInProcessColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAbortRecordingsInProcessNull() {
                this[this.tableCancelOrder.AbortRecordingsInProcessColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword3Row[] GetServerPassword3Rows() {
                return ((ServerPassword3Row[])(base.GetChildRows(this.Table.ChildRelations["CancelOrder_ServerPassword3"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServerPassword3Row : System.Data.DataRow {
            
            private ServerPassword3DataTable tableServerPassword3;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerPassword3Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerPassword3 = ((ServerPassword3DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EncodedPassword {
                get {
                    return ((string)(this[this.tableServerPassword3.EncodedPasswordColumn]));
                }
                set {
                    this[this.tableServerPassword3.EncodedPasswordColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EncodeNumber {
                get {
                    try {
                        return ((string)(this[this.tableServerPassword3.EncodeNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EncodeNumber\' in table \'ServerPassword3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerPassword3.EncodeNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CancelOrder_Id {
                get {
                    try {
                        return ((int)(this[this.tableServerPassword3.CancelOrder_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CancelOrder_Id\' in table \'ServerPassword3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerPassword3.CancelOrder_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CancelOrderRow CancelOrderRow {
                get {
                    return ((CancelOrderRow)(this.GetParentRow(this.Table.ParentRelations["CancelOrder_ServerPassword3"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CancelOrder_ServerPassword3"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEncodeNumberNull() {
                return this.IsNull(this.tableServerPassword3.EncodeNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEncodeNumberNull() {
                this[this.tableServerPassword3.EncodeNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCancelOrder_IdNull() {
                return this.IsNull(this.tableServerPassword3.CancelOrder_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCancelOrder_IdNull() {
                this[this.tableServerPassword3.CancelOrder_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ChangeOrderRow : System.Data.DataRow {
            
            private ChangeOrderDataTable tableChangeOrder;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ChangeOrderRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableChangeOrder = ((ChangeOrderDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrderId {
                get {
                    return ((string)(this[this.tableChangeOrder.OrderIdColumn]));
                }
                set {
                    this[this.tableChangeOrder.OrderIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientId {
                get {
                    return ((string)(this[this.tableChangeOrder.ClientIdColumn]));
                }
                set {
                    this[this.tableChangeOrder.ClientIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ChangeOrder_Id {
                get {
                    return ((int)(this[this.tableChangeOrder.ChangeOrder_IdColumn]));
                }
                set {
                    this[this.tableChangeOrder.ChangeOrder_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword4Row[] GetServerPassword4Rows() {
                return ((ServerPassword4Row[])(base.GetChildRows(this.Table.ChildRelations["ChangeOrder_ServerPassword4"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SuspendOrderRow[] GetSuspendOrderRows() {
                return ((SuspendOrderRow[])(base.GetChildRows(this.Table.ChildRelations["ChangeOrder_SuspendOrder"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResumeOrderRow[] GetResumeOrderRows() {
                return ((ResumeOrderRow[])(base.GetChildRows(this.Table.ChildRelations["ChangeOrder_ResumeOrder"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuantityRow[] GetQuantityRows() {
                return ((QuantityRow[])(base.GetChildRows(this.Table.ChildRelations["ChangeOrder_Quantity"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServerPassword4Row : System.Data.DataRow {
            
            private ServerPassword4DataTable tableServerPassword4;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerPassword4Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerPassword4 = ((ServerPassword4DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EncodedPassword {
                get {
                    return ((string)(this[this.tableServerPassword4.EncodedPasswordColumn]));
                }
                set {
                    this[this.tableServerPassword4.EncodedPasswordColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EncodeNumber {
                get {
                    try {
                        return ((string)(this[this.tableServerPassword4.EncodeNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EncodeNumber\' in table \'ServerPassword4\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerPassword4.EncodeNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ChangeOrder_Id {
                get {
                    try {
                        return ((int)(this[this.tableServerPassword4.ChangeOrder_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ChangeOrder_Id\' in table \'ServerPassword4\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerPassword4.ChangeOrder_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChangeOrderRow ChangeOrderRow {
                get {
                    return ((ChangeOrderRow)(this.GetParentRow(this.Table.ParentRelations["ChangeOrder_ServerPassword4"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ChangeOrder_ServerPassword4"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEncodeNumberNull() {
                return this.IsNull(this.tableServerPassword4.EncodeNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEncodeNumberNull() {
                this[this.tableServerPassword4.EncodeNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChangeOrder_IdNull() {
                return this.IsNull(this.tableServerPassword4.ChangeOrder_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChangeOrder_IdNull() {
                this[this.tableServerPassword4.ChangeOrder_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SuspendOrderRow : System.Data.DataRow {
            
            private SuspendOrderDataTable tableSuspendOrder;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SuspendOrderRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSuspendOrder = ((SuspendOrderDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ChangeOrder_Id {
                get {
                    try {
                        return ((int)(this[this.tableSuspendOrder.ChangeOrder_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ChangeOrder_Id\' in table \'SuspendOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSuspendOrder.ChangeOrder_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChangeOrderRow ChangeOrderRow {
                get {
                    return ((ChangeOrderRow)(this.GetParentRow(this.Table.ParentRelations["ChangeOrder_SuspendOrder"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ChangeOrder_SuspendOrder"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChangeOrder_IdNull() {
                return this.IsNull(this.tableSuspendOrder.ChangeOrder_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChangeOrder_IdNull() {
                this[this.tableSuspendOrder.ChangeOrder_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ResumeOrderRow : System.Data.DataRow {
            
            private ResumeOrderDataTable tableResumeOrder;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ResumeOrderRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableResumeOrder = ((ResumeOrderDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ChangeOrder_Id {
                get {
                    try {
                        return ((int)(this[this.tableResumeOrder.ChangeOrder_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ChangeOrder_Id\' in table \'ResumeOrder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResumeOrder.ChangeOrder_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChangeOrderRow ChangeOrderRow {
                get {
                    return ((ChangeOrderRow)(this.GetParentRow(this.Table.ParentRelations["ChangeOrder_ResumeOrder"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ChangeOrder_ResumeOrder"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChangeOrder_IdNull() {
                return this.IsNull(this.tableResumeOrder.ChangeOrder_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChangeOrder_IdNull() {
                this[this.tableResumeOrder.ChangeOrder_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class QuantityRow : System.Data.DataRow {
            
            private QuantityDataTable tableQuantity;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QuantityRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableQuantity = ((QuantityDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NumberOfDiscs {
                get {
                    return ((string)(this[this.tableQuantity.NumberOfDiscsColumn]));
                }
                set {
                    this[this.tableQuantity.NumberOfDiscsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ChangeOrder_Id {
                get {
                    try {
                        return ((int)(this[this.tableQuantity.ChangeOrder_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ChangeOrder_Id\' in table \'Quantity\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQuantity.ChangeOrder_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChangeOrderRow ChangeOrderRow {
                get {
                    return ((ChangeOrderRow)(this.GetParentRow(this.Table.ParentRelations["ChangeOrder_Quantity"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ChangeOrder_Quantity"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChangeOrder_IdNull() {
                return this.IsNull(this.tableQuantity.ChangeOrder_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChangeOrder_IdNull() {
                this[this.tableQuantity.ChangeOrder_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EnableDeviceRow : System.Data.DataRow {
            
            private EnableDeviceDataTable tableEnableDevice;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EnableDeviceRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEnableDevice = ((EnableDeviceDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LoaderNumber {
                get {
                    return ((string)(this[this.tableEnableDevice.LoaderNumberColumn]));
                }
                set {
                    this[this.tableEnableDevice.LoaderNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EnableDevice_Id {
                get {
                    return ((int)(this[this.tableEnableDevice.EnableDevice_IdColumn]));
                }
                set {
                    this[this.tableEnableDevice.EnableDevice_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword5Row[] GetServerPassword5Rows() {
                return ((ServerPassword5Row[])(base.GetChildRows(this.Table.ChildRelations["EnableDevice_ServerPassword5"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderRow[] GetAutoloaderRows() {
                return ((AutoloaderRow[])(base.GetChildRows(this.Table.ChildRelations["EnableDevice_Autoloader"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecorderRow[] GetRecorderRows() {
                return ((RecorderRow[])(base.GetChildRows(this.Table.ChildRelations["EnableDevice_Recorder"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrinterRow[] GetPrinterRows() {
                return ((PrinterRow[])(base.GetChildRows(this.Table.ChildRelations["EnableDevice_Printer"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServerPassword5Row : System.Data.DataRow {
            
            private ServerPassword5DataTable tableServerPassword5;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerPassword5Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerPassword5 = ((ServerPassword5DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EncodedPassword {
                get {
                    return ((string)(this[this.tableServerPassword5.EncodedPasswordColumn]));
                }
                set {
                    this[this.tableServerPassword5.EncodedPasswordColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EncodeNumber {
                get {
                    try {
                        return ((string)(this[this.tableServerPassword5.EncodeNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EncodeNumber\' in table \'ServerPassword5\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerPassword5.EncodeNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EnableDevice_Id {
                get {
                    try {
                        return ((int)(this[this.tableServerPassword5.EnableDevice_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EnableDevice_Id\' in table \'ServerPassword5\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerPassword5.EnableDevice_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnableDeviceRow EnableDeviceRow {
                get {
                    return ((EnableDeviceRow)(this.GetParentRow(this.Table.ParentRelations["EnableDevice_ServerPassword5"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["EnableDevice_ServerPassword5"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEncodeNumberNull() {
                return this.IsNull(this.tableServerPassword5.EncodeNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEncodeNumberNull() {
                this[this.tableServerPassword5.EncodeNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnableDevice_IdNull() {
                return this.IsNull(this.tableServerPassword5.EnableDevice_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEnableDevice_IdNull() {
                this[this.tableServerPassword5.EnableDevice_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AutoloaderRow : System.Data.DataRow {
            
            private AutoloaderDataTable tableAutoloader;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AutoloaderRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAutoloader = ((AutoloaderDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EnableDevice_Id {
                get {
                    try {
                        return ((int)(this[this.tableAutoloader.EnableDevice_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EnableDevice_Id\' in table \'Autoloader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoloader.EnableDevice_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnableDeviceRow EnableDeviceRow {
                get {
                    return ((EnableDeviceRow)(this.GetParentRow(this.Table.ParentRelations["EnableDevice_Autoloader"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["EnableDevice_Autoloader"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnableDevice_IdNull() {
                return this.IsNull(this.tableAutoloader.EnableDevice_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEnableDevice_IdNull() {
                this[this.tableAutoloader.EnableDevice_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RecorderRow : System.Data.DataRow {
            
            private RecorderDataTable tableRecorder;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RecorderRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRecorder = ((RecorderDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Number {
                get {
                    return ((string)(this[this.tableRecorder.NumberColumn]));
                }
                set {
                    this[this.tableRecorder.NumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EnableDevice_Id {
                get {
                    try {
                        return ((int)(this[this.tableRecorder.EnableDevice_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EnableDevice_Id\' in table \'Recorder\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecorder.EnableDevice_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnableDeviceRow EnableDeviceRow {
                get {
                    return ((EnableDeviceRow)(this.GetParentRow(this.Table.ParentRelations["EnableDevice_Recorder"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["EnableDevice_Recorder"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnableDevice_IdNull() {
                return this.IsNull(this.tableRecorder.EnableDevice_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEnableDevice_IdNull() {
                this[this.tableRecorder.EnableDevice_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PrinterRow : System.Data.DataRow {
            
            private PrinterDataTable tablePrinter;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrinterRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrinter = ((PrinterDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Number {
                get {
                    return ((string)(this[this.tablePrinter.NumberColumn]));
                }
                set {
                    this[this.tablePrinter.NumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EnableDevice_Id {
                get {
                    try {
                        return ((int)(this[this.tablePrinter.EnableDevice_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EnableDevice_Id\' in table \'Printer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrinter.EnableDevice_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnableDeviceRow EnableDeviceRow {
                get {
                    return ((EnableDeviceRow)(this.GetParentRow(this.Table.ParentRelations["EnableDevice_Printer"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["EnableDevice_Printer"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnableDevice_IdNull() {
                return this.IsNull(this.tablePrinter.EnableDevice_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEnableDevice_IdNull() {
                this[this.tablePrinter.EnableDevice_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ResetInputBinsRow : System.Data.DataRow {
            
            private ResetInputBinsDataTable tableResetInputBins;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ResetInputBinsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableResetInputBins = ((ResetInputBinsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LoaderNumber {
                get {
                    return ((string)(this[this.tableResetInputBins.LoaderNumberColumn]));
                }
                set {
                    this[this.tableResetInputBins.LoaderNumberColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SetDialogActionRow : System.Data.DataRow {
            
            private SetDialogActionDataTable tableSetDialogAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SetDialogActionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSetDialogAction = ((SetDialogActionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DialogId {
                get {
                    return ((string)(this[this.tableSetDialogAction.DialogIdColumn]));
                }
                set {
                    this[this.tableSetDialogAction.DialogIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Button {
                get {
                    return ((string)(this[this.tableSetDialogAction.ButtonColumn]));
                }
                set {
                    this[this.tableSetDialogAction.ButtonColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Flag {
                get {
                    try {
                        return ((string)(this[this.tableSetDialogAction.FlagColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Flag\' in table \'SetDialogAction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSetDialogAction.FlagColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlagNull() {
                return this.IsNull(this.tableSetDialogAction.FlagColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlagNull() {
                this[this.tableSetDialogAction.FlagColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetSessionLogRow : System.Data.DataRow {
            
            private GetSessionLogDataTable tableGetSessionLog;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetSessionLogRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetSessionLog = ((GetSessionLogDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NumberEvents {
                get {
                    try {
                        return ((string)(this[this.tableGetSessionLog.NumberEventsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NumberEvents\' in table \'GetSessionLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSessionLog.NumberEventsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumberEventsNull() {
                return this.IsNull(this.tableGetSessionLog.NumberEventsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumberEventsNull() {
                this[this.tableGetSessionLog.NumberEventsColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClearSessionLogRow : System.Data.DataRow {
            
            private ClearSessionLogDataTable tableClearSessionLog;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClearSessionLogRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClearSessionLog = ((ClearSessionLogDataTable)(this.Table));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SetParameterRow : System.Data.DataRow {
            
            private SetParameterDataTable tableSetParameter;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SetParameterRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSetParameter = ((SetParameterDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IgnoreReadOnly {
                get {
                    try {
                        return ((string)(this[this.tableSetParameter.IgnoreReadOnlyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IgnoreReadOnly\' in table \'SetParameter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSetParameter.IgnoreReadOnlyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SetParameter_Id {
                get {
                    return ((int)(this[this.tableSetParameter.SetParameter_IdColumn]));
                }
                set {
                    this[this.tableSetParameter.SetParameter_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIgnoreReadOnlyNull() {
                return this.IsNull(this.tableSetParameter.IgnoreReadOnlyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIgnoreReadOnlyNull() {
                this[this.tableSetParameter.IgnoreReadOnlyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword6Row[] GetServerPassword6Rows() {
                return ((ServerPassword6Row[])(base.GetChildRows(this.Table.ChildRelations["SetParameter_ServerPassword6"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingRow[] GetSettingRows() {
                return ((SettingRow[])(base.GetChildRows(this.Table.ChildRelations["SetParameter_Setting"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServerPassword6Row : System.Data.DataRow {
            
            private ServerPassword6DataTable tableServerPassword6;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerPassword6Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerPassword6 = ((ServerPassword6DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EncodedPassword {
                get {
                    return ((string)(this[this.tableServerPassword6.EncodedPasswordColumn]));
                }
                set {
                    this[this.tableServerPassword6.EncodedPasswordColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EncodeNumber {
                get {
                    try {
                        return ((string)(this[this.tableServerPassword6.EncodeNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EncodeNumber\' in table \'ServerPassword6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerPassword6.EncodeNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SetParameter_Id {
                get {
                    try {
                        return ((int)(this[this.tableServerPassword6.SetParameter_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SetParameter_Id\' in table \'ServerPassword6\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerPassword6.SetParameter_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetParameterRow SetParameterRow {
                get {
                    return ((SetParameterRow)(this.GetParentRow(this.Table.ParentRelations["SetParameter_ServerPassword6"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SetParameter_ServerPassword6"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEncodeNumberNull() {
                return this.IsNull(this.tableServerPassword6.EncodeNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEncodeNumberNull() {
                this[this.tableServerPassword6.EncodeNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetParameter_IdNull() {
                return this.IsNull(this.tableServerPassword6.SetParameter_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetParameter_IdNull() {
                this[this.tableServerPassword6.SetParameter_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SettingRow : System.Data.DataRow {
            
            private SettingDataTable tableSetting;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SettingRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSetting = ((SettingDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Setting_Id {
                get {
                    return ((int)(this[this.tableSetting.Setting_IdColumn]));
                }
                set {
                    this[this.tableSetting.Setting_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SetParameter_Id {
                get {
                    try {
                        return ((int)(this[this.tableSetting.SetParameter_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SetParameter_Id\' in table \'Setting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSetting.SetParameter_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetParameterRow SetParameterRow {
                get {
                    return ((SetParameterRow)(this.GetParentRow(this.Table.ParentRelations["SetParameter_Setting"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SetParameter_Setting"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetParameter_IdNull() {
                return this.IsNull(this.tableSetting.SetParameter_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetParameter_IdNull() {
                this[this.tableSetting.SetParameter_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerRow[] GetServerRows() {
                return ((ServerRow[])(base.GetChildRows(this.Table.ChildRelations["Setting_Server"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModeSettingsRow[] GetModeSettingsRows() {
                return ((ModeSettingsRow[])(base.GetChildRows(this.Table.ChildRelations["Setting_ModeSettings"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CachingRow[] GetCachingRows() {
                return ((CachingRow[])(base.GetChildRows(this.Table.ChildRelations["Setting_Caching"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingRow[] GetRecordingRows() {
                return ((RecordingRow[])(base.GetChildRows(this.Table.ChildRelations["Setting_Recording"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyRow[] GetVerifyRows() {
                return ((VerifyRow[])(base.GetChildRows(this.Table.ChildRelations["Setting_Verify"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintingRow[] GetPrintingRows() {
                return ((PrintingRow[])(base.GetChildRows(this.Table.ChildRelations["Setting_Printing"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderSettingsRow[] GetAutoloaderSettingsRows() {
                return ((AutoloaderSettingsRow[])(base.GetChildRows(this.Table.ChildRelations["Setting_AutoloaderSettings"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadingRow[] GetReadingRows() {
                return ((ReadingRow[])(base.GetChildRows(this.Table.ChildRelations["Setting_Reading"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodesRow[] GetMediaCodesRows() {
                return ((MediaCodesRow[])(base.GetChildRows(this.Table.ChildRelations["Setting_MediaCodes"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KioskModeRow[] GetKioskModeRows() {
                return ((KioskModeRow[])(base.GetChildRows(this.Table.ChildRelations["Setting_KioskMode"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServerRow : System.Data.DataRow {
            
            private ServerDataTable tableServer;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServer = ((ServerDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableServer.DescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'Server\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServer.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OrderStatusInterval {
                get {
                    try {
                        return ((string)(this[this.tableServer.OrderStatusIntervalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OrderStatusInterval\' in table \'Server\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServer.OrderStatusIntervalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Setting_Id {
                get {
                    try {
                        return ((int)(this[this.tableServer.Setting_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Setting_Id\' in table \'Server\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServer.Setting_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingRow SettingRow {
                get {
                    return ((SettingRow)(this.GetParentRow(this.Table.ParentRelations["Setting_Server"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Setting_Server"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableServer.DescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableServer.DescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderStatusIntervalNull() {
                return this.IsNull(this.tableServer.OrderStatusIntervalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderStatusIntervalNull() {
                this[this.tableServer.OrderStatusIntervalColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetting_IdNull() {
                return this.IsNull(this.tableServer.Setting_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetting_IdNull() {
                this[this.tableServer.Setting_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ModeSettingsRow : System.Data.DataRow {
            
            private ModeSettingsDataTable tableModeSettings;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ModeSettingsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableModeSettings = ((ModeSettingsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ModeSettings_Id {
                get {
                    return ((int)(this[this.tableModeSettings.ModeSettings_IdColumn]));
                }
                set {
                    this[this.tableModeSettings.ModeSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Setting_Id {
                get {
                    try {
                        return ((int)(this[this.tableModeSettings.Setting_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Setting_Id\' in table \'ModeSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModeSettings.Setting_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingRow SettingRow {
                get {
                    return ((SettingRow)(this.GetParentRow(this.Table.ParentRelations["Setting_ModeSettings"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Setting_ModeSettings"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetting_IdNull() {
                return this.IsNull(this.tableModeSettings.Setting_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetting_IdNull() {
                this[this.tableModeSettings.Setting_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerModeRow[] GetServerModeRows() {
                return ((ServerModeRow[])(base.GetChildRows(this.Table.ChildRelations["ModeSettings_ServerMode"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperatingModeRow[] GetOperatingModeRows() {
                return ((OperatingModeRow[])(base.GetChildRows(this.Table.ChildRelations["ModeSettings_OperatingMode"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseFIFOModeRow[] GetUseFIFOModeRows() {
                return ((UseFIFOModeRow[])(base.GetChildRows(this.Table.ChildRelations["ModeSettings_UseFIFOMode"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServerModeRow : System.Data.DataRow {
            
            private ServerModeDataTable tableServerMode;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerModeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerMode = ((ServerModeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableServerMode.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'ServerMode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerMode.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ModeSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tableServerMode.ModeSettings_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ModeSettings_Id\' in table \'ServerMode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerMode.ModeSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModeSettingsRow ModeSettingsRow {
                get {
                    return ((ModeSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ModeSettings_ServerMode"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ModeSettings_ServerMode"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableServerMode.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableServerMode.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModeSettings_IdNull() {
                return this.IsNull(this.tableServerMode.ModeSettings_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModeSettings_IdNull() {
                this[this.tableServerMode.ModeSettings_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OperatingModeRow : System.Data.DataRow {
            
            private OperatingModeDataTable tableOperatingMode;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OperatingModeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOperatingMode = ((OperatingModeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableOperatingMode.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'OperatingMode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOperatingMode.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ModeSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tableOperatingMode.ModeSettings_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ModeSettings_Id\' in table \'OperatingMode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOperatingMode.ModeSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModeSettingsRow ModeSettingsRow {
                get {
                    return ((ModeSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ModeSettings_OperatingMode"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ModeSettings_OperatingMode"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableOperatingMode.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableOperatingMode.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModeSettings_IdNull() {
                return this.IsNull(this.tableOperatingMode.ModeSettings_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModeSettings_IdNull() {
                this[this.tableOperatingMode.ModeSettings_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UseFIFOModeRow : System.Data.DataRow {
            
            private UseFIFOModeDataTable tableUseFIFOMode;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UseFIFOModeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUseFIFOMode = ((UseFIFOModeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableUseFIFOMode.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'UseFIFOMode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUseFIFOMode.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ModeSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tableUseFIFOMode.ModeSettings_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ModeSettings_Id\' in table \'UseFIFOMode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUseFIFOMode.ModeSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModeSettingsRow ModeSettingsRow {
                get {
                    return ((ModeSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ModeSettings_UseFIFOMode"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ModeSettings_UseFIFOMode"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableUseFIFOMode.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableUseFIFOMode.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModeSettings_IdNull() {
                return this.IsNull(this.tableUseFIFOMode.ModeSettings_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModeSettings_IdNull() {
                this[this.tableUseFIFOMode.ModeSettings_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CachingRow : System.Data.DataRow {
            
            private CachingDataTable tableCaching;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CachingRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCaching = ((CachingDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Caching_Id {
                get {
                    return ((int)(this[this.tableCaching.Caching_IdColumn]));
                }
                set {
                    this[this.tableCaching.Caching_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Setting_Id {
                get {
                    try {
                        return ((int)(this[this.tableCaching.Setting_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Setting_Id\' in table \'Caching\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaching.Setting_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingRow SettingRow {
                get {
                    return ((SettingRow)(this.GetParentRow(this.Table.ParentRelations["Setting_Caching"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Setting_Caching"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetting_IdNull() {
                return this.IsNull(this.tableCaching.Setting_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetting_IdNull() {
                this[this.tableCaching.Setting_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseStaticCachingRow[] GetUseStaticCachingRows() {
                return ((UseStaticCachingRow[])(base.GetChildRows(this.Table.ChildRelations["Caching_UseStaticCaching"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CacheDriveLettersRow[] GetCacheDriveLettersRows() {
                return ((CacheDriveLettersRow[])(base.GetChildRows(this.Table.ChildRelations["Caching_CacheDriveLetters"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UseStaticCachingRow : System.Data.DataRow {
            
            private UseStaticCachingDataTable tableUseStaticCaching;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UseStaticCachingRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUseStaticCaching = ((UseStaticCachingDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableUseStaticCaching.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'UseStaticCaching\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUseStaticCaching.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Caching_Id {
                get {
                    try {
                        return ((int)(this[this.tableUseStaticCaching.Caching_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Caching_Id\' in table \'UseStaticCaching\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUseStaticCaching.Caching_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CachingRow CachingRow {
                get {
                    return ((CachingRow)(this.GetParentRow(this.Table.ParentRelations["Caching_UseStaticCaching"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Caching_UseStaticCaching"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableUseStaticCaching.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableUseStaticCaching.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCaching_IdNull() {
                return this.IsNull(this.tableUseStaticCaching.Caching_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCaching_IdNull() {
                this[this.tableUseStaticCaching.Caching_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CacheDriveLettersRow : System.Data.DataRow {
            
            private CacheDriveLettersDataTable tableCacheDriveLetters;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CacheDriveLettersRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCacheDriveLetters = ((CacheDriveLettersDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    return ((string)(this[this.tableCacheDriveLetters.ValueColumn]));
                }
                set {
                    this[this.tableCacheDriveLetters.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Caching_Id {
                get {
                    try {
                        return ((int)(this[this.tableCacheDriveLetters.Caching_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Caching_Id\' in table \'CacheDriveLetters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCacheDriveLetters.Caching_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CachingRow CachingRow {
                get {
                    return ((CachingRow)(this.GetParentRow(this.Table.ParentRelations["Caching_CacheDriveLetters"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Caching_CacheDriveLetters"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCaching_IdNull() {
                return this.IsNull(this.tableCacheDriveLetters.Caching_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCaching_IdNull() {
                this[this.tableCacheDriveLetters.Caching_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RecordingRow : System.Data.DataRow {
            
            private RecordingDataTable tableRecording;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RecordingRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRecording = ((RecordingDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Recording_Id {
                get {
                    return ((int)(this[this.tableRecording.Recording_IdColumn]));
                }
                set {
                    this[this.tableRecording.Recording_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Setting_Id {
                get {
                    try {
                        return ((int)(this[this.tableRecording.Setting_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Setting_Id\' in table \'Recording\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecording.Setting_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingRow SettingRow {
                get {
                    return ((SettingRow)(this.GetParentRow(this.Table.ParentRelations["Setting_Recording"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Setting_Recording"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetting_IdNull() {
                return this.IsNull(this.tableRecording.Setting_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetting_IdNull() {
                this[this.tableRecording.Setting_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SimulateRecordingRow[] GetSimulateRecordingRows() {
                return ((SimulateRecordingRow[])(base.GetChildRows(this.Table.ChildRelations["Recording_SimulateRecording"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseNewMediaOnlyRow[] GetUseNewMediaOnlyRows() {
                return ((UseNewMediaOnlyRow[])(base.GetChildRows(this.Table.ChildRelations["Recording_UseNewMediaOnly"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaxRecordingSpeedRow[] GetMaxRecordingSpeedRows() {
                return ((MaxRecordingSpeedRow[])(base.GetChildRows(this.Table.ChildRelations["Recording_MaxRecordingSpeed"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaxDVDRecordingSpeedRow[] GetMaxDVDRecordingSpeedRows() {
                return ((MaxDVDRecordingSpeedRow[])(base.GetChildRows(this.Table.ChildRelations["Recording_MaxDVDRecordingSpeed"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DisableISOExtentFixupsRow[] GetDisableISOExtentFixupsRows() {
                return ((DisableISOExtentFixupsRow[])(base.GetChildRows(this.Table.ChildRelations["Recording_DisableISOExtentFixups"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RejectNonISORow[] GetRejectNonISORows() {
                return ((RejectNonISORow[])(base.GetChildRows(this.Table.ChildRelations["Recording_RejectNonISO"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AddPostgapToISORow[] GetAddPostgapToISORows() {
                return ((AddPostgapToISORow[])(base.GetChildRows(this.Table.ChildRelations["Recording_AddPostgapToISO"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnableUsing90_100MinuteCDRsRow[] GetEnableUsing90_100MinuteCDRsRows() {
                return ((EnableUsing90_100MinuteCDRsRow[])(base.GetChildRows(this.Table.ChildRelations["Recording_EnableUsing90_100MinuteCDRs"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DestroyFailedRecordingsRow[] GetDestroyFailedRecordingsRows() {
                return ((DestroyFailedRecordingsRow[])(base.GetChildRows(this.Table.ChildRelations["Recording_DestroyFailedRecordings"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SimulateRecordingRow : System.Data.DataRow {
            
            private SimulateRecordingDataTable tableSimulateRecording;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SimulateRecordingRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSimulateRecording = ((SimulateRecordingDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableSimulateRecording.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'SimulateRecording\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSimulateRecording.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Recording_Id {
                get {
                    try {
                        return ((int)(this[this.tableSimulateRecording.Recording_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Recording_Id\' in table \'SimulateRecording\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSimulateRecording.Recording_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingRow RecordingRow {
                get {
                    return ((RecordingRow)(this.GetParentRow(this.Table.ParentRelations["Recording_SimulateRecording"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Recording_SimulateRecording"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableSimulateRecording.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableSimulateRecording.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecording_IdNull() {
                return this.IsNull(this.tableSimulateRecording.Recording_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecording_IdNull() {
                this[this.tableSimulateRecording.Recording_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UseNewMediaOnlyRow : System.Data.DataRow {
            
            private UseNewMediaOnlyDataTable tableUseNewMediaOnly;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UseNewMediaOnlyRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUseNewMediaOnly = ((UseNewMediaOnlyDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableUseNewMediaOnly.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'UseNewMediaOnly\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUseNewMediaOnly.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Recording_Id {
                get {
                    try {
                        return ((int)(this[this.tableUseNewMediaOnly.Recording_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Recording_Id\' in table \'UseNewMediaOnly\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUseNewMediaOnly.Recording_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingRow RecordingRow {
                get {
                    return ((RecordingRow)(this.GetParentRow(this.Table.ParentRelations["Recording_UseNewMediaOnly"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Recording_UseNewMediaOnly"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableUseNewMediaOnly.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableUseNewMediaOnly.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecording_IdNull() {
                return this.IsNull(this.tableUseNewMediaOnly.Recording_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecording_IdNull() {
                this[this.tableUseNewMediaOnly.Recording_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MaxRecordingSpeedRow : System.Data.DataRow {
            
            private MaxRecordingSpeedDataTable tableMaxRecordingSpeed;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MaxRecordingSpeedRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMaxRecordingSpeed = ((MaxRecordingSpeedDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    return ((string)(this[this.tableMaxRecordingSpeed.ValueColumn]));
                }
                set {
                    this[this.tableMaxRecordingSpeed.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Recording_Id {
                get {
                    try {
                        return ((int)(this[this.tableMaxRecordingSpeed.Recording_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Recording_Id\' in table \'MaxRecordingSpeed\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaxRecordingSpeed.Recording_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingRow RecordingRow {
                get {
                    return ((RecordingRow)(this.GetParentRow(this.Table.ParentRelations["Recording_MaxRecordingSpeed"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Recording_MaxRecordingSpeed"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecording_IdNull() {
                return this.IsNull(this.tableMaxRecordingSpeed.Recording_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecording_IdNull() {
                this[this.tableMaxRecordingSpeed.Recording_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MaxDVDRecordingSpeedRow : System.Data.DataRow {
            
            private MaxDVDRecordingSpeedDataTable tableMaxDVDRecordingSpeed;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MaxDVDRecordingSpeedRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMaxDVDRecordingSpeed = ((MaxDVDRecordingSpeedDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    return ((string)(this[this.tableMaxDVDRecordingSpeed.ValueColumn]));
                }
                set {
                    this[this.tableMaxDVDRecordingSpeed.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Recording_Id {
                get {
                    try {
                        return ((int)(this[this.tableMaxDVDRecordingSpeed.Recording_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Recording_Id\' in table \'MaxDVDRecordingSpeed\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaxDVDRecordingSpeed.Recording_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingRow RecordingRow {
                get {
                    return ((RecordingRow)(this.GetParentRow(this.Table.ParentRelations["Recording_MaxDVDRecordingSpeed"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Recording_MaxDVDRecordingSpeed"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecording_IdNull() {
                return this.IsNull(this.tableMaxDVDRecordingSpeed.Recording_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecording_IdNull() {
                this[this.tableMaxDVDRecordingSpeed.Recording_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DisableISOExtentFixupsRow : System.Data.DataRow {
            
            private DisableISOExtentFixupsDataTable tableDisableISOExtentFixups;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DisableISOExtentFixupsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDisableISOExtentFixups = ((DisableISOExtentFixupsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableDisableISOExtentFixups.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'DisableISOExtentFixups\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDisableISOExtentFixups.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Recording_Id {
                get {
                    try {
                        return ((int)(this[this.tableDisableISOExtentFixups.Recording_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Recording_Id\' in table \'DisableISOExtentFixups\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDisableISOExtentFixups.Recording_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingRow RecordingRow {
                get {
                    return ((RecordingRow)(this.GetParentRow(this.Table.ParentRelations["Recording_DisableISOExtentFixups"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Recording_DisableISOExtentFixups"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableDisableISOExtentFixups.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableDisableISOExtentFixups.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecording_IdNull() {
                return this.IsNull(this.tableDisableISOExtentFixups.Recording_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecording_IdNull() {
                this[this.tableDisableISOExtentFixups.Recording_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RejectNonISORow : System.Data.DataRow {
            
            private RejectNonISODataTable tableRejectNonISO;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RejectNonISORow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRejectNonISO = ((RejectNonISODataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableRejectNonISO.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'RejectNonISO\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRejectNonISO.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Recording_Id {
                get {
                    try {
                        return ((int)(this[this.tableRejectNonISO.Recording_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Recording_Id\' in table \'RejectNonISO\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRejectNonISO.Recording_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingRow RecordingRow {
                get {
                    return ((RecordingRow)(this.GetParentRow(this.Table.ParentRelations["Recording_RejectNonISO"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Recording_RejectNonISO"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableRejectNonISO.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableRejectNonISO.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecording_IdNull() {
                return this.IsNull(this.tableRejectNonISO.Recording_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecording_IdNull() {
                this[this.tableRejectNonISO.Recording_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AddPostgapToISORow : System.Data.DataRow {
            
            private AddPostgapToISODataTable tableAddPostgapToISO;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AddPostgapToISORow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAddPostgapToISO = ((AddPostgapToISODataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableAddPostgapToISO.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'AddPostgapToISO\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddPostgapToISO.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Recording_Id {
                get {
                    try {
                        return ((int)(this[this.tableAddPostgapToISO.Recording_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Recording_Id\' in table \'AddPostgapToISO\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddPostgapToISO.Recording_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingRow RecordingRow {
                get {
                    return ((RecordingRow)(this.GetParentRow(this.Table.ParentRelations["Recording_AddPostgapToISO"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Recording_AddPostgapToISO"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableAddPostgapToISO.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableAddPostgapToISO.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecording_IdNull() {
                return this.IsNull(this.tableAddPostgapToISO.Recording_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecording_IdNull() {
                this[this.tableAddPostgapToISO.Recording_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EnableUsing90_100MinuteCDRsRow : System.Data.DataRow {
            
            private EnableUsing90_100MinuteCDRsDataTable tableEnableUsing90_100MinuteCDRs;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EnableUsing90_100MinuteCDRsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEnableUsing90_100MinuteCDRs = ((EnableUsing90_100MinuteCDRsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableEnableUsing90_100MinuteCDRs.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'EnableUsing90_100MinuteCDRs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnableUsing90_100MinuteCDRs.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Recording_Id {
                get {
                    try {
                        return ((int)(this[this.tableEnableUsing90_100MinuteCDRs.Recording_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Recording_Id\' in table \'EnableUsing90_100MinuteCDRs\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableEnableUsing90_100MinuteCDRs.Recording_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingRow RecordingRow {
                get {
                    return ((RecordingRow)(this.GetParentRow(this.Table.ParentRelations["Recording_EnableUsing90_100MinuteCDRs"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Recording_EnableUsing90_100MinuteCDRs"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableEnableUsing90_100MinuteCDRs.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableEnableUsing90_100MinuteCDRs.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecording_IdNull() {
                return this.IsNull(this.tableEnableUsing90_100MinuteCDRs.Recording_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecording_IdNull() {
                this[this.tableEnableUsing90_100MinuteCDRs.Recording_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DestroyFailedRecordingsRow : System.Data.DataRow {
            
            private DestroyFailedRecordingsDataTable tableDestroyFailedRecordings;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DestroyFailedRecordingsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDestroyFailedRecordings = ((DestroyFailedRecordingsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableDestroyFailedRecordings.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'DestroyFailedRecordings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDestroyFailedRecordings.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Recording_Id {
                get {
                    try {
                        return ((int)(this[this.tableDestroyFailedRecordings.Recording_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Recording_Id\' in table \'DestroyFailedRecordings\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableDestroyFailedRecordings.Recording_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingRow RecordingRow {
                get {
                    return ((RecordingRow)(this.GetParentRow(this.Table.ParentRelations["Recording_DestroyFailedRecordings"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Recording_DestroyFailedRecordings"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableDestroyFailedRecordings.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableDestroyFailedRecordings.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecording_IdNull() {
                return this.IsNull(this.tableDestroyFailedRecordings.Recording_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecording_IdNull() {
                this[this.tableDestroyFailedRecordings.Recording_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class VerifyRow : System.Data.DataRow {
            
            private VerifyDataTable tableVerify;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VerifyRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVerify = ((VerifyDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Verify_Id {
                get {
                    return ((int)(this[this.tableVerify.Verify_IdColumn]));
                }
                set {
                    this[this.tableVerify.Verify_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Setting_Id {
                get {
                    try {
                        return ((int)(this[this.tableVerify.Setting_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Setting_Id\' in table \'Verify\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVerify.Setting_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingRow SettingRow {
                get {
                    return ((SettingRow)(this.GetParentRow(this.Table.ParentRelations["Setting_Verify"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Setting_Verify"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetting_IdNull() {
                return this.IsNull(this.tableVerify.Setting_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetting_IdNull() {
                this[this.tableVerify.Setting_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseVerifyRow[] GetUseVerifyRows() {
                return ((UseVerifyRow[])(base.GetChildRows(this.Table.ChildRelations["Verify_UseVerify"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FrequencyRow[] GetFrequencyRows() {
                return ((FrequencyRow[])(base.GetChildRows(this.Table.ChildRelations["Verify_Frequency"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseChecksumDLLRow[] GetUseChecksumDLLRows() {
                return ((UseChecksumDLLRow[])(base.GetChildRows(this.Table.ChildRelations["Verify_UseChecksumDLL"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UseVerifyRow : System.Data.DataRow {
            
            private UseVerifyDataTable tableUseVerify;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UseVerifyRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUseVerify = ((UseVerifyDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableUseVerify.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'UseVerify\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUseVerify.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Verify_Id {
                get {
                    try {
                        return ((int)(this[this.tableUseVerify.Verify_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Verify_Id\' in table \'UseVerify\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUseVerify.Verify_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyRow VerifyRow {
                get {
                    return ((VerifyRow)(this.GetParentRow(this.Table.ParentRelations["Verify_UseVerify"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Verify_UseVerify"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableUseVerify.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableUseVerify.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVerify_IdNull() {
                return this.IsNull(this.tableUseVerify.Verify_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVerify_IdNull() {
                this[this.tableUseVerify.Verify_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FrequencyRow : System.Data.DataRow {
            
            private FrequencyDataTable tableFrequency;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FrequencyRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFrequency = ((FrequencyDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    return ((string)(this[this.tableFrequency.ValueColumn]));
                }
                set {
                    this[this.tableFrequency.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Verify_Id {
                get {
                    try {
                        return ((int)(this[this.tableFrequency.Verify_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Verify_Id\' in table \'Frequency\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFrequency.Verify_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyRow VerifyRow {
                get {
                    return ((VerifyRow)(this.GetParentRow(this.Table.ParentRelations["Verify_Frequency"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Verify_Frequency"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVerify_IdNull() {
                return this.IsNull(this.tableFrequency.Verify_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVerify_IdNull() {
                this[this.tableFrequency.Verify_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UseChecksumDLLRow : System.Data.DataRow {
            
            private UseChecksumDLLDataTable tableUseChecksumDLL;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UseChecksumDLLRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUseChecksumDLL = ((UseChecksumDLLDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableUseChecksumDLL.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'UseChecksumDLL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUseChecksumDLL.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Verify_Id {
                get {
                    try {
                        return ((int)(this[this.tableUseChecksumDLL.Verify_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Verify_Id\' in table \'UseChecksumDLL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUseChecksumDLL.Verify_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyRow VerifyRow {
                get {
                    return ((VerifyRow)(this.GetParentRow(this.Table.ParentRelations["Verify_UseChecksumDLL"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Verify_UseChecksumDLL"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableUseChecksumDLL.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableUseChecksumDLL.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVerify_IdNull() {
                return this.IsNull(this.tableUseChecksumDLL.Verify_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVerify_IdNull() {
                this[this.tableUseChecksumDLL.Verify_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PrintingRow : System.Data.DataRow {
            
            private PrintingDataTable tablePrinting;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintingRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrinting = ((PrintingDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Printing_Id {
                get {
                    return ((int)(this[this.tablePrinting.Printing_IdColumn]));
                }
                set {
                    this[this.tablePrinting.Printing_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Setting_Id {
                get {
                    try {
                        return ((int)(this[this.tablePrinting.Setting_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Setting_Id\' in table \'Printing\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrinting.Setting_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingRow SettingRow {
                get {
                    return ((SettingRow)(this.GetParentRow(this.Table.ParentRelations["Setting_Printing"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Setting_Printing"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetting_IdNull() {
                return this.IsNull(this.tablePrinting.Setting_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetting_IdNull() {
                this[this.tablePrinting.Setting_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SimulatePrintingRow[] GetSimulatePrintingRows() {
                return ((SimulatePrintingRow[])(base.GetChildRows(this.Table.ChildRelations["Printing_SimulatePrinting"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RejectPatternRow[] GetRejectPatternRows() {
                return ((RejectPatternRow[])(base.GetChildRows(this.Table.ChildRelations["Printing_RejectPattern"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TakeOrdersWithLabelWithoutPrinterRow[] GetTakeOrdersWithLabelWithoutPrinterRows() {
                return ((TakeOrdersWithLabelWithoutPrinterRow[])(base.GetChildRows(this.Table.ChildRelations["Printing_TakeOrdersWithLabelWithoutPrinter"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorOnLowInkLevelRow[] GetErrorOnLowInkLevelRows() {
                return ((ErrorOnLowInkLevelRow[])(base.GetChildRows(this.Table.ChildRelations["Printing_ErrorOnLowInkLevel"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LowInkThresholdPercentRow[] GetLowInkThresholdPercentRows() {
                return ((LowInkThresholdPercentRow[])(base.GetChildRows(this.Table.ChildRelations["Printing_LowInkThresholdPercent"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SimulatePrintingRow : System.Data.DataRow {
            
            private SimulatePrintingDataTable tableSimulatePrinting;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SimulatePrintingRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSimulatePrinting = ((SimulatePrintingDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableSimulatePrinting.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'SimulatePrinting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSimulatePrinting.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Printing_Id {
                get {
                    try {
                        return ((int)(this[this.tableSimulatePrinting.Printing_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Printing_Id\' in table \'SimulatePrinting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSimulatePrinting.Printing_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintingRow PrintingRow {
                get {
                    return ((PrintingRow)(this.GetParentRow(this.Table.ParentRelations["Printing_SimulatePrinting"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Printing_SimulatePrinting"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableSimulatePrinting.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableSimulatePrinting.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrinting_IdNull() {
                return this.IsNull(this.tableSimulatePrinting.Printing_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrinting_IdNull() {
                this[this.tableSimulatePrinting.Printing_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RejectPatternRow : System.Data.DataRow {
            
            private RejectPatternDataTable tableRejectPattern;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RejectPatternRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRejectPattern = ((RejectPatternDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableRejectPattern.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'RejectPattern\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRejectPattern.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Printing_Id {
                get {
                    try {
                        return ((int)(this[this.tableRejectPattern.Printing_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Printing_Id\' in table \'RejectPattern\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRejectPattern.Printing_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintingRow PrintingRow {
                get {
                    return ((PrintingRow)(this.GetParentRow(this.Table.ParentRelations["Printing_RejectPattern"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Printing_RejectPattern"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableRejectPattern.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableRejectPattern.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrinting_IdNull() {
                return this.IsNull(this.tableRejectPattern.Printing_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrinting_IdNull() {
                this[this.tableRejectPattern.Printing_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TakeOrdersWithLabelWithoutPrinterRow : System.Data.DataRow {
            
            private TakeOrdersWithLabelWithoutPrinterDataTable tableTakeOrdersWithLabelWithoutPrinter;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TakeOrdersWithLabelWithoutPrinterRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTakeOrdersWithLabelWithoutPrinter = ((TakeOrdersWithLabelWithoutPrinterDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableTakeOrdersWithLabelWithoutPrinter.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'TakeOrdersWithLabelWithoutPrinter\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableTakeOrdersWithLabelWithoutPrinter.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Printing_Id {
                get {
                    try {
                        return ((int)(this[this.tableTakeOrdersWithLabelWithoutPrinter.Printing_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Printing_Id\' in table \'TakeOrdersWithLabelWithoutPrinter\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableTakeOrdersWithLabelWithoutPrinter.Printing_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintingRow PrintingRow {
                get {
                    return ((PrintingRow)(this.GetParentRow(this.Table.ParentRelations["Printing_TakeOrdersWithLabelWithoutPrinter"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Printing_TakeOrdersWithLabelWithoutPrinter"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableTakeOrdersWithLabelWithoutPrinter.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableTakeOrdersWithLabelWithoutPrinter.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrinting_IdNull() {
                return this.IsNull(this.tableTakeOrdersWithLabelWithoutPrinter.Printing_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrinting_IdNull() {
                this[this.tableTakeOrdersWithLabelWithoutPrinter.Printing_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ErrorOnLowInkLevelRow : System.Data.DataRow {
            
            private ErrorOnLowInkLevelDataTable tableErrorOnLowInkLevel;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ErrorOnLowInkLevelRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableErrorOnLowInkLevel = ((ErrorOnLowInkLevelDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableErrorOnLowInkLevel.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'ErrorOnLowInkLevel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorOnLowInkLevel.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Printing_Id {
                get {
                    try {
                        return ((int)(this[this.tableErrorOnLowInkLevel.Printing_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Printing_Id\' in table \'ErrorOnLowInkLevel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableErrorOnLowInkLevel.Printing_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintingRow PrintingRow {
                get {
                    return ((PrintingRow)(this.GetParentRow(this.Table.ParentRelations["Printing_ErrorOnLowInkLevel"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Printing_ErrorOnLowInkLevel"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableErrorOnLowInkLevel.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableErrorOnLowInkLevel.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrinting_IdNull() {
                return this.IsNull(this.tableErrorOnLowInkLevel.Printing_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrinting_IdNull() {
                this[this.tableErrorOnLowInkLevel.Printing_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LowInkThresholdPercentRow : System.Data.DataRow {
            
            private LowInkThresholdPercentDataTable tableLowInkThresholdPercent;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LowInkThresholdPercentRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLowInkThresholdPercent = ((LowInkThresholdPercentDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    return ((string)(this[this.tableLowInkThresholdPercent.ValueColumn]));
                }
                set {
                    this[this.tableLowInkThresholdPercent.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Printing_Id {
                get {
                    try {
                        return ((int)(this[this.tableLowInkThresholdPercent.Printing_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Printing_Id\' in table \'LowInkThresholdPercent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLowInkThresholdPercent.Printing_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintingRow PrintingRow {
                get {
                    return ((PrintingRow)(this.GetParentRow(this.Table.ParentRelations["Printing_LowInkThresholdPercent"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Printing_LowInkThresholdPercent"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrinting_IdNull() {
                return this.IsNull(this.tableLowInkThresholdPercent.Printing_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrinting_IdNull() {
                this[this.tableLowInkThresholdPercent.Printing_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AutoloaderSettingsRow : System.Data.DataRow {
            
            private AutoloaderSettingsDataTable tableAutoloaderSettings;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AutoloaderSettingsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAutoloaderSettings = ((AutoloaderSettingsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LoaderNumber {
                get {
                    return ((string)(this[this.tableAutoloaderSettings.LoaderNumberColumn]));
                }
                set {
                    this[this.tableAutoloaderSettings.LoaderNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AutoloaderSettings_Id {
                get {
                    return ((int)(this[this.tableAutoloaderSettings.AutoloaderSettings_IdColumn]));
                }
                set {
                    this[this.tableAutoloaderSettings.AutoloaderSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Setting_Id {
                get {
                    try {
                        return ((int)(this[this.tableAutoloaderSettings.Setting_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Setting_Id\' in table \'AutoloaderSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoloaderSettings.Setting_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingRow SettingRow {
                get {
                    return ((SettingRow)(this.GetParentRow(this.Table.ParentRelations["Setting_AutoloaderSettings"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Setting_AutoloaderSettings"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetting_IdNull() {
                return this.IsNull(this.tableAutoloaderSettings.Setting_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetting_IdNull() {
                this[this.tableAutoloaderSettings.Setting_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BinSettingRow[] GetBinSettingRows() {
                return ((BinSettingRow[])(base.GetChildRows(this.Table.ChildRelations["AutoloaderSettings_BinSetting"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MailslotSettingRow[] GetMailslotSettingRows() {
                return ((MailslotSettingRow[])(base.GetChildRows(this.Table.ChildRelations["AutoloaderSettings_MailslotSetting"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaSizeRow[] GetMediaSizeRows() {
                return ((MediaSizeRow[])(base.GetChildRows(this.Table.ChildRelations["AutoloaderSettings_MediaSize"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaTypeRow[] GetMediaTypeRows() {
                return ((MediaTypeRow[])(base.GetChildRows(this.Table.ChildRelations["AutoloaderSettings_MediaType"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BinSettingRow : System.Data.DataRow {
            
            private BinSettingDataTable tableBinSetting;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BinSettingRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBinSetting = ((BinSettingDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BinNumber {
                get {
                    return ((string)(this[this.tableBinSetting.BinNumberColumn]));
                }
                set {
                    this[this.tableBinSetting.BinNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    return ((string)(this[this.tableBinSetting.ValueColumn]));
                }
                set {
                    this[this.tableBinSetting.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AutoloaderSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tableBinSetting.AutoloaderSettings_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AutoloaderSettings_Id\' in table \'BinSetting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBinSetting.AutoloaderSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderSettingsRow AutoloaderSettingsRow {
                get {
                    return ((AutoloaderSettingsRow)(this.GetParentRow(this.Table.ParentRelations["AutoloaderSettings_BinSetting"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AutoloaderSettings_BinSetting"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoloaderSettings_IdNull() {
                return this.IsNull(this.tableBinSetting.AutoloaderSettings_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAutoloaderSettings_IdNull() {
                this[this.tableBinSetting.AutoloaderSettings_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MailslotSettingRow : System.Data.DataRow {
            
            private MailslotSettingDataTable tableMailslotSetting;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MailslotSettingRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMailslotSetting = ((MailslotSettingDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    return ((string)(this[this.tableMailslotSetting.ValueColumn]));
                }
                set {
                    this[this.tableMailslotSetting.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AutoloaderSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tableMailslotSetting.AutoloaderSettings_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AutoloaderSettings_Id\' in table \'MailslotSetting\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableMailslotSetting.AutoloaderSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderSettingsRow AutoloaderSettingsRow {
                get {
                    return ((AutoloaderSettingsRow)(this.GetParentRow(this.Table.ParentRelations["AutoloaderSettings_MailslotSetting"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AutoloaderSettings_MailslotSetting"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoloaderSettings_IdNull() {
                return this.IsNull(this.tableMailslotSetting.AutoloaderSettings_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAutoloaderSettings_IdNull() {
                this[this.tableMailslotSetting.AutoloaderSettings_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MediaSizeRow : System.Data.DataRow {
            
            private MediaSizeDataTable tableMediaSize;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MediaSizeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMediaSize = ((MediaSizeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableMediaSize.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'MediaSize\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMediaSize.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AutoloaderSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tableMediaSize.AutoloaderSettings_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AutoloaderSettings_Id\' in table \'MediaSize\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMediaSize.AutoloaderSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderSettingsRow AutoloaderSettingsRow {
                get {
                    return ((AutoloaderSettingsRow)(this.GetParentRow(this.Table.ParentRelations["AutoloaderSettings_MediaSize"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AutoloaderSettings_MediaSize"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableMediaSize.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableMediaSize.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoloaderSettings_IdNull() {
                return this.IsNull(this.tableMediaSize.AutoloaderSettings_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAutoloaderSettings_IdNull() {
                this[this.tableMediaSize.AutoloaderSettings_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MediaTypeRow : System.Data.DataRow {
            
            private MediaTypeDataTable tableMediaType;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MediaTypeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMediaType = ((MediaTypeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableMediaType.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'MediaType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMediaType.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AutoloaderSettings_Id {
                get {
                    try {
                        return ((int)(this[this.tableMediaType.AutoloaderSettings_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AutoloaderSettings_Id\' in table \'MediaType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMediaType.AutoloaderSettings_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderSettingsRow AutoloaderSettingsRow {
                get {
                    return ((AutoloaderSettingsRow)(this.GetParentRow(this.Table.ParentRelations["AutoloaderSettings_MediaType"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AutoloaderSettings_MediaType"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableMediaType.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableMediaType.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoloaderSettings_IdNull() {
                return this.IsNull(this.tableMediaType.AutoloaderSettings_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAutoloaderSettings_IdNull() {
                this[this.tableMediaType.AutoloaderSettings_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReadingRow : System.Data.DataRow {
            
            private ReadingDataTable tableReading;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReadingRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReading = ((ReadingDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Reading_Id {
                get {
                    return ((int)(this[this.tableReading.Reading_IdColumn]));
                }
                set {
                    this[this.tableReading.Reading_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Setting_Id {
                get {
                    try {
                        return ((int)(this[this.tableReading.Setting_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Setting_Id\' in table \'Reading\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReading.Setting_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingRow SettingRow {
                get {
                    return ((SettingRow)(this.GetParentRow(this.Table.ParentRelations["Setting_Reading"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Setting_Reading"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetting_IdNull() {
                return this.IsNull(this.tableReading.Setting_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetting_IdNull() {
                this[this.tableReading.Setting_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarcodePortRow[] GetBarcodePortRows() {
                return ((BarcodePortRow[])(base.GetChildRows(this.Table.ChildRelations["Reading_BarcodePort"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarcodeAngleRow[] GetBarcodeAngleRows() {
                return ((BarcodeAngleRow[])(base.GetChildRows(this.Table.ChildRelations["Reading_BarcodeAngle"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseBarcodeIndexRow[] GetUseBarcodeIndexRows() {
                return ((UseBarcodeIndexRow[])(base.GetChildRows(this.Table.ChildRelations["Reading_UseBarcodeIndex"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoBulkReadRow[] GetAutoBulkReadRows() {
                return ((AutoBulkReadRow[])(base.GetChildRows(this.Table.ChildRelations["Reading_AutoBulkRead"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AudioReadSpeedRow[] GetAudioReadSpeedRows() {
                return ((AudioReadSpeedRow[])(base.GetChildRows(this.Table.ChildRelations["Reading_AudioReadSpeed"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PreferredReaderRow[] GetPreferredReaderRows() {
                return ((PreferredReaderRow[])(base.GetChildRows(this.Table.ChildRelations["Reading_PreferredReader"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BarcodePortRow : System.Data.DataRow {
            
            private BarcodePortDataTable tableBarcodePort;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BarcodePortRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBarcodePort = ((BarcodePortDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableBarcodePort.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'BarcodePort\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBarcodePort.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Reading_Id {
                get {
                    try {
                        return ((int)(this[this.tableBarcodePort.Reading_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Reading_Id\' in table \'BarcodePort\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBarcodePort.Reading_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadingRow ReadingRow {
                get {
                    return ((ReadingRow)(this.GetParentRow(this.Table.ParentRelations["Reading_BarcodePort"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Reading_BarcodePort"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableBarcodePort.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableBarcodePort.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReading_IdNull() {
                return this.IsNull(this.tableBarcodePort.Reading_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReading_IdNull() {
                this[this.tableBarcodePort.Reading_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BarcodeAngleRow : System.Data.DataRow {
            
            private BarcodeAngleDataTable tableBarcodeAngle;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BarcodeAngleRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBarcodeAngle = ((BarcodeAngleDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    return ((string)(this[this.tableBarcodeAngle.ValueColumn]));
                }
                set {
                    this[this.tableBarcodeAngle.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Reading_Id {
                get {
                    try {
                        return ((int)(this[this.tableBarcodeAngle.Reading_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Reading_Id\' in table \'BarcodeAngle\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBarcodeAngle.Reading_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadingRow ReadingRow {
                get {
                    return ((ReadingRow)(this.GetParentRow(this.Table.ParentRelations["Reading_BarcodeAngle"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Reading_BarcodeAngle"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReading_IdNull() {
                return this.IsNull(this.tableBarcodeAngle.Reading_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReading_IdNull() {
                this[this.tableBarcodeAngle.Reading_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UseBarcodeIndexRow : System.Data.DataRow {
            
            private UseBarcodeIndexDataTable tableUseBarcodeIndex;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UseBarcodeIndexRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUseBarcodeIndex = ((UseBarcodeIndexDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableUseBarcodeIndex.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'UseBarcodeIndex\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUseBarcodeIndex.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Reading_Id {
                get {
                    try {
                        return ((int)(this[this.tableUseBarcodeIndex.Reading_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Reading_Id\' in table \'UseBarcodeIndex\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUseBarcodeIndex.Reading_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadingRow ReadingRow {
                get {
                    return ((ReadingRow)(this.GetParentRow(this.Table.ParentRelations["Reading_UseBarcodeIndex"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Reading_UseBarcodeIndex"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableUseBarcodeIndex.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableUseBarcodeIndex.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReading_IdNull() {
                return this.IsNull(this.tableUseBarcodeIndex.Reading_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReading_IdNull() {
                this[this.tableUseBarcodeIndex.Reading_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AutoBulkReadRow : System.Data.DataRow {
            
            private AutoBulkReadDataTable tableAutoBulkRead;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AutoBulkReadRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAutoBulkRead = ((AutoBulkReadDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AutoBulkRead_Id {
                get {
                    return ((int)(this[this.tableAutoBulkRead.AutoBulkRead_IdColumn]));
                }
                set {
                    this[this.tableAutoBulkRead.AutoBulkRead_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Reading_Id {
                get {
                    try {
                        return ((int)(this[this.tableAutoBulkRead.Reading_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Reading_Id\' in table \'AutoBulkRead\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.Reading_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadingRow ReadingRow {
                get {
                    return ((ReadingRow)(this.GetParentRow(this.Table.ParentRelations["Reading_AutoBulkRead"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Reading_AutoBulkRead"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReading_IdNull() {
                return this.IsNull(this.tableAutoBulkRead.Reading_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReading_IdNull() {
                this[this.tableAutoBulkRead.Reading_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseFolderForImagesRow[] GetBaseFolderForImagesRows() {
                return ((BaseFolderForImagesRow[])(base.GetChildRows(this.Table.ChildRelations["AutoBulkRead_BaseFolderForImages"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseVolumeIDAsFolderNameRow[] GetUseVolumeIDAsFolderNameRows() {
                return ((UseVolumeIDAsFolderNameRow[])(base.GetChildRows(this.Table.ChildRelations["AutoBulkRead_UseVolumeIDAsFolderName"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseBarcodeAsFolderNameRow[] GetUseBarcodeAsFolderNameRows() {
                return ((UseBarcodeAsFolderNameRow[])(base.GetChildRows(this.Table.ChildRelations["AutoBulkRead_UseBarcodeAsFolderName"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtractISOImagesToFoldersAndFilesRow[] GetExtractISOImagesToFoldersAndFilesRows() {
                return ((ExtractISOImagesToFoldersAndFilesRow[])(base.GetChildRows(this.Table.ChildRelations["AutoBulkRead_ExtractISOImagesToFoldersAndFiles"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImageTypeForAudioTracksRow[] GetImageTypeForAudioTracksRows() {
                return ((ImageTypeForAudioTracksRow[])(base.GetChildRows(this.Table.ChildRelations["AutoBulkRead_ImageTypeForAudioTracks"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseISRCAsFilenameForAudioTracksRow[] GetUseISRCAsFilenameForAudioTracksRows() {
                return ((UseISRCAsFilenameForAudioTracksRow[])(base.GetChildRows(this.Table.ChildRelations["AutoBulkRead_UseISRCAsFilenameForAudioTracks"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PutFailuresToRejectBinRow[] GetPutFailuresToRejectBinRows() {
                return ((PutFailuresToRejectBinRow[])(base.GetChildRows(this.Table.ChildRelations["AutoBulkRead_PutFailuresToRejectBin"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BaseFolderForImagesRow : System.Data.DataRow {
            
            private BaseFolderForImagesDataTable tableBaseFolderForImages;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BaseFolderForImagesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBaseFolderForImages = ((BaseFolderForImagesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    return ((string)(this[this.tableBaseFolderForImages.ValueColumn]));
                }
                set {
                    this[this.tableBaseFolderForImages.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AutoBulkRead_Id {
                get {
                    try {
                        return ((int)(this[this.tableBaseFolderForImages.AutoBulkRead_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AutoBulkRead_Id\' in table \'BaseFolderForImages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBaseFolderForImages.AutoBulkRead_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoBulkReadRow AutoBulkReadRow {
                get {
                    return ((AutoBulkReadRow)(this.GetParentRow(this.Table.ParentRelations["AutoBulkRead_BaseFolderForImages"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AutoBulkRead_BaseFolderForImages"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoBulkRead_IdNull() {
                return this.IsNull(this.tableBaseFolderForImages.AutoBulkRead_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAutoBulkRead_IdNull() {
                this[this.tableBaseFolderForImages.AutoBulkRead_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UseVolumeIDAsFolderNameRow : System.Data.DataRow {
            
            private UseVolumeIDAsFolderNameDataTable tableUseVolumeIDAsFolderName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UseVolumeIDAsFolderNameRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUseVolumeIDAsFolderName = ((UseVolumeIDAsFolderNameDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableUseVolumeIDAsFolderName.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'UseVolumeIDAsFolderName\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUseVolumeIDAsFolderName.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AutoBulkRead_Id {
                get {
                    try {
                        return ((int)(this[this.tableUseVolumeIDAsFolderName.AutoBulkRead_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AutoBulkRead_Id\' in table \'UseVolumeIDAsFolderName\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableUseVolumeIDAsFolderName.AutoBulkRead_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoBulkReadRow AutoBulkReadRow {
                get {
                    return ((AutoBulkReadRow)(this.GetParentRow(this.Table.ParentRelations["AutoBulkRead_UseVolumeIDAsFolderName"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AutoBulkRead_UseVolumeIDAsFolderName"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableUseVolumeIDAsFolderName.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableUseVolumeIDAsFolderName.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoBulkRead_IdNull() {
                return this.IsNull(this.tableUseVolumeIDAsFolderName.AutoBulkRead_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAutoBulkRead_IdNull() {
                this[this.tableUseVolumeIDAsFolderName.AutoBulkRead_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UseBarcodeAsFolderNameRow : System.Data.DataRow {
            
            private UseBarcodeAsFolderNameDataTable tableUseBarcodeAsFolderName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UseBarcodeAsFolderNameRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUseBarcodeAsFolderName = ((UseBarcodeAsFolderNameDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableUseBarcodeAsFolderName.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'UseBarcodeAsFolderName\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUseBarcodeAsFolderName.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AutoBulkRead_Id {
                get {
                    try {
                        return ((int)(this[this.tableUseBarcodeAsFolderName.AutoBulkRead_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AutoBulkRead_Id\' in table \'UseBarcodeAsFolderName\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableUseBarcodeAsFolderName.AutoBulkRead_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoBulkReadRow AutoBulkReadRow {
                get {
                    return ((AutoBulkReadRow)(this.GetParentRow(this.Table.ParentRelations["AutoBulkRead_UseBarcodeAsFolderName"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AutoBulkRead_UseBarcodeAsFolderName"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableUseBarcodeAsFolderName.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableUseBarcodeAsFolderName.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoBulkRead_IdNull() {
                return this.IsNull(this.tableUseBarcodeAsFolderName.AutoBulkRead_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAutoBulkRead_IdNull() {
                this[this.tableUseBarcodeAsFolderName.AutoBulkRead_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExtractISOImagesToFoldersAndFilesRow : System.Data.DataRow {
            
            private ExtractISOImagesToFoldersAndFilesDataTable tableExtractISOImagesToFoldersAndFiles;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExtractISOImagesToFoldersAndFilesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExtractISOImagesToFoldersAndFiles = ((ExtractISOImagesToFoldersAndFilesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableExtractISOImagesToFoldersAndFiles.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'ExtractISOImagesToFoldersAndFiles\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableExtractISOImagesToFoldersAndFiles.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AutoBulkRead_Id {
                get {
                    try {
                        return ((int)(this[this.tableExtractISOImagesToFoldersAndFiles.AutoBulkRead_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AutoBulkRead_Id\' in table \'ExtractISOImagesToFoldersAndFile" +
                                "s\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExtractISOImagesToFoldersAndFiles.AutoBulkRead_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoBulkReadRow AutoBulkReadRow {
                get {
                    return ((AutoBulkReadRow)(this.GetParentRow(this.Table.ParentRelations["AutoBulkRead_ExtractISOImagesToFoldersAndFiles"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AutoBulkRead_ExtractISOImagesToFoldersAndFiles"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableExtractISOImagesToFoldersAndFiles.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableExtractISOImagesToFoldersAndFiles.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoBulkRead_IdNull() {
                return this.IsNull(this.tableExtractISOImagesToFoldersAndFiles.AutoBulkRead_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAutoBulkRead_IdNull() {
                this[this.tableExtractISOImagesToFoldersAndFiles.AutoBulkRead_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ImageTypeForAudioTracksRow : System.Data.DataRow {
            
            private ImageTypeForAudioTracksDataTable tableImageTypeForAudioTracks;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ImageTypeForAudioTracksRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableImageTypeForAudioTracks = ((ImageTypeForAudioTracksDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableImageTypeForAudioTracks.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'ImageTypeForAudioTracks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableImageTypeForAudioTracks.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AutoBulkRead_Id {
                get {
                    try {
                        return ((int)(this[this.tableImageTypeForAudioTracks.AutoBulkRead_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AutoBulkRead_Id\' in table \'ImageTypeForAudioTracks\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableImageTypeForAudioTracks.AutoBulkRead_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoBulkReadRow AutoBulkReadRow {
                get {
                    return ((AutoBulkReadRow)(this.GetParentRow(this.Table.ParentRelations["AutoBulkRead_ImageTypeForAudioTracks"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AutoBulkRead_ImageTypeForAudioTracks"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableImageTypeForAudioTracks.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableImageTypeForAudioTracks.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoBulkRead_IdNull() {
                return this.IsNull(this.tableImageTypeForAudioTracks.AutoBulkRead_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAutoBulkRead_IdNull() {
                this[this.tableImageTypeForAudioTracks.AutoBulkRead_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UseISRCAsFilenameForAudioTracksRow : System.Data.DataRow {
            
            private UseISRCAsFilenameForAudioTracksDataTable tableUseISRCAsFilenameForAudioTracks;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UseISRCAsFilenameForAudioTracksRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUseISRCAsFilenameForAudioTracks = ((UseISRCAsFilenameForAudioTracksDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableUseISRCAsFilenameForAudioTracks.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'UseISRCAsFilenameForAudioTracks\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableUseISRCAsFilenameForAudioTracks.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AutoBulkRead_Id {
                get {
                    try {
                        return ((int)(this[this.tableUseISRCAsFilenameForAudioTracks.AutoBulkRead_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AutoBulkRead_Id\' in table \'UseISRCAsFilenameForAudioTracks\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUseISRCAsFilenameForAudioTracks.AutoBulkRead_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoBulkReadRow AutoBulkReadRow {
                get {
                    return ((AutoBulkReadRow)(this.GetParentRow(this.Table.ParentRelations["AutoBulkRead_UseISRCAsFilenameForAudioTracks"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AutoBulkRead_UseISRCAsFilenameForAudioTracks"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableUseISRCAsFilenameForAudioTracks.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableUseISRCAsFilenameForAudioTracks.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoBulkRead_IdNull() {
                return this.IsNull(this.tableUseISRCAsFilenameForAudioTracks.AutoBulkRead_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAutoBulkRead_IdNull() {
                this[this.tableUseISRCAsFilenameForAudioTracks.AutoBulkRead_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PutFailuresToRejectBinRow : System.Data.DataRow {
            
            private PutFailuresToRejectBinDataTable tablePutFailuresToRejectBin;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PutFailuresToRejectBinRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePutFailuresToRejectBin = ((PutFailuresToRejectBinDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tablePutFailuresToRejectBin.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'PutFailuresToRejectBin\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePutFailuresToRejectBin.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AutoBulkRead_Id {
                get {
                    try {
                        return ((int)(this[this.tablePutFailuresToRejectBin.AutoBulkRead_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AutoBulkRead_Id\' in table \'PutFailuresToRejectBin\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablePutFailuresToRejectBin.AutoBulkRead_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoBulkReadRow AutoBulkReadRow {
                get {
                    return ((AutoBulkReadRow)(this.GetParentRow(this.Table.ParentRelations["AutoBulkRead_PutFailuresToRejectBin"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AutoBulkRead_PutFailuresToRejectBin"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tablePutFailuresToRejectBin.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tablePutFailuresToRejectBin.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAutoBulkRead_IdNull() {
                return this.IsNull(this.tablePutFailuresToRejectBin.AutoBulkRead_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAutoBulkRead_IdNull() {
                this[this.tablePutFailuresToRejectBin.AutoBulkRead_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AudioReadSpeedRow : System.Data.DataRow {
            
            private AudioReadSpeedDataTable tableAudioReadSpeed;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AudioReadSpeedRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAudioReadSpeed = ((AudioReadSpeedDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableAudioReadSpeed.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'AudioReadSpeed\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAudioReadSpeed.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Reading_Id {
                get {
                    try {
                        return ((int)(this[this.tableAudioReadSpeed.Reading_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Reading_Id\' in table \'AudioReadSpeed\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAudioReadSpeed.Reading_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadingRow ReadingRow {
                get {
                    return ((ReadingRow)(this.GetParentRow(this.Table.ParentRelations["Reading_AudioReadSpeed"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Reading_AudioReadSpeed"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableAudioReadSpeed.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableAudioReadSpeed.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReading_IdNull() {
                return this.IsNull(this.tableAudioReadSpeed.Reading_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReading_IdNull() {
                this[this.tableAudioReadSpeed.Reading_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PreferredReaderRow : System.Data.DataRow {
            
            private PreferredReaderDataTable tablePreferredReader;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PreferredReaderRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePreferredReader = ((PreferredReaderDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tablePreferredReader.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'PreferredReader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePreferredReader.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Reading_Id {
                get {
                    try {
                        return ((int)(this[this.tablePreferredReader.Reading_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Reading_Id\' in table \'PreferredReader\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePreferredReader.Reading_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadingRow ReadingRow {
                get {
                    return ((ReadingRow)(this.GetParentRow(this.Table.ParentRelations["Reading_PreferredReader"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Reading_PreferredReader"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tablePreferredReader.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tablePreferredReader.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReading_IdNull() {
                return this.IsNull(this.tablePreferredReader.Reading_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReading_IdNull() {
                this[this.tablePreferredReader.Reading_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MediaCodesRow : System.Data.DataRow {
            
            private MediaCodesDataTable tableMediaCodes;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MediaCodesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMediaCodes = ((MediaCodesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MediaCodes_Id {
                get {
                    return ((int)(this[this.tableMediaCodes.MediaCodes_IdColumn]));
                }
                set {
                    this[this.tableMediaCodes.MediaCodes_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Setting_Id {
                get {
                    try {
                        return ((int)(this[this.tableMediaCodes.Setting_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Setting_Id\' in table \'MediaCodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMediaCodes.Setting_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingRow SettingRow {
                get {
                    return ((SettingRow)(this.GetParentRow(this.Table.ParentRelations["Setting_MediaCodes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Setting_MediaCodes"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetting_IdNull() {
                return this.IsNull(this.tableMediaCodes.Setting_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetting_IdNull() {
                this[this.tableMediaCodes.Setting_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseMediaCodesRow[] GetUseMediaCodesRows() {
                return ((UseMediaCodesRow[])(base.GetChildRows(this.Table.ChildRelations["MediaCodes_UseMediaCodes"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodeRow[] GetMediaCodeRows() {
                return ((MediaCodeRow[])(base.GetChildRows(this.Table.ChildRelations["MediaCodes_MediaCode"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClearAllCodesRow[] GetClearAllCodesRows() {
                return ((ClearAllCodesRow[])(base.GetChildRows(this.Table.ChildRelations["MediaCodes_ClearAllCodes"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UseMediaCodesRow : System.Data.DataRow {
            
            private UseMediaCodesDataTable tableUseMediaCodes;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UseMediaCodesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUseMediaCodes = ((UseMediaCodesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableUseMediaCodes.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'UseMediaCodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUseMediaCodes.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MediaCodes_Id {
                get {
                    try {
                        return ((int)(this[this.tableUseMediaCodes.MediaCodes_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MediaCodes_Id\' in table \'UseMediaCodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUseMediaCodes.MediaCodes_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodesRow MediaCodesRow {
                get {
                    return ((MediaCodesRow)(this.GetParentRow(this.Table.ParentRelations["MediaCodes_UseMediaCodes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MediaCodes_UseMediaCodes"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableUseMediaCodes.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableUseMediaCodes.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMediaCodes_IdNull() {
                return this.IsNull(this.tableUseMediaCodes.MediaCodes_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMediaCodes_IdNull() {
                this[this.tableUseMediaCodes.MediaCodes_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MediaCodeRow : System.Data.DataRow {
            
            private MediaCodeDataTable tableMediaCode;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MediaCodeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMediaCode = ((MediaCodeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    return ((string)(this[this.tableMediaCode.ValueColumn]));
                }
                set {
                    this[this.tableMediaCode.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MediaCodes_Id {
                get {
                    try {
                        return ((int)(this[this.tableMediaCode.MediaCodes_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MediaCodes_Id\' in table \'MediaCode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMediaCode.MediaCodes_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodesRow MediaCodesRow {
                get {
                    return ((MediaCodesRow)(this.GetParentRow(this.Table.ParentRelations["MediaCodes_MediaCode"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MediaCodes_MediaCode"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMediaCodes_IdNull() {
                return this.IsNull(this.tableMediaCode.MediaCodes_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMediaCodes_IdNull() {
                this[this.tableMediaCode.MediaCodes_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClearAllCodesRow : System.Data.DataRow {
            
            private ClearAllCodesDataTable tableClearAllCodes;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClearAllCodesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClearAllCodes = ((ClearAllCodesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MediaCodes_Id {
                get {
                    try {
                        return ((int)(this[this.tableClearAllCodes.MediaCodes_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'MediaCodes_Id\' in table \'ClearAllCodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClearAllCodes.MediaCodes_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodesRow MediaCodesRow {
                get {
                    return ((MediaCodesRow)(this.GetParentRow(this.Table.ParentRelations["MediaCodes_ClearAllCodes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MediaCodes_ClearAllCodes"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMediaCodes_IdNull() {
                return this.IsNull(this.tableClearAllCodes.MediaCodes_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMediaCodes_IdNull() {
                this[this.tableClearAllCodes.MediaCodes_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class KioskModeRow : System.Data.DataRow {
            
            private KioskModeDataTable tableKioskMode;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KioskModeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableKioskMode = ((KioskModeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KioskMode_Id {
                get {
                    return ((int)(this[this.tableKioskMode.KioskMode_IdColumn]));
                }
                set {
                    this[this.tableKioskMode.KioskMode_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Setting_Id {
                get {
                    try {
                        return ((int)(this[this.tableKioskMode.Setting_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Setting_Id\' in table \'KioskMode\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKioskMode.Setting_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingRow SettingRow {
                get {
                    return ((SettingRow)(this.GetParentRow(this.Table.ParentRelations["Setting_KioskMode"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Setting_KioskMode"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSetting_IdNull() {
                return this.IsNull(this.tableKioskMode.Setting_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSetting_IdNull() {
                this[this.tableKioskMode.Setting_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecoverOrdersRow[] GetRecoverOrdersRows() {
                return ((RecoverOrdersRow[])(base.GetChildRows(this.Table.ChildRelations["KioskMode_RecoverOrders"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RunNoPrinterRow[] GetRunNoPrinterRows() {
                return ((RunNoPrinterRow[])(base.GetChildRows(this.Table.ChildRelations["KioskMode_RunNoPrinter"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderRecoveryRow[] GetAutoloaderRecoveryRows() {
                return ((AutoloaderRecoveryRow[])(base.GetChildRows(this.Table.ChildRelations["KioskMode_AutoloaderRecovery"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrinterRecoveryRow[] GetPrinterRecoveryRows() {
                return ((PrinterRecoveryRow[])(base.GetChildRows(this.Table.ChildRelations["KioskMode_PrinterRecovery"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoRespondOnStartupRow[] GetAutoRespondOnStartupRows() {
                return ((AutoRespondOnStartupRow[])(base.GetChildRows(this.Table.ChildRelations["KioskMode_AutoRespondOnStartup"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RecoverOrdersRow : System.Data.DataRow {
            
            private RecoverOrdersDataTable tableRecoverOrders;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RecoverOrdersRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRecoverOrders = ((RecoverOrdersDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableRecoverOrders.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'RecoverOrders\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecoverOrders.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KioskMode_Id {
                get {
                    try {
                        return ((int)(this[this.tableRecoverOrders.KioskMode_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'KioskMode_Id\' in table \'RecoverOrders\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecoverOrders.KioskMode_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KioskModeRow KioskModeRow {
                get {
                    return ((KioskModeRow)(this.GetParentRow(this.Table.ParentRelations["KioskMode_RecoverOrders"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["KioskMode_RecoverOrders"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableRecoverOrders.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableRecoverOrders.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKioskMode_IdNull() {
                return this.IsNull(this.tableRecoverOrders.KioskMode_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKioskMode_IdNull() {
                this[this.tableRecoverOrders.KioskMode_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RunNoPrinterRow : System.Data.DataRow {
            
            private RunNoPrinterDataTable tableRunNoPrinter;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RunNoPrinterRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRunNoPrinter = ((RunNoPrinterDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableRunNoPrinter.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'RunNoPrinter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRunNoPrinter.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KioskMode_Id {
                get {
                    try {
                        return ((int)(this[this.tableRunNoPrinter.KioskMode_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'KioskMode_Id\' in table \'RunNoPrinter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRunNoPrinter.KioskMode_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KioskModeRow KioskModeRow {
                get {
                    return ((KioskModeRow)(this.GetParentRow(this.Table.ParentRelations["KioskMode_RunNoPrinter"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["KioskMode_RunNoPrinter"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableRunNoPrinter.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableRunNoPrinter.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKioskMode_IdNull() {
                return this.IsNull(this.tableRunNoPrinter.KioskMode_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKioskMode_IdNull() {
                this[this.tableRunNoPrinter.KioskMode_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AutoloaderRecoveryRow : System.Data.DataRow {
            
            private AutoloaderRecoveryDataTable tableAutoloaderRecovery;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AutoloaderRecoveryRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAutoloaderRecovery = ((AutoloaderRecoveryDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableAutoloaderRecovery.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'AutoloaderRecovery\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoloaderRecovery.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KioskMode_Id {
                get {
                    try {
                        return ((int)(this[this.tableAutoloaderRecovery.KioskMode_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'KioskMode_Id\' in table \'AutoloaderRecovery\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoloaderRecovery.KioskMode_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KioskModeRow KioskModeRow {
                get {
                    return ((KioskModeRow)(this.GetParentRow(this.Table.ParentRelations["KioskMode_AutoloaderRecovery"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["KioskMode_AutoloaderRecovery"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableAutoloaderRecovery.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableAutoloaderRecovery.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKioskMode_IdNull() {
                return this.IsNull(this.tableAutoloaderRecovery.KioskMode_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKioskMode_IdNull() {
                this[this.tableAutoloaderRecovery.KioskMode_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PrinterRecoveryRow : System.Data.DataRow {
            
            private PrinterRecoveryDataTable tablePrinterRecovery;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrinterRecoveryRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrinterRecovery = ((PrinterRecoveryDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tablePrinterRecovery.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'PrinterRecovery\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrinterRecovery.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KioskMode_Id {
                get {
                    try {
                        return ((int)(this[this.tablePrinterRecovery.KioskMode_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'KioskMode_Id\' in table \'PrinterRecovery\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrinterRecovery.KioskMode_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KioskModeRow KioskModeRow {
                get {
                    return ((KioskModeRow)(this.GetParentRow(this.Table.ParentRelations["KioskMode_PrinterRecovery"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["KioskMode_PrinterRecovery"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tablePrinterRecovery.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tablePrinterRecovery.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKioskMode_IdNull() {
                return this.IsNull(this.tablePrinterRecovery.KioskMode_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKioskMode_IdNull() {
                this[this.tablePrinterRecovery.KioskMode_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AutoRespondOnStartupRow : System.Data.DataRow {
            
            private AutoRespondOnStartupDataTable tableAutoRespondOnStartup;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AutoRespondOnStartupRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAutoRespondOnStartup = ((AutoRespondOnStartupDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableAutoRespondOnStartup.ValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Value\' in table \'AutoRespondOnStartup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoRespondOnStartup.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KioskMode_Id {
                get {
                    try {
                        return ((int)(this[this.tableAutoRespondOnStartup.KioskMode_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'KioskMode_Id\' in table \'AutoRespondOnStartup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoRespondOnStartup.KioskMode_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KioskModeRow KioskModeRow {
                get {
                    return ((KioskModeRow)(this.GetParentRow(this.Table.ParentRelations["KioskMode_AutoRespondOnStartup"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["KioskMode_AutoRespondOnStartup"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableAutoRespondOnStartup.ValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableAutoRespondOnStartup.ValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKioskMode_IdNull() {
                return this.IsNull(this.tableAutoRespondOnStartup.KioskMode_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKioskMode_IdNull() {
                this[this.tableAutoRespondOnStartup.KioskMode_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PauseServerRow : System.Data.DataRow {
            
            private PauseServerDataTable tablePauseServer;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PauseServerRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePauseServer = ((PauseServerDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PauseServer_Id {
                get {
                    return ((int)(this[this.tablePauseServer.PauseServer_IdColumn]));
                }
                set {
                    this[this.tablePauseServer.PauseServer_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword7Row[] GetServerPassword7Rows() {
                return ((ServerPassword7Row[])(base.GetChildRows(this.Table.ChildRelations["PauseServer_ServerPassword7"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServerPassword7Row : System.Data.DataRow {
            
            private ServerPassword7DataTable tableServerPassword7;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerPassword7Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerPassword7 = ((ServerPassword7DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EncodedPassword {
                get {
                    return ((string)(this[this.tableServerPassword7.EncodedPasswordColumn]));
                }
                set {
                    this[this.tableServerPassword7.EncodedPasswordColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EncodeNumber {
                get {
                    try {
                        return ((string)(this[this.tableServerPassword7.EncodeNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EncodeNumber\' in table \'ServerPassword7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerPassword7.EncodeNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PauseServer_Id {
                get {
                    try {
                        return ((int)(this[this.tableServerPassword7.PauseServer_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PauseServer_Id\' in table \'ServerPassword7\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerPassword7.PauseServer_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PauseServerRow PauseServerRow {
                get {
                    return ((PauseServerRow)(this.GetParentRow(this.Table.ParentRelations["PauseServer_ServerPassword7"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PauseServer_ServerPassword7"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEncodeNumberNull() {
                return this.IsNull(this.tableServerPassword7.EncodeNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEncodeNumberNull() {
                this[this.tableServerPassword7.EncodeNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPauseServer_IdNull() {
                return this.IsNull(this.tableServerPassword7.PauseServer_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPauseServer_IdNull() {
                this[this.tableServerPassword7.PauseServer_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ResumeServerRow : System.Data.DataRow {
            
            private ResumeServerDataTable tableResumeServer;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ResumeServerRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableResumeServer = ((ResumeServerDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ResumeServer_Id {
                get {
                    return ((int)(this[this.tableResumeServer.ResumeServer_IdColumn]));
                }
                set {
                    this[this.tableResumeServer.ResumeServer_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword8Row[] GetServerPassword8Rows() {
                return ((ServerPassword8Row[])(base.GetChildRows(this.Table.ChildRelations["ResumeServer_ServerPassword8"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServerPassword8Row : System.Data.DataRow {
            
            private ServerPassword8DataTable tableServerPassword8;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerPassword8Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerPassword8 = ((ServerPassword8DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EncodedPassword {
                get {
                    return ((string)(this[this.tableServerPassword8.EncodedPasswordColumn]));
                }
                set {
                    this[this.tableServerPassword8.EncodedPasswordColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EncodeNumber {
                get {
                    try {
                        return ((string)(this[this.tableServerPassword8.EncodeNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EncodeNumber\' in table \'ServerPassword8\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerPassword8.EncodeNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ResumeServer_Id {
                get {
                    try {
                        return ((int)(this[this.tableServerPassword8.ResumeServer_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ResumeServer_Id\' in table \'ServerPassword8\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerPassword8.ResumeServer_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResumeServerRow ResumeServerRow {
                get {
                    return ((ResumeServerRow)(this.GetParentRow(this.Table.ParentRelations["ResumeServer_ServerPassword8"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ResumeServer_ServerPassword8"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEncodeNumberNull() {
                return this.IsNull(this.tableServerPassword8.EncodeNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEncodeNumberNull() {
                this[this.tableServerPassword8.EncodeNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResumeServer_IdNull() {
                return this.IsNull(this.tableServerPassword8.ResumeServer_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResumeServer_IdNull() {
                this[this.tableServerPassword8.ResumeServer_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StopServerRow : System.Data.DataRow {
            
            private StopServerDataTable tableStopServer;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StopServerRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStopServer = ((StopServerDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AbortRecordingsInProcess {
                get {
                    try {
                        return ((string)(this[this.tableStopServer.AbortRecordingsInProcessColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AbortRecordingsInProcess\' in table \'StopServer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStopServer.AbortRecordingsInProcessColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StopServer_Id {
                get {
                    return ((int)(this[this.tableStopServer.StopServer_IdColumn]));
                }
                set {
                    this[this.tableStopServer.StopServer_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAbortRecordingsInProcessNull() {
                return this.IsNull(this.tableStopServer.AbortRecordingsInProcessColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAbortRecordingsInProcessNull() {
                this[this.tableStopServer.AbortRecordingsInProcessColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword9Row[] GetServerPassword9Rows() {
                return ((ServerPassword9Row[])(base.GetChildRows(this.Table.ChildRelations["StopServer_ServerPassword9"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServerPassword9Row : System.Data.DataRow {
            
            private ServerPassword9DataTable tableServerPassword9;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerPassword9Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerPassword9 = ((ServerPassword9DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EncodedPassword {
                get {
                    return ((string)(this[this.tableServerPassword9.EncodedPasswordColumn]));
                }
                set {
                    this[this.tableServerPassword9.EncodedPasswordColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EncodeNumber {
                get {
                    try {
                        return ((string)(this[this.tableServerPassword9.EncodeNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EncodeNumber\' in table \'ServerPassword9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerPassword9.EncodeNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StopServer_Id {
                get {
                    try {
                        return ((int)(this[this.tableServerPassword9.StopServer_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'StopServer_Id\' in table \'ServerPassword9\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerPassword9.StopServer_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopServerRow StopServerRow {
                get {
                    return ((StopServerRow)(this.GetParentRow(this.Table.ParentRelations["StopServer_ServerPassword9"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["StopServer_ServerPassword9"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEncodeNumberNull() {
                return this.IsNull(this.tableServerPassword9.EncodeNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEncodeNumberNull() {
                this[this.tableServerPassword9.EncodeNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStopServer_IdNull() {
                return this.IsNull(this.tableServerPassword9.StopServer_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStopServer_IdNull() {
                this[this.tableServerPassword9.StopServer_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FlashUploadRow : System.Data.DataRow {
            
            private FlashUploadDataTable tableFlashUpload;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FlashUploadRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFlashUpload = ((FlashUploadDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Device {
                get {
                    return ((string)(this[this.tableFlashUpload.DeviceColumn]));
                }
                set {
                    this[this.tableFlashUpload.DeviceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Filepath {
                get {
                    return ((string)(this[this.tableFlashUpload.FilepathColumn]));
                }
                set {
                    this[this.tableFlashUpload.FilepathColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FlashUpload_Id {
                get {
                    return ((int)(this[this.tableFlashUpload.FlashUpload_IdColumn]));
                }
                set {
                    this[this.tableFlashUpload.FlashUpload_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword10Row[] GetServerPassword10Rows() {
                return ((ServerPassword10Row[])(base.GetChildRows(this.Table.ChildRelations["FlashUpload_ServerPassword10"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServerPassword10Row : System.Data.DataRow {
            
            private ServerPassword10DataTable tableServerPassword10;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerPassword10Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerPassword10 = ((ServerPassword10DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EncodedPassword {
                get {
                    return ((string)(this[this.tableServerPassword10.EncodedPasswordColumn]));
                }
                set {
                    this[this.tableServerPassword10.EncodedPasswordColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EncodeNumber {
                get {
                    try {
                        return ((string)(this[this.tableServerPassword10.EncodeNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EncodeNumber\' in table \'ServerPassword10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerPassword10.EncodeNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FlashUpload_Id {
                get {
                    try {
                        return ((int)(this[this.tableServerPassword10.FlashUpload_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FlashUpload_Id\' in table \'ServerPassword10\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerPassword10.FlashUpload_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlashUploadRow FlashUploadRow {
                get {
                    return ((FlashUploadRow)(this.GetParentRow(this.Table.ParentRelations["FlashUpload_ServerPassword10"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FlashUpload_ServerPassword10"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEncodeNumberNull() {
                return this.IsNull(this.tableServerPassword10.EncodeNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEncodeNumberNull() {
                this[this.tableServerPassword10.EncodeNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlashUpload_IdNull() {
                return this.IsNull(this.tableServerPassword10.FlashUpload_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlashUpload_IdNull() {
                this[this.tableServerPassword10.FlashUpload_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GetUnlockingCodesRow : System.Data.DataRow {
            
            private GetUnlockingCodesDataTable tableGetUnlockingCodes;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GetUnlockingCodesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetUnlockingCodes = ((GetUnlockingCodesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Feature {
                get {
                    try {
                        return ((string)(this[this.tableGetUnlockingCodes.FeatureColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Feature\' in table \'GetUnlockingCodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetUnlockingCodes.FeatureColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeatureNull() {
                return this.IsNull(this.tableGetUnlockingCodes.FeatureColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeatureNull() {
                this[this.tableGetUnlockingCodes.FeatureColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SetActivationCodesRow : System.Data.DataRow {
            
            private SetActivationCodesDataTable tableSetActivationCodes;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SetActivationCodesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSetActivationCodes = ((SetActivationCodesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Feature {
                get {
                    try {
                        return ((string)(this[this.tableSetActivationCodes.FeatureColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Feature\' in table \'SetActivationCodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSetActivationCodes.FeatureColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Code1 {
                get {
                    return ((string)(this[this.tableSetActivationCodes.Code1Column]));
                }
                set {
                    this[this.tableSetActivationCodes.Code1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Code2 {
                get {
                    try {
                        return ((string)(this[this.tableSetActivationCodes.Code2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Code2\' in table \'SetActivationCodes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSetActivationCodes.Code2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeatureNull() {
                return this.IsNull(this.tableSetActivationCodes.FeatureColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeatureNull() {
                this[this.tableSetActivationCodes.FeatureColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCode2Null() {
                return this.IsNull(this.tableSetActivationCodes.Code2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCode2Null() {
                this[this.tableSetActivationCodes.Code2Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetServerStatusRowChangeEvent : System.EventArgs {
            
            private GetServerStatusRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetServerStatusRowChangeEvent(GetServerStatusRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetServerStatusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetParameterSettingsRowChangeEvent : System.EventArgs {
            
            private GetParameterSettingsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetParameterSettingsRowChangeEvent(GetParameterSettingsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetParameterSettingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetOrderListRowChangeEvent : System.EventArgs {
            
            private GetOrderListRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetOrderListRowChangeEvent(GetOrderListRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetOrderListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServerPasswordRowChangeEvent : System.EventArgs {
            
            private ServerPasswordRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPasswordRowChangeEvent(ServerPasswordRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPasswordRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SetServerPasswordRowChangeEvent : System.EventArgs {
            
            private SetServerPasswordRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetServerPasswordRowChangeEvent(SetServerPasswordRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetServerPasswordRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OldPasswordRowChangeEvent : System.EventArgs {
            
            private OldPasswordRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OldPasswordRowChangeEvent(OldPasswordRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OldPasswordRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NewPasswordRowChangeEvent : System.EventArgs {
            
            private NewPasswordRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NewPasswordRowChangeEvent(NewPasswordRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NewPasswordRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServerPassword1RowChangeEvent : System.EventArgs {
            
            private ServerPassword1Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword1RowChangeEvent(ServerPassword1Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class VerifyServerPasswordRowChangeEvent : System.EventArgs {
            
            private VerifyServerPasswordRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyServerPasswordRowChangeEvent(VerifyServerPasswordRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyServerPasswordRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServerPassword2RowChangeEvent : System.EventArgs {
            
            private ServerPassword2Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword2RowChangeEvent(ServerPassword2Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CancelOrderRowChangeEvent : System.EventArgs {
            
            private CancelOrderRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CancelOrderRowChangeEvent(CancelOrderRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CancelOrderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServerPassword3RowChangeEvent : System.EventArgs {
            
            private ServerPassword3Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword3RowChangeEvent(ServerPassword3Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword3Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ChangeOrderRowChangeEvent : System.EventArgs {
            
            private ChangeOrderRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChangeOrderRowChangeEvent(ChangeOrderRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChangeOrderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServerPassword4RowChangeEvent : System.EventArgs {
            
            private ServerPassword4Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword4RowChangeEvent(ServerPassword4Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword4Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SuspendOrderRowChangeEvent : System.EventArgs {
            
            private SuspendOrderRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SuspendOrderRowChangeEvent(SuspendOrderRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SuspendOrderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ResumeOrderRowChangeEvent : System.EventArgs {
            
            private ResumeOrderRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResumeOrderRowChangeEvent(ResumeOrderRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResumeOrderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class QuantityRowChangeEvent : System.EventArgs {
            
            private QuantityRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuantityRowChangeEvent(QuantityRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QuantityRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EnableDeviceRowChangeEvent : System.EventArgs {
            
            private EnableDeviceRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnableDeviceRowChangeEvent(EnableDeviceRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnableDeviceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServerPassword5RowChangeEvent : System.EventArgs {
            
            private ServerPassword5Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword5RowChangeEvent(ServerPassword5Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword5Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AutoloaderRowChangeEvent : System.EventArgs {
            
            private AutoloaderRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderRowChangeEvent(AutoloaderRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RecorderRowChangeEvent : System.EventArgs {
            
            private RecorderRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecorderRowChangeEvent(RecorderRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecorderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PrinterRowChangeEvent : System.EventArgs {
            
            private PrinterRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrinterRowChangeEvent(PrinterRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrinterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ResetInputBinsRowChangeEvent : System.EventArgs {
            
            private ResetInputBinsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResetInputBinsRowChangeEvent(ResetInputBinsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResetInputBinsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SetDialogActionRowChangeEvent : System.EventArgs {
            
            private SetDialogActionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetDialogActionRowChangeEvent(SetDialogActionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetDialogActionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetSessionLogRowChangeEvent : System.EventArgs {
            
            private GetSessionLogRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSessionLogRowChangeEvent(GetSessionLogRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetSessionLogRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClearSessionLogRowChangeEvent : System.EventArgs {
            
            private ClearSessionLogRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClearSessionLogRowChangeEvent(ClearSessionLogRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClearSessionLogRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SetParameterRowChangeEvent : System.EventArgs {
            
            private SetParameterRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetParameterRowChangeEvent(SetParameterRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetParameterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServerPassword6RowChangeEvent : System.EventArgs {
            
            private ServerPassword6Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword6RowChangeEvent(ServerPassword6Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword6Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SettingRowChangeEvent : System.EventArgs {
            
            private SettingRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingRowChangeEvent(SettingRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SettingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServerRowChangeEvent : System.EventArgs {
            
            private ServerRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerRowChangeEvent(ServerRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ModeSettingsRowChangeEvent : System.EventArgs {
            
            private ModeSettingsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModeSettingsRowChangeEvent(ModeSettingsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModeSettingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServerModeRowChangeEvent : System.EventArgs {
            
            private ServerModeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerModeRowChangeEvent(ServerModeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerModeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OperatingModeRowChangeEvent : System.EventArgs {
            
            private OperatingModeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperatingModeRowChangeEvent(OperatingModeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperatingModeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UseFIFOModeRowChangeEvent : System.EventArgs {
            
            private UseFIFOModeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseFIFOModeRowChangeEvent(UseFIFOModeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseFIFOModeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CachingRowChangeEvent : System.EventArgs {
            
            private CachingRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CachingRowChangeEvent(CachingRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CachingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UseStaticCachingRowChangeEvent : System.EventArgs {
            
            private UseStaticCachingRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseStaticCachingRowChangeEvent(UseStaticCachingRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseStaticCachingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CacheDriveLettersRowChangeEvent : System.EventArgs {
            
            private CacheDriveLettersRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CacheDriveLettersRowChangeEvent(CacheDriveLettersRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CacheDriveLettersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RecordingRowChangeEvent : System.EventArgs {
            
            private RecordingRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingRowChangeEvent(RecordingRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecordingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SimulateRecordingRowChangeEvent : System.EventArgs {
            
            private SimulateRecordingRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SimulateRecordingRowChangeEvent(SimulateRecordingRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SimulateRecordingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UseNewMediaOnlyRowChangeEvent : System.EventArgs {
            
            private UseNewMediaOnlyRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseNewMediaOnlyRowChangeEvent(UseNewMediaOnlyRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseNewMediaOnlyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MaxRecordingSpeedRowChangeEvent : System.EventArgs {
            
            private MaxRecordingSpeedRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaxRecordingSpeedRowChangeEvent(MaxRecordingSpeedRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaxRecordingSpeedRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MaxDVDRecordingSpeedRowChangeEvent : System.EventArgs {
            
            private MaxDVDRecordingSpeedRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaxDVDRecordingSpeedRowChangeEvent(MaxDVDRecordingSpeedRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaxDVDRecordingSpeedRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DisableISOExtentFixupsRowChangeEvent : System.EventArgs {
            
            private DisableISOExtentFixupsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DisableISOExtentFixupsRowChangeEvent(DisableISOExtentFixupsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DisableISOExtentFixupsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RejectNonISORowChangeEvent : System.EventArgs {
            
            private RejectNonISORow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RejectNonISORowChangeEvent(RejectNonISORow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RejectNonISORow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AddPostgapToISORowChangeEvent : System.EventArgs {
            
            private AddPostgapToISORow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AddPostgapToISORowChangeEvent(AddPostgapToISORow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AddPostgapToISORow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EnableUsing90_100MinuteCDRsRowChangeEvent : System.EventArgs {
            
            private EnableUsing90_100MinuteCDRsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnableUsing90_100MinuteCDRsRowChangeEvent(EnableUsing90_100MinuteCDRsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EnableUsing90_100MinuteCDRsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DestroyFailedRecordingsRowChangeEvent : System.EventArgs {
            
            private DestroyFailedRecordingsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DestroyFailedRecordingsRowChangeEvent(DestroyFailedRecordingsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DestroyFailedRecordingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class VerifyRowChangeEvent : System.EventArgs {
            
            private VerifyRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyRowChangeEvent(VerifyRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VerifyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UseVerifyRowChangeEvent : System.EventArgs {
            
            private UseVerifyRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseVerifyRowChangeEvent(UseVerifyRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseVerifyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FrequencyRowChangeEvent : System.EventArgs {
            
            private FrequencyRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FrequencyRowChangeEvent(FrequencyRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FrequencyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UseChecksumDLLRowChangeEvent : System.EventArgs {
            
            private UseChecksumDLLRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseChecksumDLLRowChangeEvent(UseChecksumDLLRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseChecksumDLLRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PrintingRowChangeEvent : System.EventArgs {
            
            private PrintingRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintingRowChangeEvent(PrintingRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SimulatePrintingRowChangeEvent : System.EventArgs {
            
            private SimulatePrintingRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SimulatePrintingRowChangeEvent(SimulatePrintingRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SimulatePrintingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RejectPatternRowChangeEvent : System.EventArgs {
            
            private RejectPatternRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RejectPatternRowChangeEvent(RejectPatternRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RejectPatternRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TakeOrdersWithLabelWithoutPrinterRowChangeEvent : System.EventArgs {
            
            private TakeOrdersWithLabelWithoutPrinterRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TakeOrdersWithLabelWithoutPrinterRowChangeEvent(TakeOrdersWithLabelWithoutPrinterRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TakeOrdersWithLabelWithoutPrinterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ErrorOnLowInkLevelRowChangeEvent : System.EventArgs {
            
            private ErrorOnLowInkLevelRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorOnLowInkLevelRowChangeEvent(ErrorOnLowInkLevelRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ErrorOnLowInkLevelRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LowInkThresholdPercentRowChangeEvent : System.EventArgs {
            
            private LowInkThresholdPercentRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LowInkThresholdPercentRowChangeEvent(LowInkThresholdPercentRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LowInkThresholdPercentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AutoloaderSettingsRowChangeEvent : System.EventArgs {
            
            private AutoloaderSettingsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderSettingsRowChangeEvent(AutoloaderSettingsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderSettingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BinSettingRowChangeEvent : System.EventArgs {
            
            private BinSettingRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BinSettingRowChangeEvent(BinSettingRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BinSettingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MailslotSettingRowChangeEvent : System.EventArgs {
            
            private MailslotSettingRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MailslotSettingRowChangeEvent(MailslotSettingRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MailslotSettingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MediaSizeRowChangeEvent : System.EventArgs {
            
            private MediaSizeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaSizeRowChangeEvent(MediaSizeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaSizeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MediaTypeRowChangeEvent : System.EventArgs {
            
            private MediaTypeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaTypeRowChangeEvent(MediaTypeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReadingRowChangeEvent : System.EventArgs {
            
            private ReadingRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadingRowChangeEvent(ReadingRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReadingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BarcodePortRowChangeEvent : System.EventArgs {
            
            private BarcodePortRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarcodePortRowChangeEvent(BarcodePortRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarcodePortRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BarcodeAngleRowChangeEvent : System.EventArgs {
            
            private BarcodeAngleRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarcodeAngleRowChangeEvent(BarcodeAngleRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BarcodeAngleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UseBarcodeIndexRowChangeEvent : System.EventArgs {
            
            private UseBarcodeIndexRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseBarcodeIndexRowChangeEvent(UseBarcodeIndexRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseBarcodeIndexRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AutoBulkReadRowChangeEvent : System.EventArgs {
            
            private AutoBulkReadRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoBulkReadRowChangeEvent(AutoBulkReadRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoBulkReadRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BaseFolderForImagesRowChangeEvent : System.EventArgs {
            
            private BaseFolderForImagesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseFolderForImagesRowChangeEvent(BaseFolderForImagesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseFolderForImagesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UseVolumeIDAsFolderNameRowChangeEvent : System.EventArgs {
            
            private UseVolumeIDAsFolderNameRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseVolumeIDAsFolderNameRowChangeEvent(UseVolumeIDAsFolderNameRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseVolumeIDAsFolderNameRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UseBarcodeAsFolderNameRowChangeEvent : System.EventArgs {
            
            private UseBarcodeAsFolderNameRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseBarcodeAsFolderNameRowChangeEvent(UseBarcodeAsFolderNameRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseBarcodeAsFolderNameRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExtractISOImagesToFoldersAndFilesRowChangeEvent : System.EventArgs {
            
            private ExtractISOImagesToFoldersAndFilesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtractISOImagesToFoldersAndFilesRowChangeEvent(ExtractISOImagesToFoldersAndFilesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExtractISOImagesToFoldersAndFilesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ImageTypeForAudioTracksRowChangeEvent : System.EventArgs {
            
            private ImageTypeForAudioTracksRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImageTypeForAudioTracksRowChangeEvent(ImageTypeForAudioTracksRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ImageTypeForAudioTracksRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UseISRCAsFilenameForAudioTracksRowChangeEvent : System.EventArgs {
            
            private UseISRCAsFilenameForAudioTracksRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseISRCAsFilenameForAudioTracksRowChangeEvent(UseISRCAsFilenameForAudioTracksRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseISRCAsFilenameForAudioTracksRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PutFailuresToRejectBinRowChangeEvent : System.EventArgs {
            
            private PutFailuresToRejectBinRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PutFailuresToRejectBinRowChangeEvent(PutFailuresToRejectBinRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PutFailuresToRejectBinRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AudioReadSpeedRowChangeEvent : System.EventArgs {
            
            private AudioReadSpeedRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AudioReadSpeedRowChangeEvent(AudioReadSpeedRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AudioReadSpeedRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PreferredReaderRowChangeEvent : System.EventArgs {
            
            private PreferredReaderRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PreferredReaderRowChangeEvent(PreferredReaderRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PreferredReaderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MediaCodesRowChangeEvent : System.EventArgs {
            
            private MediaCodesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodesRowChangeEvent(MediaCodesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UseMediaCodesRowChangeEvent : System.EventArgs {
            
            private UseMediaCodesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseMediaCodesRowChangeEvent(UseMediaCodesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UseMediaCodesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MediaCodeRowChangeEvent : System.EventArgs {
            
            private MediaCodeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodeRowChangeEvent(MediaCodeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MediaCodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClearAllCodesRowChangeEvent : System.EventArgs {
            
            private ClearAllCodesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClearAllCodesRowChangeEvent(ClearAllCodesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClearAllCodesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class KioskModeRowChangeEvent : System.EventArgs {
            
            private KioskModeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KioskModeRowChangeEvent(KioskModeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KioskModeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RecoverOrdersRowChangeEvent : System.EventArgs {
            
            private RecoverOrdersRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecoverOrdersRowChangeEvent(RecoverOrdersRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RecoverOrdersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RunNoPrinterRowChangeEvent : System.EventArgs {
            
            private RunNoPrinterRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RunNoPrinterRowChangeEvent(RunNoPrinterRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RunNoPrinterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AutoloaderRecoveryRowChangeEvent : System.EventArgs {
            
            private AutoloaderRecoveryRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderRecoveryRowChangeEvent(AutoloaderRecoveryRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoloaderRecoveryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PrinterRecoveryRowChangeEvent : System.EventArgs {
            
            private PrinterRecoveryRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrinterRecoveryRowChangeEvent(PrinterRecoveryRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrinterRecoveryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AutoRespondOnStartupRowChangeEvent : System.EventArgs {
            
            private AutoRespondOnStartupRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoRespondOnStartupRowChangeEvent(AutoRespondOnStartupRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AutoRespondOnStartupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PauseServerRowChangeEvent : System.EventArgs {
            
            private PauseServerRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PauseServerRowChangeEvent(PauseServerRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PauseServerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServerPassword7RowChangeEvent : System.EventArgs {
            
            private ServerPassword7Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword7RowChangeEvent(ServerPassword7Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword7Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ResumeServerRowChangeEvent : System.EventArgs {
            
            private ResumeServerRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResumeServerRowChangeEvent(ResumeServerRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResumeServerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServerPassword8RowChangeEvent : System.EventArgs {
            
            private ServerPassword8Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword8RowChangeEvent(ServerPassword8Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword8Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StopServerRowChangeEvent : System.EventArgs {
            
            private StopServerRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopServerRowChangeEvent(StopServerRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StopServerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServerPassword9RowChangeEvent : System.EventArgs {
            
            private ServerPassword9Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword9RowChangeEvent(ServerPassword9Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword9Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FlashUploadRowChangeEvent : System.EventArgs {
            
            private FlashUploadRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlashUploadRowChangeEvent(FlashUploadRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlashUploadRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServerPassword10RowChangeEvent : System.EventArgs {
            
            private ServerPassword10Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword10RowChangeEvent(ServerPassword10Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerPassword10Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GetUnlockingCodesRowChangeEvent : System.EventArgs {
            
            private GetUnlockingCodesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetUnlockingCodesRowChangeEvent(GetUnlockingCodesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GetUnlockingCodesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SetActivationCodesRowChangeEvent : System.EventArgs {
            
            private SetActivationCodesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetActivationCodesRowChangeEvent(SetActivationCodesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SetActivationCodesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591