//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace RImageSchemas.DataSets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class FullDiscMap : DataSet {
        
        private DiscInfoDataTable tableDiscInfo;
        
        private SessionInfoDataTable tableSessionInfo;
        
        private TrackInfoDataTable tableTrackInfo;
        
        private SubchannelControlBitsDataTable tableSubchannelControlBits;
        
        private SubIndexDataTable tableSubIndex;
        
        private TocEntryDataTable tableTocEntry;
        
        private DataRelation relationTrackInfo_SubchannelControlBits;
        
        private DataRelation relationTrackInfo_SubIndex;
        
        private DataRelation relationSessionInfo_TrackInfo;
        
        private DataRelation relationDiscInfo_SessionInfo;
        
        private DataRelation relationDiscInfo_TocEntry;
        
        public FullDiscMap() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected FullDiscMap(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["DiscInfo"] != null)) {
                    this.Tables.Add(new DiscInfoDataTable(ds.Tables["DiscInfo"]));
                }
                if ((ds.Tables["SessionInfo"] != null)) {
                    this.Tables.Add(new SessionInfoDataTable(ds.Tables["SessionInfo"]));
                }
                if ((ds.Tables["TrackInfo"] != null)) {
                    this.Tables.Add(new TrackInfoDataTable(ds.Tables["TrackInfo"]));
                }
                if ((ds.Tables["SubchannelControlBits"] != null)) {
                    this.Tables.Add(new SubchannelControlBitsDataTable(ds.Tables["SubchannelControlBits"]));
                }
                if ((ds.Tables["SubIndex"] != null)) {
                    this.Tables.Add(new SubIndexDataTable(ds.Tables["SubIndex"]));
                }
                if ((ds.Tables["TocEntry"] != null)) {
                    this.Tables.Add(new TocEntryDataTable(ds.Tables["TocEntry"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DiscInfoDataTable DiscInfo {
            get {
                return this.tableDiscInfo;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SessionInfoDataTable SessionInfo {
            get {
                return this.tableSessionInfo;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TrackInfoDataTable TrackInfo {
            get {
                return this.tableTrackInfo;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SubchannelControlBitsDataTable SubchannelControlBits {
            get {
                return this.tableSubchannelControlBits;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SubIndexDataTable SubIndex {
            get {
                return this.tableSubIndex;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TocEntryDataTable TocEntry {
            get {
                return this.tableTocEntry;
            }
        }
        
        public override DataSet Clone() {
            FullDiscMap cln = ((FullDiscMap)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["DiscInfo"] != null)) {
                this.Tables.Add(new DiscInfoDataTable(ds.Tables["DiscInfo"]));
            }
            if ((ds.Tables["SessionInfo"] != null)) {
                this.Tables.Add(new SessionInfoDataTable(ds.Tables["SessionInfo"]));
            }
            if ((ds.Tables["TrackInfo"] != null)) {
                this.Tables.Add(new TrackInfoDataTable(ds.Tables["TrackInfo"]));
            }
            if ((ds.Tables["SubchannelControlBits"] != null)) {
                this.Tables.Add(new SubchannelControlBitsDataTable(ds.Tables["SubchannelControlBits"]));
            }
            if ((ds.Tables["SubIndex"] != null)) {
                this.Tables.Add(new SubIndexDataTable(ds.Tables["SubIndex"]));
            }
            if ((ds.Tables["TocEntry"] != null)) {
                this.Tables.Add(new TocEntryDataTable(ds.Tables["TocEntry"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableDiscInfo = ((DiscInfoDataTable)(this.Tables["DiscInfo"]));
            if ((this.tableDiscInfo != null)) {
                this.tableDiscInfo.InitVars();
            }
            this.tableSessionInfo = ((SessionInfoDataTable)(this.Tables["SessionInfo"]));
            if ((this.tableSessionInfo != null)) {
                this.tableSessionInfo.InitVars();
            }
            this.tableTrackInfo = ((TrackInfoDataTable)(this.Tables["TrackInfo"]));
            if ((this.tableTrackInfo != null)) {
                this.tableTrackInfo.InitVars();
            }
            this.tableSubchannelControlBits = ((SubchannelControlBitsDataTable)(this.Tables["SubchannelControlBits"]));
            if ((this.tableSubchannelControlBits != null)) {
                this.tableSubchannelControlBits.InitVars();
            }
            this.tableSubIndex = ((SubIndexDataTable)(this.Tables["SubIndex"]));
            if ((this.tableSubIndex != null)) {
                this.tableSubIndex.InitVars();
            }
            this.tableTocEntry = ((TocEntryDataTable)(this.Tables["TocEntry"]));
            if ((this.tableTocEntry != null)) {
                this.tableTocEntry.InitVars();
            }
            this.relationTrackInfo_SubchannelControlBits = this.Relations["TrackInfo_SubchannelControlBits"];
            this.relationTrackInfo_SubIndex = this.Relations["TrackInfo_SubIndex"];
            this.relationSessionInfo_TrackInfo = this.Relations["SessionInfo_TrackInfo"];
            this.relationDiscInfo_SessionInfo = this.Relations["DiscInfo_SessionInfo"];
            this.relationDiscInfo_TocEntry = this.Relations["DiscInfo_TocEntry"];
        }
        
        private void InitClass() {
            this.DataSetName = "FullDiscMap";
            this.Prefix = "";
            this.Namespace = "";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableDiscInfo = new DiscInfoDataTable();
            this.Tables.Add(this.tableDiscInfo);
            this.tableSessionInfo = new SessionInfoDataTable();
            this.Tables.Add(this.tableSessionInfo);
            this.tableTrackInfo = new TrackInfoDataTable();
            this.Tables.Add(this.tableTrackInfo);
            this.tableSubchannelControlBits = new SubchannelControlBitsDataTable();
            this.Tables.Add(this.tableSubchannelControlBits);
            this.tableSubIndex = new SubIndexDataTable();
            this.Tables.Add(this.tableSubIndex);
            this.tableTocEntry = new TocEntryDataTable();
            this.Tables.Add(this.tableTocEntry);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("DiscInfo_SessionInfo", new DataColumn[] {
                        this.tableDiscInfo.DiscInfo_IdColumn}, new DataColumn[] {
                        this.tableSessionInfo.DiscInfo_IdColumn});
            this.tableSessionInfo.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SessionInfo_TrackInfo", new DataColumn[] {
                        this.tableSessionInfo.SessionInfo_IdColumn}, new DataColumn[] {
                        this.tableTrackInfo.SessionInfo_IdColumn});
            this.tableTrackInfo.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("TrackInfo_SubchannelControlBits", new DataColumn[] {
                        this.tableTrackInfo.TrackInfo_IdColumn}, new DataColumn[] {
                        this.tableSubchannelControlBits.TrackInfo_IdColumn});
            this.tableSubchannelControlBits.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("TrackInfo_SubIndex", new DataColumn[] {
                        this.tableTrackInfo.TrackInfo_IdColumn}, new DataColumn[] {
                        this.tableSubIndex.TrackInfo_IdColumn});
            this.tableSubIndex.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("DiscInfo_TocEntry", new DataColumn[] {
                        this.tableDiscInfo.DiscInfo_IdColumn}, new DataColumn[] {
                        this.tableTocEntry.DiscInfo_IdColumn});
            this.tableTocEntry.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationTrackInfo_SubchannelControlBits = new DataRelation("TrackInfo_SubchannelControlBits", new DataColumn[] {
                        this.tableTrackInfo.TrackInfo_IdColumn}, new DataColumn[] {
                        this.tableSubchannelControlBits.TrackInfo_IdColumn}, false);
            this.relationTrackInfo_SubchannelControlBits.Nested = true;
            this.Relations.Add(this.relationTrackInfo_SubchannelControlBits);
            this.relationTrackInfo_SubIndex = new DataRelation("TrackInfo_SubIndex", new DataColumn[] {
                        this.tableTrackInfo.TrackInfo_IdColumn}, new DataColumn[] {
                        this.tableSubIndex.TrackInfo_IdColumn}, false);
            this.relationTrackInfo_SubIndex.Nested = true;
            this.Relations.Add(this.relationTrackInfo_SubIndex);
            this.relationSessionInfo_TrackInfo = new DataRelation("SessionInfo_TrackInfo", new DataColumn[] {
                        this.tableSessionInfo.SessionInfo_IdColumn}, new DataColumn[] {
                        this.tableTrackInfo.SessionInfo_IdColumn}, false);
            this.relationSessionInfo_TrackInfo.Nested = true;
            this.Relations.Add(this.relationSessionInfo_TrackInfo);
            this.relationDiscInfo_SessionInfo = new DataRelation("DiscInfo_SessionInfo", new DataColumn[] {
                        this.tableDiscInfo.DiscInfo_IdColumn}, new DataColumn[] {
                        this.tableSessionInfo.DiscInfo_IdColumn}, false);
            this.relationDiscInfo_SessionInfo.Nested = true;
            this.Relations.Add(this.relationDiscInfo_SessionInfo);
            this.relationDiscInfo_TocEntry = new DataRelation("DiscInfo_TocEntry", new DataColumn[] {
                        this.tableDiscInfo.DiscInfo_IdColumn}, new DataColumn[] {
                        this.tableTocEntry.DiscInfo_IdColumn}, false);
            this.relationDiscInfo_TocEntry.Nested = true;
            this.Relations.Add(this.relationDiscInfo_TocEntry);
        }
        
        private bool ShouldSerializeDiscInfo() {
            return false;
        }
        
        private bool ShouldSerializeSessionInfo() {
            return false;
        }
        
        private bool ShouldSerializeTrackInfo() {
            return false;
        }
        
        private bool ShouldSerializeSubchannelControlBits() {
            return false;
        }
        
        private bool ShouldSerializeSubIndex() {
            return false;
        }
        
        private bool ShouldSerializeTocEntry() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void DiscInfoRowChangeEventHandler(object sender, DiscInfoRowChangeEvent e);
        
        public delegate void SessionInfoRowChangeEventHandler(object sender, SessionInfoRowChangeEvent e);
        
        public delegate void TrackInfoRowChangeEventHandler(object sender, TrackInfoRowChangeEvent e);
        
        public delegate void SubchannelControlBitsRowChangeEventHandler(object sender, SubchannelControlBitsRowChangeEvent e);
        
        public delegate void SubIndexRowChangeEventHandler(object sender, SubIndexRowChangeEvent e);
        
        public delegate void TocEntryRowChangeEventHandler(object sender, TocEntryRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DiscInfoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFreeBlocks;
            
            private DataColumn columnFirstFreeBlock;
            
            private DataColumn columnLeadoutStartBlock;
            
            private DataColumn columnNumberOfSessions;
            
            private DataColumn columnNumberOfTracks;
            
            private DataColumn columnFirstLeadinBlockMsf;
            
            private DataColumn columnNumberOfDvdLayers;
            
            private DataColumn columnUpc;
            
            private DataColumn columnRawMode;
            
            private DataColumn columnDiscInfo_Id;
            
            internal DiscInfoDataTable() : 
                    base("DiscInfo") {
                this.InitClass();
            }
            
            internal DiscInfoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FreeBlocksColumn {
                get {
                    return this.columnFreeBlocks;
                }
            }
            
            internal DataColumn FirstFreeBlockColumn {
                get {
                    return this.columnFirstFreeBlock;
                }
            }
            
            internal DataColumn LeadoutStartBlockColumn {
                get {
                    return this.columnLeadoutStartBlock;
                }
            }
            
            internal DataColumn NumberOfSessionsColumn {
                get {
                    return this.columnNumberOfSessions;
                }
            }
            
            internal DataColumn NumberOfTracksColumn {
                get {
                    return this.columnNumberOfTracks;
                }
            }
            
            internal DataColumn FirstLeadinBlockMsfColumn {
                get {
                    return this.columnFirstLeadinBlockMsf;
                }
            }
            
            internal DataColumn NumberOfDvdLayersColumn {
                get {
                    return this.columnNumberOfDvdLayers;
                }
            }
            
            internal DataColumn UpcColumn {
                get {
                    return this.columnUpc;
                }
            }
            
            internal DataColumn RawModeColumn {
                get {
                    return this.columnRawMode;
                }
            }
            
            internal DataColumn DiscInfo_IdColumn {
                get {
                    return this.columnDiscInfo_Id;
                }
            }
            
            public DiscInfoRow this[int index] {
                get {
                    return ((DiscInfoRow)(this.Rows[index]));
                }
            }
            
            public event DiscInfoRowChangeEventHandler DiscInfoRowChanged;
            
            public event DiscInfoRowChangeEventHandler DiscInfoRowChanging;
            
            public event DiscInfoRowChangeEventHandler DiscInfoRowDeleted;
            
            public event DiscInfoRowChangeEventHandler DiscInfoRowDeleting;
            
            public void AddDiscInfoRow(DiscInfoRow row) {
                this.Rows.Add(row);
            }
            
            public DiscInfoRow AddDiscInfoRow(string FreeBlocks, string FirstFreeBlock, string LeadoutStartBlock, string NumberOfSessions, string NumberOfTracks, string FirstLeadinBlockMsf, string NumberOfDvdLayers, string Upc, string RawMode) {
                DiscInfoRow rowDiscInfoRow = ((DiscInfoRow)(this.NewRow()));
                rowDiscInfoRow.ItemArray = new object[] {
                        FreeBlocks,
                        FirstFreeBlock,
                        LeadoutStartBlock,
                        NumberOfSessions,
                        NumberOfTracks,
                        FirstLeadinBlockMsf,
                        NumberOfDvdLayers,
                        Upc,
                        RawMode,
                        null};
                this.Rows.Add(rowDiscInfoRow);
                return rowDiscInfoRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DiscInfoDataTable cln = ((DiscInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DiscInfoDataTable();
            }
            
            internal void InitVars() {
                this.columnFreeBlocks = this.Columns["FreeBlocks"];
                this.columnFirstFreeBlock = this.Columns["FirstFreeBlock"];
                this.columnLeadoutStartBlock = this.Columns["LeadoutStartBlock"];
                this.columnNumberOfSessions = this.Columns["NumberOfSessions"];
                this.columnNumberOfTracks = this.Columns["NumberOfTracks"];
                this.columnFirstLeadinBlockMsf = this.Columns["FirstLeadinBlockMsf"];
                this.columnNumberOfDvdLayers = this.Columns["NumberOfDvdLayers"];
                this.columnUpc = this.Columns["Upc"];
                this.columnRawMode = this.Columns["RawMode"];
                this.columnDiscInfo_Id = this.Columns["DiscInfo_Id"];
            }
            
            private void InitClass() {
                this.columnFreeBlocks = new DataColumn("FreeBlocks", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFreeBlocks);
                this.columnFirstFreeBlock = new DataColumn("FirstFreeBlock", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFirstFreeBlock);
                this.columnLeadoutStartBlock = new DataColumn("LeadoutStartBlock", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnLeadoutStartBlock);
                this.columnNumberOfSessions = new DataColumn("NumberOfSessions", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnNumberOfSessions);
                this.columnNumberOfTracks = new DataColumn("NumberOfTracks", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnNumberOfTracks);
                this.columnFirstLeadinBlockMsf = new DataColumn("FirstLeadinBlockMsf", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFirstLeadinBlockMsf);
                this.columnNumberOfDvdLayers = new DataColumn("NumberOfDvdLayers", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnNumberOfDvdLayers);
                this.columnUpc = new DataColumn("Upc", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUpc);
                this.columnRawMode = new DataColumn("RawMode", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRawMode);
                this.columnDiscInfo_Id = new DataColumn("DiscInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnDiscInfo_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnDiscInfo_Id}, true));
                this.columnFreeBlocks.AllowDBNull = false;
                this.columnFreeBlocks.Namespace = "";
                this.columnFirstFreeBlock.AllowDBNull = false;
                this.columnFirstFreeBlock.Namespace = "";
                this.columnLeadoutStartBlock.AllowDBNull = false;
                this.columnLeadoutStartBlock.Namespace = "";
                this.columnNumberOfSessions.AllowDBNull = false;
                this.columnNumberOfSessions.Namespace = "";
                this.columnNumberOfTracks.AllowDBNull = false;
                this.columnNumberOfTracks.Namespace = "";
                this.columnFirstLeadinBlockMsf.Namespace = "";
                this.columnNumberOfDvdLayers.Namespace = "";
                this.columnUpc.Namespace = "";
                this.columnRawMode.Namespace = "";
                this.columnRawMode.DefaultValue = "false";
                this.columnDiscInfo_Id.AutoIncrement = true;
                this.columnDiscInfo_Id.AllowDBNull = false;
                this.columnDiscInfo_Id.Unique = true;
            }
            
            public DiscInfoRow NewDiscInfoRow() {
                return ((DiscInfoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DiscInfoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DiscInfoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DiscInfoRowChanged != null)) {
                    this.DiscInfoRowChanged(this, new DiscInfoRowChangeEvent(((DiscInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DiscInfoRowChanging != null)) {
                    this.DiscInfoRowChanging(this, new DiscInfoRowChangeEvent(((DiscInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DiscInfoRowDeleted != null)) {
                    this.DiscInfoRowDeleted(this, new DiscInfoRowChangeEvent(((DiscInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DiscInfoRowDeleting != null)) {
                    this.DiscInfoRowDeleting(this, new DiscInfoRowChangeEvent(((DiscInfoRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDiscInfoRow(DiscInfoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DiscInfoRow : DataRow {
            
            private DiscInfoDataTable tableDiscInfo;
            
            internal DiscInfoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDiscInfo = ((DiscInfoDataTable)(this.Table));
            }
            
            public string FreeBlocks {
                get {
                    return ((string)(this[this.tableDiscInfo.FreeBlocksColumn]));
                }
                set {
                    this[this.tableDiscInfo.FreeBlocksColumn] = value;
                }
            }
            
            public string FirstFreeBlock {
                get {
                    return ((string)(this[this.tableDiscInfo.FirstFreeBlockColumn]));
                }
                set {
                    this[this.tableDiscInfo.FirstFreeBlockColumn] = value;
                }
            }
            
            public string LeadoutStartBlock {
                get {
                    return ((string)(this[this.tableDiscInfo.LeadoutStartBlockColumn]));
                }
                set {
                    this[this.tableDiscInfo.LeadoutStartBlockColumn] = value;
                }
            }
            
            public string NumberOfSessions {
                get {
                    return ((string)(this[this.tableDiscInfo.NumberOfSessionsColumn]));
                }
                set {
                    this[this.tableDiscInfo.NumberOfSessionsColumn] = value;
                }
            }
            
            public string NumberOfTracks {
                get {
                    return ((string)(this[this.tableDiscInfo.NumberOfTracksColumn]));
                }
                set {
                    this[this.tableDiscInfo.NumberOfTracksColumn] = value;
                }
            }
            
            public string FirstLeadinBlockMsf {
                get {
                    try {
                        return ((string)(this[this.tableDiscInfo.FirstLeadinBlockMsfColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiscInfo.FirstLeadinBlockMsfColumn] = value;
                }
            }
            
            public string NumberOfDvdLayers {
                get {
                    try {
                        return ((string)(this[this.tableDiscInfo.NumberOfDvdLayersColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiscInfo.NumberOfDvdLayersColumn] = value;
                }
            }
            
            public string Upc {
                get {
                    try {
                        return ((string)(this[this.tableDiscInfo.UpcColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiscInfo.UpcColumn] = value;
                }
            }
            
            public string RawMode {
                get {
                    try {
                        return ((string)(this[this.tableDiscInfo.RawModeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiscInfo.RawModeColumn] = value;
                }
            }
            
            public bool IsFirstLeadinBlockMsfNull() {
                return this.IsNull(this.tableDiscInfo.FirstLeadinBlockMsfColumn);
            }
            
            public void SetFirstLeadinBlockMsfNull() {
                this[this.tableDiscInfo.FirstLeadinBlockMsfColumn] = System.Convert.DBNull;
            }
            
            public bool IsNumberOfDvdLayersNull() {
                return this.IsNull(this.tableDiscInfo.NumberOfDvdLayersColumn);
            }
            
            public void SetNumberOfDvdLayersNull() {
                this[this.tableDiscInfo.NumberOfDvdLayersColumn] = System.Convert.DBNull;
            }
            
            public bool IsUpcNull() {
                return this.IsNull(this.tableDiscInfo.UpcColumn);
            }
            
            public void SetUpcNull() {
                this[this.tableDiscInfo.UpcColumn] = System.Convert.DBNull;
            }
            
            public bool IsRawModeNull() {
                return this.IsNull(this.tableDiscInfo.RawModeColumn);
            }
            
            public void SetRawModeNull() {
                this[this.tableDiscInfo.RawModeColumn] = System.Convert.DBNull;
            }
            
            public SessionInfoRow[] GetSessionInfoRows() {
                return ((SessionInfoRow[])(this.GetChildRows(this.Table.ChildRelations["DiscInfo_SessionInfo"])));
            }
            
            public TocEntryRow[] GetTocEntryRows() {
                return ((TocEntryRow[])(this.GetChildRows(this.Table.ChildRelations["DiscInfo_TocEntry"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DiscInfoRowChangeEvent : EventArgs {
            
            private DiscInfoRow eventRow;
            
            private DataRowAction eventAction;
            
            public DiscInfoRowChangeEvent(DiscInfoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DiscInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SessionInfoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnSessionNumber;
            
            private DataColumn columnSessionType;
            
            private DataColumn columnLeadinControl;
            
            private DataColumn columnLeadoutControl;
            
            private DataColumn columnLeadoutStartBlock;
            
            private DataColumn columnNextSessionStartBlock;
            
            private DataColumn columnOpen;
            
            private DataColumn columnSessionInfo_Id;
            
            private DataColumn columnDiscInfo_Id;
            
            internal SessionInfoDataTable() : 
                    base("SessionInfo") {
                this.InitClass();
            }
            
            internal SessionInfoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn SessionNumberColumn {
                get {
                    return this.columnSessionNumber;
                }
            }
            
            internal DataColumn SessionTypeColumn {
                get {
                    return this.columnSessionType;
                }
            }
            
            internal DataColumn LeadinControlColumn {
                get {
                    return this.columnLeadinControl;
                }
            }
            
            internal DataColumn LeadoutControlColumn {
                get {
                    return this.columnLeadoutControl;
                }
            }
            
            internal DataColumn LeadoutStartBlockColumn {
                get {
                    return this.columnLeadoutStartBlock;
                }
            }
            
            internal DataColumn NextSessionStartBlockColumn {
                get {
                    return this.columnNextSessionStartBlock;
                }
            }
            
            internal DataColumn OpenColumn {
                get {
                    return this.columnOpen;
                }
            }
            
            internal DataColumn SessionInfo_IdColumn {
                get {
                    return this.columnSessionInfo_Id;
                }
            }
            
            internal DataColumn DiscInfo_IdColumn {
                get {
                    return this.columnDiscInfo_Id;
                }
            }
            
            public SessionInfoRow this[int index] {
                get {
                    return ((SessionInfoRow)(this.Rows[index]));
                }
            }
            
            public event SessionInfoRowChangeEventHandler SessionInfoRowChanged;
            
            public event SessionInfoRowChangeEventHandler SessionInfoRowChanging;
            
            public event SessionInfoRowChangeEventHandler SessionInfoRowDeleted;
            
            public event SessionInfoRowChangeEventHandler SessionInfoRowDeleting;
            
            public void AddSessionInfoRow(SessionInfoRow row) {
                this.Rows.Add(row);
            }
            
            public SessionInfoRow AddSessionInfoRow(string SessionNumber, string SessionType, string LeadinControl, string LeadoutControl, string LeadoutStartBlock, string NextSessionStartBlock, string Open, DiscInfoRow parentDiscInfoRowByDiscInfo_SessionInfo) {
                SessionInfoRow rowSessionInfoRow = ((SessionInfoRow)(this.NewRow()));
                rowSessionInfoRow.ItemArray = new object[] {
                        SessionNumber,
                        SessionType,
                        LeadinControl,
                        LeadoutControl,
                        LeadoutStartBlock,
                        NextSessionStartBlock,
                        Open,
                        null,
                        parentDiscInfoRowByDiscInfo_SessionInfo[9]};
                this.Rows.Add(rowSessionInfoRow);
                return rowSessionInfoRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SessionInfoDataTable cln = ((SessionInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SessionInfoDataTable();
            }
            
            internal void InitVars() {
                this.columnSessionNumber = this.Columns["SessionNumber"];
                this.columnSessionType = this.Columns["SessionType"];
                this.columnLeadinControl = this.Columns["LeadinControl"];
                this.columnLeadoutControl = this.Columns["LeadoutControl"];
                this.columnLeadoutStartBlock = this.Columns["LeadoutStartBlock"];
                this.columnNextSessionStartBlock = this.Columns["NextSessionStartBlock"];
                this.columnOpen = this.Columns["Open"];
                this.columnSessionInfo_Id = this.Columns["SessionInfo_Id"];
                this.columnDiscInfo_Id = this.Columns["DiscInfo_Id"];
            }
            
            private void InitClass() {
                this.columnSessionNumber = new DataColumn("SessionNumber", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSessionNumber);
                this.columnSessionType = new DataColumn("SessionType", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSessionType);
                this.columnLeadinControl = new DataColumn("LeadinControl", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnLeadinControl);
                this.columnLeadoutControl = new DataColumn("LeadoutControl", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnLeadoutControl);
                this.columnLeadoutStartBlock = new DataColumn("LeadoutStartBlock", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnLeadoutStartBlock);
                this.columnNextSessionStartBlock = new DataColumn("NextSessionStartBlock", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnNextSessionStartBlock);
                this.columnOpen = new DataColumn("Open", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOpen);
                this.columnSessionInfo_Id = new DataColumn("SessionInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnSessionInfo_Id);
                this.columnDiscInfo_Id = new DataColumn("DiscInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnDiscInfo_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnSessionInfo_Id}, true));
                this.columnSessionNumber.AllowDBNull = false;
                this.columnSessionNumber.Namespace = "";
                this.columnSessionType.Namespace = "";
                this.columnSessionType.DefaultValue = "Standard";
                this.columnLeadinControl.AllowDBNull = false;
                this.columnLeadinControl.Namespace = "";
                this.columnLeadoutControl.AllowDBNull = false;
                this.columnLeadoutControl.Namespace = "";
                this.columnLeadoutStartBlock.AllowDBNull = false;
                this.columnLeadoutStartBlock.Namespace = "";
                this.columnNextSessionStartBlock.AllowDBNull = false;
                this.columnNextSessionStartBlock.Namespace = "";
                this.columnOpen.Namespace = "";
                this.columnOpen.DefaultValue = "false";
                this.columnSessionInfo_Id.AutoIncrement = true;
                this.columnSessionInfo_Id.AllowDBNull = false;
                this.columnSessionInfo_Id.Unique = true;
            }
            
            public SessionInfoRow NewSessionInfoRow() {
                return ((SessionInfoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SessionInfoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SessionInfoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SessionInfoRowChanged != null)) {
                    this.SessionInfoRowChanged(this, new SessionInfoRowChangeEvent(((SessionInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SessionInfoRowChanging != null)) {
                    this.SessionInfoRowChanging(this, new SessionInfoRowChangeEvent(((SessionInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SessionInfoRowDeleted != null)) {
                    this.SessionInfoRowDeleted(this, new SessionInfoRowChangeEvent(((SessionInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SessionInfoRowDeleting != null)) {
                    this.SessionInfoRowDeleting(this, new SessionInfoRowChangeEvent(((SessionInfoRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSessionInfoRow(SessionInfoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SessionInfoRow : DataRow {
            
            private SessionInfoDataTable tableSessionInfo;
            
            internal SessionInfoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSessionInfo = ((SessionInfoDataTable)(this.Table));
            }
            
            public string SessionNumber {
                get {
                    return ((string)(this[this.tableSessionInfo.SessionNumberColumn]));
                }
                set {
                    this[this.tableSessionInfo.SessionNumberColumn] = value;
                }
            }
            
            public string SessionType {
                get {
                    try {
                        return ((string)(this[this.tableSessionInfo.SessionTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSessionInfo.SessionTypeColumn] = value;
                }
            }
            
            public string LeadinControl {
                get {
                    return ((string)(this[this.tableSessionInfo.LeadinControlColumn]));
                }
                set {
                    this[this.tableSessionInfo.LeadinControlColumn] = value;
                }
            }
            
            public string LeadoutControl {
                get {
                    return ((string)(this[this.tableSessionInfo.LeadoutControlColumn]));
                }
                set {
                    this[this.tableSessionInfo.LeadoutControlColumn] = value;
                }
            }
            
            public string LeadoutStartBlock {
                get {
                    return ((string)(this[this.tableSessionInfo.LeadoutStartBlockColumn]));
                }
                set {
                    this[this.tableSessionInfo.LeadoutStartBlockColumn] = value;
                }
            }
            
            public string NextSessionStartBlock {
                get {
                    return ((string)(this[this.tableSessionInfo.NextSessionStartBlockColumn]));
                }
                set {
                    this[this.tableSessionInfo.NextSessionStartBlockColumn] = value;
                }
            }
            
            public string Open {
                get {
                    try {
                        return ((string)(this[this.tableSessionInfo.OpenColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSessionInfo.OpenColumn] = value;
                }
            }
            
            public DiscInfoRow DiscInfoRow {
                get {
                    return ((DiscInfoRow)(this.GetParentRow(this.Table.ParentRelations["DiscInfo_SessionInfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DiscInfo_SessionInfo"]);
                }
            }
            
            public bool IsSessionTypeNull() {
                return this.IsNull(this.tableSessionInfo.SessionTypeColumn);
            }
            
            public void SetSessionTypeNull() {
                this[this.tableSessionInfo.SessionTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsOpenNull() {
                return this.IsNull(this.tableSessionInfo.OpenColumn);
            }
            
            public void SetOpenNull() {
                this[this.tableSessionInfo.OpenColumn] = System.Convert.DBNull;
            }
            
            public TrackInfoRow[] GetTrackInfoRows() {
                return ((TrackInfoRow[])(this.GetChildRows(this.Table.ChildRelations["SessionInfo_TrackInfo"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SessionInfoRowChangeEvent : EventArgs {
            
            private SessionInfoRow eventRow;
            
            private DataRowAction eventAction;
            
            public SessionInfoRowChangeEvent(SessionInfoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SessionInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TrackInfoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnSessionNumber;
            
            private DataColumn columnTrackNumber;
            
            private DataColumn columnTrackType;
            
            private DataColumn columnStartBlock;
            
            private DataColumn columnNumberOfBlocks;
            
            private DataColumn columnPregapBlocks;
            
            private DataColumn columnPostgapBlocks;
            
            private DataColumn columnHasRunoutBlocks;
            
            private DataColumn columnHasTrailingPregap;
            
            private DataColumn columnMaxIndex;
            
            private DataColumn columnIso9660;
            
            private DataColumn columnJoliet;
            
            private DataColumn columnUDF;
            
            private DataColumn columnIsrc;
            
            private DataColumn columnVolumeId;
            
            private DataColumn columnBlockSize;
            
            private DataColumn columnTrackInfo_Id;
            
            private DataColumn columnSessionInfo_Id;
            
            internal TrackInfoDataTable() : 
                    base("TrackInfo") {
                this.InitClass();
            }
            
            internal TrackInfoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn SessionNumberColumn {
                get {
                    return this.columnSessionNumber;
                }
            }
            
            internal DataColumn TrackNumberColumn {
                get {
                    return this.columnTrackNumber;
                }
            }
            
            internal DataColumn TrackTypeColumn {
                get {
                    return this.columnTrackType;
                }
            }
            
            internal DataColumn StartBlockColumn {
                get {
                    return this.columnStartBlock;
                }
            }
            
            internal DataColumn NumberOfBlocksColumn {
                get {
                    return this.columnNumberOfBlocks;
                }
            }
            
            internal DataColumn PregapBlocksColumn {
                get {
                    return this.columnPregapBlocks;
                }
            }
            
            internal DataColumn PostgapBlocksColumn {
                get {
                    return this.columnPostgapBlocks;
                }
            }
            
            internal DataColumn HasRunoutBlocksColumn {
                get {
                    return this.columnHasRunoutBlocks;
                }
            }
            
            internal DataColumn HasTrailingPregapColumn {
                get {
                    return this.columnHasTrailingPregap;
                }
            }
            
            internal DataColumn MaxIndexColumn {
                get {
                    return this.columnMaxIndex;
                }
            }
            
            internal DataColumn Iso9660Column {
                get {
                    return this.columnIso9660;
                }
            }
            
            internal DataColumn JolietColumn {
                get {
                    return this.columnJoliet;
                }
            }
            
            internal DataColumn UDFColumn {
                get {
                    return this.columnUDF;
                }
            }
            
            internal DataColumn IsrcColumn {
                get {
                    return this.columnIsrc;
                }
            }
            
            internal DataColumn VolumeIdColumn {
                get {
                    return this.columnVolumeId;
                }
            }
            
            internal DataColumn BlockSizeColumn {
                get {
                    return this.columnBlockSize;
                }
            }
            
            internal DataColumn TrackInfo_IdColumn {
                get {
                    return this.columnTrackInfo_Id;
                }
            }
            
            internal DataColumn SessionInfo_IdColumn {
                get {
                    return this.columnSessionInfo_Id;
                }
            }
            
            public TrackInfoRow this[int index] {
                get {
                    return ((TrackInfoRow)(this.Rows[index]));
                }
            }
            
            public event TrackInfoRowChangeEventHandler TrackInfoRowChanged;
            
            public event TrackInfoRowChangeEventHandler TrackInfoRowChanging;
            
            public event TrackInfoRowChangeEventHandler TrackInfoRowDeleted;
            
            public event TrackInfoRowChangeEventHandler TrackInfoRowDeleting;
            
            public void AddTrackInfoRow(TrackInfoRow row) {
                this.Rows.Add(row);
            }
            
            public TrackInfoRow AddTrackInfoRow(
                        string SessionNumber, 
                        string TrackNumber, 
                        string TrackType, 
                        string StartBlock, 
                        string NumberOfBlocks, 
                        string PregapBlocks, 
                        string PostgapBlocks, 
                        string HasRunoutBlocks, 
                        string HasTrailingPregap, 
                        string MaxIndex, 
                        string Iso9660, 
                        string Joliet, 
                        string UDF, 
                        string Isrc, 
                        string VolumeId, 
                        string BlockSize, 
                        SessionInfoRow parentSessionInfoRowBySessionInfo_TrackInfo) {
                TrackInfoRow rowTrackInfoRow = ((TrackInfoRow)(this.NewRow()));
                rowTrackInfoRow.ItemArray = new object[] {
                        SessionNumber,
                        TrackNumber,
                        TrackType,
                        StartBlock,
                        NumberOfBlocks,
                        PregapBlocks,
                        PostgapBlocks,
                        HasRunoutBlocks,
                        HasTrailingPregap,
                        MaxIndex,
                        Iso9660,
                        Joliet,
                        UDF,
                        Isrc,
                        VolumeId,
                        BlockSize,
                        null,
                        parentSessionInfoRowBySessionInfo_TrackInfo[7]};
                this.Rows.Add(rowTrackInfoRow);
                return rowTrackInfoRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TrackInfoDataTable cln = ((TrackInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TrackInfoDataTable();
            }
            
            internal void InitVars() {
                this.columnSessionNumber = this.Columns["SessionNumber"];
                this.columnTrackNumber = this.Columns["TrackNumber"];
                this.columnTrackType = this.Columns["TrackType"];
                this.columnStartBlock = this.Columns["StartBlock"];
                this.columnNumberOfBlocks = this.Columns["NumberOfBlocks"];
                this.columnPregapBlocks = this.Columns["PregapBlocks"];
                this.columnPostgapBlocks = this.Columns["PostgapBlocks"];
                this.columnHasRunoutBlocks = this.Columns["HasRunoutBlocks"];
                this.columnHasTrailingPregap = this.Columns["HasTrailingPregap"];
                this.columnMaxIndex = this.Columns["MaxIndex"];
                this.columnIso9660 = this.Columns["Iso9660"];
                this.columnJoliet = this.Columns["Joliet"];
                this.columnUDF = this.Columns["UDF"];
                this.columnIsrc = this.Columns["Isrc"];
                this.columnVolumeId = this.Columns["VolumeId"];
                this.columnBlockSize = this.Columns["BlockSize"];
                this.columnTrackInfo_Id = this.Columns["TrackInfo_Id"];
                this.columnSessionInfo_Id = this.Columns["SessionInfo_Id"];
            }
            
            private void InitClass() {
                this.columnSessionNumber = new DataColumn("SessionNumber", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSessionNumber);
                this.columnTrackNumber = new DataColumn("TrackNumber", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTrackNumber);
                this.columnTrackType = new DataColumn("TrackType", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTrackType);
                this.columnStartBlock = new DataColumn("StartBlock", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnStartBlock);
                this.columnNumberOfBlocks = new DataColumn("NumberOfBlocks", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnNumberOfBlocks);
                this.columnPregapBlocks = new DataColumn("PregapBlocks", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPregapBlocks);
                this.columnPostgapBlocks = new DataColumn("PostgapBlocks", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPostgapBlocks);
                this.columnHasRunoutBlocks = new DataColumn("HasRunoutBlocks", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnHasRunoutBlocks);
                this.columnHasTrailingPregap = new DataColumn("HasTrailingPregap", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnHasTrailingPregap);
                this.columnMaxIndex = new DataColumn("MaxIndex", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnMaxIndex);
                this.columnIso9660 = new DataColumn("Iso9660", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnIso9660);
                this.columnJoliet = new DataColumn("Joliet", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnJoliet);
                this.columnUDF = new DataColumn("UDF", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUDF);
                this.columnIsrc = new DataColumn("Isrc", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnIsrc);
                this.columnVolumeId = new DataColumn("VolumeId", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnVolumeId);
                this.columnBlockSize = new DataColumn("BlockSize", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnBlockSize);
                this.columnTrackInfo_Id = new DataColumn("TrackInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTrackInfo_Id);
                this.columnSessionInfo_Id = new DataColumn("SessionInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnSessionInfo_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnTrackInfo_Id}, true));
                this.columnSessionNumber.AllowDBNull = false;
                this.columnSessionNumber.Namespace = "";
                this.columnTrackNumber.AllowDBNull = false;
                this.columnTrackNumber.Namespace = "";
                this.columnTrackType.Namespace = "";
                this.columnTrackType.DefaultValue = "Audio";
                this.columnStartBlock.AllowDBNull = false;
                this.columnStartBlock.Namespace = "";
                this.columnNumberOfBlocks.AllowDBNull = false;
                this.columnNumberOfBlocks.Namespace = "";
                this.columnPregapBlocks.AllowDBNull = false;
                this.columnPregapBlocks.Namespace = "";
                this.columnPostgapBlocks.AllowDBNull = false;
                this.columnPostgapBlocks.Namespace = "";
                this.columnHasRunoutBlocks.Namespace = "";
                this.columnHasRunoutBlocks.DefaultValue = "false";
                this.columnHasTrailingPregap.Namespace = "";
                this.columnHasTrailingPregap.DefaultValue = "false";
                this.columnMaxIndex.AllowDBNull = false;
                this.columnMaxIndex.Namespace = "";
                this.columnIso9660.Namespace = "";
                this.columnIso9660.DefaultValue = "false";
                this.columnJoliet.Namespace = "";
                this.columnJoliet.DefaultValue = "false";
                this.columnUDF.Namespace = "";
                this.columnUDF.DefaultValue = "false";
                this.columnIsrc.Namespace = "";
                this.columnVolumeId.Namespace = "";
                this.columnBlockSize.Namespace = "";
                this.columnTrackInfo_Id.AutoIncrement = true;
                this.columnTrackInfo_Id.AllowDBNull = false;
                this.columnTrackInfo_Id.Unique = true;
            }
            
            public TrackInfoRow NewTrackInfoRow() {
                return ((TrackInfoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TrackInfoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TrackInfoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TrackInfoRowChanged != null)) {
                    this.TrackInfoRowChanged(this, new TrackInfoRowChangeEvent(((TrackInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TrackInfoRowChanging != null)) {
                    this.TrackInfoRowChanging(this, new TrackInfoRowChangeEvent(((TrackInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TrackInfoRowDeleted != null)) {
                    this.TrackInfoRowDeleted(this, new TrackInfoRowChangeEvent(((TrackInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TrackInfoRowDeleting != null)) {
                    this.TrackInfoRowDeleting(this, new TrackInfoRowChangeEvent(((TrackInfoRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTrackInfoRow(TrackInfoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TrackInfoRow : DataRow {
            
            private TrackInfoDataTable tableTrackInfo;
            
            internal TrackInfoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTrackInfo = ((TrackInfoDataTable)(this.Table));
            }
            
            public string SessionNumber {
                get {
                    return ((string)(this[this.tableTrackInfo.SessionNumberColumn]));
                }
                set {
                    this[this.tableTrackInfo.SessionNumberColumn] = value;
                }
            }
            
            public string TrackNumber {
                get {
                    return ((string)(this[this.tableTrackInfo.TrackNumberColumn]));
                }
                set {
                    this[this.tableTrackInfo.TrackNumberColumn] = value;
                }
            }
            
            public string TrackType {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.TrackTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.TrackTypeColumn] = value;
                }
            }
            
            public string StartBlock {
                get {
                    return ((string)(this[this.tableTrackInfo.StartBlockColumn]));
                }
                set {
                    this[this.tableTrackInfo.StartBlockColumn] = value;
                }
            }
            
            public string NumberOfBlocks {
                get {
                    return ((string)(this[this.tableTrackInfo.NumberOfBlocksColumn]));
                }
                set {
                    this[this.tableTrackInfo.NumberOfBlocksColumn] = value;
                }
            }
            
            public string PregapBlocks {
                get {
                    return ((string)(this[this.tableTrackInfo.PregapBlocksColumn]));
                }
                set {
                    this[this.tableTrackInfo.PregapBlocksColumn] = value;
                }
            }
            
            public string PostgapBlocks {
                get {
                    return ((string)(this[this.tableTrackInfo.PostgapBlocksColumn]));
                }
                set {
                    this[this.tableTrackInfo.PostgapBlocksColumn] = value;
                }
            }
            
            public string HasRunoutBlocks {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.HasRunoutBlocksColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.HasRunoutBlocksColumn] = value;
                }
            }
            
            public string HasTrailingPregap {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.HasTrailingPregapColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.HasTrailingPregapColumn] = value;
                }
            }
            
            public string MaxIndex {
                get {
                    return ((string)(this[this.tableTrackInfo.MaxIndexColumn]));
                }
                set {
                    this[this.tableTrackInfo.MaxIndexColumn] = value;
                }
            }
            
            public string Iso9660 {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.Iso9660Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.Iso9660Column] = value;
                }
            }
            
            public string Joliet {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.JolietColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.JolietColumn] = value;
                }
            }
            
            public string UDF {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.UDFColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.UDFColumn] = value;
                }
            }
            
            public string Isrc {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.IsrcColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.IsrcColumn] = value;
                }
            }
            
            public string VolumeId {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.VolumeIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.VolumeIdColumn] = value;
                }
            }
            
            public string BlockSize {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.BlockSizeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.BlockSizeColumn] = value;
                }
            }
            
            public SessionInfoRow SessionInfoRow {
                get {
                    return ((SessionInfoRow)(this.GetParentRow(this.Table.ParentRelations["SessionInfo_TrackInfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SessionInfo_TrackInfo"]);
                }
            }
            
            public bool IsTrackTypeNull() {
                return this.IsNull(this.tableTrackInfo.TrackTypeColumn);
            }
            
            public void SetTrackTypeNull() {
                this[this.tableTrackInfo.TrackTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsHasRunoutBlocksNull() {
                return this.IsNull(this.tableTrackInfo.HasRunoutBlocksColumn);
            }
            
            public void SetHasRunoutBlocksNull() {
                this[this.tableTrackInfo.HasRunoutBlocksColumn] = System.Convert.DBNull;
            }
            
            public bool IsHasTrailingPregapNull() {
                return this.IsNull(this.tableTrackInfo.HasTrailingPregapColumn);
            }
            
            public void SetHasTrailingPregapNull() {
                this[this.tableTrackInfo.HasTrailingPregapColumn] = System.Convert.DBNull;
            }
            
            public bool IsIso9660Null() {
                return this.IsNull(this.tableTrackInfo.Iso9660Column);
            }
            
            public void SetIso9660Null() {
                this[this.tableTrackInfo.Iso9660Column] = System.Convert.DBNull;
            }
            
            public bool IsJolietNull() {
                return this.IsNull(this.tableTrackInfo.JolietColumn);
            }
            
            public void SetJolietNull() {
                this[this.tableTrackInfo.JolietColumn] = System.Convert.DBNull;
            }
            
            public bool IsUDFNull() {
                return this.IsNull(this.tableTrackInfo.UDFColumn);
            }
            
            public void SetUDFNull() {
                this[this.tableTrackInfo.UDFColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsrcNull() {
                return this.IsNull(this.tableTrackInfo.IsrcColumn);
            }
            
            public void SetIsrcNull() {
                this[this.tableTrackInfo.IsrcColumn] = System.Convert.DBNull;
            }
            
            public bool IsVolumeIdNull() {
                return this.IsNull(this.tableTrackInfo.VolumeIdColumn);
            }
            
            public void SetVolumeIdNull() {
                this[this.tableTrackInfo.VolumeIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsBlockSizeNull() {
                return this.IsNull(this.tableTrackInfo.BlockSizeColumn);
            }
            
            public void SetBlockSizeNull() {
                this[this.tableTrackInfo.BlockSizeColumn] = System.Convert.DBNull;
            }
            
            public SubchannelControlBitsRow[] GetSubchannelControlBitsRows() {
                return ((SubchannelControlBitsRow[])(this.GetChildRows(this.Table.ChildRelations["TrackInfo_SubchannelControlBits"])));
            }
            
            public SubIndexRow[] GetSubIndexRows() {
                return ((SubIndexRow[])(this.GetChildRows(this.Table.ChildRelations["TrackInfo_SubIndex"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TrackInfoRowChangeEvent : EventArgs {
            
            private TrackInfoRow eventRow;
            
            private DataRowAction eventAction;
            
            public TrackInfoRowChangeEvent(TrackInfoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TrackInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SubchannelControlBitsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPreEmphasis;
            
            private DataColumn columnAllowCopy;
            
            private DataColumn columnData;
            
            private DataColumn columnFourChannel;
            
            private DataColumn columnTrackInfo_Id;
            
            internal SubchannelControlBitsDataTable() : 
                    base("SubchannelControlBits") {
                this.InitClass();
            }
            
            internal SubchannelControlBitsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PreEmphasisColumn {
                get {
                    return this.columnPreEmphasis;
                }
            }
            
            internal DataColumn AllowCopyColumn {
                get {
                    return this.columnAllowCopy;
                }
            }
            
            internal DataColumn DataColumn {
                get {
                    return this.columnData;
                }
            }
            
            internal DataColumn FourChannelColumn {
                get {
                    return this.columnFourChannel;
                }
            }
            
            internal DataColumn TrackInfo_IdColumn {
                get {
                    return this.columnTrackInfo_Id;
                }
            }
            
            public SubchannelControlBitsRow this[int index] {
                get {
                    return ((SubchannelControlBitsRow)(this.Rows[index]));
                }
            }
            
            public event SubchannelControlBitsRowChangeEventHandler SubchannelControlBitsRowChanged;
            
            public event SubchannelControlBitsRowChangeEventHandler SubchannelControlBitsRowChanging;
            
            public event SubchannelControlBitsRowChangeEventHandler SubchannelControlBitsRowDeleted;
            
            public event SubchannelControlBitsRowChangeEventHandler SubchannelControlBitsRowDeleting;
            
            public void AddSubchannelControlBitsRow(SubchannelControlBitsRow row) {
                this.Rows.Add(row);
            }
            
            public SubchannelControlBitsRow AddSubchannelControlBitsRow(string PreEmphasis, string AllowCopy, string Data, string FourChannel, TrackInfoRow parentTrackInfoRowByTrackInfo_SubchannelControlBits) {
                SubchannelControlBitsRow rowSubchannelControlBitsRow = ((SubchannelControlBitsRow)(this.NewRow()));
                rowSubchannelControlBitsRow.ItemArray = new object[] {
                        PreEmphasis,
                        AllowCopy,
                        Data,
                        FourChannel,
                        parentTrackInfoRowByTrackInfo_SubchannelControlBits[16]};
                this.Rows.Add(rowSubchannelControlBitsRow);
                return rowSubchannelControlBitsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SubchannelControlBitsDataTable cln = ((SubchannelControlBitsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SubchannelControlBitsDataTable();
            }
            
            internal void InitVars() {
                this.columnPreEmphasis = this.Columns["PreEmphasis"];
                this.columnAllowCopy = this.Columns["AllowCopy"];
                this.columnData = this.Columns["Data"];
                this.columnFourChannel = this.Columns["FourChannel"];
                this.columnTrackInfo_Id = this.Columns["TrackInfo_Id"];
            }
            
            private void InitClass() {
                this.columnPreEmphasis = new DataColumn("PreEmphasis", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPreEmphasis);
                this.columnAllowCopy = new DataColumn("AllowCopy", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAllowCopy);
                this.columnData = new DataColumn("Data", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnData);
                this.columnFourChannel = new DataColumn("FourChannel", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFourChannel);
                this.columnTrackInfo_Id = new DataColumn("TrackInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTrackInfo_Id);
                this.columnPreEmphasis.Namespace = "";
                this.columnPreEmphasis.DefaultValue = "false";
                this.columnAllowCopy.Namespace = "";
                this.columnAllowCopy.DefaultValue = "false";
                this.columnData.Namespace = "";
                this.columnData.DefaultValue = "false";
                this.columnFourChannel.Namespace = "";
                this.columnFourChannel.DefaultValue = "false";
            }
            
            public SubchannelControlBitsRow NewSubchannelControlBitsRow() {
                return ((SubchannelControlBitsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SubchannelControlBitsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SubchannelControlBitsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SubchannelControlBitsRowChanged != null)) {
                    this.SubchannelControlBitsRowChanged(this, new SubchannelControlBitsRowChangeEvent(((SubchannelControlBitsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SubchannelControlBitsRowChanging != null)) {
                    this.SubchannelControlBitsRowChanging(this, new SubchannelControlBitsRowChangeEvent(((SubchannelControlBitsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SubchannelControlBitsRowDeleted != null)) {
                    this.SubchannelControlBitsRowDeleted(this, new SubchannelControlBitsRowChangeEvent(((SubchannelControlBitsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SubchannelControlBitsRowDeleting != null)) {
                    this.SubchannelControlBitsRowDeleting(this, new SubchannelControlBitsRowChangeEvent(((SubchannelControlBitsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSubchannelControlBitsRow(SubchannelControlBitsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SubchannelControlBitsRow : DataRow {
            
            private SubchannelControlBitsDataTable tableSubchannelControlBits;
            
            internal SubchannelControlBitsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSubchannelControlBits = ((SubchannelControlBitsDataTable)(this.Table));
            }
            
            public string PreEmphasis {
                get {
                    try {
                        return ((string)(this[this.tableSubchannelControlBits.PreEmphasisColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubchannelControlBits.PreEmphasisColumn] = value;
                }
            }
            
            public string AllowCopy {
                get {
                    try {
                        return ((string)(this[this.tableSubchannelControlBits.AllowCopyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubchannelControlBits.AllowCopyColumn] = value;
                }
            }
            
            public string Data {
                get {
                    try {
                        return ((string)(this[this.tableSubchannelControlBits.DataColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubchannelControlBits.DataColumn] = value;
                }
            }
            
            public string FourChannel {
                get {
                    try {
                        return ((string)(this[this.tableSubchannelControlBits.FourChannelColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubchannelControlBits.FourChannelColumn] = value;
                }
            }
            
            public TrackInfoRow TrackInfoRow {
                get {
                    return ((TrackInfoRow)(this.GetParentRow(this.Table.ParentRelations["TrackInfo_SubchannelControlBits"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TrackInfo_SubchannelControlBits"]);
                }
            }
            
            public bool IsPreEmphasisNull() {
                return this.IsNull(this.tableSubchannelControlBits.PreEmphasisColumn);
            }
            
            public void SetPreEmphasisNull() {
                this[this.tableSubchannelControlBits.PreEmphasisColumn] = System.Convert.DBNull;
            }
            
            public bool IsAllowCopyNull() {
                return this.IsNull(this.tableSubchannelControlBits.AllowCopyColumn);
            }
            
            public void SetAllowCopyNull() {
                this[this.tableSubchannelControlBits.AllowCopyColumn] = System.Convert.DBNull;
            }
            
            public bool IsDataNull() {
                return this.IsNull(this.tableSubchannelControlBits.DataColumn);
            }
            
            public void SetDataNull() {
                this[this.tableSubchannelControlBits.DataColumn] = System.Convert.DBNull;
            }
            
            public bool IsFourChannelNull() {
                return this.IsNull(this.tableSubchannelControlBits.FourChannelColumn);
            }
            
            public void SetFourChannelNull() {
                this[this.tableSubchannelControlBits.FourChannelColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SubchannelControlBitsRowChangeEvent : EventArgs {
            
            private SubchannelControlBitsRow eventRow;
            
            private DataRowAction eventAction;
            
            public SubchannelControlBitsRowChangeEvent(SubchannelControlBitsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SubchannelControlBitsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SubIndexDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnBlockNumber;
            
            private DataColumn columnTrackInfo_Id;
            
            internal SubIndexDataTable() : 
                    base("SubIndex") {
                this.InitClass();
            }
            
            internal SubIndexDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn BlockNumberColumn {
                get {
                    return this.columnBlockNumber;
                }
            }
            
            internal DataColumn TrackInfo_IdColumn {
                get {
                    return this.columnTrackInfo_Id;
                }
            }
            
            public SubIndexRow this[int index] {
                get {
                    return ((SubIndexRow)(this.Rows[index]));
                }
            }
            
            public event SubIndexRowChangeEventHandler SubIndexRowChanged;
            
            public event SubIndexRowChangeEventHandler SubIndexRowChanging;
            
            public event SubIndexRowChangeEventHandler SubIndexRowDeleted;
            
            public event SubIndexRowChangeEventHandler SubIndexRowDeleting;
            
            public void AddSubIndexRow(SubIndexRow row) {
                this.Rows.Add(row);
            }
            
            public SubIndexRow AddSubIndexRow(string BlockNumber, TrackInfoRow parentTrackInfoRowByTrackInfo_SubIndex) {
                SubIndexRow rowSubIndexRow = ((SubIndexRow)(this.NewRow()));
                rowSubIndexRow.ItemArray = new object[] {
                        BlockNumber,
                        parentTrackInfoRowByTrackInfo_SubIndex[16]};
                this.Rows.Add(rowSubIndexRow);
                return rowSubIndexRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SubIndexDataTable cln = ((SubIndexDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SubIndexDataTable();
            }
            
            internal void InitVars() {
                this.columnBlockNumber = this.Columns["BlockNumber"];
                this.columnTrackInfo_Id = this.Columns["TrackInfo_Id"];
            }
            
            private void InitClass() {
                this.columnBlockNumber = new DataColumn("BlockNumber", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnBlockNumber);
                this.columnTrackInfo_Id = new DataColumn("TrackInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTrackInfo_Id);
                this.columnBlockNumber.AllowDBNull = false;
                this.columnBlockNumber.Namespace = "";
            }
            
            public SubIndexRow NewSubIndexRow() {
                return ((SubIndexRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SubIndexRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SubIndexRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SubIndexRowChanged != null)) {
                    this.SubIndexRowChanged(this, new SubIndexRowChangeEvent(((SubIndexRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SubIndexRowChanging != null)) {
                    this.SubIndexRowChanging(this, new SubIndexRowChangeEvent(((SubIndexRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SubIndexRowDeleted != null)) {
                    this.SubIndexRowDeleted(this, new SubIndexRowChangeEvent(((SubIndexRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SubIndexRowDeleting != null)) {
                    this.SubIndexRowDeleting(this, new SubIndexRowChangeEvent(((SubIndexRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSubIndexRow(SubIndexRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SubIndexRow : DataRow {
            
            private SubIndexDataTable tableSubIndex;
            
            internal SubIndexRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSubIndex = ((SubIndexDataTable)(this.Table));
            }
            
            public string BlockNumber {
                get {
                    return ((string)(this[this.tableSubIndex.BlockNumberColumn]));
                }
                set {
                    this[this.tableSubIndex.BlockNumberColumn] = value;
                }
            }
            
            public TrackInfoRow TrackInfoRow {
                get {
                    return ((TrackInfoRow)(this.GetParentRow(this.Table.ParentRelations["TrackInfo_SubIndex"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TrackInfo_SubIndex"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SubIndexRowChangeEvent : EventArgs {
            
            private SubIndexRow eventRow;
            
            private DataRowAction eventAction;
            
            public SubIndexRowChangeEvent(SubIndexRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SubIndexRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TocEntryDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnSessionNumber;
            
            private DataColumn columnControl;
            
            private DataColumn columnAdr;
            
            private DataColumn columnTno;
            
            private DataColumn columnPoint;
            
            private DataColumn columnMsf;
            
            private DataColumn columnZero;
            
            private DataColumn columnPmsf;
            
            private DataColumn columnDiscInfo_Id;
            
            internal TocEntryDataTable() : 
                    base("TocEntry") {
                this.InitClass();
            }
            
            internal TocEntryDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn SessionNumberColumn {
                get {
                    return this.columnSessionNumber;
                }
            }
            
            internal DataColumn ControlColumn {
                get {
                    return this.columnControl;
                }
            }
            
            internal DataColumn AdrColumn {
                get {
                    return this.columnAdr;
                }
            }
            
            internal DataColumn TnoColumn {
                get {
                    return this.columnTno;
                }
            }
            
            internal DataColumn PointColumn {
                get {
                    return this.columnPoint;
                }
            }
            
            internal DataColumn MsfColumn {
                get {
                    return this.columnMsf;
                }
            }
            
            internal DataColumn ZeroColumn {
                get {
                    return this.columnZero;
                }
            }
            
            internal DataColumn PmsfColumn {
                get {
                    return this.columnPmsf;
                }
            }
            
            internal DataColumn DiscInfo_IdColumn {
                get {
                    return this.columnDiscInfo_Id;
                }
            }
            
            public TocEntryRow this[int index] {
                get {
                    return ((TocEntryRow)(this.Rows[index]));
                }
            }
            
            public event TocEntryRowChangeEventHandler TocEntryRowChanged;
            
            public event TocEntryRowChangeEventHandler TocEntryRowChanging;
            
            public event TocEntryRowChangeEventHandler TocEntryRowDeleted;
            
            public event TocEntryRowChangeEventHandler TocEntryRowDeleting;
            
            public void AddTocEntryRow(TocEntryRow row) {
                this.Rows.Add(row);
            }
            
            public TocEntryRow AddTocEntryRow(string SessionNumber, string Control, string Adr, string Tno, string Point, string Msf, string Zero, string Pmsf, DiscInfoRow parentDiscInfoRowByDiscInfo_TocEntry) {
                TocEntryRow rowTocEntryRow = ((TocEntryRow)(this.NewRow()));
                rowTocEntryRow.ItemArray = new object[] {
                        SessionNumber,
                        Control,
                        Adr,
                        Tno,
                        Point,
                        Msf,
                        Zero,
                        Pmsf,
                        parentDiscInfoRowByDiscInfo_TocEntry[9]};
                this.Rows.Add(rowTocEntryRow);
                return rowTocEntryRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TocEntryDataTable cln = ((TocEntryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TocEntryDataTable();
            }
            
            internal void InitVars() {
                this.columnSessionNumber = this.Columns["SessionNumber"];
                this.columnControl = this.Columns["Control"];
                this.columnAdr = this.Columns["Adr"];
                this.columnTno = this.Columns["Tno"];
                this.columnPoint = this.Columns["Point"];
                this.columnMsf = this.Columns["Msf"];
                this.columnZero = this.Columns["Zero"];
                this.columnPmsf = this.Columns["Pmsf"];
                this.columnDiscInfo_Id = this.Columns["DiscInfo_Id"];
            }
            
            private void InitClass() {
                this.columnSessionNumber = new DataColumn("SessionNumber", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSessionNumber);
                this.columnControl = new DataColumn("Control", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnControl);
                this.columnAdr = new DataColumn("Adr", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAdr);
                this.columnTno = new DataColumn("Tno", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTno);
                this.columnPoint = new DataColumn("Point", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPoint);
                this.columnMsf = new DataColumn("Msf", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnMsf);
                this.columnZero = new DataColumn("Zero", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnZero);
                this.columnPmsf = new DataColumn("Pmsf", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPmsf);
                this.columnDiscInfo_Id = new DataColumn("DiscInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnDiscInfo_Id);
                this.columnSessionNumber.AllowDBNull = false;
                this.columnSessionNumber.Namespace = "";
                this.columnControl.AllowDBNull = false;
                this.columnControl.Namespace = "";
                this.columnAdr.AllowDBNull = false;
                this.columnAdr.Namespace = "";
                this.columnTno.AllowDBNull = false;
                this.columnTno.Namespace = "";
                this.columnPoint.AllowDBNull = false;
                this.columnPoint.Namespace = "";
                this.columnMsf.AllowDBNull = false;
                this.columnMsf.Namespace = "";
                this.columnZero.AllowDBNull = false;
                this.columnZero.Namespace = "";
                this.columnPmsf.AllowDBNull = false;
                this.columnPmsf.Namespace = "";
            }
            
            public TocEntryRow NewTocEntryRow() {
                return ((TocEntryRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TocEntryRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TocEntryRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TocEntryRowChanged != null)) {
                    this.TocEntryRowChanged(this, new TocEntryRowChangeEvent(((TocEntryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TocEntryRowChanging != null)) {
                    this.TocEntryRowChanging(this, new TocEntryRowChangeEvent(((TocEntryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TocEntryRowDeleted != null)) {
                    this.TocEntryRowDeleted(this, new TocEntryRowChangeEvent(((TocEntryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TocEntryRowDeleting != null)) {
                    this.TocEntryRowDeleting(this, new TocEntryRowChangeEvent(((TocEntryRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTocEntryRow(TocEntryRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TocEntryRow : DataRow {
            
            private TocEntryDataTable tableTocEntry;
            
            internal TocEntryRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTocEntry = ((TocEntryDataTable)(this.Table));
            }
            
            public string SessionNumber {
                get {
                    return ((string)(this[this.tableTocEntry.SessionNumberColumn]));
                }
                set {
                    this[this.tableTocEntry.SessionNumberColumn] = value;
                }
            }
            
            public string Control {
                get {
                    return ((string)(this[this.tableTocEntry.ControlColumn]));
                }
                set {
                    this[this.tableTocEntry.ControlColumn] = value;
                }
            }
            
            public string Adr {
                get {
                    return ((string)(this[this.tableTocEntry.AdrColumn]));
                }
                set {
                    this[this.tableTocEntry.AdrColumn] = value;
                }
            }
            
            public string Tno {
                get {
                    return ((string)(this[this.tableTocEntry.TnoColumn]));
                }
                set {
                    this[this.tableTocEntry.TnoColumn] = value;
                }
            }
            
            public string Point {
                get {
                    return ((string)(this[this.tableTocEntry.PointColumn]));
                }
                set {
                    this[this.tableTocEntry.PointColumn] = value;
                }
            }
            
            public string Msf {
                get {
                    return ((string)(this[this.tableTocEntry.MsfColumn]));
                }
                set {
                    this[this.tableTocEntry.MsfColumn] = value;
                }
            }
            
            public string Zero {
                get {
                    return ((string)(this[this.tableTocEntry.ZeroColumn]));
                }
                set {
                    this[this.tableTocEntry.ZeroColumn] = value;
                }
            }
            
            public string Pmsf {
                get {
                    return ((string)(this[this.tableTocEntry.PmsfColumn]));
                }
                set {
                    this[this.tableTocEntry.PmsfColumn] = value;
                }
            }
            
            public DiscInfoRow DiscInfoRow {
                get {
                    return ((DiscInfoRow)(this.GetParentRow(this.Table.ParentRelations["DiscInfo_TocEntry"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DiscInfo_TocEntry"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TocEntryRowChangeEvent : EventArgs {
            
            private TocEntryRow eventRow;
            
            private DataRowAction eventAction;
            
            public TocEntryRowChangeEvent(TocEntryRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TocEntryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
