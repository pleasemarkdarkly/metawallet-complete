//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace RImageSchemas.DataSets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ProductionServerReply : DataSet {
        
        private AckOnlyDataTable tableAckOnly;
        
        private ServerStatusDataTable tableServerStatus;
        
        private ServerInfoDataTable tableServerInfo;
        
        private ProductionCountDataTable tableProductionCount;
        
        private SwitchesDataTable tableSwitches;
        
        private AutoloaderStatusDataTable tableAutoloaderStatus;
        
        private BinDataTable tableBin;
        
        private PrinterDataTable tablePrinter;
        
        private RecorderDataTable tableRecorder;
        
        private ActivationInfoDataTable tableActivationInfo;
        
        private BaseDataTable tableBase;
        
        private RawModeDataTable tableRawMode;
        
        private SmarteCDDataTable tableSmarteCD;
        
        private VideoCDDataTable tableVideoCD;
        
        private OrderListDataTable tableOrderList;
        
        private ProductionOrderDataTable tableProductionOrder;
        
        private SessionLogDataTable tableSessionLog;
        
        private EntryDataTable tableEntry;
        
        private DialogActionDataTable tableDialogAction;
        
        private ProductionParameterSettingsDataTable tableProductionParameterSettings;
        
        private ServerDataTable tableServer;
        
        private ModesDataTable tableModes;
        
        private CachingDataTable tableCaching;
        
        private RecordingDataTable tableRecording;
        
        private VerifyDataTable tableVerify;
        
        private PrintingDataTable tablePrinting;
        
        private AutoloaderDataTable tableAutoloader;
        
        private BinSettingDataTable tableBinSetting;
        
        private ReadingDataTable tableReading;
        
        private AutoBulkReadDataTable tableAutoBulkRead;
        
        private MediaCodesDataTable tableMediaCodes;
        
        private MediaCodeDataTable tableMediaCode;
        
        private KioskModeDataTable tableKioskMode;
        
        private UnlockingCodesDataTable tableUnlockingCodes;
        
        private DataRelation relationAutoloaderStatus_Bin;
        
        private DataRelation relationAutoloaderStatus_Printer;
        
        private DataRelation relationAutoloaderStatus_Recorder;
        
        private DataRelation relationActivationInfo_Base;
        
        private DataRelation relationActivationInfo_RawMode;
        
        private DataRelation relationActivationInfo_SmarteCD;
        
        private DataRelation relationActivationInfo_VideoCD;
        
        private DataRelation relationServerStatus_ServerInfo;
        
        private DataRelation relationServerStatus_ProductionCount;
        
        private DataRelation relationServerStatus_Switches;
        
        private DataRelation relationServerStatus_AutoloaderStatus;
        
        private DataRelation relationServerStatus_ActivationInfo;
        
        private DataRelation relationOrderList_ProductionOrder;
        
        private DataRelation relationSessionLog_Entry;
        
        private DataRelation relationAutoloader_BinSetting;
        
        private DataRelation relationReading_AutoBulkRead;
        
        private DataRelation relationMediaCodes_MediaCode;
        
        private DataRelation relationProductionParameterSettings_Server;
        
        private DataRelation relationProductionParameterSettings_Modes;
        
        private DataRelation relationProductionParameterSettings_Caching;
        
        private DataRelation relationProductionParameterSettings_Recording;
        
        private DataRelation relationProductionParameterSettings_Verify;
        
        private DataRelation relationProductionParameterSettings_Printing;
        
        private DataRelation relationProductionParameterSettings_Autoloader;
        
        private DataRelation relationProductionParameterSettings_Reading;
        
        private DataRelation relationProductionParameterSettings_MediaCodes;
        
        private DataRelation relationProductionParameterSettings_KioskMode;
        
        public ProductionServerReply() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ProductionServerReply(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["AckOnly"] != null)) {
                    this.Tables.Add(new AckOnlyDataTable(ds.Tables["AckOnly"]));
                }
                if ((ds.Tables["ServerStatus"] != null)) {
                    this.Tables.Add(new ServerStatusDataTable(ds.Tables["ServerStatus"]));
                }
                if ((ds.Tables["ServerInfo"] != null)) {
                    this.Tables.Add(new ServerInfoDataTable(ds.Tables["ServerInfo"]));
                }
                if ((ds.Tables["ProductionCount"] != null)) {
                    this.Tables.Add(new ProductionCountDataTable(ds.Tables["ProductionCount"]));
                }
                if ((ds.Tables["Switches"] != null)) {
                    this.Tables.Add(new SwitchesDataTable(ds.Tables["Switches"]));
                }
                if ((ds.Tables["AutoloaderStatus"] != null)) {
                    this.Tables.Add(new AutoloaderStatusDataTable(ds.Tables["AutoloaderStatus"]));
                }
                if ((ds.Tables["Bin"] != null)) {
                    this.Tables.Add(new BinDataTable(ds.Tables["Bin"]));
                }
                if ((ds.Tables["Printer"] != null)) {
                    this.Tables.Add(new PrinterDataTable(ds.Tables["Printer"]));
                }
                if ((ds.Tables["Recorder"] != null)) {
                    this.Tables.Add(new RecorderDataTable(ds.Tables["Recorder"]));
                }
                if ((ds.Tables["ActivationInfo"] != null)) {
                    this.Tables.Add(new ActivationInfoDataTable(ds.Tables["ActivationInfo"]));
                }
                if ((ds.Tables["Base"] != null)) {
                    this.Tables.Add(new BaseDataTable(ds.Tables["Base"]));
                }
                if ((ds.Tables["RawMode"] != null)) {
                    this.Tables.Add(new RawModeDataTable(ds.Tables["RawMode"]));
                }
                if ((ds.Tables["SmarteCD"] != null)) {
                    this.Tables.Add(new SmarteCDDataTable(ds.Tables["SmarteCD"]));
                }
                if ((ds.Tables["VideoCD"] != null)) {
                    this.Tables.Add(new VideoCDDataTable(ds.Tables["VideoCD"]));
                }
                if ((ds.Tables["OrderList"] != null)) {
                    this.Tables.Add(new OrderListDataTable(ds.Tables["OrderList"]));
                }
                if ((ds.Tables["ProductionOrder"] != null)) {
                    this.Tables.Add(new ProductionOrderDataTable(ds.Tables["ProductionOrder"]));
                }
                if ((ds.Tables["SessionLog"] != null)) {
                    this.Tables.Add(new SessionLogDataTable(ds.Tables["SessionLog"]));
                }
                if ((ds.Tables["Entry"] != null)) {
                    this.Tables.Add(new EntryDataTable(ds.Tables["Entry"]));
                }
                if ((ds.Tables["DialogAction"] != null)) {
                    this.Tables.Add(new DialogActionDataTable(ds.Tables["DialogAction"]));
                }
                if ((ds.Tables["ProductionParameterSettings"] != null)) {
                    this.Tables.Add(new ProductionParameterSettingsDataTable(ds.Tables["ProductionParameterSettings"]));
                }
                if ((ds.Tables["Server"] != null)) {
                    this.Tables.Add(new ServerDataTable(ds.Tables["Server"]));
                }
                if ((ds.Tables["Modes"] != null)) {
                    this.Tables.Add(new ModesDataTable(ds.Tables["Modes"]));
                }
                if ((ds.Tables["Caching"] != null)) {
                    this.Tables.Add(new CachingDataTable(ds.Tables["Caching"]));
                }
                if ((ds.Tables["Recording"] != null)) {
                    this.Tables.Add(new RecordingDataTable(ds.Tables["Recording"]));
                }
                if ((ds.Tables["Verify"] != null)) {
                    this.Tables.Add(new VerifyDataTable(ds.Tables["Verify"]));
                }
                if ((ds.Tables["Printing"] != null)) {
                    this.Tables.Add(new PrintingDataTable(ds.Tables["Printing"]));
                }
                if ((ds.Tables["Autoloader"] != null)) {
                    this.Tables.Add(new AutoloaderDataTable(ds.Tables["Autoloader"]));
                }
                if ((ds.Tables["BinSetting"] != null)) {
                    this.Tables.Add(new BinSettingDataTable(ds.Tables["BinSetting"]));
                }
                if ((ds.Tables["Reading"] != null)) {
                    this.Tables.Add(new ReadingDataTable(ds.Tables["Reading"]));
                }
                if ((ds.Tables["AutoBulkRead"] != null)) {
                    this.Tables.Add(new AutoBulkReadDataTable(ds.Tables["AutoBulkRead"]));
                }
                if ((ds.Tables["MediaCodes"] != null)) {
                    this.Tables.Add(new MediaCodesDataTable(ds.Tables["MediaCodes"]));
                }
                if ((ds.Tables["MediaCode"] != null)) {
                    this.Tables.Add(new MediaCodeDataTable(ds.Tables["MediaCode"]));
                }
                if ((ds.Tables["KioskMode"] != null)) {
                    this.Tables.Add(new KioskModeDataTable(ds.Tables["KioskMode"]));
                }
                if ((ds.Tables["UnlockingCodes"] != null)) {
                    this.Tables.Add(new UnlockingCodesDataTable(ds.Tables["UnlockingCodes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AckOnlyDataTable AckOnly {
            get {
                return this.tableAckOnly;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerStatusDataTable ServerStatus {
            get {
                return this.tableServerStatus;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerInfoDataTable ServerInfo {
            get {
                return this.tableServerInfo;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProductionCountDataTable ProductionCount {
            get {
                return this.tableProductionCount;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SwitchesDataTable Switches {
            get {
                return this.tableSwitches;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AutoloaderStatusDataTable AutoloaderStatus {
            get {
                return this.tableAutoloaderStatus;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BinDataTable Bin {
            get {
                return this.tableBin;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrinterDataTable Printer {
            get {
                return this.tablePrinter;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RecorderDataTable Recorder {
            get {
                return this.tableRecorder;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ActivationInfoDataTable ActivationInfo {
            get {
                return this.tableActivationInfo;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BaseDataTable Base {
            get {
                return this.tableBase;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RawModeDataTable RawMode {
            get {
                return this.tableRawMode;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SmarteCDDataTable SmarteCD {
            get {
                return this.tableSmarteCD;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VideoCDDataTable VideoCD {
            get {
                return this.tableVideoCD;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OrderListDataTable OrderList {
            get {
                return this.tableOrderList;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProductionOrderDataTable ProductionOrder {
            get {
                return this.tableProductionOrder;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SessionLogDataTable SessionLog {
            get {
                return this.tableSessionLog;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EntryDataTable Entry {
            get {
                return this.tableEntry;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DialogActionDataTable DialogAction {
            get {
                return this.tableDialogAction;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProductionParameterSettingsDataTable ProductionParameterSettings {
            get {
                return this.tableProductionParameterSettings;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerDataTable Server {
            get {
                return this.tableServer;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ModesDataTable Modes {
            get {
                return this.tableModes;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CachingDataTable Caching {
            get {
                return this.tableCaching;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RecordingDataTable Recording {
            get {
                return this.tableRecording;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VerifyDataTable Verify {
            get {
                return this.tableVerify;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrintingDataTable Printing {
            get {
                return this.tablePrinting;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AutoloaderDataTable Autoloader {
            get {
                return this.tableAutoloader;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BinSettingDataTable BinSetting {
            get {
                return this.tableBinSetting;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReadingDataTable Reading {
            get {
                return this.tableReading;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AutoBulkReadDataTable AutoBulkRead {
            get {
                return this.tableAutoBulkRead;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MediaCodesDataTable MediaCodes {
            get {
                return this.tableMediaCodes;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MediaCodeDataTable MediaCode {
            get {
                return this.tableMediaCode;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public KioskModeDataTable KioskMode {
            get {
                return this.tableKioskMode;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UnlockingCodesDataTable UnlockingCodes {
            get {
                return this.tableUnlockingCodes;
            }
        }
        
        public override DataSet Clone() {
            ProductionServerReply cln = ((ProductionServerReply)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["AckOnly"] != null)) {
                this.Tables.Add(new AckOnlyDataTable(ds.Tables["AckOnly"]));
            }
            if ((ds.Tables["ServerStatus"] != null)) {
                this.Tables.Add(new ServerStatusDataTable(ds.Tables["ServerStatus"]));
            }
            if ((ds.Tables["ServerInfo"] != null)) {
                this.Tables.Add(new ServerInfoDataTable(ds.Tables["ServerInfo"]));
            }
            if ((ds.Tables["ProductionCount"] != null)) {
                this.Tables.Add(new ProductionCountDataTable(ds.Tables["ProductionCount"]));
            }
            if ((ds.Tables["Switches"] != null)) {
                this.Tables.Add(new SwitchesDataTable(ds.Tables["Switches"]));
            }
            if ((ds.Tables["AutoloaderStatus"] != null)) {
                this.Tables.Add(new AutoloaderStatusDataTable(ds.Tables["AutoloaderStatus"]));
            }
            if ((ds.Tables["Bin"] != null)) {
                this.Tables.Add(new BinDataTable(ds.Tables["Bin"]));
            }
            if ((ds.Tables["Printer"] != null)) {
                this.Tables.Add(new PrinterDataTable(ds.Tables["Printer"]));
            }
            if ((ds.Tables["Recorder"] != null)) {
                this.Tables.Add(new RecorderDataTable(ds.Tables["Recorder"]));
            }
            if ((ds.Tables["ActivationInfo"] != null)) {
                this.Tables.Add(new ActivationInfoDataTable(ds.Tables["ActivationInfo"]));
            }
            if ((ds.Tables["Base"] != null)) {
                this.Tables.Add(new BaseDataTable(ds.Tables["Base"]));
            }
            if ((ds.Tables["RawMode"] != null)) {
                this.Tables.Add(new RawModeDataTable(ds.Tables["RawMode"]));
            }
            if ((ds.Tables["SmarteCD"] != null)) {
                this.Tables.Add(new SmarteCDDataTable(ds.Tables["SmarteCD"]));
            }
            if ((ds.Tables["VideoCD"] != null)) {
                this.Tables.Add(new VideoCDDataTable(ds.Tables["VideoCD"]));
            }
            if ((ds.Tables["OrderList"] != null)) {
                this.Tables.Add(new OrderListDataTable(ds.Tables["OrderList"]));
            }
            if ((ds.Tables["ProductionOrder"] != null)) {
                this.Tables.Add(new ProductionOrderDataTable(ds.Tables["ProductionOrder"]));
            }
            if ((ds.Tables["SessionLog"] != null)) {
                this.Tables.Add(new SessionLogDataTable(ds.Tables["SessionLog"]));
            }
            if ((ds.Tables["Entry"] != null)) {
                this.Tables.Add(new EntryDataTable(ds.Tables["Entry"]));
            }
            if ((ds.Tables["DialogAction"] != null)) {
                this.Tables.Add(new DialogActionDataTable(ds.Tables["DialogAction"]));
            }
            if ((ds.Tables["ProductionParameterSettings"] != null)) {
                this.Tables.Add(new ProductionParameterSettingsDataTable(ds.Tables["ProductionParameterSettings"]));
            }
            if ((ds.Tables["Server"] != null)) {
                this.Tables.Add(new ServerDataTable(ds.Tables["Server"]));
            }
            if ((ds.Tables["Modes"] != null)) {
                this.Tables.Add(new ModesDataTable(ds.Tables["Modes"]));
            }
            if ((ds.Tables["Caching"] != null)) {
                this.Tables.Add(new CachingDataTable(ds.Tables["Caching"]));
            }
            if ((ds.Tables["Recording"] != null)) {
                this.Tables.Add(new RecordingDataTable(ds.Tables["Recording"]));
            }
            if ((ds.Tables["Verify"] != null)) {
                this.Tables.Add(new VerifyDataTable(ds.Tables["Verify"]));
            }
            if ((ds.Tables["Printing"] != null)) {
                this.Tables.Add(new PrintingDataTable(ds.Tables["Printing"]));
            }
            if ((ds.Tables["Autoloader"] != null)) {
                this.Tables.Add(new AutoloaderDataTable(ds.Tables["Autoloader"]));
            }
            if ((ds.Tables["BinSetting"] != null)) {
                this.Tables.Add(new BinSettingDataTable(ds.Tables["BinSetting"]));
            }
            if ((ds.Tables["Reading"] != null)) {
                this.Tables.Add(new ReadingDataTable(ds.Tables["Reading"]));
            }
            if ((ds.Tables["AutoBulkRead"] != null)) {
                this.Tables.Add(new AutoBulkReadDataTable(ds.Tables["AutoBulkRead"]));
            }
            if ((ds.Tables["MediaCodes"] != null)) {
                this.Tables.Add(new MediaCodesDataTable(ds.Tables["MediaCodes"]));
            }
            if ((ds.Tables["MediaCode"] != null)) {
                this.Tables.Add(new MediaCodeDataTable(ds.Tables["MediaCode"]));
            }
            if ((ds.Tables["KioskMode"] != null)) {
                this.Tables.Add(new KioskModeDataTable(ds.Tables["KioskMode"]));
            }
            if ((ds.Tables["UnlockingCodes"] != null)) {
                this.Tables.Add(new UnlockingCodesDataTable(ds.Tables["UnlockingCodes"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableAckOnly = ((AckOnlyDataTable)(this.Tables["AckOnly"]));
            if ((this.tableAckOnly != null)) {
                this.tableAckOnly.InitVars();
            }
            this.tableServerStatus = ((ServerStatusDataTable)(this.Tables["ServerStatus"]));
            if ((this.tableServerStatus != null)) {
                this.tableServerStatus.InitVars();
            }
            this.tableServerInfo = ((ServerInfoDataTable)(this.Tables["ServerInfo"]));
            if ((this.tableServerInfo != null)) {
                this.tableServerInfo.InitVars();
            }
            this.tableProductionCount = ((ProductionCountDataTable)(this.Tables["ProductionCount"]));
            if ((this.tableProductionCount != null)) {
                this.tableProductionCount.InitVars();
            }
            this.tableSwitches = ((SwitchesDataTable)(this.Tables["Switches"]));
            if ((this.tableSwitches != null)) {
                this.tableSwitches.InitVars();
            }
            this.tableAutoloaderStatus = ((AutoloaderStatusDataTable)(this.Tables["AutoloaderStatus"]));
            if ((this.tableAutoloaderStatus != null)) {
                this.tableAutoloaderStatus.InitVars();
            }
            this.tableBin = ((BinDataTable)(this.Tables["Bin"]));
            if ((this.tableBin != null)) {
                this.tableBin.InitVars();
            }
            this.tablePrinter = ((PrinterDataTable)(this.Tables["Printer"]));
            if ((this.tablePrinter != null)) {
                this.tablePrinter.InitVars();
            }
            this.tableRecorder = ((RecorderDataTable)(this.Tables["Recorder"]));
            if ((this.tableRecorder != null)) {
                this.tableRecorder.InitVars();
            }
            this.tableActivationInfo = ((ActivationInfoDataTable)(this.Tables["ActivationInfo"]));
            if ((this.tableActivationInfo != null)) {
                this.tableActivationInfo.InitVars();
            }
            this.tableBase = ((BaseDataTable)(this.Tables["Base"]));
            if ((this.tableBase != null)) {
                this.tableBase.InitVars();
            }
            this.tableRawMode = ((RawModeDataTable)(this.Tables["RawMode"]));
            if ((this.tableRawMode != null)) {
                this.tableRawMode.InitVars();
            }
            this.tableSmarteCD = ((SmarteCDDataTable)(this.Tables["SmarteCD"]));
            if ((this.tableSmarteCD != null)) {
                this.tableSmarteCD.InitVars();
            }
            this.tableVideoCD = ((VideoCDDataTable)(this.Tables["VideoCD"]));
            if ((this.tableVideoCD != null)) {
                this.tableVideoCD.InitVars();
            }
            this.tableOrderList = ((OrderListDataTable)(this.Tables["OrderList"]));
            if ((this.tableOrderList != null)) {
                this.tableOrderList.InitVars();
            }
            this.tableProductionOrder = ((ProductionOrderDataTable)(this.Tables["ProductionOrder"]));
            if ((this.tableProductionOrder != null)) {
                this.tableProductionOrder.InitVars();
            }
            this.tableSessionLog = ((SessionLogDataTable)(this.Tables["SessionLog"]));
            if ((this.tableSessionLog != null)) {
                this.tableSessionLog.InitVars();
            }
            this.tableEntry = ((EntryDataTable)(this.Tables["Entry"]));
            if ((this.tableEntry != null)) {
                this.tableEntry.InitVars();
            }
            this.tableDialogAction = ((DialogActionDataTable)(this.Tables["DialogAction"]));
            if ((this.tableDialogAction != null)) {
                this.tableDialogAction.InitVars();
            }
            this.tableProductionParameterSettings = ((ProductionParameterSettingsDataTable)(this.Tables["ProductionParameterSettings"]));
            if ((this.tableProductionParameterSettings != null)) {
                this.tableProductionParameterSettings.InitVars();
            }
            this.tableServer = ((ServerDataTable)(this.Tables["Server"]));
            if ((this.tableServer != null)) {
                this.tableServer.InitVars();
            }
            this.tableModes = ((ModesDataTable)(this.Tables["Modes"]));
            if ((this.tableModes != null)) {
                this.tableModes.InitVars();
            }
            this.tableCaching = ((CachingDataTable)(this.Tables["Caching"]));
            if ((this.tableCaching != null)) {
                this.tableCaching.InitVars();
            }
            this.tableRecording = ((RecordingDataTable)(this.Tables["Recording"]));
            if ((this.tableRecording != null)) {
                this.tableRecording.InitVars();
            }
            this.tableVerify = ((VerifyDataTable)(this.Tables["Verify"]));
            if ((this.tableVerify != null)) {
                this.tableVerify.InitVars();
            }
            this.tablePrinting = ((PrintingDataTable)(this.Tables["Printing"]));
            if ((this.tablePrinting != null)) {
                this.tablePrinting.InitVars();
            }
            this.tableAutoloader = ((AutoloaderDataTable)(this.Tables["Autoloader"]));
            if ((this.tableAutoloader != null)) {
                this.tableAutoloader.InitVars();
            }
            this.tableBinSetting = ((BinSettingDataTable)(this.Tables["BinSetting"]));
            if ((this.tableBinSetting != null)) {
                this.tableBinSetting.InitVars();
            }
            this.tableReading = ((ReadingDataTable)(this.Tables["Reading"]));
            if ((this.tableReading != null)) {
                this.tableReading.InitVars();
            }
            this.tableAutoBulkRead = ((AutoBulkReadDataTable)(this.Tables["AutoBulkRead"]));
            if ((this.tableAutoBulkRead != null)) {
                this.tableAutoBulkRead.InitVars();
            }
            this.tableMediaCodes = ((MediaCodesDataTable)(this.Tables["MediaCodes"]));
            if ((this.tableMediaCodes != null)) {
                this.tableMediaCodes.InitVars();
            }
            this.tableMediaCode = ((MediaCodeDataTable)(this.Tables["MediaCode"]));
            if ((this.tableMediaCode != null)) {
                this.tableMediaCode.InitVars();
            }
            this.tableKioskMode = ((KioskModeDataTable)(this.Tables["KioskMode"]));
            if ((this.tableKioskMode != null)) {
                this.tableKioskMode.InitVars();
            }
            this.tableUnlockingCodes = ((UnlockingCodesDataTable)(this.Tables["UnlockingCodes"]));
            if ((this.tableUnlockingCodes != null)) {
                this.tableUnlockingCodes.InitVars();
            }
            this.relationAutoloaderStatus_Bin = this.Relations["AutoloaderStatus_Bin"];
            this.relationAutoloaderStatus_Printer = this.Relations["AutoloaderStatus_Printer"];
            this.relationAutoloaderStatus_Recorder = this.Relations["AutoloaderStatus_Recorder"];
            this.relationActivationInfo_Base = this.Relations["ActivationInfo_Base"];
            this.relationActivationInfo_RawMode = this.Relations["ActivationInfo_RawMode"];
            this.relationActivationInfo_SmarteCD = this.Relations["ActivationInfo_SmarteCD"];
            this.relationActivationInfo_VideoCD = this.Relations["ActivationInfo_VideoCD"];
            this.relationServerStatus_ServerInfo = this.Relations["ServerStatus_ServerInfo"];
            this.relationServerStatus_ProductionCount = this.Relations["ServerStatus_ProductionCount"];
            this.relationServerStatus_Switches = this.Relations["ServerStatus_Switches"];
            this.relationServerStatus_AutoloaderStatus = this.Relations["ServerStatus_AutoloaderStatus"];
            this.relationServerStatus_ActivationInfo = this.Relations["ServerStatus_ActivationInfo"];
            this.relationOrderList_ProductionOrder = this.Relations["OrderList_ProductionOrder"];
            this.relationSessionLog_Entry = this.Relations["SessionLog_Entry"];
            this.relationAutoloader_BinSetting = this.Relations["Autoloader_BinSetting"];
            this.relationReading_AutoBulkRead = this.Relations["Reading_AutoBulkRead"];
            this.relationMediaCodes_MediaCode = this.Relations["MediaCodes_MediaCode"];
            this.relationProductionParameterSettings_Server = this.Relations["ProductionParameterSettings_Server"];
            this.relationProductionParameterSettings_Modes = this.Relations["ProductionParameterSettings_Modes"];
            this.relationProductionParameterSettings_Caching = this.Relations["ProductionParameterSettings_Caching"];
            this.relationProductionParameterSettings_Recording = this.Relations["ProductionParameterSettings_Recording"];
            this.relationProductionParameterSettings_Verify = this.Relations["ProductionParameterSettings_Verify"];
            this.relationProductionParameterSettings_Printing = this.Relations["ProductionParameterSettings_Printing"];
            this.relationProductionParameterSettings_Autoloader = this.Relations["ProductionParameterSettings_Autoloader"];
            this.relationProductionParameterSettings_Reading = this.Relations["ProductionParameterSettings_Reading"];
            this.relationProductionParameterSettings_MediaCodes = this.Relations["ProductionParameterSettings_MediaCodes"];
            this.relationProductionParameterSettings_KioskMode = this.Relations["ProductionParameterSettings_KioskMode"];
        }
        
        private void InitClass() {
            this.DataSetName = "ProductionServerReply";
            this.Prefix = "";
            this.Namespace = "";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableAckOnly = new AckOnlyDataTable();
            this.Tables.Add(this.tableAckOnly);
            this.tableServerStatus = new ServerStatusDataTable();
            this.Tables.Add(this.tableServerStatus);
            this.tableServerInfo = new ServerInfoDataTable();
            this.Tables.Add(this.tableServerInfo);
            this.tableProductionCount = new ProductionCountDataTable();
            this.Tables.Add(this.tableProductionCount);
            this.tableSwitches = new SwitchesDataTable();
            this.Tables.Add(this.tableSwitches);
            this.tableAutoloaderStatus = new AutoloaderStatusDataTable();
            this.Tables.Add(this.tableAutoloaderStatus);
            this.tableBin = new BinDataTable();
            this.Tables.Add(this.tableBin);
            this.tablePrinter = new PrinterDataTable();
            this.Tables.Add(this.tablePrinter);
            this.tableRecorder = new RecorderDataTable();
            this.Tables.Add(this.tableRecorder);
            this.tableActivationInfo = new ActivationInfoDataTable();
            this.Tables.Add(this.tableActivationInfo);
            this.tableBase = new BaseDataTable();
            this.Tables.Add(this.tableBase);
            this.tableRawMode = new RawModeDataTable();
            this.Tables.Add(this.tableRawMode);
            this.tableSmarteCD = new SmarteCDDataTable();
            this.Tables.Add(this.tableSmarteCD);
            this.tableVideoCD = new VideoCDDataTable();
            this.Tables.Add(this.tableVideoCD);
            this.tableOrderList = new OrderListDataTable();
            this.Tables.Add(this.tableOrderList);
            this.tableProductionOrder = new ProductionOrderDataTable();
            this.Tables.Add(this.tableProductionOrder);
            this.tableSessionLog = new SessionLogDataTable();
            this.Tables.Add(this.tableSessionLog);
            this.tableEntry = new EntryDataTable();
            this.Tables.Add(this.tableEntry);
            this.tableDialogAction = new DialogActionDataTable();
            this.Tables.Add(this.tableDialogAction);
            this.tableProductionParameterSettings = new ProductionParameterSettingsDataTable();
            this.Tables.Add(this.tableProductionParameterSettings);
            this.tableServer = new ServerDataTable();
            this.Tables.Add(this.tableServer);
            this.tableModes = new ModesDataTable();
            this.Tables.Add(this.tableModes);
            this.tableCaching = new CachingDataTable();
            this.Tables.Add(this.tableCaching);
            this.tableRecording = new RecordingDataTable();
            this.Tables.Add(this.tableRecording);
            this.tableVerify = new VerifyDataTable();
            this.Tables.Add(this.tableVerify);
            this.tablePrinting = new PrintingDataTable();
            this.Tables.Add(this.tablePrinting);
            this.tableAutoloader = new AutoloaderDataTable();
            this.Tables.Add(this.tableAutoloader);
            this.tableBinSetting = new BinSettingDataTable();
            this.Tables.Add(this.tableBinSetting);
            this.tableReading = new ReadingDataTable();
            this.Tables.Add(this.tableReading);
            this.tableAutoBulkRead = new AutoBulkReadDataTable();
            this.Tables.Add(this.tableAutoBulkRead);
            this.tableMediaCodes = new MediaCodesDataTable();
            this.Tables.Add(this.tableMediaCodes);
            this.tableMediaCode = new MediaCodeDataTable();
            this.Tables.Add(this.tableMediaCode);
            this.tableKioskMode = new KioskModeDataTable();
            this.Tables.Add(this.tableKioskMode);
            this.tableUnlockingCodes = new UnlockingCodesDataTable();
            this.Tables.Add(this.tableUnlockingCodes);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("ServerStatus_ServerInfo", new DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new DataColumn[] {
                        this.tableServerInfo.ServerStatus_IdColumn});
            this.tableServerInfo.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ServerStatus_ProductionCount", new DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new DataColumn[] {
                        this.tableProductionCount.ServerStatus_IdColumn});
            this.tableProductionCount.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ServerStatus_Switches", new DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new DataColumn[] {
                        this.tableSwitches.ServerStatus_IdColumn});
            this.tableSwitches.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ServerStatus_AutoloaderStatus", new DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new DataColumn[] {
                        this.tableAutoloaderStatus.ServerStatus_IdColumn});
            this.tableAutoloaderStatus.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("AutoloaderStatus_Bin", new DataColumn[] {
                        this.tableAutoloaderStatus.AutoloaderStatus_IdColumn}, new DataColumn[] {
                        this.tableBin.AutoloaderStatus_IdColumn});
            this.tableBin.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("AutoloaderStatus_Printer", new DataColumn[] {
                        this.tableAutoloaderStatus.AutoloaderStatus_IdColumn}, new DataColumn[] {
                        this.tablePrinter.AutoloaderStatus_IdColumn});
            this.tablePrinter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("AutoloaderStatus_Recorder", new DataColumn[] {
                        this.tableAutoloaderStatus.AutoloaderStatus_IdColumn}, new DataColumn[] {
                        this.tableRecorder.AutoloaderStatus_IdColumn});
            this.tableRecorder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ServerStatus_ActivationInfo", new DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new DataColumn[] {
                        this.tableActivationInfo.ServerStatus_IdColumn});
            this.tableActivationInfo.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ActivationInfo_Base", new DataColumn[] {
                        this.tableActivationInfo.ActivationInfo_IdColumn}, new DataColumn[] {
                        this.tableBase.ActivationInfo_IdColumn});
            this.tableBase.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ActivationInfo_RawMode", new DataColumn[] {
                        this.tableActivationInfo.ActivationInfo_IdColumn}, new DataColumn[] {
                        this.tableRawMode.ActivationInfo_IdColumn});
            this.tableRawMode.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ActivationInfo_SmarteCD", new DataColumn[] {
                        this.tableActivationInfo.ActivationInfo_IdColumn}, new DataColumn[] {
                        this.tableSmarteCD.ActivationInfo_IdColumn});
            this.tableSmarteCD.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ActivationInfo_VideoCD", new DataColumn[] {
                        this.tableActivationInfo.ActivationInfo_IdColumn}, new DataColumn[] {
                        this.tableVideoCD.ActivationInfo_IdColumn});
            this.tableVideoCD.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("OrderList_ProductionOrder", new DataColumn[] {
                        this.tableOrderList.OrderList_IdColumn}, new DataColumn[] {
                        this.tableProductionOrder.OrderList_IdColumn});
            this.tableProductionOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SessionLog_Entry", new DataColumn[] {
                        this.tableSessionLog.SessionLog_IdColumn}, new DataColumn[] {
                        this.tableEntry.SessionLog_IdColumn});
            this.tableEntry.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ProductionParameterSettings_Server", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableServer.ProductionParameterSettings_IdColumn});
            this.tableServer.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ProductionParameterSettings_Modes", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableModes.ProductionParameterSettings_IdColumn});
            this.tableModes.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ProductionParameterSettings_Caching", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableCaching.ProductionParameterSettings_IdColumn});
            this.tableCaching.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ProductionParameterSettings_Recording", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableRecording.ProductionParameterSettings_IdColumn});
            this.tableRecording.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ProductionParameterSettings_Verify", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableVerify.ProductionParameterSettings_IdColumn});
            this.tableVerify.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ProductionParameterSettings_Printing", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tablePrinting.ProductionParameterSettings_IdColumn});
            this.tablePrinting.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ProductionParameterSettings_Autoloader", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableAutoloader.ProductionParameterSettings_IdColumn});
            this.tableAutoloader.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Autoloader_BinSetting", new DataColumn[] {
                        this.tableAutoloader.Autoloader_IdColumn}, new DataColumn[] {
                        this.tableBinSetting.Autoloader_IdColumn});
            this.tableBinSetting.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ProductionParameterSettings_Reading", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableReading.ProductionParameterSettings_IdColumn});
            this.tableReading.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Reading_AutoBulkRead", new DataColumn[] {
                        this.tableReading.Reading_IdColumn}, new DataColumn[] {
                        this.tableAutoBulkRead.Reading_IdColumn});
            this.tableAutoBulkRead.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ProductionParameterSettings_MediaCodes", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableMediaCodes.ProductionParameterSettings_IdColumn});
            this.tableMediaCodes.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("MediaCodes_MediaCode", new DataColumn[] {
                        this.tableMediaCodes.MediaCodes_IdColumn}, new DataColumn[] {
                        this.tableMediaCode.MediaCodes_IdColumn});
            this.tableMediaCode.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ProductionParameterSettings_KioskMode", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableKioskMode.ProductionParameterSettings_IdColumn});
            this.tableKioskMode.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationAutoloaderStatus_Bin = new DataRelation("AutoloaderStatus_Bin", new DataColumn[] {
                        this.tableAutoloaderStatus.AutoloaderStatus_IdColumn}, new DataColumn[] {
                        this.tableBin.AutoloaderStatus_IdColumn}, false);
            this.relationAutoloaderStatus_Bin.Nested = true;
            this.Relations.Add(this.relationAutoloaderStatus_Bin);
            this.relationAutoloaderStatus_Printer = new DataRelation("AutoloaderStatus_Printer", new DataColumn[] {
                        this.tableAutoloaderStatus.AutoloaderStatus_IdColumn}, new DataColumn[] {
                        this.tablePrinter.AutoloaderStatus_IdColumn}, false);
            this.relationAutoloaderStatus_Printer.Nested = true;
            this.Relations.Add(this.relationAutoloaderStatus_Printer);
            this.relationAutoloaderStatus_Recorder = new DataRelation("AutoloaderStatus_Recorder", new DataColumn[] {
                        this.tableAutoloaderStatus.AutoloaderStatus_IdColumn}, new DataColumn[] {
                        this.tableRecorder.AutoloaderStatus_IdColumn}, false);
            this.relationAutoloaderStatus_Recorder.Nested = true;
            this.Relations.Add(this.relationAutoloaderStatus_Recorder);
            this.relationActivationInfo_Base = new DataRelation("ActivationInfo_Base", new DataColumn[] {
                        this.tableActivationInfo.ActivationInfo_IdColumn}, new DataColumn[] {
                        this.tableBase.ActivationInfo_IdColumn}, false);
            this.relationActivationInfo_Base.Nested = true;
            this.Relations.Add(this.relationActivationInfo_Base);
            this.relationActivationInfo_RawMode = new DataRelation("ActivationInfo_RawMode", new DataColumn[] {
                        this.tableActivationInfo.ActivationInfo_IdColumn}, new DataColumn[] {
                        this.tableRawMode.ActivationInfo_IdColumn}, false);
            this.relationActivationInfo_RawMode.Nested = true;
            this.Relations.Add(this.relationActivationInfo_RawMode);
            this.relationActivationInfo_SmarteCD = new DataRelation("ActivationInfo_SmarteCD", new DataColumn[] {
                        this.tableActivationInfo.ActivationInfo_IdColumn}, new DataColumn[] {
                        this.tableSmarteCD.ActivationInfo_IdColumn}, false);
            this.relationActivationInfo_SmarteCD.Nested = true;
            this.Relations.Add(this.relationActivationInfo_SmarteCD);
            this.relationActivationInfo_VideoCD = new DataRelation("ActivationInfo_VideoCD", new DataColumn[] {
                        this.tableActivationInfo.ActivationInfo_IdColumn}, new DataColumn[] {
                        this.tableVideoCD.ActivationInfo_IdColumn}, false);
            this.relationActivationInfo_VideoCD.Nested = true;
            this.Relations.Add(this.relationActivationInfo_VideoCD);
            this.relationServerStatus_ServerInfo = new DataRelation("ServerStatus_ServerInfo", new DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new DataColumn[] {
                        this.tableServerInfo.ServerStatus_IdColumn}, false);
            this.relationServerStatus_ServerInfo.Nested = true;
            this.Relations.Add(this.relationServerStatus_ServerInfo);
            this.relationServerStatus_ProductionCount = new DataRelation("ServerStatus_ProductionCount", new DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new DataColumn[] {
                        this.tableProductionCount.ServerStatus_IdColumn}, false);
            this.relationServerStatus_ProductionCount.Nested = true;
            this.Relations.Add(this.relationServerStatus_ProductionCount);
            this.relationServerStatus_Switches = new DataRelation("ServerStatus_Switches", new DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new DataColumn[] {
                        this.tableSwitches.ServerStatus_IdColumn}, false);
            this.relationServerStatus_Switches.Nested = true;
            this.Relations.Add(this.relationServerStatus_Switches);
            this.relationServerStatus_AutoloaderStatus = new DataRelation("ServerStatus_AutoloaderStatus", new DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new DataColumn[] {
                        this.tableAutoloaderStatus.ServerStatus_IdColumn}, false);
            this.relationServerStatus_AutoloaderStatus.Nested = true;
            this.Relations.Add(this.relationServerStatus_AutoloaderStatus);
            this.relationServerStatus_ActivationInfo = new DataRelation("ServerStatus_ActivationInfo", new DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new DataColumn[] {
                        this.tableActivationInfo.ServerStatus_IdColumn}, false);
            this.relationServerStatus_ActivationInfo.Nested = true;
            this.Relations.Add(this.relationServerStatus_ActivationInfo);
            this.relationOrderList_ProductionOrder = new DataRelation("OrderList_ProductionOrder", new DataColumn[] {
                        this.tableOrderList.OrderList_IdColumn}, new DataColumn[] {
                        this.tableProductionOrder.OrderList_IdColumn}, false);
            this.relationOrderList_ProductionOrder.Nested = true;
            this.Relations.Add(this.relationOrderList_ProductionOrder);
            this.relationSessionLog_Entry = new DataRelation("SessionLog_Entry", new DataColumn[] {
                        this.tableSessionLog.SessionLog_IdColumn}, new DataColumn[] {
                        this.tableEntry.SessionLog_IdColumn}, false);
            this.relationSessionLog_Entry.Nested = true;
            this.Relations.Add(this.relationSessionLog_Entry);
            this.relationAutoloader_BinSetting = new DataRelation("Autoloader_BinSetting", new DataColumn[] {
                        this.tableAutoloader.Autoloader_IdColumn}, new DataColumn[] {
                        this.tableBinSetting.Autoloader_IdColumn}, false);
            this.relationAutoloader_BinSetting.Nested = true;
            this.Relations.Add(this.relationAutoloader_BinSetting);
            this.relationReading_AutoBulkRead = new DataRelation("Reading_AutoBulkRead", new DataColumn[] {
                        this.tableReading.Reading_IdColumn}, new DataColumn[] {
                        this.tableAutoBulkRead.Reading_IdColumn}, false);
            this.relationReading_AutoBulkRead.Nested = true;
            this.Relations.Add(this.relationReading_AutoBulkRead);
            this.relationMediaCodes_MediaCode = new DataRelation("MediaCodes_MediaCode", new DataColumn[] {
                        this.tableMediaCodes.MediaCodes_IdColumn}, new DataColumn[] {
                        this.tableMediaCode.MediaCodes_IdColumn}, false);
            this.relationMediaCodes_MediaCode.Nested = true;
            this.Relations.Add(this.relationMediaCodes_MediaCode);
            this.relationProductionParameterSettings_Server = new DataRelation("ProductionParameterSettings_Server", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableServer.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Server.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Server);
            this.relationProductionParameterSettings_Modes = new DataRelation("ProductionParameterSettings_Modes", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableModes.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Modes.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Modes);
            this.relationProductionParameterSettings_Caching = new DataRelation("ProductionParameterSettings_Caching", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableCaching.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Caching.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Caching);
            this.relationProductionParameterSettings_Recording = new DataRelation("ProductionParameterSettings_Recording", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableRecording.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Recording.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Recording);
            this.relationProductionParameterSettings_Verify = new DataRelation("ProductionParameterSettings_Verify", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableVerify.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Verify.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Verify);
            this.relationProductionParameterSettings_Printing = new DataRelation("ProductionParameterSettings_Printing", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tablePrinting.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Printing.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Printing);
            this.relationProductionParameterSettings_Autoloader = new DataRelation("ProductionParameterSettings_Autoloader", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableAutoloader.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Autoloader.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Autoloader);
            this.relationProductionParameterSettings_Reading = new DataRelation("ProductionParameterSettings_Reading", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableReading.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Reading.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Reading);
            this.relationProductionParameterSettings_MediaCodes = new DataRelation("ProductionParameterSettings_MediaCodes", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableMediaCodes.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_MediaCodes.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_MediaCodes);
            this.relationProductionParameterSettings_KioskMode = new DataRelation("ProductionParameterSettings_KioskMode", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableKioskMode.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_KioskMode.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_KioskMode);
        }
        
        private bool ShouldSerializeAckOnly() {
            return false;
        }
        
        private bool ShouldSerializeServerStatus() {
            return false;
        }
        
        private bool ShouldSerializeServerInfo() {
            return false;
        }
        
        private bool ShouldSerializeProductionCount() {
            return false;
        }
        
        private bool ShouldSerializeSwitches() {
            return false;
        }
        
        private bool ShouldSerializeAutoloaderStatus() {
            return false;
        }
        
        private bool ShouldSerializeBin() {
            return false;
        }
        
        private bool ShouldSerializePrinter() {
            return false;
        }
        
        private bool ShouldSerializeRecorder() {
            return false;
        }
        
        private bool ShouldSerializeActivationInfo() {
            return false;
        }
        
        private bool ShouldSerializeBase() {
            return false;
        }
        
        private bool ShouldSerializeRawMode() {
            return false;
        }
        
        private bool ShouldSerializeSmarteCD() {
            return false;
        }
        
        private bool ShouldSerializeVideoCD() {
            return false;
        }
        
        private bool ShouldSerializeOrderList() {
            return false;
        }
        
        private bool ShouldSerializeProductionOrder() {
            return false;
        }
        
        private bool ShouldSerializeSessionLog() {
            return false;
        }
        
        private bool ShouldSerializeEntry() {
            return false;
        }
        
        private bool ShouldSerializeDialogAction() {
            return false;
        }
        
        private bool ShouldSerializeProductionParameterSettings() {
            return false;
        }
        
        private bool ShouldSerializeServer() {
            return false;
        }
        
        private bool ShouldSerializeModes() {
            return false;
        }
        
        private bool ShouldSerializeCaching() {
            return false;
        }
        
        private bool ShouldSerializeRecording() {
            return false;
        }
        
        private bool ShouldSerializeVerify() {
            return false;
        }
        
        private bool ShouldSerializePrinting() {
            return false;
        }
        
        private bool ShouldSerializeAutoloader() {
            return false;
        }
        
        private bool ShouldSerializeBinSetting() {
            return false;
        }
        
        private bool ShouldSerializeReading() {
            return false;
        }
        
        private bool ShouldSerializeAutoBulkRead() {
            return false;
        }
        
        private bool ShouldSerializeMediaCodes() {
            return false;
        }
        
        private bool ShouldSerializeMediaCode() {
            return false;
        }
        
        private bool ShouldSerializeKioskMode() {
            return false;
        }
        
        private bool ShouldSerializeUnlockingCodes() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void AckOnlyRowChangeEventHandler(object sender, AckOnlyRowChangeEvent e);
        
        public delegate void ServerStatusRowChangeEventHandler(object sender, ServerStatusRowChangeEvent e);
        
        public delegate void ServerInfoRowChangeEventHandler(object sender, ServerInfoRowChangeEvent e);
        
        public delegate void ProductionCountRowChangeEventHandler(object sender, ProductionCountRowChangeEvent e);
        
        public delegate void SwitchesRowChangeEventHandler(object sender, SwitchesRowChangeEvent e);
        
        public delegate void AutoloaderStatusRowChangeEventHandler(object sender, AutoloaderStatusRowChangeEvent e);
        
        public delegate void BinRowChangeEventHandler(object sender, BinRowChangeEvent e);
        
        public delegate void PrinterRowChangeEventHandler(object sender, PrinterRowChangeEvent e);
        
        public delegate void RecorderRowChangeEventHandler(object sender, RecorderRowChangeEvent e);
        
        public delegate void ActivationInfoRowChangeEventHandler(object sender, ActivationInfoRowChangeEvent e);
        
        public delegate void BaseRowChangeEventHandler(object sender, BaseRowChangeEvent e);
        
        public delegate void RawModeRowChangeEventHandler(object sender, RawModeRowChangeEvent e);
        
        public delegate void SmarteCDRowChangeEventHandler(object sender, SmarteCDRowChangeEvent e);
        
        public delegate void VideoCDRowChangeEventHandler(object sender, VideoCDRowChangeEvent e);
        
        public delegate void OrderListRowChangeEventHandler(object sender, OrderListRowChangeEvent e);
        
        public delegate void ProductionOrderRowChangeEventHandler(object sender, ProductionOrderRowChangeEvent e);
        
        public delegate void SessionLogRowChangeEventHandler(object sender, SessionLogRowChangeEvent e);
        
        public delegate void EntryRowChangeEventHandler(object sender, EntryRowChangeEvent e);
        
        public delegate void DialogActionRowChangeEventHandler(object sender, DialogActionRowChangeEvent e);
        
        public delegate void ProductionParameterSettingsRowChangeEventHandler(object sender, ProductionParameterSettingsRowChangeEvent e);
        
        public delegate void ServerRowChangeEventHandler(object sender, ServerRowChangeEvent e);
        
        public delegate void ModesRowChangeEventHandler(object sender, ModesRowChangeEvent e);
        
        public delegate void CachingRowChangeEventHandler(object sender, CachingRowChangeEvent e);
        
        public delegate void RecordingRowChangeEventHandler(object sender, RecordingRowChangeEvent e);
        
        public delegate void VerifyRowChangeEventHandler(object sender, VerifyRowChangeEvent e);
        
        public delegate void PrintingRowChangeEventHandler(object sender, PrintingRowChangeEvent e);
        
        public delegate void AutoloaderRowChangeEventHandler(object sender, AutoloaderRowChangeEvent e);
        
        public delegate void BinSettingRowChangeEventHandler(object sender, BinSettingRowChangeEvent e);
        
        public delegate void ReadingRowChangeEventHandler(object sender, ReadingRowChangeEvent e);
        
        public delegate void AutoBulkReadRowChangeEventHandler(object sender, AutoBulkReadRowChangeEvent e);
        
        public delegate void MediaCodesRowChangeEventHandler(object sender, MediaCodesRowChangeEvent e);
        
        public delegate void MediaCodeRowChangeEventHandler(object sender, MediaCodeRowChangeEvent e);
        
        public delegate void KioskModeRowChangeEventHandler(object sender, KioskModeRowChangeEvent e);
        
        public delegate void UnlockingCodesRowChangeEventHandler(object sender, UnlockingCodesRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AckOnlyDataTable : DataTable, System.Collections.IEnumerable {
            
            internal AckOnlyDataTable() : 
                    base("AckOnly") {
                this.InitClass();
            }
            
            internal AckOnlyDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public AckOnlyRow this[int index] {
                get {
                    return ((AckOnlyRow)(this.Rows[index]));
                }
            }
            
            public event AckOnlyRowChangeEventHandler AckOnlyRowChanged;
            
            public event AckOnlyRowChangeEventHandler AckOnlyRowChanging;
            
            public event AckOnlyRowChangeEventHandler AckOnlyRowDeleted;
            
            public event AckOnlyRowChangeEventHandler AckOnlyRowDeleting;
            
            public void AddAckOnlyRow(AckOnlyRow row) {
                this.Rows.Add(row);
            }
            
            public AckOnlyRow AddAckOnlyRow() {
                AckOnlyRow rowAckOnlyRow = ((AckOnlyRow)(this.NewRow()));
                rowAckOnlyRow.ItemArray = new object[0];
                this.Rows.Add(rowAckOnlyRow);
                return rowAckOnlyRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AckOnlyDataTable cln = ((AckOnlyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AckOnlyDataTable();
            }
            
            internal void InitVars() {
            }
            
            private void InitClass() {
            }
            
            public AckOnlyRow NewAckOnlyRow() {
                return ((AckOnlyRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AckOnlyRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AckOnlyRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AckOnlyRowChanged != null)) {
                    this.AckOnlyRowChanged(this, new AckOnlyRowChangeEvent(((AckOnlyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AckOnlyRowChanging != null)) {
                    this.AckOnlyRowChanging(this, new AckOnlyRowChangeEvent(((AckOnlyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AckOnlyRowDeleted != null)) {
                    this.AckOnlyRowDeleted(this, new AckOnlyRowChangeEvent(((AckOnlyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AckOnlyRowDeleting != null)) {
                    this.AckOnlyRowDeleting(this, new AckOnlyRowChangeEvent(((AckOnlyRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAckOnlyRow(AckOnlyRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AckOnlyRow : DataRow {
            
            private AckOnlyDataTable tableAckOnly;
            
            internal AckOnlyRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAckOnly = ((AckOnlyDataTable)(this.Table));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AckOnlyRowChangeEvent : EventArgs {
            
            private AckOnlyRow eventRow;
            
            private DataRowAction eventAction;
            
            public AckOnlyRowChangeEvent(AckOnlyRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AckOnlyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerStatusDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnServerStatus_Id;
            
            internal ServerStatusDataTable() : 
                    base("ServerStatus") {
                this.InitClass();
            }
            
            internal ServerStatusDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ServerStatus_IdColumn {
                get {
                    return this.columnServerStatus_Id;
                }
            }
            
            public ServerStatusRow this[int index] {
                get {
                    return ((ServerStatusRow)(this.Rows[index]));
                }
            }
            
            public event ServerStatusRowChangeEventHandler ServerStatusRowChanged;
            
            public event ServerStatusRowChangeEventHandler ServerStatusRowChanging;
            
            public event ServerStatusRowChangeEventHandler ServerStatusRowDeleted;
            
            public event ServerStatusRowChangeEventHandler ServerStatusRowDeleting;
            
            public void AddServerStatusRow(ServerStatusRow row) {
                this.Rows.Add(row);
            }
            
            public ServerStatusRow AddServerStatusRow() {
                ServerStatusRow rowServerStatusRow = ((ServerStatusRow)(this.NewRow()));
                rowServerStatusRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowServerStatusRow);
                return rowServerStatusRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ServerStatusDataTable cln = ((ServerStatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ServerStatusDataTable();
            }
            
            internal void InitVars() {
                this.columnServerStatus_Id = this.Columns["ServerStatus_Id"];
            }
            
            private void InitClass() {
                this.columnServerStatus_Id = new DataColumn("ServerStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnServerStatus_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnServerStatus_Id}, true));
                this.columnServerStatus_Id.AutoIncrement = true;
                this.columnServerStatus_Id.AllowDBNull = false;
                this.columnServerStatus_Id.Unique = true;
            }
            
            public ServerStatusRow NewServerStatusRow() {
                return ((ServerStatusRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ServerStatusRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ServerStatusRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerStatusRowChanged != null)) {
                    this.ServerStatusRowChanged(this, new ServerStatusRowChangeEvent(((ServerStatusRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerStatusRowChanging != null)) {
                    this.ServerStatusRowChanging(this, new ServerStatusRowChangeEvent(((ServerStatusRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerStatusRowDeleted != null)) {
                    this.ServerStatusRowDeleted(this, new ServerStatusRowChangeEvent(((ServerStatusRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerStatusRowDeleting != null)) {
                    this.ServerStatusRowDeleting(this, new ServerStatusRowChangeEvent(((ServerStatusRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveServerStatusRow(ServerStatusRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerStatusRow : DataRow {
            
            private ServerStatusDataTable tableServerStatus;
            
            internal ServerStatusRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerStatus = ((ServerStatusDataTable)(this.Table));
            }
            
            public ServerInfoRow[] GetServerInfoRows() {
                return ((ServerInfoRow[])(this.GetChildRows(this.Table.ChildRelations["ServerStatus_ServerInfo"])));
            }
            
            public ProductionCountRow[] GetProductionCountRows() {
                return ((ProductionCountRow[])(this.GetChildRows(this.Table.ChildRelations["ServerStatus_ProductionCount"])));
            }
            
            public SwitchesRow[] GetSwitchesRows() {
                return ((SwitchesRow[])(this.GetChildRows(this.Table.ChildRelations["ServerStatus_Switches"])));
            }
            
            public AutoloaderStatusRow[] GetAutoloaderStatusRows() {
                return ((AutoloaderStatusRow[])(this.GetChildRows(this.Table.ChildRelations["ServerStatus_AutoloaderStatus"])));
            }
            
            public ActivationInfoRow[] GetActivationInfoRows() {
                return ((ActivationInfoRow[])(this.GetChildRows(this.Table.ChildRelations["ServerStatus_ActivationInfo"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerStatusRowChangeEvent : EventArgs {
            
            private ServerStatusRow eventRow;
            
            private DataRowAction eventAction;
            
            public ServerStatusRowChangeEvent(ServerStatusRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ServerStatusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerInfoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnSoftwareVersion;
            
            private DataColumn columnDescription;
            
            private DataColumn columnHostname;
            
            private DataColumn columnCluster;
            
            private DataColumn columnMessagingPort;
            
            private DataColumn columnSystemFolder;
            
            private DataColumn columnIsService;
            
            private DataColumn columnPasswordSet;
            
            private DataColumn columnServerStatus_Id;
            
            internal ServerInfoDataTable() : 
                    base("ServerInfo") {
                this.InitClass();
            }
            
            internal ServerInfoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn SoftwareVersionColumn {
                get {
                    return this.columnSoftwareVersion;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn HostnameColumn {
                get {
                    return this.columnHostname;
                }
            }
            
            internal DataColumn ClusterColumn {
                get {
                    return this.columnCluster;
                }
            }
            
            internal DataColumn MessagingPortColumn {
                get {
                    return this.columnMessagingPort;
                }
            }
            
            internal DataColumn SystemFolderColumn {
                get {
                    return this.columnSystemFolder;
                }
            }
            
            internal DataColumn IsServiceColumn {
                get {
                    return this.columnIsService;
                }
            }
            
            internal DataColumn PasswordSetColumn {
                get {
                    return this.columnPasswordSet;
                }
            }
            
            internal DataColumn ServerStatus_IdColumn {
                get {
                    return this.columnServerStatus_Id;
                }
            }
            
            public ServerInfoRow this[int index] {
                get {
                    return ((ServerInfoRow)(this.Rows[index]));
                }
            }
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowChanged;
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowChanging;
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowDeleted;
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowDeleting;
            
            public void AddServerInfoRow(ServerInfoRow row) {
                this.Rows.Add(row);
            }
            
            public ServerInfoRow AddServerInfoRow(string SoftwareVersion, string Description, string Hostname, string Cluster, string MessagingPort, string SystemFolder, string IsService, string PasswordSet, ServerStatusRow parentServerStatusRowByServerStatus_ServerInfo) {
                ServerInfoRow rowServerInfoRow = ((ServerInfoRow)(this.NewRow()));
                rowServerInfoRow.ItemArray = new object[] {
                        SoftwareVersion,
                        Description,
                        Hostname,
                        Cluster,
                        MessagingPort,
                        SystemFolder,
                        IsService,
                        PasswordSet,
                        parentServerStatusRowByServerStatus_ServerInfo[0]};
                this.Rows.Add(rowServerInfoRow);
                return rowServerInfoRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ServerInfoDataTable cln = ((ServerInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ServerInfoDataTable();
            }
            
            internal void InitVars() {
                this.columnSoftwareVersion = this.Columns["SoftwareVersion"];
                this.columnDescription = this.Columns["Description"];
                this.columnHostname = this.Columns["Hostname"];
                this.columnCluster = this.Columns["Cluster"];
                this.columnMessagingPort = this.Columns["MessagingPort"];
                this.columnSystemFolder = this.Columns["SystemFolder"];
                this.columnIsService = this.Columns["IsService"];
                this.columnPasswordSet = this.Columns["PasswordSet"];
                this.columnServerStatus_Id = this.Columns["ServerStatus_Id"];
            }
            
            private void InitClass() {
                this.columnSoftwareVersion = new DataColumn("SoftwareVersion", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSoftwareVersion);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDescription);
                this.columnHostname = new DataColumn("Hostname", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnHostname);
                this.columnCluster = new DataColumn("Cluster", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCluster);
                this.columnMessagingPort = new DataColumn("MessagingPort", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnMessagingPort);
                this.columnSystemFolder = new DataColumn("SystemFolder", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSystemFolder);
                this.columnIsService = new DataColumn("IsService", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnIsService);
                this.columnPasswordSet = new DataColumn("PasswordSet", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPasswordSet);
                this.columnServerStatus_Id = new DataColumn("ServerStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnServerStatus_Id);
                this.columnSoftwareVersion.AllowDBNull = false;
                this.columnSoftwareVersion.Namespace = "";
                this.columnDescription.Namespace = "";
                this.columnHostname.AllowDBNull = false;
                this.columnHostname.Namespace = "";
                this.columnCluster.AllowDBNull = false;
                this.columnCluster.Namespace = "";
                this.columnMessagingPort.AllowDBNull = false;
                this.columnMessagingPort.Namespace = "";
                this.columnSystemFolder.AllowDBNull = false;
                this.columnSystemFolder.Namespace = "";
                this.columnIsService.Namespace = "";
                this.columnIsService.DefaultValue = "false";
                this.columnPasswordSet.AllowDBNull = false;
                this.columnPasswordSet.Namespace = "";
            }
            
            public ServerInfoRow NewServerInfoRow() {
                return ((ServerInfoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ServerInfoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ServerInfoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerInfoRowChanged != null)) {
                    this.ServerInfoRowChanged(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerInfoRowChanging != null)) {
                    this.ServerInfoRowChanging(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerInfoRowDeleted != null)) {
                    this.ServerInfoRowDeleted(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerInfoRowDeleting != null)) {
                    this.ServerInfoRowDeleting(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveServerInfoRow(ServerInfoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerInfoRow : DataRow {
            
            private ServerInfoDataTable tableServerInfo;
            
            internal ServerInfoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerInfo = ((ServerInfoDataTable)(this.Table));
            }
            
            public string SoftwareVersion {
                get {
                    return ((string)(this[this.tableServerInfo.SoftwareVersionColumn]));
                }
                set {
                    this[this.tableServerInfo.SoftwareVersionColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableServerInfo.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.DescriptionColumn] = value;
                }
            }
            
            public string Hostname {
                get {
                    return ((string)(this[this.tableServerInfo.HostnameColumn]));
                }
                set {
                    this[this.tableServerInfo.HostnameColumn] = value;
                }
            }
            
            public string Cluster {
                get {
                    return ((string)(this[this.tableServerInfo.ClusterColumn]));
                }
                set {
                    this[this.tableServerInfo.ClusterColumn] = value;
                }
            }
            
            public string MessagingPort {
                get {
                    return ((string)(this[this.tableServerInfo.MessagingPortColumn]));
                }
                set {
                    this[this.tableServerInfo.MessagingPortColumn] = value;
                }
            }
            
            public string SystemFolder {
                get {
                    return ((string)(this[this.tableServerInfo.SystemFolderColumn]));
                }
                set {
                    this[this.tableServerInfo.SystemFolderColumn] = value;
                }
            }
            
            public string IsService {
                get {
                    try {
                        return ((string)(this[this.tableServerInfo.IsServiceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.IsServiceColumn] = value;
                }
            }
            
            public string PasswordSet {
                get {
                    return ((string)(this[this.tableServerInfo.PasswordSetColumn]));
                }
                set {
                    this[this.tableServerInfo.PasswordSetColumn] = value;
                }
            }
            
            public ServerStatusRow ServerStatusRow {
                get {
                    return ((ServerStatusRow)(this.GetParentRow(this.Table.ParentRelations["ServerStatus_ServerInfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ServerStatus_ServerInfo"]);
                }
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableServerInfo.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableServerInfo.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsServiceNull() {
                return this.IsNull(this.tableServerInfo.IsServiceColumn);
            }
            
            public void SetIsServiceNull() {
                this[this.tableServerInfo.IsServiceColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerInfoRowChangeEvent : EventArgs {
            
            private ServerInfoRow eventRow;
            
            private DataRowAction eventAction;
            
            public ServerInfoRowChangeEvent(ServerInfoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ServerInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProductionCountDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCopiesProduced;
            
            private DataColumn columnCopiesRejected;
            
            private DataColumn columnServerStatus_Id;
            
            internal ProductionCountDataTable() : 
                    base("ProductionCount") {
                this.InitClass();
            }
            
            internal ProductionCountDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CopiesProducedColumn {
                get {
                    return this.columnCopiesProduced;
                }
            }
            
            internal DataColumn CopiesRejectedColumn {
                get {
                    return this.columnCopiesRejected;
                }
            }
            
            internal DataColumn ServerStatus_IdColumn {
                get {
                    return this.columnServerStatus_Id;
                }
            }
            
            public ProductionCountRow this[int index] {
                get {
                    return ((ProductionCountRow)(this.Rows[index]));
                }
            }
            
            public event ProductionCountRowChangeEventHandler ProductionCountRowChanged;
            
            public event ProductionCountRowChangeEventHandler ProductionCountRowChanging;
            
            public event ProductionCountRowChangeEventHandler ProductionCountRowDeleted;
            
            public event ProductionCountRowChangeEventHandler ProductionCountRowDeleting;
            
            public void AddProductionCountRow(ProductionCountRow row) {
                this.Rows.Add(row);
            }
            
            public ProductionCountRow AddProductionCountRow(string CopiesProduced, string CopiesRejected, ServerStatusRow parentServerStatusRowByServerStatus_ProductionCount) {
                ProductionCountRow rowProductionCountRow = ((ProductionCountRow)(this.NewRow()));
                rowProductionCountRow.ItemArray = new object[] {
                        CopiesProduced,
                        CopiesRejected,
                        parentServerStatusRowByServerStatus_ProductionCount[0]};
                this.Rows.Add(rowProductionCountRow);
                return rowProductionCountRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ProductionCountDataTable cln = ((ProductionCountDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ProductionCountDataTable();
            }
            
            internal void InitVars() {
                this.columnCopiesProduced = this.Columns["CopiesProduced"];
                this.columnCopiesRejected = this.Columns["CopiesRejected"];
                this.columnServerStatus_Id = this.Columns["ServerStatus_Id"];
            }
            
            private void InitClass() {
                this.columnCopiesProduced = new DataColumn("CopiesProduced", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCopiesProduced);
                this.columnCopiesRejected = new DataColumn("CopiesRejected", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCopiesRejected);
                this.columnServerStatus_Id = new DataColumn("ServerStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnServerStatus_Id);
                this.columnCopiesProduced.AllowDBNull = false;
                this.columnCopiesProduced.Namespace = "";
                this.columnCopiesRejected.AllowDBNull = false;
                this.columnCopiesRejected.Namespace = "";
            }
            
            public ProductionCountRow NewProductionCountRow() {
                return ((ProductionCountRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ProductionCountRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ProductionCountRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProductionCountRowChanged != null)) {
                    this.ProductionCountRowChanged(this, new ProductionCountRowChangeEvent(((ProductionCountRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProductionCountRowChanging != null)) {
                    this.ProductionCountRowChanging(this, new ProductionCountRowChangeEvent(((ProductionCountRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProductionCountRowDeleted != null)) {
                    this.ProductionCountRowDeleted(this, new ProductionCountRowChangeEvent(((ProductionCountRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProductionCountRowDeleting != null)) {
                    this.ProductionCountRowDeleting(this, new ProductionCountRowChangeEvent(((ProductionCountRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProductionCountRow(ProductionCountRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProductionCountRow : DataRow {
            
            private ProductionCountDataTable tableProductionCount;
            
            internal ProductionCountRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableProductionCount = ((ProductionCountDataTable)(this.Table));
            }
            
            public string CopiesProduced {
                get {
                    return ((string)(this[this.tableProductionCount.CopiesProducedColumn]));
                }
                set {
                    this[this.tableProductionCount.CopiesProducedColumn] = value;
                }
            }
            
            public string CopiesRejected {
                get {
                    return ((string)(this[this.tableProductionCount.CopiesRejectedColumn]));
                }
                set {
                    this[this.tableProductionCount.CopiesRejectedColumn] = value;
                }
            }
            
            public ServerStatusRow ServerStatusRow {
                get {
                    return ((ServerStatusRow)(this.GetParentRow(this.Table.ParentRelations["ServerStatus_ProductionCount"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ServerStatus_ProductionCount"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProductionCountRowChangeEvent : EventArgs {
            
            private ProductionCountRow eventRow;
            
            private DataRowAction eventAction;
            
            public ProductionCountRowChangeEvent(ProductionCountRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ProductionCountRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SwitchesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnManufacturingTestMode;
            
            private DataColumn columnVerifyOnlyMode;
            
            private DataColumn columnSlugsMode;
            
            private DataColumn columnNoLogLimit;
            
            private DataColumn columnSimulateFixate;
            
            private DataColumn columnSetupMode;
            
            private DataColumn columnDirectImaging;
            
            private DataColumn columnAutoThroughPutMeasurement;
            
            private DataColumn columnTimingLogged;
            
            private DataColumn columnSkipOrderStatusUpdates;
            
            private DataColumn columnPrintOnlyMode;
            
            private DataColumn columnSkipAutoloaderScanning;
            
            private DataColumn columnPrintBeforeRecording;
            
            private DataColumn columnUseDriveLettersForRecorders;
            
            private DataColumn columnTraceSCSICommands;
            
            private DataColumn columnTraceReadWriteCommands;
            
            private DataColumn columnTraceSerialCommands;
            
            private DataColumn columnTraceLabelAndPrinting;
            
            private DataColumn columnTraceXMLMessages;
            
            private DataColumn columnLogSkippingOrder;
            
            private DataColumn columnRunWithoutDevices;
            
            private DataColumn columnDisablePreloadingRecorderAfterPrinterLoad;
            
            private DataColumn columnDisableCacheLocking;
            
            private DataColumn columnEnableCacheLimiting;
            
            private DataColumn columnSkipSerialPortsForAutoloader;
            
            private DataColumn columnSkipDrivesForReaderRecorderCache;
            
            private DataColumn columnSecondsDelayBeforeMainWindow;
            
            private DataColumn columnUseParallelPortForPrism;
            
            private DataColumn columnDisableDriverNameInRendering;
            
            private DataColumn columnEraseCDRWBeforeRecording;
            
            private DataColumn columnStrictWaveFileChecking;
            
            private DataColumn columnServerStatus_Id;
            
            internal SwitchesDataTable() : 
                    base("Switches") {
                this.InitClass();
            }
            
            internal SwitchesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ManufacturingTestModeColumn {
                get {
                    return this.columnManufacturingTestMode;
                }
            }
            
            internal DataColumn VerifyOnlyModeColumn {
                get {
                    return this.columnVerifyOnlyMode;
                }
            }
            
            internal DataColumn SlugsModeColumn {
                get {
                    return this.columnSlugsMode;
                }
            }
            
            internal DataColumn NoLogLimitColumn {
                get {
                    return this.columnNoLogLimit;
                }
            }
            
            internal DataColumn SimulateFixateColumn {
                get {
                    return this.columnSimulateFixate;
                }
            }
            
            internal DataColumn SetupModeColumn {
                get {
                    return this.columnSetupMode;
                }
            }
            
            internal DataColumn DirectImagingColumn {
                get {
                    return this.columnDirectImaging;
                }
            }
            
            internal DataColumn AutoThroughPutMeasurementColumn {
                get {
                    return this.columnAutoThroughPutMeasurement;
                }
            }
            
            internal DataColumn TimingLoggedColumn {
                get {
                    return this.columnTimingLogged;
                }
            }
            
            internal DataColumn SkipOrderStatusUpdatesColumn {
                get {
                    return this.columnSkipOrderStatusUpdates;
                }
            }
            
            internal DataColumn PrintOnlyModeColumn {
                get {
                    return this.columnPrintOnlyMode;
                }
            }
            
            internal DataColumn SkipAutoloaderScanningColumn {
                get {
                    return this.columnSkipAutoloaderScanning;
                }
            }
            
            internal DataColumn PrintBeforeRecordingColumn {
                get {
                    return this.columnPrintBeforeRecording;
                }
            }
            
            internal DataColumn UseDriveLettersForRecordersColumn {
                get {
                    return this.columnUseDriveLettersForRecorders;
                }
            }
            
            internal DataColumn TraceSCSICommandsColumn {
                get {
                    return this.columnTraceSCSICommands;
                }
            }
            
            internal DataColumn TraceReadWriteCommandsColumn {
                get {
                    return this.columnTraceReadWriteCommands;
                }
            }
            
            internal DataColumn TraceSerialCommandsColumn {
                get {
                    return this.columnTraceSerialCommands;
                }
            }
            
            internal DataColumn TraceLabelAndPrintingColumn {
                get {
                    return this.columnTraceLabelAndPrinting;
                }
            }
            
            internal DataColumn TraceXMLMessagesColumn {
                get {
                    return this.columnTraceXMLMessages;
                }
            }
            
            internal DataColumn LogSkippingOrderColumn {
                get {
                    return this.columnLogSkippingOrder;
                }
            }
            
            internal DataColumn RunWithoutDevicesColumn {
                get {
                    return this.columnRunWithoutDevices;
                }
            }
            
            internal DataColumn DisablePreloadingRecorderAfterPrinterLoadColumn {
                get {
                    return this.columnDisablePreloadingRecorderAfterPrinterLoad;
                }
            }
            
            internal DataColumn DisableCacheLockingColumn {
                get {
                    return this.columnDisableCacheLocking;
                }
            }
            
            internal DataColumn EnableCacheLimitingColumn {
                get {
                    return this.columnEnableCacheLimiting;
                }
            }
            
            internal DataColumn SkipSerialPortsForAutoloaderColumn {
                get {
                    return this.columnSkipSerialPortsForAutoloader;
                }
            }
            
            internal DataColumn SkipDrivesForReaderRecorderCacheColumn {
                get {
                    return this.columnSkipDrivesForReaderRecorderCache;
                }
            }
            
            internal DataColumn SecondsDelayBeforeMainWindowColumn {
                get {
                    return this.columnSecondsDelayBeforeMainWindow;
                }
            }
            
            internal DataColumn UseParallelPortForPrismColumn {
                get {
                    return this.columnUseParallelPortForPrism;
                }
            }
            
            internal DataColumn DisableDriverNameInRenderingColumn {
                get {
                    return this.columnDisableDriverNameInRendering;
                }
            }
            
            internal DataColumn EraseCDRWBeforeRecordingColumn {
                get {
                    return this.columnEraseCDRWBeforeRecording;
                }
            }
            
            internal DataColumn StrictWaveFileCheckingColumn {
                get {
                    return this.columnStrictWaveFileChecking;
                }
            }
            
            internal DataColumn ServerStatus_IdColumn {
                get {
                    return this.columnServerStatus_Id;
                }
            }
            
            public SwitchesRow this[int index] {
                get {
                    return ((SwitchesRow)(this.Rows[index]));
                }
            }
            
            public event SwitchesRowChangeEventHandler SwitchesRowChanged;
            
            public event SwitchesRowChangeEventHandler SwitchesRowChanging;
            
            public event SwitchesRowChangeEventHandler SwitchesRowDeleted;
            
            public event SwitchesRowChangeEventHandler SwitchesRowDeleting;
            
            public void AddSwitchesRow(SwitchesRow row) {
                this.Rows.Add(row);
            }
            
            public SwitchesRow AddSwitchesRow(
                        string ManufacturingTestMode, 
                        string VerifyOnlyMode, 
                        string SlugsMode, 
                        string NoLogLimit, 
                        string SimulateFixate, 
                        string SetupMode, 
                        string DirectImaging, 
                        string AutoThroughPutMeasurement, 
                        string TimingLogged, 
                        string SkipOrderStatusUpdates, 
                        string PrintOnlyMode, 
                        string SkipAutoloaderScanning, 
                        string PrintBeforeRecording, 
                        string UseDriveLettersForRecorders, 
                        string TraceSCSICommands, 
                        string TraceReadWriteCommands, 
                        string TraceSerialCommands, 
                        string TraceLabelAndPrinting, 
                        string TraceXMLMessages, 
                        string LogSkippingOrder, 
                        string RunWithoutDevices, 
                        string DisablePreloadingRecorderAfterPrinterLoad, 
                        string DisableCacheLocking, 
                        string EnableCacheLimiting, 
                        string SkipSerialPortsForAutoloader, 
                        string SkipDrivesForReaderRecorderCache, 
                        string SecondsDelayBeforeMainWindow, 
                        string UseParallelPortForPrism, 
                        string DisableDriverNameInRendering, 
                        string EraseCDRWBeforeRecording, 
                        string StrictWaveFileChecking, 
                        ServerStatusRow parentServerStatusRowByServerStatus_Switches) {
                SwitchesRow rowSwitchesRow = ((SwitchesRow)(this.NewRow()));
                rowSwitchesRow.ItemArray = new object[] {
                        ManufacturingTestMode,
                        VerifyOnlyMode,
                        SlugsMode,
                        NoLogLimit,
                        SimulateFixate,
                        SetupMode,
                        DirectImaging,
                        AutoThroughPutMeasurement,
                        TimingLogged,
                        SkipOrderStatusUpdates,
                        PrintOnlyMode,
                        SkipAutoloaderScanning,
                        PrintBeforeRecording,
                        UseDriveLettersForRecorders,
                        TraceSCSICommands,
                        TraceReadWriteCommands,
                        TraceSerialCommands,
                        TraceLabelAndPrinting,
                        TraceXMLMessages,
                        LogSkippingOrder,
                        RunWithoutDevices,
                        DisablePreloadingRecorderAfterPrinterLoad,
                        DisableCacheLocking,
                        EnableCacheLimiting,
                        SkipSerialPortsForAutoloader,
                        SkipDrivesForReaderRecorderCache,
                        SecondsDelayBeforeMainWindow,
                        UseParallelPortForPrism,
                        DisableDriverNameInRendering,
                        EraseCDRWBeforeRecording,
                        StrictWaveFileChecking,
                        parentServerStatusRowByServerStatus_Switches[0]};
                this.Rows.Add(rowSwitchesRow);
                return rowSwitchesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SwitchesDataTable cln = ((SwitchesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SwitchesDataTable();
            }
            
            internal void InitVars() {
                this.columnManufacturingTestMode = this.Columns["ManufacturingTestMode"];
                this.columnVerifyOnlyMode = this.Columns["VerifyOnlyMode"];
                this.columnSlugsMode = this.Columns["SlugsMode"];
                this.columnNoLogLimit = this.Columns["NoLogLimit"];
                this.columnSimulateFixate = this.Columns["SimulateFixate"];
                this.columnSetupMode = this.Columns["SetupMode"];
                this.columnDirectImaging = this.Columns["DirectImaging"];
                this.columnAutoThroughPutMeasurement = this.Columns["AutoThroughPutMeasurement"];
                this.columnTimingLogged = this.Columns["TimingLogged"];
                this.columnSkipOrderStatusUpdates = this.Columns["SkipOrderStatusUpdates"];
                this.columnPrintOnlyMode = this.Columns["PrintOnlyMode"];
                this.columnSkipAutoloaderScanning = this.Columns["SkipAutoloaderScanning"];
                this.columnPrintBeforeRecording = this.Columns["PrintBeforeRecording"];
                this.columnUseDriveLettersForRecorders = this.Columns["UseDriveLettersForRecorders"];
                this.columnTraceSCSICommands = this.Columns["TraceSCSICommands"];
                this.columnTraceReadWriteCommands = this.Columns["TraceReadWriteCommands"];
                this.columnTraceSerialCommands = this.Columns["TraceSerialCommands"];
                this.columnTraceLabelAndPrinting = this.Columns["TraceLabelAndPrinting"];
                this.columnTraceXMLMessages = this.Columns["TraceXMLMessages"];
                this.columnLogSkippingOrder = this.Columns["LogSkippingOrder"];
                this.columnRunWithoutDevices = this.Columns["RunWithoutDevices"];
                this.columnDisablePreloadingRecorderAfterPrinterLoad = this.Columns["DisablePreloadingRecorderAfterPrinterLoad"];
                this.columnDisableCacheLocking = this.Columns["DisableCacheLocking"];
                this.columnEnableCacheLimiting = this.Columns["EnableCacheLimiting"];
                this.columnSkipSerialPortsForAutoloader = this.Columns["SkipSerialPortsForAutoloader"];
                this.columnSkipDrivesForReaderRecorderCache = this.Columns["SkipDrivesForReaderRecorderCache"];
                this.columnSecondsDelayBeforeMainWindow = this.Columns["SecondsDelayBeforeMainWindow"];
                this.columnUseParallelPortForPrism = this.Columns["UseParallelPortForPrism"];
                this.columnDisableDriverNameInRendering = this.Columns["DisableDriverNameInRendering"];
                this.columnEraseCDRWBeforeRecording = this.Columns["EraseCDRWBeforeRecording"];
                this.columnStrictWaveFileChecking = this.Columns["StrictWaveFileChecking"];
                this.columnServerStatus_Id = this.Columns["ServerStatus_Id"];
            }
            
            private void InitClass() {
                this.columnManufacturingTestMode = new DataColumn("ManufacturingTestMode", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnManufacturingTestMode);
                this.columnVerifyOnlyMode = new DataColumn("VerifyOnlyMode", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnVerifyOnlyMode);
                this.columnSlugsMode = new DataColumn("SlugsMode", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSlugsMode);
                this.columnNoLogLimit = new DataColumn("NoLogLimit", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnNoLogLimit);
                this.columnSimulateFixate = new DataColumn("SimulateFixate", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSimulateFixate);
                this.columnSetupMode = new DataColumn("SetupMode", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSetupMode);
                this.columnDirectImaging = new DataColumn("DirectImaging", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDirectImaging);
                this.columnAutoThroughPutMeasurement = new DataColumn("AutoThroughPutMeasurement", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAutoThroughPutMeasurement);
                this.columnTimingLogged = new DataColumn("TimingLogged", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTimingLogged);
                this.columnSkipOrderStatusUpdates = new DataColumn("SkipOrderStatusUpdates", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSkipOrderStatusUpdates);
                this.columnPrintOnlyMode = new DataColumn("PrintOnlyMode", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPrintOnlyMode);
                this.columnSkipAutoloaderScanning = new DataColumn("SkipAutoloaderScanning", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSkipAutoloaderScanning);
                this.columnPrintBeforeRecording = new DataColumn("PrintBeforeRecording", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPrintBeforeRecording);
                this.columnUseDriveLettersForRecorders = new DataColumn("UseDriveLettersForRecorders", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUseDriveLettersForRecorders);
                this.columnTraceSCSICommands = new DataColumn("TraceSCSICommands", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTraceSCSICommands);
                this.columnTraceReadWriteCommands = new DataColumn("TraceReadWriteCommands", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTraceReadWriteCommands);
                this.columnTraceSerialCommands = new DataColumn("TraceSerialCommands", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTraceSerialCommands);
                this.columnTraceLabelAndPrinting = new DataColumn("TraceLabelAndPrinting", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTraceLabelAndPrinting);
                this.columnTraceXMLMessages = new DataColumn("TraceXMLMessages", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTraceXMLMessages);
                this.columnLogSkippingOrder = new DataColumn("LogSkippingOrder", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnLogSkippingOrder);
                this.columnRunWithoutDevices = new DataColumn("RunWithoutDevices", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRunWithoutDevices);
                this.columnDisablePreloadingRecorderAfterPrinterLoad = new DataColumn("DisablePreloadingRecorderAfterPrinterLoad", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDisablePreloadingRecorderAfterPrinterLoad);
                this.columnDisableCacheLocking = new DataColumn("DisableCacheLocking", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDisableCacheLocking);
                this.columnEnableCacheLimiting = new DataColumn("EnableCacheLimiting", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnEnableCacheLimiting);
                this.columnSkipSerialPortsForAutoloader = new DataColumn("SkipSerialPortsForAutoloader", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSkipSerialPortsForAutoloader);
                this.columnSkipDrivesForReaderRecorderCache = new DataColumn("SkipDrivesForReaderRecorderCache", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSkipDrivesForReaderRecorderCache);
                this.columnSecondsDelayBeforeMainWindow = new DataColumn("SecondsDelayBeforeMainWindow", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSecondsDelayBeforeMainWindow);
                this.columnUseParallelPortForPrism = new DataColumn("UseParallelPortForPrism", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUseParallelPortForPrism);
                this.columnDisableDriverNameInRendering = new DataColumn("DisableDriverNameInRendering", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDisableDriverNameInRendering);
                this.columnEraseCDRWBeforeRecording = new DataColumn("EraseCDRWBeforeRecording", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnEraseCDRWBeforeRecording);
                this.columnStrictWaveFileChecking = new DataColumn("StrictWaveFileChecking", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnStrictWaveFileChecking);
                this.columnServerStatus_Id = new DataColumn("ServerStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnServerStatus_Id);
                this.columnManufacturingTestMode.Namespace = "";
                this.columnManufacturingTestMode.DefaultValue = "false";
                this.columnVerifyOnlyMode.Namespace = "";
                this.columnVerifyOnlyMode.DefaultValue = "false";
                this.columnSlugsMode.Namespace = "";
                this.columnSlugsMode.DefaultValue = "false";
                this.columnNoLogLimit.Namespace = "";
                this.columnNoLogLimit.DefaultValue = "false";
                this.columnSimulateFixate.Namespace = "";
                this.columnSimulateFixate.DefaultValue = "false";
                this.columnSetupMode.Namespace = "";
                this.columnSetupMode.DefaultValue = "false";
                this.columnDirectImaging.Namespace = "";
                this.columnDirectImaging.DefaultValue = "false";
                this.columnAutoThroughPutMeasurement.Namespace = "";
                this.columnAutoThroughPutMeasurement.DefaultValue = "false";
                this.columnTimingLogged.Namespace = "";
                this.columnTimingLogged.DefaultValue = "false";
                this.columnSkipOrderStatusUpdates.Namespace = "";
                this.columnSkipOrderStatusUpdates.DefaultValue = "false";
                this.columnPrintOnlyMode.Namespace = "";
                this.columnPrintOnlyMode.DefaultValue = "false";
                this.columnSkipAutoloaderScanning.Namespace = "";
                this.columnSkipAutoloaderScanning.DefaultValue = "false";
                this.columnPrintBeforeRecording.Namespace = "";
                this.columnPrintBeforeRecording.DefaultValue = "false";
                this.columnUseDriveLettersForRecorders.Namespace = "";
                this.columnUseDriveLettersForRecorders.DefaultValue = "false";
                this.columnTraceSCSICommands.Namespace = "";
                this.columnTraceSCSICommands.DefaultValue = "false";
                this.columnTraceReadWriteCommands.Namespace = "";
                this.columnTraceReadWriteCommands.DefaultValue = "false";
                this.columnTraceSerialCommands.Namespace = "";
                this.columnTraceSerialCommands.DefaultValue = "false";
                this.columnTraceLabelAndPrinting.Namespace = "";
                this.columnTraceLabelAndPrinting.DefaultValue = "false";
                this.columnTraceXMLMessages.Namespace = "";
                this.columnTraceXMLMessages.DefaultValue = "false";
                this.columnLogSkippingOrder.Namespace = "";
                this.columnLogSkippingOrder.DefaultValue = "false";
                this.columnRunWithoutDevices.Namespace = "";
                this.columnRunWithoutDevices.DefaultValue = "false";
                this.columnDisablePreloadingRecorderAfterPrinterLoad.Namespace = "";
                this.columnDisablePreloadingRecorderAfterPrinterLoad.DefaultValue = "false";
                this.columnDisableCacheLocking.Namespace = "";
                this.columnDisableCacheLocking.DefaultValue = "false";
                this.columnEnableCacheLimiting.Namespace = "";
                this.columnEnableCacheLimiting.DefaultValue = "false";
                this.columnSkipSerialPortsForAutoloader.Namespace = "";
                this.columnSkipDrivesForReaderRecorderCache.Namespace = "";
                this.columnSecondsDelayBeforeMainWindow.Namespace = "";
                this.columnUseParallelPortForPrism.Namespace = "";
                this.columnUseParallelPortForPrism.DefaultValue = "false";
                this.columnDisableDriverNameInRendering.Namespace = "";
                this.columnDisableDriverNameInRendering.DefaultValue = "false";
                this.columnEraseCDRWBeforeRecording.Namespace = "";
                this.columnEraseCDRWBeforeRecording.DefaultValue = "false";
                this.columnStrictWaveFileChecking.Namespace = "";
                this.columnStrictWaveFileChecking.DefaultValue = "false";
            }
            
            public SwitchesRow NewSwitchesRow() {
                return ((SwitchesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SwitchesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SwitchesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SwitchesRowChanged != null)) {
                    this.SwitchesRowChanged(this, new SwitchesRowChangeEvent(((SwitchesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SwitchesRowChanging != null)) {
                    this.SwitchesRowChanging(this, new SwitchesRowChangeEvent(((SwitchesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SwitchesRowDeleted != null)) {
                    this.SwitchesRowDeleted(this, new SwitchesRowChangeEvent(((SwitchesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SwitchesRowDeleting != null)) {
                    this.SwitchesRowDeleting(this, new SwitchesRowChangeEvent(((SwitchesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSwitchesRow(SwitchesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SwitchesRow : DataRow {
            
            private SwitchesDataTable tableSwitches;
            
            internal SwitchesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSwitches = ((SwitchesDataTable)(this.Table));
            }
            
            public string ManufacturingTestMode {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.ManufacturingTestModeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.ManufacturingTestModeColumn] = value;
                }
            }
            
            public string VerifyOnlyMode {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.VerifyOnlyModeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.VerifyOnlyModeColumn] = value;
                }
            }
            
            public string SlugsMode {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SlugsModeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.SlugsModeColumn] = value;
                }
            }
            
            public string NoLogLimit {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.NoLogLimitColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.NoLogLimitColumn] = value;
                }
            }
            
            public string SimulateFixate {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SimulateFixateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.SimulateFixateColumn] = value;
                }
            }
            
            public string SetupMode {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SetupModeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.SetupModeColumn] = value;
                }
            }
            
            public string DirectImaging {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.DirectImagingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.DirectImagingColumn] = value;
                }
            }
            
            public string AutoThroughPutMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.AutoThroughPutMeasurementColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.AutoThroughPutMeasurementColumn] = value;
                }
            }
            
            public string TimingLogged {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.TimingLoggedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.TimingLoggedColumn] = value;
                }
            }
            
            public string SkipOrderStatusUpdates {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SkipOrderStatusUpdatesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.SkipOrderStatusUpdatesColumn] = value;
                }
            }
            
            public string PrintOnlyMode {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.PrintOnlyModeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.PrintOnlyModeColumn] = value;
                }
            }
            
            public string SkipAutoloaderScanning {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SkipAutoloaderScanningColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.SkipAutoloaderScanningColumn] = value;
                }
            }
            
            public string PrintBeforeRecording {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.PrintBeforeRecordingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.PrintBeforeRecordingColumn] = value;
                }
            }
            
            public string UseDriveLettersForRecorders {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.UseDriveLettersForRecordersColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.UseDriveLettersForRecordersColumn] = value;
                }
            }
            
            public string TraceSCSICommands {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.TraceSCSICommandsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.TraceSCSICommandsColumn] = value;
                }
            }
            
            public string TraceReadWriteCommands {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.TraceReadWriteCommandsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.TraceReadWriteCommandsColumn] = value;
                }
            }
            
            public string TraceSerialCommands {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.TraceSerialCommandsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.TraceSerialCommandsColumn] = value;
                }
            }
            
            public string TraceLabelAndPrinting {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.TraceLabelAndPrintingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.TraceLabelAndPrintingColumn] = value;
                }
            }
            
            public string TraceXMLMessages {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.TraceXMLMessagesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.TraceXMLMessagesColumn] = value;
                }
            }
            
            public string LogSkippingOrder {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.LogSkippingOrderColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.LogSkippingOrderColumn] = value;
                }
            }
            
            public string RunWithoutDevices {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.RunWithoutDevicesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.RunWithoutDevicesColumn] = value;
                }
            }
            
            public string DisablePreloadingRecorderAfterPrinterLoad {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.DisablePreloadingRecorderAfterPrinterLoadColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.DisablePreloadingRecorderAfterPrinterLoadColumn] = value;
                }
            }
            
            public string DisableCacheLocking {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.DisableCacheLockingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.DisableCacheLockingColumn] = value;
                }
            }
            
            public string EnableCacheLimiting {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.EnableCacheLimitingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.EnableCacheLimitingColumn] = value;
                }
            }
            
            public string SkipSerialPortsForAutoloader {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SkipSerialPortsForAutoloaderColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.SkipSerialPortsForAutoloaderColumn] = value;
                }
            }
            
            public string SkipDrivesForReaderRecorderCache {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SkipDrivesForReaderRecorderCacheColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.SkipDrivesForReaderRecorderCacheColumn] = value;
                }
            }
            
            public string SecondsDelayBeforeMainWindow {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SecondsDelayBeforeMainWindowColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.SecondsDelayBeforeMainWindowColumn] = value;
                }
            }
            
            public string UseParallelPortForPrism {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.UseParallelPortForPrismColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.UseParallelPortForPrismColumn] = value;
                }
            }
            
            public string DisableDriverNameInRendering {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.DisableDriverNameInRenderingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.DisableDriverNameInRenderingColumn] = value;
                }
            }
            
            public string EraseCDRWBeforeRecording {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.EraseCDRWBeforeRecordingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.EraseCDRWBeforeRecordingColumn] = value;
                }
            }
            
            public string StrictWaveFileChecking {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.StrictWaveFileCheckingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.StrictWaveFileCheckingColumn] = value;
                }
            }
            
            public ServerStatusRow ServerStatusRow {
                get {
                    return ((ServerStatusRow)(this.GetParentRow(this.Table.ParentRelations["ServerStatus_Switches"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ServerStatus_Switches"]);
                }
            }
            
            public bool IsManufacturingTestModeNull() {
                return this.IsNull(this.tableSwitches.ManufacturingTestModeColumn);
            }
            
            public void SetManufacturingTestModeNull() {
                this[this.tableSwitches.ManufacturingTestModeColumn] = System.Convert.DBNull;
            }
            
            public bool IsVerifyOnlyModeNull() {
                return this.IsNull(this.tableSwitches.VerifyOnlyModeColumn);
            }
            
            public void SetVerifyOnlyModeNull() {
                this[this.tableSwitches.VerifyOnlyModeColumn] = System.Convert.DBNull;
            }
            
            public bool IsSlugsModeNull() {
                return this.IsNull(this.tableSwitches.SlugsModeColumn);
            }
            
            public void SetSlugsModeNull() {
                this[this.tableSwitches.SlugsModeColumn] = System.Convert.DBNull;
            }
            
            public bool IsNoLogLimitNull() {
                return this.IsNull(this.tableSwitches.NoLogLimitColumn);
            }
            
            public void SetNoLogLimitNull() {
                this[this.tableSwitches.NoLogLimitColumn] = System.Convert.DBNull;
            }
            
            public bool IsSimulateFixateNull() {
                return this.IsNull(this.tableSwitches.SimulateFixateColumn);
            }
            
            public void SetSimulateFixateNull() {
                this[this.tableSwitches.SimulateFixateColumn] = System.Convert.DBNull;
            }
            
            public bool IsSetupModeNull() {
                return this.IsNull(this.tableSwitches.SetupModeColumn);
            }
            
            public void SetSetupModeNull() {
                this[this.tableSwitches.SetupModeColumn] = System.Convert.DBNull;
            }
            
            public bool IsDirectImagingNull() {
                return this.IsNull(this.tableSwitches.DirectImagingColumn);
            }
            
            public void SetDirectImagingNull() {
                this[this.tableSwitches.DirectImagingColumn] = System.Convert.DBNull;
            }
            
            public bool IsAutoThroughPutMeasurementNull() {
                return this.IsNull(this.tableSwitches.AutoThroughPutMeasurementColumn);
            }
            
            public void SetAutoThroughPutMeasurementNull() {
                this[this.tableSwitches.AutoThroughPutMeasurementColumn] = System.Convert.DBNull;
            }
            
            public bool IsTimingLoggedNull() {
                return this.IsNull(this.tableSwitches.TimingLoggedColumn);
            }
            
            public void SetTimingLoggedNull() {
                this[this.tableSwitches.TimingLoggedColumn] = System.Convert.DBNull;
            }
            
            public bool IsSkipOrderStatusUpdatesNull() {
                return this.IsNull(this.tableSwitches.SkipOrderStatusUpdatesColumn);
            }
            
            public void SetSkipOrderStatusUpdatesNull() {
                this[this.tableSwitches.SkipOrderStatusUpdatesColumn] = System.Convert.DBNull;
            }
            
            public bool IsPrintOnlyModeNull() {
                return this.IsNull(this.tableSwitches.PrintOnlyModeColumn);
            }
            
            public void SetPrintOnlyModeNull() {
                this[this.tableSwitches.PrintOnlyModeColumn] = System.Convert.DBNull;
            }
            
            public bool IsSkipAutoloaderScanningNull() {
                return this.IsNull(this.tableSwitches.SkipAutoloaderScanningColumn);
            }
            
            public void SetSkipAutoloaderScanningNull() {
                this[this.tableSwitches.SkipAutoloaderScanningColumn] = System.Convert.DBNull;
            }
            
            public bool IsPrintBeforeRecordingNull() {
                return this.IsNull(this.tableSwitches.PrintBeforeRecordingColumn);
            }
            
            public void SetPrintBeforeRecordingNull() {
                this[this.tableSwitches.PrintBeforeRecordingColumn] = System.Convert.DBNull;
            }
            
            public bool IsUseDriveLettersForRecordersNull() {
                return this.IsNull(this.tableSwitches.UseDriveLettersForRecordersColumn);
            }
            
            public void SetUseDriveLettersForRecordersNull() {
                this[this.tableSwitches.UseDriveLettersForRecordersColumn] = System.Convert.DBNull;
            }
            
            public bool IsTraceSCSICommandsNull() {
                return this.IsNull(this.tableSwitches.TraceSCSICommandsColumn);
            }
            
            public void SetTraceSCSICommandsNull() {
                this[this.tableSwitches.TraceSCSICommandsColumn] = System.Convert.DBNull;
            }
            
            public bool IsTraceReadWriteCommandsNull() {
                return this.IsNull(this.tableSwitches.TraceReadWriteCommandsColumn);
            }
            
            public void SetTraceReadWriteCommandsNull() {
                this[this.tableSwitches.TraceReadWriteCommandsColumn] = System.Convert.DBNull;
            }
            
            public bool IsTraceSerialCommandsNull() {
                return this.IsNull(this.tableSwitches.TraceSerialCommandsColumn);
            }
            
            public void SetTraceSerialCommandsNull() {
                this[this.tableSwitches.TraceSerialCommandsColumn] = System.Convert.DBNull;
            }
            
            public bool IsTraceLabelAndPrintingNull() {
                return this.IsNull(this.tableSwitches.TraceLabelAndPrintingColumn);
            }
            
            public void SetTraceLabelAndPrintingNull() {
                this[this.tableSwitches.TraceLabelAndPrintingColumn] = System.Convert.DBNull;
            }
            
            public bool IsTraceXMLMessagesNull() {
                return this.IsNull(this.tableSwitches.TraceXMLMessagesColumn);
            }
            
            public void SetTraceXMLMessagesNull() {
                this[this.tableSwitches.TraceXMLMessagesColumn] = System.Convert.DBNull;
            }
            
            public bool IsLogSkippingOrderNull() {
                return this.IsNull(this.tableSwitches.LogSkippingOrderColumn);
            }
            
            public void SetLogSkippingOrderNull() {
                this[this.tableSwitches.LogSkippingOrderColumn] = System.Convert.DBNull;
            }
            
            public bool IsRunWithoutDevicesNull() {
                return this.IsNull(this.tableSwitches.RunWithoutDevicesColumn);
            }
            
            public void SetRunWithoutDevicesNull() {
                this[this.tableSwitches.RunWithoutDevicesColumn] = System.Convert.DBNull;
            }
            
            public bool IsDisablePreloadingRecorderAfterPrinterLoadNull() {
                return this.IsNull(this.tableSwitches.DisablePreloadingRecorderAfterPrinterLoadColumn);
            }
            
            public void SetDisablePreloadingRecorderAfterPrinterLoadNull() {
                this[this.tableSwitches.DisablePreloadingRecorderAfterPrinterLoadColumn] = System.Convert.DBNull;
            }
            
            public bool IsDisableCacheLockingNull() {
                return this.IsNull(this.tableSwitches.DisableCacheLockingColumn);
            }
            
            public void SetDisableCacheLockingNull() {
                this[this.tableSwitches.DisableCacheLockingColumn] = System.Convert.DBNull;
            }
            
            public bool IsEnableCacheLimitingNull() {
                return this.IsNull(this.tableSwitches.EnableCacheLimitingColumn);
            }
            
            public void SetEnableCacheLimitingNull() {
                this[this.tableSwitches.EnableCacheLimitingColumn] = System.Convert.DBNull;
            }
            
            public bool IsSkipSerialPortsForAutoloaderNull() {
                return this.IsNull(this.tableSwitches.SkipSerialPortsForAutoloaderColumn);
            }
            
            public void SetSkipSerialPortsForAutoloaderNull() {
                this[this.tableSwitches.SkipSerialPortsForAutoloaderColumn] = System.Convert.DBNull;
            }
            
            public bool IsSkipDrivesForReaderRecorderCacheNull() {
                return this.IsNull(this.tableSwitches.SkipDrivesForReaderRecorderCacheColumn);
            }
            
            public void SetSkipDrivesForReaderRecorderCacheNull() {
                this[this.tableSwitches.SkipDrivesForReaderRecorderCacheColumn] = System.Convert.DBNull;
            }
            
            public bool IsSecondsDelayBeforeMainWindowNull() {
                return this.IsNull(this.tableSwitches.SecondsDelayBeforeMainWindowColumn);
            }
            
            public void SetSecondsDelayBeforeMainWindowNull() {
                this[this.tableSwitches.SecondsDelayBeforeMainWindowColumn] = System.Convert.DBNull;
            }
            
            public bool IsUseParallelPortForPrismNull() {
                return this.IsNull(this.tableSwitches.UseParallelPortForPrismColumn);
            }
            
            public void SetUseParallelPortForPrismNull() {
                this[this.tableSwitches.UseParallelPortForPrismColumn] = System.Convert.DBNull;
            }
            
            public bool IsDisableDriverNameInRenderingNull() {
                return this.IsNull(this.tableSwitches.DisableDriverNameInRenderingColumn);
            }
            
            public void SetDisableDriverNameInRenderingNull() {
                this[this.tableSwitches.DisableDriverNameInRenderingColumn] = System.Convert.DBNull;
            }
            
            public bool IsEraseCDRWBeforeRecordingNull() {
                return this.IsNull(this.tableSwitches.EraseCDRWBeforeRecordingColumn);
            }
            
            public void SetEraseCDRWBeforeRecordingNull() {
                this[this.tableSwitches.EraseCDRWBeforeRecordingColumn] = System.Convert.DBNull;
            }
            
            public bool IsStrictWaveFileCheckingNull() {
                return this.IsNull(this.tableSwitches.StrictWaveFileCheckingColumn);
            }
            
            public void SetStrictWaveFileCheckingNull() {
                this[this.tableSwitches.StrictWaveFileCheckingColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SwitchesRowChangeEvent : EventArgs {
            
            private SwitchesRow eventRow;
            
            private DataRowAction eventAction;
            
            public SwitchesRowChangeEvent(SwitchesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SwitchesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AutoloaderStatusDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnLoaderNumber;
            
            private DataColumn columnOffline;
            
            private DataColumn columnMailslotLevel;
            
            private DataColumn columnAutoloaderStatus_Id;
            
            private DataColumn columnServerStatus_Id;
            
            internal AutoloaderStatusDataTable() : 
                    base("AutoloaderStatus") {
                this.InitClass();
            }
            
            internal AutoloaderStatusDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn LoaderNumberColumn {
                get {
                    return this.columnLoaderNumber;
                }
            }
            
            internal DataColumn OfflineColumn {
                get {
                    return this.columnOffline;
                }
            }
            
            internal DataColumn MailslotLevelColumn {
                get {
                    return this.columnMailslotLevel;
                }
            }
            
            internal DataColumn AutoloaderStatus_IdColumn {
                get {
                    return this.columnAutoloaderStatus_Id;
                }
            }
            
            internal DataColumn ServerStatus_IdColumn {
                get {
                    return this.columnServerStatus_Id;
                }
            }
            
            public AutoloaderStatusRow this[int index] {
                get {
                    return ((AutoloaderStatusRow)(this.Rows[index]));
                }
            }
            
            public event AutoloaderStatusRowChangeEventHandler AutoloaderStatusRowChanged;
            
            public event AutoloaderStatusRowChangeEventHandler AutoloaderStatusRowChanging;
            
            public event AutoloaderStatusRowChangeEventHandler AutoloaderStatusRowDeleted;
            
            public event AutoloaderStatusRowChangeEventHandler AutoloaderStatusRowDeleting;
            
            public void AddAutoloaderStatusRow(AutoloaderStatusRow row) {
                this.Rows.Add(row);
            }
            
            public AutoloaderStatusRow AddAutoloaderStatusRow(string LoaderNumber, string Offline, string MailslotLevel, ServerStatusRow parentServerStatusRowByServerStatus_AutoloaderStatus) {
                AutoloaderStatusRow rowAutoloaderStatusRow = ((AutoloaderStatusRow)(this.NewRow()));
                rowAutoloaderStatusRow.ItemArray = new object[] {
                        LoaderNumber,
                        Offline,
                        MailslotLevel,
                        null,
                        parentServerStatusRowByServerStatus_AutoloaderStatus[0]};
                this.Rows.Add(rowAutoloaderStatusRow);
                return rowAutoloaderStatusRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AutoloaderStatusDataTable cln = ((AutoloaderStatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AutoloaderStatusDataTable();
            }
            
            internal void InitVars() {
                this.columnLoaderNumber = this.Columns["LoaderNumber"];
                this.columnOffline = this.Columns["Offline"];
                this.columnMailslotLevel = this.Columns["MailslotLevel"];
                this.columnAutoloaderStatus_Id = this.Columns["AutoloaderStatus_Id"];
                this.columnServerStatus_Id = this.Columns["ServerStatus_Id"];
            }
            
            private void InitClass() {
                this.columnLoaderNumber = new DataColumn("LoaderNumber", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnLoaderNumber);
                this.columnOffline = new DataColumn("Offline", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOffline);
                this.columnMailslotLevel = new DataColumn("MailslotLevel", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnMailslotLevel);
                this.columnAutoloaderStatus_Id = new DataColumn("AutoloaderStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnAutoloaderStatus_Id);
                this.columnServerStatus_Id = new DataColumn("ServerStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnServerStatus_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnAutoloaderStatus_Id}, true));
                this.columnLoaderNumber.AllowDBNull = false;
                this.columnLoaderNumber.Namespace = "";
                this.columnOffline.AllowDBNull = false;
                this.columnOffline.Namespace = "";
                this.columnMailslotLevel.Namespace = "";
                this.columnAutoloaderStatus_Id.AutoIncrement = true;
                this.columnAutoloaderStatus_Id.AllowDBNull = false;
                this.columnAutoloaderStatus_Id.Unique = true;
            }
            
            public AutoloaderStatusRow NewAutoloaderStatusRow() {
                return ((AutoloaderStatusRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AutoloaderStatusRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AutoloaderStatusRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AutoloaderStatusRowChanged != null)) {
                    this.AutoloaderStatusRowChanged(this, new AutoloaderStatusRowChangeEvent(((AutoloaderStatusRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AutoloaderStatusRowChanging != null)) {
                    this.AutoloaderStatusRowChanging(this, new AutoloaderStatusRowChangeEvent(((AutoloaderStatusRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AutoloaderStatusRowDeleted != null)) {
                    this.AutoloaderStatusRowDeleted(this, new AutoloaderStatusRowChangeEvent(((AutoloaderStatusRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AutoloaderStatusRowDeleting != null)) {
                    this.AutoloaderStatusRowDeleting(this, new AutoloaderStatusRowChangeEvent(((AutoloaderStatusRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAutoloaderStatusRow(AutoloaderStatusRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AutoloaderStatusRow : DataRow {
            
            private AutoloaderStatusDataTable tableAutoloaderStatus;
            
            internal AutoloaderStatusRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAutoloaderStatus = ((AutoloaderStatusDataTable)(this.Table));
            }
            
            public string LoaderNumber {
                get {
                    return ((string)(this[this.tableAutoloaderStatus.LoaderNumberColumn]));
                }
                set {
                    this[this.tableAutoloaderStatus.LoaderNumberColumn] = value;
                }
            }
            
            public string Offline {
                get {
                    return ((string)(this[this.tableAutoloaderStatus.OfflineColumn]));
                }
                set {
                    this[this.tableAutoloaderStatus.OfflineColumn] = value;
                }
            }
            
            public string MailslotLevel {
                get {
                    try {
                        return ((string)(this[this.tableAutoloaderStatus.MailslotLevelColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoloaderStatus.MailslotLevelColumn] = value;
                }
            }
            
            public ServerStatusRow ServerStatusRow {
                get {
                    return ((ServerStatusRow)(this.GetParentRow(this.Table.ParentRelations["ServerStatus_AutoloaderStatus"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ServerStatus_AutoloaderStatus"]);
                }
            }
            
            public bool IsMailslotLevelNull() {
                return this.IsNull(this.tableAutoloaderStatus.MailslotLevelColumn);
            }
            
            public void SetMailslotLevelNull() {
                this[this.tableAutoloaderStatus.MailslotLevelColumn] = System.Convert.DBNull;
            }
            
            public BinRow[] GetBinRows() {
                return ((BinRow[])(this.GetChildRows(this.Table.ChildRelations["AutoloaderStatus_Bin"])));
            }
            
            public PrinterRow[] GetPrinterRows() {
                return ((PrinterRow[])(this.GetChildRows(this.Table.ChildRelations["AutoloaderStatus_Printer"])));
            }
            
            public RecorderRow[] GetRecorderRows() {
                return ((RecorderRow[])(this.GetChildRows(this.Table.ChildRelations["AutoloaderStatus_Recorder"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AutoloaderStatusRowChangeEvent : EventArgs {
            
            private AutoloaderStatusRow eventRow;
            
            private DataRowAction eventAction;
            
            public AutoloaderStatusRowChangeEvent(AutoloaderStatusRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AutoloaderStatusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BinDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnNumber;
            
            private DataColumn columnLevel;
            
            private DataColumn columnUsage;
            
            private DataColumn columnAutoloaderStatus_Id;
            
            internal BinDataTable() : 
                    base("Bin") {
                this.InitClass();
            }
            
            internal BinDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn LevelColumn {
                get {
                    return this.columnLevel;
                }
            }
            
            internal DataColumn UsageColumn {
                get {
                    return this.columnUsage;
                }
            }
            
            internal DataColumn AutoloaderStatus_IdColumn {
                get {
                    return this.columnAutoloaderStatus_Id;
                }
            }
            
            public BinRow this[int index] {
                get {
                    return ((BinRow)(this.Rows[index]));
                }
            }
            
            public event BinRowChangeEventHandler BinRowChanged;
            
            public event BinRowChangeEventHandler BinRowChanging;
            
            public event BinRowChangeEventHandler BinRowDeleted;
            
            public event BinRowChangeEventHandler BinRowDeleting;
            
            public void AddBinRow(BinRow row) {
                this.Rows.Add(row);
            }
            
            public BinRow AddBinRow(string Number, string Level, string Usage, AutoloaderStatusRow parentAutoloaderStatusRowByAutoloaderStatus_Bin) {
                BinRow rowBinRow = ((BinRow)(this.NewRow()));
                rowBinRow.ItemArray = new object[] {
                        Number,
                        Level,
                        Usage,
                        parentAutoloaderStatusRowByAutoloaderStatus_Bin[3]};
                this.Rows.Add(rowBinRow);
                return rowBinRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                BinDataTable cln = ((BinDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new BinDataTable();
            }
            
            internal void InitVars() {
                this.columnNumber = this.Columns["Number"];
                this.columnLevel = this.Columns["Level"];
                this.columnUsage = this.Columns["Usage"];
                this.columnAutoloaderStatus_Id = this.Columns["AutoloaderStatus_Id"];
            }
            
            private void InitClass() {
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnNumber);
                this.columnLevel = new DataColumn("Level", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnLevel);
                this.columnUsage = new DataColumn("Usage", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUsage);
                this.columnAutoloaderStatus_Id = new DataColumn("AutoloaderStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnAutoloaderStatus_Id);
                this.columnNumber.AllowDBNull = false;
                this.columnNumber.Namespace = "";
                this.columnLevel.Namespace = "";
                this.columnUsage.AllowDBNull = false;
                this.columnUsage.Namespace = "";
            }
            
            public BinRow NewBinRow() {
                return ((BinRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new BinRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(BinRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BinRowChanged != null)) {
                    this.BinRowChanged(this, new BinRowChangeEvent(((BinRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BinRowChanging != null)) {
                    this.BinRowChanging(this, new BinRowChangeEvent(((BinRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BinRowDeleted != null)) {
                    this.BinRowDeleted(this, new BinRowChangeEvent(((BinRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BinRowDeleting != null)) {
                    this.BinRowDeleting(this, new BinRowChangeEvent(((BinRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBinRow(BinRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BinRow : DataRow {
            
            private BinDataTable tableBin;
            
            internal BinRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableBin = ((BinDataTable)(this.Table));
            }
            
            public string Number {
                get {
                    return ((string)(this[this.tableBin.NumberColumn]));
                }
                set {
                    this[this.tableBin.NumberColumn] = value;
                }
            }
            
            public string Level {
                get {
                    try {
                        return ((string)(this[this.tableBin.LevelColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBin.LevelColumn] = value;
                }
            }
            
            public string Usage {
                get {
                    return ((string)(this[this.tableBin.UsageColumn]));
                }
                set {
                    this[this.tableBin.UsageColumn] = value;
                }
            }
            
            public AutoloaderStatusRow AutoloaderStatusRow {
                get {
                    return ((AutoloaderStatusRow)(this.GetParentRow(this.Table.ParentRelations["AutoloaderStatus_Bin"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AutoloaderStatus_Bin"]);
                }
            }
            
            public bool IsLevelNull() {
                return this.IsNull(this.tableBin.LevelColumn);
            }
            
            public void SetLevelNull() {
                this[this.tableBin.LevelColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BinRowChangeEvent : EventArgs {
            
            private BinRow eventRow;
            
            private DataRowAction eventAction;
            
            public BinRowChangeEvent(BinRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BinRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PrinterDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnNumber;
            
            private DataColumn columnOffline;
            
            private DataColumn columnLabelsRemaining;
            
            private DataColumn columnDiscCount;
            
            private DataColumn columnAutoloaderStatus_Id;
            
            internal PrinterDataTable() : 
                    base("Printer") {
                this.InitClass();
            }
            
            internal PrinterDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn OfflineColumn {
                get {
                    return this.columnOffline;
                }
            }
            
            internal DataColumn LabelsRemainingColumn {
                get {
                    return this.columnLabelsRemaining;
                }
            }
            
            internal DataColumn DiscCountColumn {
                get {
                    return this.columnDiscCount;
                }
            }
            
            internal DataColumn AutoloaderStatus_IdColumn {
                get {
                    return this.columnAutoloaderStatus_Id;
                }
            }
            
            public PrinterRow this[int index] {
                get {
                    return ((PrinterRow)(this.Rows[index]));
                }
            }
            
            public event PrinterRowChangeEventHandler PrinterRowChanged;
            
            public event PrinterRowChangeEventHandler PrinterRowChanging;
            
            public event PrinterRowChangeEventHandler PrinterRowDeleted;
            
            public event PrinterRowChangeEventHandler PrinterRowDeleting;
            
            public void AddPrinterRow(PrinterRow row) {
                this.Rows.Add(row);
            }
            
            public PrinterRow AddPrinterRow(string Number, string Offline, string LabelsRemaining, string DiscCount, AutoloaderStatusRow parentAutoloaderStatusRowByAutoloaderStatus_Printer) {
                PrinterRow rowPrinterRow = ((PrinterRow)(this.NewRow()));
                rowPrinterRow.ItemArray = new object[] {
                        Number,
                        Offline,
                        LabelsRemaining,
                        DiscCount,
                        parentAutoloaderStatusRowByAutoloaderStatus_Printer[3]};
                this.Rows.Add(rowPrinterRow);
                return rowPrinterRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PrinterDataTable cln = ((PrinterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PrinterDataTable();
            }
            
            internal void InitVars() {
                this.columnNumber = this.Columns["Number"];
                this.columnOffline = this.Columns["Offline"];
                this.columnLabelsRemaining = this.Columns["LabelsRemaining"];
                this.columnDiscCount = this.Columns["DiscCount"];
                this.columnAutoloaderStatus_Id = this.Columns["AutoloaderStatus_Id"];
            }
            
            private void InitClass() {
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnNumber);
                this.columnOffline = new DataColumn("Offline", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOffline);
                this.columnLabelsRemaining = new DataColumn("LabelsRemaining", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnLabelsRemaining);
                this.columnDiscCount = new DataColumn("DiscCount", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDiscCount);
                this.columnAutoloaderStatus_Id = new DataColumn("AutoloaderStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnAutoloaderStatus_Id);
                this.columnNumber.AllowDBNull = false;
                this.columnNumber.Namespace = "";
                this.columnOffline.AllowDBNull = false;
                this.columnOffline.Namespace = "";
                this.columnLabelsRemaining.Namespace = "";
                this.columnDiscCount.Namespace = "";
            }
            
            public PrinterRow NewPrinterRow() {
                return ((PrinterRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PrinterRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PrinterRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrinterRowChanged != null)) {
                    this.PrinterRowChanged(this, new PrinterRowChangeEvent(((PrinterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrinterRowChanging != null)) {
                    this.PrinterRowChanging(this, new PrinterRowChangeEvent(((PrinterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrinterRowDeleted != null)) {
                    this.PrinterRowDeleted(this, new PrinterRowChangeEvent(((PrinterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrinterRowDeleting != null)) {
                    this.PrinterRowDeleting(this, new PrinterRowChangeEvent(((PrinterRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePrinterRow(PrinterRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PrinterRow : DataRow {
            
            private PrinterDataTable tablePrinter;
            
            internal PrinterRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrinter = ((PrinterDataTable)(this.Table));
            }
            
            public string Number {
                get {
                    return ((string)(this[this.tablePrinter.NumberColumn]));
                }
                set {
                    this[this.tablePrinter.NumberColumn] = value;
                }
            }
            
            public string Offline {
                get {
                    return ((string)(this[this.tablePrinter.OfflineColumn]));
                }
                set {
                    this[this.tablePrinter.OfflineColumn] = value;
                }
            }
            
            public string LabelsRemaining {
                get {
                    try {
                        return ((string)(this[this.tablePrinter.LabelsRemainingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrinter.LabelsRemainingColumn] = value;
                }
            }
            
            public string DiscCount {
                get {
                    try {
                        return ((string)(this[this.tablePrinter.DiscCountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrinter.DiscCountColumn] = value;
                }
            }
            
            public AutoloaderStatusRow AutoloaderStatusRow {
                get {
                    return ((AutoloaderStatusRow)(this.GetParentRow(this.Table.ParentRelations["AutoloaderStatus_Printer"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AutoloaderStatus_Printer"]);
                }
            }
            
            public bool IsLabelsRemainingNull() {
                return this.IsNull(this.tablePrinter.LabelsRemainingColumn);
            }
            
            public void SetLabelsRemainingNull() {
                this[this.tablePrinter.LabelsRemainingColumn] = System.Convert.DBNull;
            }
            
            public bool IsDiscCountNull() {
                return this.IsNull(this.tablePrinter.DiscCountColumn);
            }
            
            public void SetDiscCountNull() {
                this[this.tablePrinter.DiscCountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PrinterRowChangeEvent : EventArgs {
            
            private PrinterRow eventRow;
            
            private DataRowAction eventAction;
            
            public PrinterRowChangeEvent(PrinterRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PrinterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RecorderDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnNumber;
            
            private DataColumn columnOffline;
            
            private DataColumn columnDiscCount;
            
            private DataColumn columnAutoloaderStatus_Id;
            
            internal RecorderDataTable() : 
                    base("Recorder") {
                this.InitClass();
            }
            
            internal RecorderDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            internal DataColumn OfflineColumn {
                get {
                    return this.columnOffline;
                }
            }
            
            internal DataColumn DiscCountColumn {
                get {
                    return this.columnDiscCount;
                }
            }
            
            internal DataColumn AutoloaderStatus_IdColumn {
                get {
                    return this.columnAutoloaderStatus_Id;
                }
            }
            
            public RecorderRow this[int index] {
                get {
                    return ((RecorderRow)(this.Rows[index]));
                }
            }
            
            public event RecorderRowChangeEventHandler RecorderRowChanged;
            
            public event RecorderRowChangeEventHandler RecorderRowChanging;
            
            public event RecorderRowChangeEventHandler RecorderRowDeleted;
            
            public event RecorderRowChangeEventHandler RecorderRowDeleting;
            
            public void AddRecorderRow(RecorderRow row) {
                this.Rows.Add(row);
            }
            
            public RecorderRow AddRecorderRow(string Number, string Offline, string DiscCount, AutoloaderStatusRow parentAutoloaderStatusRowByAutoloaderStatus_Recorder) {
                RecorderRow rowRecorderRow = ((RecorderRow)(this.NewRow()));
                rowRecorderRow.ItemArray = new object[] {
                        Number,
                        Offline,
                        DiscCount,
                        parentAutoloaderStatusRowByAutoloaderStatus_Recorder[3]};
                this.Rows.Add(rowRecorderRow);
                return rowRecorderRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                RecorderDataTable cln = ((RecorderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new RecorderDataTable();
            }
            
            internal void InitVars() {
                this.columnNumber = this.Columns["Number"];
                this.columnOffline = this.Columns["Offline"];
                this.columnDiscCount = this.Columns["DiscCount"];
                this.columnAutoloaderStatus_Id = this.Columns["AutoloaderStatus_Id"];
            }
            
            private void InitClass() {
                this.columnNumber = new DataColumn("Number", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnNumber);
                this.columnOffline = new DataColumn("Offline", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOffline);
                this.columnDiscCount = new DataColumn("DiscCount", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDiscCount);
                this.columnAutoloaderStatus_Id = new DataColumn("AutoloaderStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnAutoloaderStatus_Id);
                this.columnNumber.AllowDBNull = false;
                this.columnNumber.Namespace = "";
                this.columnOffline.AllowDBNull = false;
                this.columnOffline.Namespace = "";
                this.columnDiscCount.Namespace = "";
            }
            
            public RecorderRow NewRecorderRow() {
                return ((RecorderRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new RecorderRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(RecorderRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RecorderRowChanged != null)) {
                    this.RecorderRowChanged(this, new RecorderRowChangeEvent(((RecorderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RecorderRowChanging != null)) {
                    this.RecorderRowChanging(this, new RecorderRowChangeEvent(((RecorderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RecorderRowDeleted != null)) {
                    this.RecorderRowDeleted(this, new RecorderRowChangeEvent(((RecorderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RecorderRowDeleting != null)) {
                    this.RecorderRowDeleting(this, new RecorderRowChangeEvent(((RecorderRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveRecorderRow(RecorderRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RecorderRow : DataRow {
            
            private RecorderDataTable tableRecorder;
            
            internal RecorderRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableRecorder = ((RecorderDataTable)(this.Table));
            }
            
            public string Number {
                get {
                    return ((string)(this[this.tableRecorder.NumberColumn]));
                }
                set {
                    this[this.tableRecorder.NumberColumn] = value;
                }
            }
            
            public string Offline {
                get {
                    return ((string)(this[this.tableRecorder.OfflineColumn]));
                }
                set {
                    this[this.tableRecorder.OfflineColumn] = value;
                }
            }
            
            public string DiscCount {
                get {
                    try {
                        return ((string)(this[this.tableRecorder.DiscCountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecorder.DiscCountColumn] = value;
                }
            }
            
            public AutoloaderStatusRow AutoloaderStatusRow {
                get {
                    return ((AutoloaderStatusRow)(this.GetParentRow(this.Table.ParentRelations["AutoloaderStatus_Recorder"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["AutoloaderStatus_Recorder"]);
                }
            }
            
            public bool IsDiscCountNull() {
                return this.IsNull(this.tableRecorder.DiscCountColumn);
            }
            
            public void SetDiscCountNull() {
                this[this.tableRecorder.DiscCountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RecorderRowChangeEvent : EventArgs {
            
            private RecorderRow eventRow;
            
            private DataRowAction eventAction;
            
            public RecorderRowChangeEvent(RecorderRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public RecorderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ActivationInfoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnActivationInfo_Id;
            
            private DataColumn columnServerStatus_Id;
            
            internal ActivationInfoDataTable() : 
                    base("ActivationInfo") {
                this.InitClass();
            }
            
            internal ActivationInfoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ActivationInfo_IdColumn {
                get {
                    return this.columnActivationInfo_Id;
                }
            }
            
            internal DataColumn ServerStatus_IdColumn {
                get {
                    return this.columnServerStatus_Id;
                }
            }
            
            public ActivationInfoRow this[int index] {
                get {
                    return ((ActivationInfoRow)(this.Rows[index]));
                }
            }
            
            public event ActivationInfoRowChangeEventHandler ActivationInfoRowChanged;
            
            public event ActivationInfoRowChangeEventHandler ActivationInfoRowChanging;
            
            public event ActivationInfoRowChangeEventHandler ActivationInfoRowDeleted;
            
            public event ActivationInfoRowChangeEventHandler ActivationInfoRowDeleting;
            
            public void AddActivationInfoRow(ActivationInfoRow row) {
                this.Rows.Add(row);
            }
            
            public ActivationInfoRow AddActivationInfoRow(ServerStatusRow parentServerStatusRowByServerStatus_ActivationInfo) {
                ActivationInfoRow rowActivationInfoRow = ((ActivationInfoRow)(this.NewRow()));
                rowActivationInfoRow.ItemArray = new object[] {
                        null,
                        parentServerStatusRowByServerStatus_ActivationInfo[0]};
                this.Rows.Add(rowActivationInfoRow);
                return rowActivationInfoRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ActivationInfoDataTable cln = ((ActivationInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ActivationInfoDataTable();
            }
            
            internal void InitVars() {
                this.columnActivationInfo_Id = this.Columns["ActivationInfo_Id"];
                this.columnServerStatus_Id = this.Columns["ServerStatus_Id"];
            }
            
            private void InitClass() {
                this.columnActivationInfo_Id = new DataColumn("ActivationInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnActivationInfo_Id);
                this.columnServerStatus_Id = new DataColumn("ServerStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnServerStatus_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnActivationInfo_Id}, true));
                this.columnActivationInfo_Id.AutoIncrement = true;
                this.columnActivationInfo_Id.AllowDBNull = false;
                this.columnActivationInfo_Id.Unique = true;
            }
            
            public ActivationInfoRow NewActivationInfoRow() {
                return ((ActivationInfoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ActivationInfoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ActivationInfoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ActivationInfoRowChanged != null)) {
                    this.ActivationInfoRowChanged(this, new ActivationInfoRowChangeEvent(((ActivationInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ActivationInfoRowChanging != null)) {
                    this.ActivationInfoRowChanging(this, new ActivationInfoRowChangeEvent(((ActivationInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ActivationInfoRowDeleted != null)) {
                    this.ActivationInfoRowDeleted(this, new ActivationInfoRowChangeEvent(((ActivationInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ActivationInfoRowDeleting != null)) {
                    this.ActivationInfoRowDeleting(this, new ActivationInfoRowChangeEvent(((ActivationInfoRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveActivationInfoRow(ActivationInfoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ActivationInfoRow : DataRow {
            
            private ActivationInfoDataTable tableActivationInfo;
            
            internal ActivationInfoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableActivationInfo = ((ActivationInfoDataTable)(this.Table));
            }
            
            public ServerStatusRow ServerStatusRow {
                get {
                    return ((ServerStatusRow)(this.GetParentRow(this.Table.ParentRelations["ServerStatus_ActivationInfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ServerStatus_ActivationInfo"]);
                }
            }
            
            public BaseRow[] GetBaseRows() {
                return ((BaseRow[])(this.GetChildRows(this.Table.ChildRelations["ActivationInfo_Base"])));
            }
            
            public RawModeRow[] GetRawModeRows() {
                return ((RawModeRow[])(this.GetChildRows(this.Table.ChildRelations["ActivationInfo_RawMode"])));
            }
            
            public SmarteCDRow[] GetSmarteCDRows() {
                return ((SmarteCDRow[])(this.GetChildRows(this.Table.ChildRelations["ActivationInfo_SmarteCD"])));
            }
            
            public VideoCDRow[] GetVideoCDRows() {
                return ((VideoCDRow[])(this.GetChildRows(this.Table.ChildRelations["ActivationInfo_VideoCD"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ActivationInfoRowChangeEvent : EventArgs {
            
            private ActivationInfoRow eventRow;
            
            private DataRowAction eventAction;
            
            public ActivationInfoRowChangeEvent(ActivationInfoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ActivationInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BaseDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnStatus;
            
            private DataColumn columnDaysRemaining;
            
            private DataColumn columnActivationInfo_Id;
            
            internal BaseDataTable() : 
                    base("Base") {
                this.InitClass();
            }
            
            internal BaseDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            internal DataColumn DaysRemainingColumn {
                get {
                    return this.columnDaysRemaining;
                }
            }
            
            internal DataColumn ActivationInfo_IdColumn {
                get {
                    return this.columnActivationInfo_Id;
                }
            }
            
            public BaseRow this[int index] {
                get {
                    return ((BaseRow)(this.Rows[index]));
                }
            }
            
            public event BaseRowChangeEventHandler BaseRowChanged;
            
            public event BaseRowChangeEventHandler BaseRowChanging;
            
            public event BaseRowChangeEventHandler BaseRowDeleted;
            
            public event BaseRowChangeEventHandler BaseRowDeleting;
            
            public void AddBaseRow(BaseRow row) {
                this.Rows.Add(row);
            }
            
            public BaseRow AddBaseRow(string Status, string DaysRemaining, ActivationInfoRow parentActivationInfoRowByActivationInfo_Base) {
                BaseRow rowBaseRow = ((BaseRow)(this.NewRow()));
                rowBaseRow.ItemArray = new object[] {
                        Status,
                        DaysRemaining,
                        parentActivationInfoRowByActivationInfo_Base[0]};
                this.Rows.Add(rowBaseRow);
                return rowBaseRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                BaseDataTable cln = ((BaseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new BaseDataTable();
            }
            
            internal void InitVars() {
                this.columnStatus = this.Columns["Status"];
                this.columnDaysRemaining = this.Columns["DaysRemaining"];
                this.columnActivationInfo_Id = this.Columns["ActivationInfo_Id"];
            }
            
            private void InitClass() {
                this.columnStatus = new DataColumn("Status", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnStatus);
                this.columnDaysRemaining = new DataColumn("DaysRemaining", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDaysRemaining);
                this.columnActivationInfo_Id = new DataColumn("ActivationInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnActivationInfo_Id);
                this.columnStatus.Namespace = "";
                this.columnStatus.DefaultValue = "Trial";
                this.columnDaysRemaining.Namespace = "";
            }
            
            public BaseRow NewBaseRow() {
                return ((BaseRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new BaseRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(BaseRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BaseRowChanged != null)) {
                    this.BaseRowChanged(this, new BaseRowChangeEvent(((BaseRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BaseRowChanging != null)) {
                    this.BaseRowChanging(this, new BaseRowChangeEvent(((BaseRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BaseRowDeleted != null)) {
                    this.BaseRowDeleted(this, new BaseRowChangeEvent(((BaseRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BaseRowDeleting != null)) {
                    this.BaseRowDeleting(this, new BaseRowChangeEvent(((BaseRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBaseRow(BaseRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BaseRow : DataRow {
            
            private BaseDataTable tableBase;
            
            internal BaseRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableBase = ((BaseDataTable)(this.Table));
            }
            
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableBase.StatusColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBase.StatusColumn] = value;
                }
            }
            
            public string DaysRemaining {
                get {
                    try {
                        return ((string)(this[this.tableBase.DaysRemainingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBase.DaysRemainingColumn] = value;
                }
            }
            
            public ActivationInfoRow ActivationInfoRow {
                get {
                    return ((ActivationInfoRow)(this.GetParentRow(this.Table.ParentRelations["ActivationInfo_Base"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ActivationInfo_Base"]);
                }
            }
            
            public bool IsStatusNull() {
                return this.IsNull(this.tableBase.StatusColumn);
            }
            
            public void SetStatusNull() {
                this[this.tableBase.StatusColumn] = System.Convert.DBNull;
            }
            
            public bool IsDaysRemainingNull() {
                return this.IsNull(this.tableBase.DaysRemainingColumn);
            }
            
            public void SetDaysRemainingNull() {
                this[this.tableBase.DaysRemainingColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BaseRowChangeEvent : EventArgs {
            
            private BaseRow eventRow;
            
            private DataRowAction eventAction;
            
            public BaseRowChangeEvent(BaseRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BaseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RawModeDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnStatus;
            
            private DataColumn columnDaysRemaining;
            
            private DataColumn columnActivationInfo_Id;
            
            internal RawModeDataTable() : 
                    base("RawMode") {
                this.InitClass();
            }
            
            internal RawModeDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            internal DataColumn DaysRemainingColumn {
                get {
                    return this.columnDaysRemaining;
                }
            }
            
            internal DataColumn ActivationInfo_IdColumn {
                get {
                    return this.columnActivationInfo_Id;
                }
            }
            
            public RawModeRow this[int index] {
                get {
                    return ((RawModeRow)(this.Rows[index]));
                }
            }
            
            public event RawModeRowChangeEventHandler RawModeRowChanged;
            
            public event RawModeRowChangeEventHandler RawModeRowChanging;
            
            public event RawModeRowChangeEventHandler RawModeRowDeleted;
            
            public event RawModeRowChangeEventHandler RawModeRowDeleting;
            
            public void AddRawModeRow(RawModeRow row) {
                this.Rows.Add(row);
            }
            
            public RawModeRow AddRawModeRow(string Status, string DaysRemaining, ActivationInfoRow parentActivationInfoRowByActivationInfo_RawMode) {
                RawModeRow rowRawModeRow = ((RawModeRow)(this.NewRow()));
                rowRawModeRow.ItemArray = new object[] {
                        Status,
                        DaysRemaining,
                        parentActivationInfoRowByActivationInfo_RawMode[0]};
                this.Rows.Add(rowRawModeRow);
                return rowRawModeRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                RawModeDataTable cln = ((RawModeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new RawModeDataTable();
            }
            
            internal void InitVars() {
                this.columnStatus = this.Columns["Status"];
                this.columnDaysRemaining = this.Columns["DaysRemaining"];
                this.columnActivationInfo_Id = this.Columns["ActivationInfo_Id"];
            }
            
            private void InitClass() {
                this.columnStatus = new DataColumn("Status", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnStatus);
                this.columnDaysRemaining = new DataColumn("DaysRemaining", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDaysRemaining);
                this.columnActivationInfo_Id = new DataColumn("ActivationInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnActivationInfo_Id);
                this.columnStatus.Namespace = "";
                this.columnStatus.DefaultValue = "Trial";
                this.columnDaysRemaining.Namespace = "";
            }
            
            public RawModeRow NewRawModeRow() {
                return ((RawModeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new RawModeRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(RawModeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RawModeRowChanged != null)) {
                    this.RawModeRowChanged(this, new RawModeRowChangeEvent(((RawModeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RawModeRowChanging != null)) {
                    this.RawModeRowChanging(this, new RawModeRowChangeEvent(((RawModeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RawModeRowDeleted != null)) {
                    this.RawModeRowDeleted(this, new RawModeRowChangeEvent(((RawModeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RawModeRowDeleting != null)) {
                    this.RawModeRowDeleting(this, new RawModeRowChangeEvent(((RawModeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveRawModeRow(RawModeRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RawModeRow : DataRow {
            
            private RawModeDataTable tableRawMode;
            
            internal RawModeRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableRawMode = ((RawModeDataTable)(this.Table));
            }
            
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableRawMode.StatusColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRawMode.StatusColumn] = value;
                }
            }
            
            public string DaysRemaining {
                get {
                    try {
                        return ((string)(this[this.tableRawMode.DaysRemainingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRawMode.DaysRemainingColumn] = value;
                }
            }
            
            public ActivationInfoRow ActivationInfoRow {
                get {
                    return ((ActivationInfoRow)(this.GetParentRow(this.Table.ParentRelations["ActivationInfo_RawMode"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ActivationInfo_RawMode"]);
                }
            }
            
            public bool IsStatusNull() {
                return this.IsNull(this.tableRawMode.StatusColumn);
            }
            
            public void SetStatusNull() {
                this[this.tableRawMode.StatusColumn] = System.Convert.DBNull;
            }
            
            public bool IsDaysRemainingNull() {
                return this.IsNull(this.tableRawMode.DaysRemainingColumn);
            }
            
            public void SetDaysRemainingNull() {
                this[this.tableRawMode.DaysRemainingColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RawModeRowChangeEvent : EventArgs {
            
            private RawModeRow eventRow;
            
            private DataRowAction eventAction;
            
            public RawModeRowChangeEvent(RawModeRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public RawModeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SmarteCDDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnStatus;
            
            private DataColumn columnDaysRemaining;
            
            private DataColumn columnActivationInfo_Id;
            
            internal SmarteCDDataTable() : 
                    base("SmarteCD") {
                this.InitClass();
            }
            
            internal SmarteCDDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            internal DataColumn DaysRemainingColumn {
                get {
                    return this.columnDaysRemaining;
                }
            }
            
            internal DataColumn ActivationInfo_IdColumn {
                get {
                    return this.columnActivationInfo_Id;
                }
            }
            
            public SmarteCDRow this[int index] {
                get {
                    return ((SmarteCDRow)(this.Rows[index]));
                }
            }
            
            public event SmarteCDRowChangeEventHandler SmarteCDRowChanged;
            
            public event SmarteCDRowChangeEventHandler SmarteCDRowChanging;
            
            public event SmarteCDRowChangeEventHandler SmarteCDRowDeleted;
            
            public event SmarteCDRowChangeEventHandler SmarteCDRowDeleting;
            
            public void AddSmarteCDRow(SmarteCDRow row) {
                this.Rows.Add(row);
            }
            
            public SmarteCDRow AddSmarteCDRow(string Status, string DaysRemaining, ActivationInfoRow parentActivationInfoRowByActivationInfo_SmarteCD) {
                SmarteCDRow rowSmarteCDRow = ((SmarteCDRow)(this.NewRow()));
                rowSmarteCDRow.ItemArray = new object[] {
                        Status,
                        DaysRemaining,
                        parentActivationInfoRowByActivationInfo_SmarteCD[0]};
                this.Rows.Add(rowSmarteCDRow);
                return rowSmarteCDRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SmarteCDDataTable cln = ((SmarteCDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SmarteCDDataTable();
            }
            
            internal void InitVars() {
                this.columnStatus = this.Columns["Status"];
                this.columnDaysRemaining = this.Columns["DaysRemaining"];
                this.columnActivationInfo_Id = this.Columns["ActivationInfo_Id"];
            }
            
            private void InitClass() {
                this.columnStatus = new DataColumn("Status", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnStatus);
                this.columnDaysRemaining = new DataColumn("DaysRemaining", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDaysRemaining);
                this.columnActivationInfo_Id = new DataColumn("ActivationInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnActivationInfo_Id);
                this.columnStatus.Namespace = "";
                this.columnStatus.DefaultValue = "Trial";
                this.columnDaysRemaining.Namespace = "";
            }
            
            public SmarteCDRow NewSmarteCDRow() {
                return ((SmarteCDRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SmarteCDRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SmarteCDRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SmarteCDRowChanged != null)) {
                    this.SmarteCDRowChanged(this, new SmarteCDRowChangeEvent(((SmarteCDRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SmarteCDRowChanging != null)) {
                    this.SmarteCDRowChanging(this, new SmarteCDRowChangeEvent(((SmarteCDRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SmarteCDRowDeleted != null)) {
                    this.SmarteCDRowDeleted(this, new SmarteCDRowChangeEvent(((SmarteCDRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SmarteCDRowDeleting != null)) {
                    this.SmarteCDRowDeleting(this, new SmarteCDRowChangeEvent(((SmarteCDRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSmarteCDRow(SmarteCDRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SmarteCDRow : DataRow {
            
            private SmarteCDDataTable tableSmarteCD;
            
            internal SmarteCDRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSmarteCD = ((SmarteCDDataTable)(this.Table));
            }
            
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableSmarteCD.StatusColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSmarteCD.StatusColumn] = value;
                }
            }
            
            public string DaysRemaining {
                get {
                    try {
                        return ((string)(this[this.tableSmarteCD.DaysRemainingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSmarteCD.DaysRemainingColumn] = value;
                }
            }
            
            public ActivationInfoRow ActivationInfoRow {
                get {
                    return ((ActivationInfoRow)(this.GetParentRow(this.Table.ParentRelations["ActivationInfo_SmarteCD"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ActivationInfo_SmarteCD"]);
                }
            }
            
            public bool IsStatusNull() {
                return this.IsNull(this.tableSmarteCD.StatusColumn);
            }
            
            public void SetStatusNull() {
                this[this.tableSmarteCD.StatusColumn] = System.Convert.DBNull;
            }
            
            public bool IsDaysRemainingNull() {
                return this.IsNull(this.tableSmarteCD.DaysRemainingColumn);
            }
            
            public void SetDaysRemainingNull() {
                this[this.tableSmarteCD.DaysRemainingColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SmarteCDRowChangeEvent : EventArgs {
            
            private SmarteCDRow eventRow;
            
            private DataRowAction eventAction;
            
            public SmarteCDRowChangeEvent(SmarteCDRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SmarteCDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VideoCDDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnStatus;
            
            private DataColumn columnDaysRemaining;
            
            private DataColumn columnActivationInfo_Id;
            
            internal VideoCDDataTable() : 
                    base("VideoCD") {
                this.InitClass();
            }
            
            internal VideoCDDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            internal DataColumn DaysRemainingColumn {
                get {
                    return this.columnDaysRemaining;
                }
            }
            
            internal DataColumn ActivationInfo_IdColumn {
                get {
                    return this.columnActivationInfo_Id;
                }
            }
            
            public VideoCDRow this[int index] {
                get {
                    return ((VideoCDRow)(this.Rows[index]));
                }
            }
            
            public event VideoCDRowChangeEventHandler VideoCDRowChanged;
            
            public event VideoCDRowChangeEventHandler VideoCDRowChanging;
            
            public event VideoCDRowChangeEventHandler VideoCDRowDeleted;
            
            public event VideoCDRowChangeEventHandler VideoCDRowDeleting;
            
            public void AddVideoCDRow(VideoCDRow row) {
                this.Rows.Add(row);
            }
            
            public VideoCDRow AddVideoCDRow(string Status, string DaysRemaining, ActivationInfoRow parentActivationInfoRowByActivationInfo_VideoCD) {
                VideoCDRow rowVideoCDRow = ((VideoCDRow)(this.NewRow()));
                rowVideoCDRow.ItemArray = new object[] {
                        Status,
                        DaysRemaining,
                        parentActivationInfoRowByActivationInfo_VideoCD[0]};
                this.Rows.Add(rowVideoCDRow);
                return rowVideoCDRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                VideoCDDataTable cln = ((VideoCDDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new VideoCDDataTable();
            }
            
            internal void InitVars() {
                this.columnStatus = this.Columns["Status"];
                this.columnDaysRemaining = this.Columns["DaysRemaining"];
                this.columnActivationInfo_Id = this.Columns["ActivationInfo_Id"];
            }
            
            private void InitClass() {
                this.columnStatus = new DataColumn("Status", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnStatus);
                this.columnDaysRemaining = new DataColumn("DaysRemaining", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDaysRemaining);
                this.columnActivationInfo_Id = new DataColumn("ActivationInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnActivationInfo_Id);
                this.columnStatus.Namespace = "";
                this.columnStatus.DefaultValue = "Trial";
                this.columnDaysRemaining.Namespace = "";
            }
            
            public VideoCDRow NewVideoCDRow() {
                return ((VideoCDRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new VideoCDRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(VideoCDRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VideoCDRowChanged != null)) {
                    this.VideoCDRowChanged(this, new VideoCDRowChangeEvent(((VideoCDRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VideoCDRowChanging != null)) {
                    this.VideoCDRowChanging(this, new VideoCDRowChangeEvent(((VideoCDRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VideoCDRowDeleted != null)) {
                    this.VideoCDRowDeleted(this, new VideoCDRowChangeEvent(((VideoCDRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VideoCDRowDeleting != null)) {
                    this.VideoCDRowDeleting(this, new VideoCDRowChangeEvent(((VideoCDRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveVideoCDRow(VideoCDRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VideoCDRow : DataRow {
            
            private VideoCDDataTable tableVideoCD;
            
            internal VideoCDRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableVideoCD = ((VideoCDDataTable)(this.Table));
            }
            
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableVideoCD.StatusColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVideoCD.StatusColumn] = value;
                }
            }
            
            public string DaysRemaining {
                get {
                    try {
                        return ((string)(this[this.tableVideoCD.DaysRemainingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVideoCD.DaysRemainingColumn] = value;
                }
            }
            
            public ActivationInfoRow ActivationInfoRow {
                get {
                    return ((ActivationInfoRow)(this.GetParentRow(this.Table.ParentRelations["ActivationInfo_VideoCD"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ActivationInfo_VideoCD"]);
                }
            }
            
            public bool IsStatusNull() {
                return this.IsNull(this.tableVideoCD.StatusColumn);
            }
            
            public void SetStatusNull() {
                this[this.tableVideoCD.StatusColumn] = System.Convert.DBNull;
            }
            
            public bool IsDaysRemainingNull() {
                return this.IsNull(this.tableVideoCD.DaysRemainingColumn);
            }
            
            public void SetDaysRemainingNull() {
                this[this.tableVideoCD.DaysRemainingColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VideoCDRowChangeEvent : EventArgs {
            
            private VideoCDRow eventRow;
            
            private DataRowAction eventAction;
            
            public VideoCDRowChangeEvent(VideoCDRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public VideoCDRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrderListDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCluster;
            
            private DataColumn columnNumberOfOrders;
            
            private DataColumn columnOrderList_Id;
            
            internal OrderListDataTable() : 
                    base("OrderList") {
                this.InitClass();
            }
            
            internal OrderListDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ClusterColumn {
                get {
                    return this.columnCluster;
                }
            }
            
            internal DataColumn NumberOfOrdersColumn {
                get {
                    return this.columnNumberOfOrders;
                }
            }
            
            internal DataColumn OrderList_IdColumn {
                get {
                    return this.columnOrderList_Id;
                }
            }
            
            public OrderListRow this[int index] {
                get {
                    return ((OrderListRow)(this.Rows[index]));
                }
            }
            
            public event OrderListRowChangeEventHandler OrderListRowChanged;
            
            public event OrderListRowChangeEventHandler OrderListRowChanging;
            
            public event OrderListRowChangeEventHandler OrderListRowDeleted;
            
            public event OrderListRowChangeEventHandler OrderListRowDeleting;
            
            public void AddOrderListRow(OrderListRow row) {
                this.Rows.Add(row);
            }
            
            public OrderListRow AddOrderListRow(string Cluster, string NumberOfOrders) {
                OrderListRow rowOrderListRow = ((OrderListRow)(this.NewRow()));
                rowOrderListRow.ItemArray = new object[] {
                        Cluster,
                        NumberOfOrders,
                        null};
                this.Rows.Add(rowOrderListRow);
                return rowOrderListRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                OrderListDataTable cln = ((OrderListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new OrderListDataTable();
            }
            
            internal void InitVars() {
                this.columnCluster = this.Columns["Cluster"];
                this.columnNumberOfOrders = this.Columns["NumberOfOrders"];
                this.columnOrderList_Id = this.Columns["OrderList_Id"];
            }
            
            private void InitClass() {
                this.columnCluster = new DataColumn("Cluster", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCluster);
                this.columnNumberOfOrders = new DataColumn("NumberOfOrders", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnNumberOfOrders);
                this.columnOrderList_Id = new DataColumn("OrderList_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnOrderList_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnOrderList_Id}, true));
                this.columnCluster.AllowDBNull = false;
                this.columnCluster.Namespace = "";
                this.columnNumberOfOrders.AllowDBNull = false;
                this.columnNumberOfOrders.Namespace = "";
                this.columnOrderList_Id.AutoIncrement = true;
                this.columnOrderList_Id.AllowDBNull = false;
                this.columnOrderList_Id.Unique = true;
            }
            
            public OrderListRow NewOrderListRow() {
                return ((OrderListRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new OrderListRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(OrderListRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OrderListRowChanged != null)) {
                    this.OrderListRowChanged(this, new OrderListRowChangeEvent(((OrderListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OrderListRowChanging != null)) {
                    this.OrderListRowChanging(this, new OrderListRowChangeEvent(((OrderListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OrderListRowDeleted != null)) {
                    this.OrderListRowDeleted(this, new OrderListRowChangeEvent(((OrderListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OrderListRowDeleting != null)) {
                    this.OrderListRowDeleting(this, new OrderListRowChangeEvent(((OrderListRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveOrderListRow(OrderListRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrderListRow : DataRow {
            
            private OrderListDataTable tableOrderList;
            
            internal OrderListRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableOrderList = ((OrderListDataTable)(this.Table));
            }
            
            public string Cluster {
                get {
                    return ((string)(this[this.tableOrderList.ClusterColumn]));
                }
                set {
                    this[this.tableOrderList.ClusterColumn] = value;
                }
            }
            
            public string NumberOfOrders {
                get {
                    return ((string)(this[this.tableOrderList.NumberOfOrdersColumn]));
                }
                set {
                    this[this.tableOrderList.NumberOfOrdersColumn] = value;
                }
            }
            
            public ProductionOrderRow[] GetProductionOrderRows() {
                return ((ProductionOrderRow[])(this.GetChildRows(this.Table.ChildRelations["OrderList_ProductionOrder"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrderListRowChangeEvent : EventArgs {
            
            private OrderListRow eventRow;
            
            private DataRowAction eventAction;
            
            public OrderListRowChangeEvent(OrderListRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public OrderListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProductionOrderDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnOrderId;
            
            private DataColumn columnClientId;
            
            private DataColumn columnOrderType;
            
            private DataColumn columnOrderState;
            
            private DataColumn columnOrderStage;
            
            private DataColumn columnOrderStageEx;
            
            private DataColumn columnCopiesRequested;
            
            private DataColumn columnCopiesCompleted;
            
            private DataColumn columnPercentCompleted;
            
            private DataColumn columnOriginalOrder;
            
            private DataColumn columnOrderList_Id;
            
            internal ProductionOrderDataTable() : 
                    base("ProductionOrder") {
                this.InitClass();
            }
            
            internal ProductionOrderDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn OrderIdColumn {
                get {
                    return this.columnOrderId;
                }
            }
            
            internal DataColumn ClientIdColumn {
                get {
                    return this.columnClientId;
                }
            }
            
            internal DataColumn OrderTypeColumn {
                get {
                    return this.columnOrderType;
                }
            }
            
            internal DataColumn OrderStateColumn {
                get {
                    return this.columnOrderState;
                }
            }
            
            internal DataColumn OrderStageColumn {
                get {
                    return this.columnOrderStage;
                }
            }
            
            internal DataColumn OrderStageExColumn {
                get {
                    return this.columnOrderStageEx;
                }
            }
            
            internal DataColumn CopiesRequestedColumn {
                get {
                    return this.columnCopiesRequested;
                }
            }
            
            internal DataColumn CopiesCompletedColumn {
                get {
                    return this.columnCopiesCompleted;
                }
            }
            
            internal DataColumn PercentCompletedColumn {
                get {
                    return this.columnPercentCompleted;
                }
            }
            
            internal DataColumn OriginalOrderColumn {
                get {
                    return this.columnOriginalOrder;
                }
            }
            
            internal DataColumn OrderList_IdColumn {
                get {
                    return this.columnOrderList_Id;
                }
            }
            
            public ProductionOrderRow this[int index] {
                get {
                    return ((ProductionOrderRow)(this.Rows[index]));
                }
            }
            
            public event ProductionOrderRowChangeEventHandler ProductionOrderRowChanged;
            
            public event ProductionOrderRowChangeEventHandler ProductionOrderRowChanging;
            
            public event ProductionOrderRowChangeEventHandler ProductionOrderRowDeleted;
            
            public event ProductionOrderRowChangeEventHandler ProductionOrderRowDeleting;
            
            public void AddProductionOrderRow(ProductionOrderRow row) {
                this.Rows.Add(row);
            }
            
            public ProductionOrderRow AddProductionOrderRow(string OrderId, string ClientId, string OrderType, string OrderState, string OrderStage, string OrderStageEx, string CopiesRequested, string CopiesCompleted, string PercentCompleted, string OriginalOrder, OrderListRow parentOrderListRowByOrderList_ProductionOrder) {
                ProductionOrderRow rowProductionOrderRow = ((ProductionOrderRow)(this.NewRow()));
                rowProductionOrderRow.ItemArray = new object[] {
                        OrderId,
                        ClientId,
                        OrderType,
                        OrderState,
                        OrderStage,
                        OrderStageEx,
                        CopiesRequested,
                        CopiesCompleted,
                        PercentCompleted,
                        OriginalOrder,
                        parentOrderListRowByOrderList_ProductionOrder[2]};
                this.Rows.Add(rowProductionOrderRow);
                return rowProductionOrderRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ProductionOrderDataTable cln = ((ProductionOrderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ProductionOrderDataTable();
            }
            
            internal void InitVars() {
                this.columnOrderId = this.Columns["OrderId"];
                this.columnClientId = this.Columns["ClientId"];
                this.columnOrderType = this.Columns["OrderType"];
                this.columnOrderState = this.Columns["OrderState"];
                this.columnOrderStage = this.Columns["OrderStage"];
                this.columnOrderStageEx = this.Columns["OrderStageEx"];
                this.columnCopiesRequested = this.Columns["CopiesRequested"];
                this.columnCopiesCompleted = this.Columns["CopiesCompleted"];
                this.columnPercentCompleted = this.Columns["PercentCompleted"];
                this.columnOriginalOrder = this.Columns["OriginalOrder"];
                this.columnOrderList_Id = this.Columns["OrderList_Id"];
            }
            
            private void InitClass() {
                this.columnOrderId = new DataColumn("OrderId", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOrderId);
                this.columnClientId = new DataColumn("ClientId", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnClientId);
                this.columnOrderType = new DataColumn("OrderType", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOrderType);
                this.columnOrderState = new DataColumn("OrderState", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOrderState);
                this.columnOrderStage = new DataColumn("OrderStage", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOrderStage);
                this.columnOrderStageEx = new DataColumn("OrderStageEx", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOrderStageEx);
                this.columnCopiesRequested = new DataColumn("CopiesRequested", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCopiesRequested);
                this.columnCopiesCompleted = new DataColumn("CopiesCompleted", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCopiesCompleted);
                this.columnPercentCompleted = new DataColumn("PercentCompleted", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPercentCompleted);
                this.columnOriginalOrder = new DataColumn("OriginalOrder", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOriginalOrder);
                this.columnOrderList_Id = new DataColumn("OrderList_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnOrderList_Id);
                this.columnOrderId.AllowDBNull = false;
                this.columnOrderId.Namespace = "";
                this.columnClientId.AllowDBNull = false;
                this.columnClientId.Namespace = "";
                this.columnOrderType.Namespace = "";
                this.columnOrderType.DefaultValue = "Record";
                this.columnOrderState.Namespace = "";
                this.columnOrderState.DefaultValue = "IN_PROCESS";
                this.columnOrderStage.AllowDBNull = false;
                this.columnOrderStage.Namespace = "";
                this.columnOrderStageEx.Namespace = "";
                this.columnCopiesRequested.AllowDBNull = false;
                this.columnCopiesRequested.Namespace = "";
                this.columnCopiesCompleted.AllowDBNull = false;
                this.columnCopiesCompleted.Namespace = "";
                this.columnPercentCompleted.AllowDBNull = false;
                this.columnPercentCompleted.Namespace = "";
                this.columnOriginalOrder.Namespace = "";
            }
            
            public ProductionOrderRow NewProductionOrderRow() {
                return ((ProductionOrderRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ProductionOrderRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ProductionOrderRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProductionOrderRowChanged != null)) {
                    this.ProductionOrderRowChanged(this, new ProductionOrderRowChangeEvent(((ProductionOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProductionOrderRowChanging != null)) {
                    this.ProductionOrderRowChanging(this, new ProductionOrderRowChangeEvent(((ProductionOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProductionOrderRowDeleted != null)) {
                    this.ProductionOrderRowDeleted(this, new ProductionOrderRowChangeEvent(((ProductionOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProductionOrderRowDeleting != null)) {
                    this.ProductionOrderRowDeleting(this, new ProductionOrderRowChangeEvent(((ProductionOrderRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProductionOrderRow(ProductionOrderRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProductionOrderRow : DataRow {
            
            private ProductionOrderDataTable tableProductionOrder;
            
            internal ProductionOrderRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableProductionOrder = ((ProductionOrderDataTable)(this.Table));
            }
            
            public string OrderId {
                get {
                    return ((string)(this[this.tableProductionOrder.OrderIdColumn]));
                }
                set {
                    this[this.tableProductionOrder.OrderIdColumn] = value;
                }
            }
            
            public string ClientId {
                get {
                    return ((string)(this[this.tableProductionOrder.ClientIdColumn]));
                }
                set {
                    this[this.tableProductionOrder.ClientIdColumn] = value;
                }
            }
            
            public string OrderType {
                get {
                    try {
                        return ((string)(this[this.tableProductionOrder.OrderTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProductionOrder.OrderTypeColumn] = value;
                }
            }
            
            public string OrderState {
                get {
                    try {
                        return ((string)(this[this.tableProductionOrder.OrderStateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProductionOrder.OrderStateColumn] = value;
                }
            }
            
            public string OrderStage {
                get {
                    return ((string)(this[this.tableProductionOrder.OrderStageColumn]));
                }
                set {
                    this[this.tableProductionOrder.OrderStageColumn] = value;
                }
            }
            
            public string OrderStageEx {
                get {
                    try {
                        return ((string)(this[this.tableProductionOrder.OrderStageExColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProductionOrder.OrderStageExColumn] = value;
                }
            }
            
            public string CopiesRequested {
                get {
                    return ((string)(this[this.tableProductionOrder.CopiesRequestedColumn]));
                }
                set {
                    this[this.tableProductionOrder.CopiesRequestedColumn] = value;
                }
            }
            
            public string CopiesCompleted {
                get {
                    return ((string)(this[this.tableProductionOrder.CopiesCompletedColumn]));
                }
                set {
                    this[this.tableProductionOrder.CopiesCompletedColumn] = value;
                }
            }
            
            public string PercentCompleted {
                get {
                    return ((string)(this[this.tableProductionOrder.PercentCompletedColumn]));
                }
                set {
                    this[this.tableProductionOrder.PercentCompletedColumn] = value;
                }
            }
            
            public string OriginalOrder {
                get {
                    try {
                        return ((string)(this[this.tableProductionOrder.OriginalOrderColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProductionOrder.OriginalOrderColumn] = value;
                }
            }
            
            public OrderListRow OrderListRow {
                get {
                    return ((OrderListRow)(this.GetParentRow(this.Table.ParentRelations["OrderList_ProductionOrder"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["OrderList_ProductionOrder"]);
                }
            }
            
            public bool IsOrderTypeNull() {
                return this.IsNull(this.tableProductionOrder.OrderTypeColumn);
            }
            
            public void SetOrderTypeNull() {
                this[this.tableProductionOrder.OrderTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrderStateNull() {
                return this.IsNull(this.tableProductionOrder.OrderStateColumn);
            }
            
            public void SetOrderStateNull() {
                this[this.tableProductionOrder.OrderStateColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrderStageExNull() {
                return this.IsNull(this.tableProductionOrder.OrderStageExColumn);
            }
            
            public void SetOrderStageExNull() {
                this[this.tableProductionOrder.OrderStageExColumn] = System.Convert.DBNull;
            }
            
            public bool IsOriginalOrderNull() {
                return this.IsNull(this.tableProductionOrder.OriginalOrderColumn);
            }
            
            public void SetOriginalOrderNull() {
                this[this.tableProductionOrder.OriginalOrderColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProductionOrderRowChangeEvent : EventArgs {
            
            private ProductionOrderRow eventRow;
            
            private DataRowAction eventAction;
            
            public ProductionOrderRowChangeEvent(ProductionOrderRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ProductionOrderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SessionLogDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnNumberOfEntries;
            
            private DataColumn columnSessionLog_Id;
            
            internal SessionLogDataTable() : 
                    base("SessionLog") {
                this.InitClass();
            }
            
            internal SessionLogDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NumberOfEntriesColumn {
                get {
                    return this.columnNumberOfEntries;
                }
            }
            
            internal DataColumn SessionLog_IdColumn {
                get {
                    return this.columnSessionLog_Id;
                }
            }
            
            public SessionLogRow this[int index] {
                get {
                    return ((SessionLogRow)(this.Rows[index]));
                }
            }
            
            public event SessionLogRowChangeEventHandler SessionLogRowChanged;
            
            public event SessionLogRowChangeEventHandler SessionLogRowChanging;
            
            public event SessionLogRowChangeEventHandler SessionLogRowDeleted;
            
            public event SessionLogRowChangeEventHandler SessionLogRowDeleting;
            
            public void AddSessionLogRow(SessionLogRow row) {
                this.Rows.Add(row);
            }
            
            public SessionLogRow AddSessionLogRow(string NumberOfEntries) {
                SessionLogRow rowSessionLogRow = ((SessionLogRow)(this.NewRow()));
                rowSessionLogRow.ItemArray = new object[] {
                        NumberOfEntries,
                        null};
                this.Rows.Add(rowSessionLogRow);
                return rowSessionLogRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SessionLogDataTable cln = ((SessionLogDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SessionLogDataTable();
            }
            
            internal void InitVars() {
                this.columnNumberOfEntries = this.Columns["NumberOfEntries"];
                this.columnSessionLog_Id = this.Columns["SessionLog_Id"];
            }
            
            private void InitClass() {
                this.columnNumberOfEntries = new DataColumn("NumberOfEntries", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnNumberOfEntries);
                this.columnSessionLog_Id = new DataColumn("SessionLog_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnSessionLog_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnSessionLog_Id}, true));
                this.columnNumberOfEntries.AllowDBNull = false;
                this.columnNumberOfEntries.Namespace = "";
                this.columnSessionLog_Id.AutoIncrement = true;
                this.columnSessionLog_Id.AllowDBNull = false;
                this.columnSessionLog_Id.Unique = true;
            }
            
            public SessionLogRow NewSessionLogRow() {
                return ((SessionLogRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SessionLogRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SessionLogRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SessionLogRowChanged != null)) {
                    this.SessionLogRowChanged(this, new SessionLogRowChangeEvent(((SessionLogRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SessionLogRowChanging != null)) {
                    this.SessionLogRowChanging(this, new SessionLogRowChangeEvent(((SessionLogRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SessionLogRowDeleted != null)) {
                    this.SessionLogRowDeleted(this, new SessionLogRowChangeEvent(((SessionLogRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SessionLogRowDeleting != null)) {
                    this.SessionLogRowDeleting(this, new SessionLogRowChangeEvent(((SessionLogRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSessionLogRow(SessionLogRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SessionLogRow : DataRow {
            
            private SessionLogDataTable tableSessionLog;
            
            internal SessionLogRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSessionLog = ((SessionLogDataTable)(this.Table));
            }
            
            public string NumberOfEntries {
                get {
                    return ((string)(this[this.tableSessionLog.NumberOfEntriesColumn]));
                }
                set {
                    this[this.tableSessionLog.NumberOfEntriesColumn] = value;
                }
            }
            
            public EntryRow[] GetEntryRows() {
                return ((EntryRow[])(this.GetChildRows(this.Table.ChildRelations["SessionLog_Entry"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SessionLogRowChangeEvent : EventArgs {
            
            private SessionLogRow eventRow;
            
            private DataRowAction eventAction;
            
            public SessionLogRowChangeEvent(SessionLogRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SessionLogRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EntryDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnText;
            
            private DataColumn columnTimestamp;
            
            private DataColumn columnMessageId;
            
            private DataColumn columnSessionLog_Id;
            
            internal EntryDataTable() : 
                    base("Entry") {
                this.InitClass();
            }
            
            internal EntryDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TextColumn {
                get {
                    return this.columnText;
                }
            }
            
            internal DataColumn TimestampColumn {
                get {
                    return this.columnTimestamp;
                }
            }
            
            internal DataColumn MessageIdColumn {
                get {
                    return this.columnMessageId;
                }
            }
            
            internal DataColumn SessionLog_IdColumn {
                get {
                    return this.columnSessionLog_Id;
                }
            }
            
            public EntryRow this[int index] {
                get {
                    return ((EntryRow)(this.Rows[index]));
                }
            }
            
            public event EntryRowChangeEventHandler EntryRowChanged;
            
            public event EntryRowChangeEventHandler EntryRowChanging;
            
            public event EntryRowChangeEventHandler EntryRowDeleted;
            
            public event EntryRowChangeEventHandler EntryRowDeleting;
            
            public void AddEntryRow(EntryRow row) {
                this.Rows.Add(row);
            }
            
            public EntryRow AddEntryRow(string Text, string Timestamp, string MessageId, SessionLogRow parentSessionLogRowBySessionLog_Entry) {
                EntryRow rowEntryRow = ((EntryRow)(this.NewRow()));
                rowEntryRow.ItemArray = new object[] {
                        Text,
                        Timestamp,
                        MessageId,
                        parentSessionLogRowBySessionLog_Entry[1]};
                this.Rows.Add(rowEntryRow);
                return rowEntryRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                EntryDataTable cln = ((EntryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new EntryDataTable();
            }
            
            internal void InitVars() {
                this.columnText = this.Columns["Text"];
                this.columnTimestamp = this.Columns["Timestamp"];
                this.columnMessageId = this.Columns["MessageId"];
                this.columnSessionLog_Id = this.Columns["SessionLog_Id"];
            }
            
            private void InitClass() {
                this.columnText = new DataColumn("Text", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnText);
                this.columnTimestamp = new DataColumn("Timestamp", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTimestamp);
                this.columnMessageId = new DataColumn("MessageId", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnMessageId);
                this.columnSessionLog_Id = new DataColumn("SessionLog_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnSessionLog_Id);
                this.columnText.AllowDBNull = false;
                this.columnText.Namespace = "";
                this.columnTimestamp.AllowDBNull = false;
                this.columnTimestamp.Namespace = "";
                this.columnMessageId.AllowDBNull = false;
                this.columnMessageId.Namespace = "";
            }
            
            public EntryRow NewEntryRow() {
                return ((EntryRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new EntryRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(EntryRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EntryRowChanged != null)) {
                    this.EntryRowChanged(this, new EntryRowChangeEvent(((EntryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EntryRowChanging != null)) {
                    this.EntryRowChanging(this, new EntryRowChangeEvent(((EntryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EntryRowDeleted != null)) {
                    this.EntryRowDeleted(this, new EntryRowChangeEvent(((EntryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EntryRowDeleting != null)) {
                    this.EntryRowDeleting(this, new EntryRowChangeEvent(((EntryRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEntryRow(EntryRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EntryRow : DataRow {
            
            private EntryDataTable tableEntry;
            
            internal EntryRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEntry = ((EntryDataTable)(this.Table));
            }
            
            public string Text {
                get {
                    return ((string)(this[this.tableEntry.TextColumn]));
                }
                set {
                    this[this.tableEntry.TextColumn] = value;
                }
            }
            
            public string Timestamp {
                get {
                    return ((string)(this[this.tableEntry.TimestampColumn]));
                }
                set {
                    this[this.tableEntry.TimestampColumn] = value;
                }
            }
            
            public string MessageId {
                get {
                    return ((string)(this[this.tableEntry.MessageIdColumn]));
                }
                set {
                    this[this.tableEntry.MessageIdColumn] = value;
                }
            }
            
            public SessionLogRow SessionLogRow {
                get {
                    return ((SessionLogRow)(this.GetParentRow(this.Table.ParentRelations["SessionLog_Entry"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SessionLog_Entry"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EntryRowChangeEvent : EventArgs {
            
            private EntryRow eventRow;
            
            private DataRowAction eventAction;
            
            public EntryRowChangeEvent(EntryRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public EntryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DialogActionDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnDialogId;
            
            private DataColumn columnButton;
            
            private DataColumn columnName;
            
            internal DialogActionDataTable() : 
                    base("DialogAction") {
                this.InitClass();
            }
            
            internal DialogActionDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn DialogIdColumn {
                get {
                    return this.columnDialogId;
                }
            }
            
            internal DataColumn ButtonColumn {
                get {
                    return this.columnButton;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            public DialogActionRow this[int index] {
                get {
                    return ((DialogActionRow)(this.Rows[index]));
                }
            }
            
            public event DialogActionRowChangeEventHandler DialogActionRowChanged;
            
            public event DialogActionRowChangeEventHandler DialogActionRowChanging;
            
            public event DialogActionRowChangeEventHandler DialogActionRowDeleted;
            
            public event DialogActionRowChangeEventHandler DialogActionRowDeleting;
            
            public void AddDialogActionRow(DialogActionRow row) {
                this.Rows.Add(row);
            }
            
            public DialogActionRow AddDialogActionRow(string DialogId, string Button, string Name) {
                DialogActionRow rowDialogActionRow = ((DialogActionRow)(this.NewRow()));
                rowDialogActionRow.ItemArray = new object[] {
                        DialogId,
                        Button,
                        Name};
                this.Rows.Add(rowDialogActionRow);
                return rowDialogActionRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DialogActionDataTable cln = ((DialogActionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DialogActionDataTable();
            }
            
            internal void InitVars() {
                this.columnDialogId = this.Columns["DialogId"];
                this.columnButton = this.Columns["Button"];
                this.columnName = this.Columns["Name"];
            }
            
            private void InitClass() {
                this.columnDialogId = new DataColumn("DialogId", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDialogId);
                this.columnButton = new DataColumn("Button", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnButton);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.columnDialogId.AllowDBNull = false;
                this.columnDialogId.Namespace = "";
                this.columnButton.AllowDBNull = false;
                this.columnButton.Namespace = "";
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
            }
            
            public DialogActionRow NewDialogActionRow() {
                return ((DialogActionRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DialogActionRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DialogActionRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DialogActionRowChanged != null)) {
                    this.DialogActionRowChanged(this, new DialogActionRowChangeEvent(((DialogActionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DialogActionRowChanging != null)) {
                    this.DialogActionRowChanging(this, new DialogActionRowChangeEvent(((DialogActionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DialogActionRowDeleted != null)) {
                    this.DialogActionRowDeleted(this, new DialogActionRowChangeEvent(((DialogActionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DialogActionRowDeleting != null)) {
                    this.DialogActionRowDeleting(this, new DialogActionRowChangeEvent(((DialogActionRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDialogActionRow(DialogActionRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DialogActionRow : DataRow {
            
            private DialogActionDataTable tableDialogAction;
            
            internal DialogActionRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDialogAction = ((DialogActionDataTable)(this.Table));
            }
            
            public string DialogId {
                get {
                    return ((string)(this[this.tableDialogAction.DialogIdColumn]));
                }
                set {
                    this[this.tableDialogAction.DialogIdColumn] = value;
                }
            }
            
            public string Button {
                get {
                    return ((string)(this[this.tableDialogAction.ButtonColumn]));
                }
                set {
                    this[this.tableDialogAction.ButtonColumn] = value;
                }
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableDialogAction.NameColumn]));
                }
                set {
                    this[this.tableDialogAction.NameColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DialogActionRowChangeEvent : EventArgs {
            
            private DialogActionRow eventRow;
            
            private DataRowAction eventAction;
            
            public DialogActionRowChangeEvent(DialogActionRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DialogActionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProductionParameterSettingsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnProductionParameterSettings_Id;
            
            internal ProductionParameterSettingsDataTable() : 
                    base("ProductionParameterSettings") {
                this.InitClass();
            }
            
            internal ProductionParameterSettingsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            public ProductionParameterSettingsRow this[int index] {
                get {
                    return ((ProductionParameterSettingsRow)(this.Rows[index]));
                }
            }
            
            public event ProductionParameterSettingsRowChangeEventHandler ProductionParameterSettingsRowChanged;
            
            public event ProductionParameterSettingsRowChangeEventHandler ProductionParameterSettingsRowChanging;
            
            public event ProductionParameterSettingsRowChangeEventHandler ProductionParameterSettingsRowDeleted;
            
            public event ProductionParameterSettingsRowChangeEventHandler ProductionParameterSettingsRowDeleting;
            
            public void AddProductionParameterSettingsRow(ProductionParameterSettingsRow row) {
                this.Rows.Add(row);
            }
            
            public ProductionParameterSettingsRow AddProductionParameterSettingsRow() {
                ProductionParameterSettingsRow rowProductionParameterSettingsRow = ((ProductionParameterSettingsRow)(this.NewRow()));
                rowProductionParameterSettingsRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowProductionParameterSettingsRow);
                return rowProductionParameterSettingsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ProductionParameterSettingsDataTable cln = ((ProductionParameterSettingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ProductionParameterSettingsDataTable();
            }
            
            internal void InitVars() {
                this.columnProductionParameterSettings_Id = this.Columns["ProductionParameterSettings_Id"];
            }
            
            private void InitClass() {
                this.columnProductionParameterSettings_Id = new DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnProductionParameterSettings_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnProductionParameterSettings_Id}, true));
                this.columnProductionParameterSettings_Id.AutoIncrement = true;
                this.columnProductionParameterSettings_Id.AllowDBNull = false;
                this.columnProductionParameterSettings_Id.Unique = true;
            }
            
            public ProductionParameterSettingsRow NewProductionParameterSettingsRow() {
                return ((ProductionParameterSettingsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ProductionParameterSettingsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ProductionParameterSettingsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProductionParameterSettingsRowChanged != null)) {
                    this.ProductionParameterSettingsRowChanged(this, new ProductionParameterSettingsRowChangeEvent(((ProductionParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProductionParameterSettingsRowChanging != null)) {
                    this.ProductionParameterSettingsRowChanging(this, new ProductionParameterSettingsRowChangeEvent(((ProductionParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProductionParameterSettingsRowDeleted != null)) {
                    this.ProductionParameterSettingsRowDeleted(this, new ProductionParameterSettingsRowChangeEvent(((ProductionParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProductionParameterSettingsRowDeleting != null)) {
                    this.ProductionParameterSettingsRowDeleting(this, new ProductionParameterSettingsRowChangeEvent(((ProductionParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProductionParameterSettingsRow(ProductionParameterSettingsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProductionParameterSettingsRow : DataRow {
            
            private ProductionParameterSettingsDataTable tableProductionParameterSettings;
            
            internal ProductionParameterSettingsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableProductionParameterSettings = ((ProductionParameterSettingsDataTable)(this.Table));
            }
            
            public ServerRow[] GetServerRows() {
                return ((ServerRow[])(this.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Server"])));
            }
            
            public ModesRow[] GetModesRows() {
                return ((ModesRow[])(this.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Modes"])));
            }
            
            public CachingRow[] GetCachingRows() {
                return ((CachingRow[])(this.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Caching"])));
            }
            
            public RecordingRow[] GetRecordingRows() {
                return ((RecordingRow[])(this.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Recording"])));
            }
            
            public VerifyRow[] GetVerifyRows() {
                return ((VerifyRow[])(this.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Verify"])));
            }
            
            public PrintingRow[] GetPrintingRows() {
                return ((PrintingRow[])(this.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Printing"])));
            }
            
            public AutoloaderRow[] GetAutoloaderRows() {
                return ((AutoloaderRow[])(this.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Autoloader"])));
            }
            
            public ReadingRow[] GetReadingRows() {
                return ((ReadingRow[])(this.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Reading"])));
            }
            
            public MediaCodesRow[] GetMediaCodesRows() {
                return ((MediaCodesRow[])(this.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_MediaCodes"])));
            }
            
            public KioskModeRow[] GetKioskModeRows() {
                return ((KioskModeRow[])(this.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_KioskMode"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProductionParameterSettingsRowChangeEvent : EventArgs {
            
            private ProductionParameterSettingsRow eventRow;
            
            private DataRowAction eventAction;
            
            public ProductionParameterSettingsRowChangeEvent(ProductionParameterSettingsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ProductionParameterSettingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnDescription;
            
            private DataColumn columnOrderStatusUpdateInterval;
            
            private DataColumn columnProductionParameterSettings_Id;
            
            internal ServerDataTable() : 
                    base("Server") {
                this.InitClass();
            }
            
            internal ServerDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn OrderStatusUpdateIntervalColumn {
                get {
                    return this.columnOrderStatusUpdateInterval;
                }
            }
            
            internal DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            public ServerRow this[int index] {
                get {
                    return ((ServerRow)(this.Rows[index]));
                }
            }
            
            public event ServerRowChangeEventHandler ServerRowChanged;
            
            public event ServerRowChangeEventHandler ServerRowChanging;
            
            public event ServerRowChangeEventHandler ServerRowDeleted;
            
            public event ServerRowChangeEventHandler ServerRowDeleting;
            
            public void AddServerRow(ServerRow row) {
                this.Rows.Add(row);
            }
            
            public ServerRow AddServerRow(string Description, string OrderStatusUpdateInterval, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Server) {
                ServerRow rowServerRow = ((ServerRow)(this.NewRow()));
                rowServerRow.ItemArray = new object[] {
                        Description,
                        OrderStatusUpdateInterval,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Server[0]};
                this.Rows.Add(rowServerRow);
                return rowServerRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ServerDataTable cln = ((ServerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ServerDataTable();
            }
            
            internal void InitVars() {
                this.columnDescription = this.Columns["Description"];
                this.columnOrderStatusUpdateInterval = this.Columns["OrderStatusUpdateInterval"];
                this.columnProductionParameterSettings_Id = this.Columns["ProductionParameterSettings_Id"];
            }
            
            private void InitClass() {
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDescription);
                this.columnOrderStatusUpdateInterval = new DataColumn("OrderStatusUpdateInterval", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOrderStatusUpdateInterval);
                this.columnProductionParameterSettings_Id = new DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnProductionParameterSettings_Id);
                this.columnDescription.Namespace = "";
                this.columnOrderStatusUpdateInterval.AllowDBNull = false;
                this.columnOrderStatusUpdateInterval.Namespace = "";
            }
            
            public ServerRow NewServerRow() {
                return ((ServerRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ServerRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ServerRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerRowChanged != null)) {
                    this.ServerRowChanged(this, new ServerRowChangeEvent(((ServerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerRowChanging != null)) {
                    this.ServerRowChanging(this, new ServerRowChangeEvent(((ServerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerRowDeleted != null)) {
                    this.ServerRowDeleted(this, new ServerRowChangeEvent(((ServerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerRowDeleting != null)) {
                    this.ServerRowDeleting(this, new ServerRowChangeEvent(((ServerRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveServerRow(ServerRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerRow : DataRow {
            
            private ServerDataTable tableServer;
            
            internal ServerRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableServer = ((ServerDataTable)(this.Table));
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableServer.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServer.DescriptionColumn] = value;
                }
            }
            
            public string OrderStatusUpdateInterval {
                get {
                    return ((string)(this[this.tableServer.OrderStatusUpdateIntervalColumn]));
                }
                set {
                    this[this.tableServer.OrderStatusUpdateIntervalColumn] = value;
                }
            }
            
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Server"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Server"]);
                }
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableServer.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableServer.DescriptionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerRowChangeEvent : EventArgs {
            
            private ServerRow eventRow;
            
            private DataRowAction eventAction;
            
            public ServerRowChangeEvent(ServerRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ServerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ModesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnServerMode;
            
            private DataColumn columnOperatingMode;
            
            private DataColumn columnUseFIFOMode;
            
            private DataColumn columnProductionParameterSettings_Id;
            
            internal ModesDataTable() : 
                    base("Modes") {
                this.InitClass();
            }
            
            internal ModesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ServerModeColumn {
                get {
                    return this.columnServerMode;
                }
            }
            
            internal DataColumn OperatingModeColumn {
                get {
                    return this.columnOperatingMode;
                }
            }
            
            internal DataColumn UseFIFOModeColumn {
                get {
                    return this.columnUseFIFOMode;
                }
            }
            
            internal DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            public ModesRow this[int index] {
                get {
                    return ((ModesRow)(this.Rows[index]));
                }
            }
            
            public event ModesRowChangeEventHandler ModesRowChanged;
            
            public event ModesRowChangeEventHandler ModesRowChanging;
            
            public event ModesRowChangeEventHandler ModesRowDeleted;
            
            public event ModesRowChangeEventHandler ModesRowDeleting;
            
            public void AddModesRow(ModesRow row) {
                this.Rows.Add(row);
            }
            
            public ModesRow AddModesRow(string ServerMode, string OperatingMode, string UseFIFOMode, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Modes) {
                ModesRow rowModesRow = ((ModesRow)(this.NewRow()));
                rowModesRow.ItemArray = new object[] {
                        ServerMode,
                        OperatingMode,
                        UseFIFOMode,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Modes[0]};
                this.Rows.Add(rowModesRow);
                return rowModesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ModesDataTable cln = ((ModesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ModesDataTable();
            }
            
            internal void InitVars() {
                this.columnServerMode = this.Columns["ServerMode"];
                this.columnOperatingMode = this.Columns["OperatingMode"];
                this.columnUseFIFOMode = this.Columns["UseFIFOMode"];
                this.columnProductionParameterSettings_Id = this.Columns["ProductionParameterSettings_Id"];
            }
            
            private void InitClass() {
                this.columnServerMode = new DataColumn("ServerMode", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnServerMode);
                this.columnOperatingMode = new DataColumn("OperatingMode", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOperatingMode);
                this.columnUseFIFOMode = new DataColumn("UseFIFOMode", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUseFIFOMode);
                this.columnProductionParameterSettings_Id = new DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnProductionParameterSettings_Id);
                this.columnServerMode.Namespace = "";
                this.columnServerMode.DefaultValue = "Attended";
                this.columnOperatingMode.Namespace = "";
                this.columnOperatingMode.DefaultValue = "Normal";
                this.columnUseFIFOMode.Namespace = "";
                this.columnUseFIFOMode.DefaultValue = "false";
            }
            
            public ModesRow NewModesRow() {
                return ((ModesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ModesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ModesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ModesRowChanged != null)) {
                    this.ModesRowChanged(this, new ModesRowChangeEvent(((ModesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ModesRowChanging != null)) {
                    this.ModesRowChanging(this, new ModesRowChangeEvent(((ModesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ModesRowDeleted != null)) {
                    this.ModesRowDeleted(this, new ModesRowChangeEvent(((ModesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ModesRowDeleting != null)) {
                    this.ModesRowDeleting(this, new ModesRowChangeEvent(((ModesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveModesRow(ModesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ModesRow : DataRow {
            
            private ModesDataTable tableModes;
            
            internal ModesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableModes = ((ModesDataTable)(this.Table));
            }
            
            public string ServerMode {
                get {
                    try {
                        return ((string)(this[this.tableModes.ServerModeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModes.ServerModeColumn] = value;
                }
            }
            
            public string OperatingMode {
                get {
                    try {
                        return ((string)(this[this.tableModes.OperatingModeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModes.OperatingModeColumn] = value;
                }
            }
            
            public string UseFIFOMode {
                get {
                    try {
                        return ((string)(this[this.tableModes.UseFIFOModeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModes.UseFIFOModeColumn] = value;
                }
            }
            
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Modes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Modes"]);
                }
            }
            
            public bool IsServerModeNull() {
                return this.IsNull(this.tableModes.ServerModeColumn);
            }
            
            public void SetServerModeNull() {
                this[this.tableModes.ServerModeColumn] = System.Convert.DBNull;
            }
            
            public bool IsOperatingModeNull() {
                return this.IsNull(this.tableModes.OperatingModeColumn);
            }
            
            public void SetOperatingModeNull() {
                this[this.tableModes.OperatingModeColumn] = System.Convert.DBNull;
            }
            
            public bool IsUseFIFOModeNull() {
                return this.IsNull(this.tableModes.UseFIFOModeColumn);
            }
            
            public void SetUseFIFOModeNull() {
                this[this.tableModes.UseFIFOModeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ModesRowChangeEvent : EventArgs {
            
            private ModesRow eventRow;
            
            private DataRowAction eventAction;
            
            public ModesRowChangeEvent(ModesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ModesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CachingDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnUseStaticCaching;
            
            private DataColumn columnCacheDriveLetters;
            
            private DataColumn columnProductionParameterSettings_Id;
            
            internal CachingDataTable() : 
                    base("Caching") {
                this.InitClass();
            }
            
            internal CachingDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn UseStaticCachingColumn {
                get {
                    return this.columnUseStaticCaching;
                }
            }
            
            internal DataColumn CacheDriveLettersColumn {
                get {
                    return this.columnCacheDriveLetters;
                }
            }
            
            internal DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            public CachingRow this[int index] {
                get {
                    return ((CachingRow)(this.Rows[index]));
                }
            }
            
            public event CachingRowChangeEventHandler CachingRowChanged;
            
            public event CachingRowChangeEventHandler CachingRowChanging;
            
            public event CachingRowChangeEventHandler CachingRowDeleted;
            
            public event CachingRowChangeEventHandler CachingRowDeleting;
            
            public void AddCachingRow(CachingRow row) {
                this.Rows.Add(row);
            }
            
            public CachingRow AddCachingRow(string UseStaticCaching, string CacheDriveLetters, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Caching) {
                CachingRow rowCachingRow = ((CachingRow)(this.NewRow()));
                rowCachingRow.ItemArray = new object[] {
                        UseStaticCaching,
                        CacheDriveLetters,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Caching[0]};
                this.Rows.Add(rowCachingRow);
                return rowCachingRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CachingDataTable cln = ((CachingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CachingDataTable();
            }
            
            internal void InitVars() {
                this.columnUseStaticCaching = this.Columns["UseStaticCaching"];
                this.columnCacheDriveLetters = this.Columns["CacheDriveLetters"];
                this.columnProductionParameterSettings_Id = this.Columns["ProductionParameterSettings_Id"];
            }
            
            private void InitClass() {
                this.columnUseStaticCaching = new DataColumn("UseStaticCaching", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUseStaticCaching);
                this.columnCacheDriveLetters = new DataColumn("CacheDriveLetters", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCacheDriveLetters);
                this.columnProductionParameterSettings_Id = new DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnProductionParameterSettings_Id);
                this.columnUseStaticCaching.Namespace = "";
                this.columnUseStaticCaching.DefaultValue = "false";
                this.columnCacheDriveLetters.Namespace = "";
            }
            
            public CachingRow NewCachingRow() {
                return ((CachingRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CachingRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CachingRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CachingRowChanged != null)) {
                    this.CachingRowChanged(this, new CachingRowChangeEvent(((CachingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CachingRowChanging != null)) {
                    this.CachingRowChanging(this, new CachingRowChangeEvent(((CachingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CachingRowDeleted != null)) {
                    this.CachingRowDeleted(this, new CachingRowChangeEvent(((CachingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CachingRowDeleting != null)) {
                    this.CachingRowDeleting(this, new CachingRowChangeEvent(((CachingRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCachingRow(CachingRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CachingRow : DataRow {
            
            private CachingDataTable tableCaching;
            
            internal CachingRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCaching = ((CachingDataTable)(this.Table));
            }
            
            public string UseStaticCaching {
                get {
                    try {
                        return ((string)(this[this.tableCaching.UseStaticCachingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaching.UseStaticCachingColumn] = value;
                }
            }
            
            public string CacheDriveLetters {
                get {
                    try {
                        return ((string)(this[this.tableCaching.CacheDriveLettersColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCaching.CacheDriveLettersColumn] = value;
                }
            }
            
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Caching"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Caching"]);
                }
            }
            
            public bool IsUseStaticCachingNull() {
                return this.IsNull(this.tableCaching.UseStaticCachingColumn);
            }
            
            public void SetUseStaticCachingNull() {
                this[this.tableCaching.UseStaticCachingColumn] = System.Convert.DBNull;
            }
            
            public bool IsCacheDriveLettersNull() {
                return this.IsNull(this.tableCaching.CacheDriveLettersColumn);
            }
            
            public void SetCacheDriveLettersNull() {
                this[this.tableCaching.CacheDriveLettersColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CachingRowChangeEvent : EventArgs {
            
            private CachingRow eventRow;
            
            private DataRowAction eventAction;
            
            public CachingRowChangeEvent(CachingRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CachingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RecordingDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnSimulateRecording;
            
            private DataColumn columnUseNewMediaOnly;
            
            private DataColumn columnMaxRecordingSpeed;
            
            private DataColumn columnMaxDVDRecordingSpeed;
            
            private DataColumn columnRejectNonISO;
            
            private DataColumn columnDisableISOExtentFixups;
            
            private DataColumn columnAddPostgapToISO;
            
            private DataColumn columnEnableUsing90_100MinuteCDRs;
            
            private DataColumn columnDestroyFailedRecordings;
            
            private DataColumn columnProductionParameterSettings_Id;
            
            internal RecordingDataTable() : 
                    base("Recording") {
                this.InitClass();
            }
            
            internal RecordingDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn SimulateRecordingColumn {
                get {
                    return this.columnSimulateRecording;
                }
            }
            
            internal DataColumn UseNewMediaOnlyColumn {
                get {
                    return this.columnUseNewMediaOnly;
                }
            }
            
            internal DataColumn MaxRecordingSpeedColumn {
                get {
                    return this.columnMaxRecordingSpeed;
                }
            }
            
            internal DataColumn MaxDVDRecordingSpeedColumn {
                get {
                    return this.columnMaxDVDRecordingSpeed;
                }
            }
            
            internal DataColumn RejectNonISOColumn {
                get {
                    return this.columnRejectNonISO;
                }
            }
            
            internal DataColumn DisableISOExtentFixupsColumn {
                get {
                    return this.columnDisableISOExtentFixups;
                }
            }
            
            internal DataColumn AddPostgapToISOColumn {
                get {
                    return this.columnAddPostgapToISO;
                }
            }
            
            internal DataColumn EnableUsing90_100MinuteCDRsColumn {
                get {
                    return this.columnEnableUsing90_100MinuteCDRs;
                }
            }
            
            internal DataColumn DestroyFailedRecordingsColumn {
                get {
                    return this.columnDestroyFailedRecordings;
                }
            }
            
            internal DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            public RecordingRow this[int index] {
                get {
                    return ((RecordingRow)(this.Rows[index]));
                }
            }
            
            public event RecordingRowChangeEventHandler RecordingRowChanged;
            
            public event RecordingRowChangeEventHandler RecordingRowChanging;
            
            public event RecordingRowChangeEventHandler RecordingRowDeleted;
            
            public event RecordingRowChangeEventHandler RecordingRowDeleting;
            
            public void AddRecordingRow(RecordingRow row) {
                this.Rows.Add(row);
            }
            
            public RecordingRow AddRecordingRow(string SimulateRecording, string UseNewMediaOnly, string MaxRecordingSpeed, string MaxDVDRecordingSpeed, string RejectNonISO, string DisableISOExtentFixups, string AddPostgapToISO, string EnableUsing90_100MinuteCDRs, string DestroyFailedRecordings, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Recording) {
                RecordingRow rowRecordingRow = ((RecordingRow)(this.NewRow()));
                rowRecordingRow.ItemArray = new object[] {
                        SimulateRecording,
                        UseNewMediaOnly,
                        MaxRecordingSpeed,
                        MaxDVDRecordingSpeed,
                        RejectNonISO,
                        DisableISOExtentFixups,
                        AddPostgapToISO,
                        EnableUsing90_100MinuteCDRs,
                        DestroyFailedRecordings,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Recording[0]};
                this.Rows.Add(rowRecordingRow);
                return rowRecordingRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                RecordingDataTable cln = ((RecordingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new RecordingDataTable();
            }
            
            internal void InitVars() {
                this.columnSimulateRecording = this.Columns["SimulateRecording"];
                this.columnUseNewMediaOnly = this.Columns["UseNewMediaOnly"];
                this.columnMaxRecordingSpeed = this.Columns["MaxRecordingSpeed"];
                this.columnMaxDVDRecordingSpeed = this.Columns["MaxDVDRecordingSpeed"];
                this.columnRejectNonISO = this.Columns["RejectNonISO"];
                this.columnDisableISOExtentFixups = this.Columns["DisableISOExtentFixups"];
                this.columnAddPostgapToISO = this.Columns["AddPostgapToISO"];
                this.columnEnableUsing90_100MinuteCDRs = this.Columns["EnableUsing90_100MinuteCDRs"];
                this.columnDestroyFailedRecordings = this.Columns["DestroyFailedRecordings"];
                this.columnProductionParameterSettings_Id = this.Columns["ProductionParameterSettings_Id"];
            }
            
            private void InitClass() {
                this.columnSimulateRecording = new DataColumn("SimulateRecording", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSimulateRecording);
                this.columnUseNewMediaOnly = new DataColumn("UseNewMediaOnly", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUseNewMediaOnly);
                this.columnMaxRecordingSpeed = new DataColumn("MaxRecordingSpeed", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnMaxRecordingSpeed);
                this.columnMaxDVDRecordingSpeed = new DataColumn("MaxDVDRecordingSpeed", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnMaxDVDRecordingSpeed);
                this.columnRejectNonISO = new DataColumn("RejectNonISO", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRejectNonISO);
                this.columnDisableISOExtentFixups = new DataColumn("DisableISOExtentFixups", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDisableISOExtentFixups);
                this.columnAddPostgapToISO = new DataColumn("AddPostgapToISO", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAddPostgapToISO);
                this.columnEnableUsing90_100MinuteCDRs = new DataColumn("EnableUsing90_100MinuteCDRs", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnEnableUsing90_100MinuteCDRs);
                this.columnDestroyFailedRecordings = new DataColumn("DestroyFailedRecordings", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDestroyFailedRecordings);
                this.columnProductionParameterSettings_Id = new DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnProductionParameterSettings_Id);
                this.columnSimulateRecording.Namespace = "";
                this.columnSimulateRecording.DefaultValue = "false";
                this.columnUseNewMediaOnly.Namespace = "";
                this.columnUseNewMediaOnly.DefaultValue = "false";
                this.columnMaxRecordingSpeed.AllowDBNull = false;
                this.columnMaxRecordingSpeed.Namespace = "";
                this.columnMaxDVDRecordingSpeed.AllowDBNull = false;
                this.columnMaxDVDRecordingSpeed.Namespace = "";
                this.columnRejectNonISO.Namespace = "";
                this.columnRejectNonISO.DefaultValue = "true";
                this.columnDisableISOExtentFixups.Namespace = "";
                this.columnDisableISOExtentFixups.DefaultValue = "false";
                this.columnAddPostgapToISO.Namespace = "";
                this.columnAddPostgapToISO.DefaultValue = "Disabled";
                this.columnEnableUsing90_100MinuteCDRs.Namespace = "";
                this.columnEnableUsing90_100MinuteCDRs.DefaultValue = "false";
                this.columnDestroyFailedRecordings.Namespace = "";
                this.columnDestroyFailedRecordings.DefaultValue = "false";
            }
            
            public RecordingRow NewRecordingRow() {
                return ((RecordingRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new RecordingRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(RecordingRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RecordingRowChanged != null)) {
                    this.RecordingRowChanged(this, new RecordingRowChangeEvent(((RecordingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RecordingRowChanging != null)) {
                    this.RecordingRowChanging(this, new RecordingRowChangeEvent(((RecordingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RecordingRowDeleted != null)) {
                    this.RecordingRowDeleted(this, new RecordingRowChangeEvent(((RecordingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RecordingRowDeleting != null)) {
                    this.RecordingRowDeleting(this, new RecordingRowChangeEvent(((RecordingRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveRecordingRow(RecordingRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RecordingRow : DataRow {
            
            private RecordingDataTable tableRecording;
            
            internal RecordingRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableRecording = ((RecordingDataTable)(this.Table));
            }
            
            public string SimulateRecording {
                get {
                    try {
                        return ((string)(this[this.tableRecording.SimulateRecordingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecording.SimulateRecordingColumn] = value;
                }
            }
            
            public string UseNewMediaOnly {
                get {
                    try {
                        return ((string)(this[this.tableRecording.UseNewMediaOnlyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecording.UseNewMediaOnlyColumn] = value;
                }
            }
            
            public string MaxRecordingSpeed {
                get {
                    return ((string)(this[this.tableRecording.MaxRecordingSpeedColumn]));
                }
                set {
                    this[this.tableRecording.MaxRecordingSpeedColumn] = value;
                }
            }
            
            public string MaxDVDRecordingSpeed {
                get {
                    return ((string)(this[this.tableRecording.MaxDVDRecordingSpeedColumn]));
                }
                set {
                    this[this.tableRecording.MaxDVDRecordingSpeedColumn] = value;
                }
            }
            
            public string RejectNonISO {
                get {
                    try {
                        return ((string)(this[this.tableRecording.RejectNonISOColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecording.RejectNonISOColumn] = value;
                }
            }
            
            public string DisableISOExtentFixups {
                get {
                    try {
                        return ((string)(this[this.tableRecording.DisableISOExtentFixupsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecording.DisableISOExtentFixupsColumn] = value;
                }
            }
            
            public string AddPostgapToISO {
                get {
                    try {
                        return ((string)(this[this.tableRecording.AddPostgapToISOColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecording.AddPostgapToISOColumn] = value;
                }
            }
            
            public string EnableUsing90_100MinuteCDRs {
                get {
                    try {
                        return ((string)(this[this.tableRecording.EnableUsing90_100MinuteCDRsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecording.EnableUsing90_100MinuteCDRsColumn] = value;
                }
            }
            
            public string DestroyFailedRecordings {
                get {
                    try {
                        return ((string)(this[this.tableRecording.DestroyFailedRecordingsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecording.DestroyFailedRecordingsColumn] = value;
                }
            }
            
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Recording"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Recording"]);
                }
            }
            
            public bool IsSimulateRecordingNull() {
                return this.IsNull(this.tableRecording.SimulateRecordingColumn);
            }
            
            public void SetSimulateRecordingNull() {
                this[this.tableRecording.SimulateRecordingColumn] = System.Convert.DBNull;
            }
            
            public bool IsUseNewMediaOnlyNull() {
                return this.IsNull(this.tableRecording.UseNewMediaOnlyColumn);
            }
            
            public void SetUseNewMediaOnlyNull() {
                this[this.tableRecording.UseNewMediaOnlyColumn] = System.Convert.DBNull;
            }
            
            public bool IsRejectNonISONull() {
                return this.IsNull(this.tableRecording.RejectNonISOColumn);
            }
            
            public void SetRejectNonISONull() {
                this[this.tableRecording.RejectNonISOColumn] = System.Convert.DBNull;
            }
            
            public bool IsDisableISOExtentFixupsNull() {
                return this.IsNull(this.tableRecording.DisableISOExtentFixupsColumn);
            }
            
            public void SetDisableISOExtentFixupsNull() {
                this[this.tableRecording.DisableISOExtentFixupsColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddPostgapToISONull() {
                return this.IsNull(this.tableRecording.AddPostgapToISOColumn);
            }
            
            public void SetAddPostgapToISONull() {
                this[this.tableRecording.AddPostgapToISOColumn] = System.Convert.DBNull;
            }
            
            public bool IsEnableUsing90_100MinuteCDRsNull() {
                return this.IsNull(this.tableRecording.EnableUsing90_100MinuteCDRsColumn);
            }
            
            public void SetEnableUsing90_100MinuteCDRsNull() {
                this[this.tableRecording.EnableUsing90_100MinuteCDRsColumn] = System.Convert.DBNull;
            }
            
            public bool IsDestroyFailedRecordingsNull() {
                return this.IsNull(this.tableRecording.DestroyFailedRecordingsColumn);
            }
            
            public void SetDestroyFailedRecordingsNull() {
                this[this.tableRecording.DestroyFailedRecordingsColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RecordingRowChangeEvent : EventArgs {
            
            private RecordingRow eventRow;
            
            private DataRowAction eventAction;
            
            public RecordingRowChangeEvent(RecordingRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public RecordingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VerifyDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnUseVerify;
            
            private DataColumn columnFrequency;
            
            private DataColumn columnIsChecksumDLLReady;
            
            private DataColumn columnUseChecksumDLL;
            
            private DataColumn columnChecksumDLLId;
            
            private DataColumn columnProductionParameterSettings_Id;
            
            internal VerifyDataTable() : 
                    base("Verify") {
                this.InitClass();
            }
            
            internal VerifyDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn UseVerifyColumn {
                get {
                    return this.columnUseVerify;
                }
            }
            
            internal DataColumn FrequencyColumn {
                get {
                    return this.columnFrequency;
                }
            }
            
            internal DataColumn IsChecksumDLLReadyColumn {
                get {
                    return this.columnIsChecksumDLLReady;
                }
            }
            
            internal DataColumn UseChecksumDLLColumn {
                get {
                    return this.columnUseChecksumDLL;
                }
            }
            
            internal DataColumn ChecksumDLLIdColumn {
                get {
                    return this.columnChecksumDLLId;
                }
            }
            
            internal DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            public VerifyRow this[int index] {
                get {
                    return ((VerifyRow)(this.Rows[index]));
                }
            }
            
            public event VerifyRowChangeEventHandler VerifyRowChanged;
            
            public event VerifyRowChangeEventHandler VerifyRowChanging;
            
            public event VerifyRowChangeEventHandler VerifyRowDeleted;
            
            public event VerifyRowChangeEventHandler VerifyRowDeleting;
            
            public void AddVerifyRow(VerifyRow row) {
                this.Rows.Add(row);
            }
            
            public VerifyRow AddVerifyRow(string UseVerify, string Frequency, string IsChecksumDLLReady, string UseChecksumDLL, string ChecksumDLLId, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Verify) {
                VerifyRow rowVerifyRow = ((VerifyRow)(this.NewRow()));
                rowVerifyRow.ItemArray = new object[] {
                        UseVerify,
                        Frequency,
                        IsChecksumDLLReady,
                        UseChecksumDLL,
                        ChecksumDLLId,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Verify[0]};
                this.Rows.Add(rowVerifyRow);
                return rowVerifyRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                VerifyDataTable cln = ((VerifyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new VerifyDataTable();
            }
            
            internal void InitVars() {
                this.columnUseVerify = this.Columns["UseVerify"];
                this.columnFrequency = this.Columns["Frequency"];
                this.columnIsChecksumDLLReady = this.Columns["IsChecksumDLLReady"];
                this.columnUseChecksumDLL = this.Columns["UseChecksumDLL"];
                this.columnChecksumDLLId = this.Columns["ChecksumDLLId"];
                this.columnProductionParameterSettings_Id = this.Columns["ProductionParameterSettings_Id"];
            }
            
            private void InitClass() {
                this.columnUseVerify = new DataColumn("UseVerify", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUseVerify);
                this.columnFrequency = new DataColumn("Frequency", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFrequency);
                this.columnIsChecksumDLLReady = new DataColumn("IsChecksumDLLReady", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnIsChecksumDLLReady);
                this.columnUseChecksumDLL = new DataColumn("UseChecksumDLL", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUseChecksumDLL);
                this.columnChecksumDLLId = new DataColumn("ChecksumDLLId", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnChecksumDLLId);
                this.columnProductionParameterSettings_Id = new DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnProductionParameterSettings_Id);
                this.columnUseVerify.Namespace = "";
                this.columnUseVerify.DefaultValue = "false";
                this.columnFrequency.AllowDBNull = false;
                this.columnFrequency.Namespace = "";
                this.columnIsChecksumDLLReady.Namespace = "";
                this.columnIsChecksumDLLReady.DefaultValue = "false";
                this.columnUseChecksumDLL.Namespace = "";
                this.columnUseChecksumDLL.DefaultValue = "false";
                this.columnChecksumDLLId.Namespace = "";
            }
            
            public VerifyRow NewVerifyRow() {
                return ((VerifyRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new VerifyRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(VerifyRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VerifyRowChanged != null)) {
                    this.VerifyRowChanged(this, new VerifyRowChangeEvent(((VerifyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VerifyRowChanging != null)) {
                    this.VerifyRowChanging(this, new VerifyRowChangeEvent(((VerifyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VerifyRowDeleted != null)) {
                    this.VerifyRowDeleted(this, new VerifyRowChangeEvent(((VerifyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VerifyRowDeleting != null)) {
                    this.VerifyRowDeleting(this, new VerifyRowChangeEvent(((VerifyRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveVerifyRow(VerifyRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VerifyRow : DataRow {
            
            private VerifyDataTable tableVerify;
            
            internal VerifyRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableVerify = ((VerifyDataTable)(this.Table));
            }
            
            public string UseVerify {
                get {
                    try {
                        return ((string)(this[this.tableVerify.UseVerifyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVerify.UseVerifyColumn] = value;
                }
            }
            
            public string Frequency {
                get {
                    return ((string)(this[this.tableVerify.FrequencyColumn]));
                }
                set {
                    this[this.tableVerify.FrequencyColumn] = value;
                }
            }
            
            public string IsChecksumDLLReady {
                get {
                    try {
                        return ((string)(this[this.tableVerify.IsChecksumDLLReadyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVerify.IsChecksumDLLReadyColumn] = value;
                }
            }
            
            public string UseChecksumDLL {
                get {
                    try {
                        return ((string)(this[this.tableVerify.UseChecksumDLLColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVerify.UseChecksumDLLColumn] = value;
                }
            }
            
            public string ChecksumDLLId {
                get {
                    try {
                        return ((string)(this[this.tableVerify.ChecksumDLLIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVerify.ChecksumDLLIdColumn] = value;
                }
            }
            
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Verify"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Verify"]);
                }
            }
            
            public bool IsUseVerifyNull() {
                return this.IsNull(this.tableVerify.UseVerifyColumn);
            }
            
            public void SetUseVerifyNull() {
                this[this.tableVerify.UseVerifyColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsChecksumDLLReadyNull() {
                return this.IsNull(this.tableVerify.IsChecksumDLLReadyColumn);
            }
            
            public void SetIsChecksumDLLReadyNull() {
                this[this.tableVerify.IsChecksumDLLReadyColumn] = System.Convert.DBNull;
            }
            
            public bool IsUseChecksumDLLNull() {
                return this.IsNull(this.tableVerify.UseChecksumDLLColumn);
            }
            
            public void SetUseChecksumDLLNull() {
                this[this.tableVerify.UseChecksumDLLColumn] = System.Convert.DBNull;
            }
            
            public bool IsChecksumDLLIdNull() {
                return this.IsNull(this.tableVerify.ChecksumDLLIdColumn);
            }
            
            public void SetChecksumDLLIdNull() {
                this[this.tableVerify.ChecksumDLLIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VerifyRowChangeEvent : EventArgs {
            
            private VerifyRow eventRow;
            
            private DataRowAction eventAction;
            
            public VerifyRowChangeEvent(VerifyRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public VerifyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PrintingDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnSimulatePrinting;
            
            private DataColumn columnRejectPattern;
            
            private DataColumn columnTakeOrdersWithLabelWithoutPrinter;
            
            private DataColumn columnErrorOnLowInkLevel;
            
            private DataColumn columnLowInkPercentage;
            
            private DataColumn columnProductionParameterSettings_Id;
            
            internal PrintingDataTable() : 
                    base("Printing") {
                this.InitClass();
            }
            
            internal PrintingDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn SimulatePrintingColumn {
                get {
                    return this.columnSimulatePrinting;
                }
            }
            
            internal DataColumn RejectPatternColumn {
                get {
                    return this.columnRejectPattern;
                }
            }
            
            internal DataColumn TakeOrdersWithLabelWithoutPrinterColumn {
                get {
                    return this.columnTakeOrdersWithLabelWithoutPrinter;
                }
            }
            
            internal DataColumn ErrorOnLowInkLevelColumn {
                get {
                    return this.columnErrorOnLowInkLevel;
                }
            }
            
            internal DataColumn LowInkPercentageColumn {
                get {
                    return this.columnLowInkPercentage;
                }
            }
            
            internal DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            public PrintingRow this[int index] {
                get {
                    return ((PrintingRow)(this.Rows[index]));
                }
            }
            
            public event PrintingRowChangeEventHandler PrintingRowChanged;
            
            public event PrintingRowChangeEventHandler PrintingRowChanging;
            
            public event PrintingRowChangeEventHandler PrintingRowDeleted;
            
            public event PrintingRowChangeEventHandler PrintingRowDeleting;
            
            public void AddPrintingRow(PrintingRow row) {
                this.Rows.Add(row);
            }
            
            public PrintingRow AddPrintingRow(string SimulatePrinting, string RejectPattern, string TakeOrdersWithLabelWithoutPrinter, string ErrorOnLowInkLevel, string LowInkPercentage, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Printing) {
                PrintingRow rowPrintingRow = ((PrintingRow)(this.NewRow()));
                rowPrintingRow.ItemArray = new object[] {
                        SimulatePrinting,
                        RejectPattern,
                        TakeOrdersWithLabelWithoutPrinter,
                        ErrorOnLowInkLevel,
                        LowInkPercentage,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Printing[0]};
                this.Rows.Add(rowPrintingRow);
                return rowPrintingRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PrintingDataTable cln = ((PrintingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PrintingDataTable();
            }
            
            internal void InitVars() {
                this.columnSimulatePrinting = this.Columns["SimulatePrinting"];
                this.columnRejectPattern = this.Columns["RejectPattern"];
                this.columnTakeOrdersWithLabelWithoutPrinter = this.Columns["TakeOrdersWithLabelWithoutPrinter"];
                this.columnErrorOnLowInkLevel = this.Columns["ErrorOnLowInkLevel"];
                this.columnLowInkPercentage = this.Columns["LowInkPercentage"];
                this.columnProductionParameterSettings_Id = this.Columns["ProductionParameterSettings_Id"];
            }
            
            private void InitClass() {
                this.columnSimulatePrinting = new DataColumn("SimulatePrinting", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSimulatePrinting);
                this.columnRejectPattern = new DataColumn("RejectPattern", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRejectPattern);
                this.columnTakeOrdersWithLabelWithoutPrinter = new DataColumn("TakeOrdersWithLabelWithoutPrinter", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTakeOrdersWithLabelWithoutPrinter);
                this.columnErrorOnLowInkLevel = new DataColumn("ErrorOnLowInkLevel", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnErrorOnLowInkLevel);
                this.columnLowInkPercentage = new DataColumn("LowInkPercentage", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnLowInkPercentage);
                this.columnProductionParameterSettings_Id = new DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnProductionParameterSettings_Id);
                this.columnSimulatePrinting.Namespace = "";
                this.columnSimulatePrinting.DefaultValue = "false";
                this.columnRejectPattern.Namespace = "";
                this.columnRejectPattern.DefaultValue = "Disabled";
                this.columnTakeOrdersWithLabelWithoutPrinter.Namespace = "";
                this.columnTakeOrdersWithLabelWithoutPrinter.DefaultValue = "true";
                this.columnErrorOnLowInkLevel.Namespace = "";
                this.columnErrorOnLowInkLevel.DefaultValue = "false";
                this.columnLowInkPercentage.Namespace = "";
            }
            
            public PrintingRow NewPrintingRow() {
                return ((PrintingRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PrintingRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PrintingRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrintingRowChanged != null)) {
                    this.PrintingRowChanged(this, new PrintingRowChangeEvent(((PrintingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrintingRowChanging != null)) {
                    this.PrintingRowChanging(this, new PrintingRowChangeEvent(((PrintingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrintingRowDeleted != null)) {
                    this.PrintingRowDeleted(this, new PrintingRowChangeEvent(((PrintingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrintingRowDeleting != null)) {
                    this.PrintingRowDeleting(this, new PrintingRowChangeEvent(((PrintingRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePrintingRow(PrintingRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PrintingRow : DataRow {
            
            private PrintingDataTable tablePrinting;
            
            internal PrintingRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrinting = ((PrintingDataTable)(this.Table));
            }
            
            public string SimulatePrinting {
                get {
                    try {
                        return ((string)(this[this.tablePrinting.SimulatePrintingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrinting.SimulatePrintingColumn] = value;
                }
            }
            
            public string RejectPattern {
                get {
                    try {
                        return ((string)(this[this.tablePrinting.RejectPatternColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrinting.RejectPatternColumn] = value;
                }
            }
            
            public string TakeOrdersWithLabelWithoutPrinter {
                get {
                    try {
                        return ((string)(this[this.tablePrinting.TakeOrdersWithLabelWithoutPrinterColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrinting.TakeOrdersWithLabelWithoutPrinterColumn] = value;
                }
            }
            
            public string ErrorOnLowInkLevel {
                get {
                    try {
                        return ((string)(this[this.tablePrinting.ErrorOnLowInkLevelColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrinting.ErrorOnLowInkLevelColumn] = value;
                }
            }
            
            public string LowInkPercentage {
                get {
                    try {
                        return ((string)(this[this.tablePrinting.LowInkPercentageColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrinting.LowInkPercentageColumn] = value;
                }
            }
            
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Printing"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Printing"]);
                }
            }
            
            public bool IsSimulatePrintingNull() {
                return this.IsNull(this.tablePrinting.SimulatePrintingColumn);
            }
            
            public void SetSimulatePrintingNull() {
                this[this.tablePrinting.SimulatePrintingColumn] = System.Convert.DBNull;
            }
            
            public bool IsRejectPatternNull() {
                return this.IsNull(this.tablePrinting.RejectPatternColumn);
            }
            
            public void SetRejectPatternNull() {
                this[this.tablePrinting.RejectPatternColumn] = System.Convert.DBNull;
            }
            
            public bool IsTakeOrdersWithLabelWithoutPrinterNull() {
                return this.IsNull(this.tablePrinting.TakeOrdersWithLabelWithoutPrinterColumn);
            }
            
            public void SetTakeOrdersWithLabelWithoutPrinterNull() {
                this[this.tablePrinting.TakeOrdersWithLabelWithoutPrinterColumn] = System.Convert.DBNull;
            }
            
            public bool IsErrorOnLowInkLevelNull() {
                return this.IsNull(this.tablePrinting.ErrorOnLowInkLevelColumn);
            }
            
            public void SetErrorOnLowInkLevelNull() {
                this[this.tablePrinting.ErrorOnLowInkLevelColumn] = System.Convert.DBNull;
            }
            
            public bool IsLowInkPercentageNull() {
                return this.IsNull(this.tablePrinting.LowInkPercentageColumn);
            }
            
            public void SetLowInkPercentageNull() {
                this[this.tablePrinting.LowInkPercentageColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PrintingRowChangeEvent : EventArgs {
            
            private PrintingRow eventRow;
            
            private DataRowAction eventAction;
            
            public PrintingRowChangeEvent(PrintingRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PrintingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AutoloaderDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnLoaderNumber;
            
            private DataColumn columnMailslotSetting;
            
            private DataColumn columnAvailableMailslotSettings;
            
            private DataColumn columnMediaSize;
            
            private DataColumn columnAvailableMediaSizes;
            
            private DataColumn columnMediaType;
            
            private DataColumn columnAvailableMediaTypes;
            
            private DataColumn columnAvailableMediaTypes2;
            
            private DataColumn columnAutoloader_Id;
            
            private DataColumn columnProductionParameterSettings_Id;
            
            internal AutoloaderDataTable() : 
                    base("Autoloader") {
                this.InitClass();
            }
            
            internal AutoloaderDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn LoaderNumberColumn {
                get {
                    return this.columnLoaderNumber;
                }
            }
            
            internal DataColumn MailslotSettingColumn {
                get {
                    return this.columnMailslotSetting;
                }
            }
            
            internal DataColumn AvailableMailslotSettingsColumn {
                get {
                    return this.columnAvailableMailslotSettings;
                }
            }
            
            internal DataColumn MediaSizeColumn {
                get {
                    return this.columnMediaSize;
                }
            }
            
            internal DataColumn AvailableMediaSizesColumn {
                get {
                    return this.columnAvailableMediaSizes;
                }
            }
            
            internal DataColumn MediaTypeColumn {
                get {
                    return this.columnMediaType;
                }
            }
            
            internal DataColumn AvailableMediaTypesColumn {
                get {
                    return this.columnAvailableMediaTypes;
                }
            }
            
            internal DataColumn AvailableMediaTypes2Column {
                get {
                    return this.columnAvailableMediaTypes2;
                }
            }
            
            internal DataColumn Autoloader_IdColumn {
                get {
                    return this.columnAutoloader_Id;
                }
            }
            
            internal DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            public AutoloaderRow this[int index] {
                get {
                    return ((AutoloaderRow)(this.Rows[index]));
                }
            }
            
            public event AutoloaderRowChangeEventHandler AutoloaderRowChanged;
            
            public event AutoloaderRowChangeEventHandler AutoloaderRowChanging;
            
            public event AutoloaderRowChangeEventHandler AutoloaderRowDeleted;
            
            public event AutoloaderRowChangeEventHandler AutoloaderRowDeleting;
            
            public void AddAutoloaderRow(AutoloaderRow row) {
                this.Rows.Add(row);
            }
            
            public AutoloaderRow AddAutoloaderRow(string LoaderNumber, string MailslotSetting, string AvailableMailslotSettings, string MediaSize, string AvailableMediaSizes, string MediaType, string AvailableMediaTypes, string AvailableMediaTypes2, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Autoloader) {
                AutoloaderRow rowAutoloaderRow = ((AutoloaderRow)(this.NewRow()));
                rowAutoloaderRow.ItemArray = new object[] {
                        LoaderNumber,
                        MailslotSetting,
                        AvailableMailslotSettings,
                        MediaSize,
                        AvailableMediaSizes,
                        MediaType,
                        AvailableMediaTypes,
                        AvailableMediaTypes2,
                        null,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Autoloader[0]};
                this.Rows.Add(rowAutoloaderRow);
                return rowAutoloaderRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AutoloaderDataTable cln = ((AutoloaderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AutoloaderDataTable();
            }
            
            internal void InitVars() {
                this.columnLoaderNumber = this.Columns["LoaderNumber"];
                this.columnMailslotSetting = this.Columns["MailslotSetting"];
                this.columnAvailableMailslotSettings = this.Columns["AvailableMailslotSettings"];
                this.columnMediaSize = this.Columns["MediaSize"];
                this.columnAvailableMediaSizes = this.Columns["AvailableMediaSizes"];
                this.columnMediaType = this.Columns["MediaType"];
                this.columnAvailableMediaTypes = this.Columns["AvailableMediaTypes"];
                this.columnAvailableMediaTypes2 = this.Columns["AvailableMediaTypes2"];
                this.columnAutoloader_Id = this.Columns["Autoloader_Id"];
                this.columnProductionParameterSettings_Id = this.Columns["ProductionParameterSettings_Id"];
            }
            
            private void InitClass() {
                this.columnLoaderNumber = new DataColumn("LoaderNumber", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnLoaderNumber);
                this.columnMailslotSetting = new DataColumn("MailslotSetting", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnMailslotSetting);
                this.columnAvailableMailslotSettings = new DataColumn("AvailableMailslotSettings", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAvailableMailslotSettings);
                this.columnMediaSize = new DataColumn("MediaSize", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnMediaSize);
                this.columnAvailableMediaSizes = new DataColumn("AvailableMediaSizes", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAvailableMediaSizes);
                this.columnMediaType = new DataColumn("MediaType", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnMediaType);
                this.columnAvailableMediaTypes = new DataColumn("AvailableMediaTypes", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAvailableMediaTypes);
                this.columnAvailableMediaTypes2 = new DataColumn("AvailableMediaTypes2", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAvailableMediaTypes2);
                this.columnAutoloader_Id = new DataColumn("Autoloader_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnAutoloader_Id);
                this.columnProductionParameterSettings_Id = new DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnProductionParameterSettings_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnAutoloader_Id}, true));
                this.columnLoaderNumber.AllowDBNull = false;
                this.columnLoaderNumber.Namespace = "";
                this.columnMailslotSetting.AllowDBNull = false;
                this.columnMailslotSetting.Namespace = "";
                this.columnAvailableMailslotSettings.AllowDBNull = false;
                this.columnAvailableMailslotSettings.Namespace = "";
                this.columnMediaSize.Namespace = "";
                this.columnMediaSize.DefaultValue = "120mm";
                this.columnAvailableMediaSizes.AllowDBNull = false;
                this.columnAvailableMediaSizes.Namespace = "";
                this.columnMediaType.Namespace = "";
                this.columnMediaType.DefaultValue = "CDR";
                this.columnAvailableMediaTypes.Namespace = "";
                this.columnAvailableMediaTypes.DefaultValue = "CDR";
                this.columnAvailableMediaTypes2.Namespace = "";
                this.columnAutoloader_Id.AutoIncrement = true;
                this.columnAutoloader_Id.AllowDBNull = false;
                this.columnAutoloader_Id.Unique = true;
            }
            
            public AutoloaderRow NewAutoloaderRow() {
                return ((AutoloaderRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AutoloaderRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AutoloaderRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AutoloaderRowChanged != null)) {
                    this.AutoloaderRowChanged(this, new AutoloaderRowChangeEvent(((AutoloaderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AutoloaderRowChanging != null)) {
                    this.AutoloaderRowChanging(this, new AutoloaderRowChangeEvent(((AutoloaderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AutoloaderRowDeleted != null)) {
                    this.AutoloaderRowDeleted(this, new AutoloaderRowChangeEvent(((AutoloaderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AutoloaderRowDeleting != null)) {
                    this.AutoloaderRowDeleting(this, new AutoloaderRowChangeEvent(((AutoloaderRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAutoloaderRow(AutoloaderRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AutoloaderRow : DataRow {
            
            private AutoloaderDataTable tableAutoloader;
            
            internal AutoloaderRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAutoloader = ((AutoloaderDataTable)(this.Table));
            }
            
            public string LoaderNumber {
                get {
                    return ((string)(this[this.tableAutoloader.LoaderNumberColumn]));
                }
                set {
                    this[this.tableAutoloader.LoaderNumberColumn] = value;
                }
            }
            
            public string MailslotSetting {
                get {
                    return ((string)(this[this.tableAutoloader.MailslotSettingColumn]));
                }
                set {
                    this[this.tableAutoloader.MailslotSettingColumn] = value;
                }
            }
            
            public string AvailableMailslotSettings {
                get {
                    return ((string)(this[this.tableAutoloader.AvailableMailslotSettingsColumn]));
                }
                set {
                    this[this.tableAutoloader.AvailableMailslotSettingsColumn] = value;
                }
            }
            
            public string MediaSize {
                get {
                    try {
                        return ((string)(this[this.tableAutoloader.MediaSizeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoloader.MediaSizeColumn] = value;
                }
            }
            
            public string AvailableMediaSizes {
                get {
                    return ((string)(this[this.tableAutoloader.AvailableMediaSizesColumn]));
                }
                set {
                    this[this.tableAutoloader.AvailableMediaSizesColumn] = value;
                }
            }
            
            public string MediaType {
                get {
                    try {
                        return ((string)(this[this.tableAutoloader.MediaTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoloader.MediaTypeColumn] = value;
                }
            }
            
            public string AvailableMediaTypes {
                get {
                    try {
                        return ((string)(this[this.tableAutoloader.AvailableMediaTypesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoloader.AvailableMediaTypesColumn] = value;
                }
            }
            
            public string AvailableMediaTypes2 {
                get {
                    try {
                        return ((string)(this[this.tableAutoloader.AvailableMediaTypes2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoloader.AvailableMediaTypes2Column] = value;
                }
            }
            
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Autoloader"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Autoloader"]);
                }
            }
            
            public bool IsMediaSizeNull() {
                return this.IsNull(this.tableAutoloader.MediaSizeColumn);
            }
            
            public void SetMediaSizeNull() {
                this[this.tableAutoloader.MediaSizeColumn] = System.Convert.DBNull;
            }
            
            public bool IsMediaTypeNull() {
                return this.IsNull(this.tableAutoloader.MediaTypeColumn);
            }
            
            public void SetMediaTypeNull() {
                this[this.tableAutoloader.MediaTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsAvailableMediaTypesNull() {
                return this.IsNull(this.tableAutoloader.AvailableMediaTypesColumn);
            }
            
            public void SetAvailableMediaTypesNull() {
                this[this.tableAutoloader.AvailableMediaTypesColumn] = System.Convert.DBNull;
            }
            
            public bool IsAvailableMediaTypes2Null() {
                return this.IsNull(this.tableAutoloader.AvailableMediaTypes2Column);
            }
            
            public void SetAvailableMediaTypes2Null() {
                this[this.tableAutoloader.AvailableMediaTypes2Column] = System.Convert.DBNull;
            }
            
            public BinSettingRow[] GetBinSettingRows() {
                return ((BinSettingRow[])(this.GetChildRows(this.Table.ChildRelations["Autoloader_BinSetting"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AutoloaderRowChangeEvent : EventArgs {
            
            private AutoloaderRow eventRow;
            
            private DataRowAction eventAction;
            
            public AutoloaderRowChangeEvent(AutoloaderRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AutoloaderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BinSettingDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnBinNumber;
            
            private DataColumn columnSetting;
            
            private DataColumn columnAvailableBinSettings;
            
            private DataColumn columnAutoloader_Id;
            
            internal BinSettingDataTable() : 
                    base("BinSetting") {
                this.InitClass();
            }
            
            internal BinSettingDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn BinNumberColumn {
                get {
                    return this.columnBinNumber;
                }
            }
            
            internal DataColumn SettingColumn {
                get {
                    return this.columnSetting;
                }
            }
            
            internal DataColumn AvailableBinSettingsColumn {
                get {
                    return this.columnAvailableBinSettings;
                }
            }
            
            internal DataColumn Autoloader_IdColumn {
                get {
                    return this.columnAutoloader_Id;
                }
            }
            
            public BinSettingRow this[int index] {
                get {
                    return ((BinSettingRow)(this.Rows[index]));
                }
            }
            
            public event BinSettingRowChangeEventHandler BinSettingRowChanged;
            
            public event BinSettingRowChangeEventHandler BinSettingRowChanging;
            
            public event BinSettingRowChangeEventHandler BinSettingRowDeleted;
            
            public event BinSettingRowChangeEventHandler BinSettingRowDeleting;
            
            public void AddBinSettingRow(BinSettingRow row) {
                this.Rows.Add(row);
            }
            
            public BinSettingRow AddBinSettingRow(string BinNumber, string Setting, string AvailableBinSettings, AutoloaderRow parentAutoloaderRowByAutoloader_BinSetting) {
                BinSettingRow rowBinSettingRow = ((BinSettingRow)(this.NewRow()));
                rowBinSettingRow.ItemArray = new object[] {
                        BinNumber,
                        Setting,
                        AvailableBinSettings,
                        parentAutoloaderRowByAutoloader_BinSetting[8]};
                this.Rows.Add(rowBinSettingRow);
                return rowBinSettingRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                BinSettingDataTable cln = ((BinSettingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new BinSettingDataTable();
            }
            
            internal void InitVars() {
                this.columnBinNumber = this.Columns["BinNumber"];
                this.columnSetting = this.Columns["Setting"];
                this.columnAvailableBinSettings = this.Columns["AvailableBinSettings"];
                this.columnAutoloader_Id = this.Columns["Autoloader_Id"];
            }
            
            private void InitClass() {
                this.columnBinNumber = new DataColumn("BinNumber", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnBinNumber);
                this.columnSetting = new DataColumn("Setting", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSetting);
                this.columnAvailableBinSettings = new DataColumn("AvailableBinSettings", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAvailableBinSettings);
                this.columnAutoloader_Id = new DataColumn("Autoloader_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnAutoloader_Id);
                this.columnBinNumber.AllowDBNull = false;
                this.columnBinNumber.Namespace = "";
                this.columnSetting.AllowDBNull = false;
                this.columnSetting.Namespace = "";
                this.columnAvailableBinSettings.AllowDBNull = false;
                this.columnAvailableBinSettings.Namespace = "";
            }
            
            public BinSettingRow NewBinSettingRow() {
                return ((BinSettingRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new BinSettingRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(BinSettingRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BinSettingRowChanged != null)) {
                    this.BinSettingRowChanged(this, new BinSettingRowChangeEvent(((BinSettingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BinSettingRowChanging != null)) {
                    this.BinSettingRowChanging(this, new BinSettingRowChangeEvent(((BinSettingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BinSettingRowDeleted != null)) {
                    this.BinSettingRowDeleted(this, new BinSettingRowChangeEvent(((BinSettingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BinSettingRowDeleting != null)) {
                    this.BinSettingRowDeleting(this, new BinSettingRowChangeEvent(((BinSettingRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBinSettingRow(BinSettingRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BinSettingRow : DataRow {
            
            private BinSettingDataTable tableBinSetting;
            
            internal BinSettingRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableBinSetting = ((BinSettingDataTable)(this.Table));
            }
            
            public string BinNumber {
                get {
                    return ((string)(this[this.tableBinSetting.BinNumberColumn]));
                }
                set {
                    this[this.tableBinSetting.BinNumberColumn] = value;
                }
            }
            
            public string Setting {
                get {
                    return ((string)(this[this.tableBinSetting.SettingColumn]));
                }
                set {
                    this[this.tableBinSetting.SettingColumn] = value;
                }
            }
            
            public string AvailableBinSettings {
                get {
                    return ((string)(this[this.tableBinSetting.AvailableBinSettingsColumn]));
                }
                set {
                    this[this.tableBinSetting.AvailableBinSettingsColumn] = value;
                }
            }
            
            public AutoloaderRow AutoloaderRow {
                get {
                    return ((AutoloaderRow)(this.GetParentRow(this.Table.ParentRelations["Autoloader_BinSetting"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Autoloader_BinSetting"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BinSettingRowChangeEvent : EventArgs {
            
            private BinSettingRow eventRow;
            
            private DataRowAction eventAction;
            
            public BinSettingRowChangeEvent(BinSettingRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BinSettingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ReadingDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAudioReadSpeed;
            
            private DataColumn columnPreferredReader;
            
            private DataColumn columnBarcodePort;
            
            private DataColumn columnBarcodeAngle;
            
            private DataColumn columnUseBarcodeIndex;
            
            private DataColumn columnReading_Id;
            
            private DataColumn columnProductionParameterSettings_Id;
            
            internal ReadingDataTable() : 
                    base("Reading") {
                this.InitClass();
            }
            
            internal ReadingDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AudioReadSpeedColumn {
                get {
                    return this.columnAudioReadSpeed;
                }
            }
            
            internal DataColumn PreferredReaderColumn {
                get {
                    return this.columnPreferredReader;
                }
            }
            
            internal DataColumn BarcodePortColumn {
                get {
                    return this.columnBarcodePort;
                }
            }
            
            internal DataColumn BarcodeAngleColumn {
                get {
                    return this.columnBarcodeAngle;
                }
            }
            
            internal DataColumn UseBarcodeIndexColumn {
                get {
                    return this.columnUseBarcodeIndex;
                }
            }
            
            internal DataColumn Reading_IdColumn {
                get {
                    return this.columnReading_Id;
                }
            }
            
            internal DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            public ReadingRow this[int index] {
                get {
                    return ((ReadingRow)(this.Rows[index]));
                }
            }
            
            public event ReadingRowChangeEventHandler ReadingRowChanged;
            
            public event ReadingRowChangeEventHandler ReadingRowChanging;
            
            public event ReadingRowChangeEventHandler ReadingRowDeleted;
            
            public event ReadingRowChangeEventHandler ReadingRowDeleting;
            
            public void AddReadingRow(ReadingRow row) {
                this.Rows.Add(row);
            }
            
            public ReadingRow AddReadingRow(string AudioReadSpeed, string PreferredReader, string BarcodePort, string BarcodeAngle, string UseBarcodeIndex, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Reading) {
                ReadingRow rowReadingRow = ((ReadingRow)(this.NewRow()));
                rowReadingRow.ItemArray = new object[] {
                        AudioReadSpeed,
                        PreferredReader,
                        BarcodePort,
                        BarcodeAngle,
                        UseBarcodeIndex,
                        null,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Reading[0]};
                this.Rows.Add(rowReadingRow);
                return rowReadingRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ReadingDataTable cln = ((ReadingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ReadingDataTable();
            }
            
            internal void InitVars() {
                this.columnAudioReadSpeed = this.Columns["AudioReadSpeed"];
                this.columnPreferredReader = this.Columns["PreferredReader"];
                this.columnBarcodePort = this.Columns["BarcodePort"];
                this.columnBarcodeAngle = this.Columns["BarcodeAngle"];
                this.columnUseBarcodeIndex = this.Columns["UseBarcodeIndex"];
                this.columnReading_Id = this.Columns["Reading_Id"];
                this.columnProductionParameterSettings_Id = this.Columns["ProductionParameterSettings_Id"];
            }
            
            private void InitClass() {
                this.columnAudioReadSpeed = new DataColumn("AudioReadSpeed", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAudioReadSpeed);
                this.columnPreferredReader = new DataColumn("PreferredReader", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPreferredReader);
                this.columnBarcodePort = new DataColumn("BarcodePort", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnBarcodePort);
                this.columnBarcodeAngle = new DataColumn("BarcodeAngle", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnBarcodeAngle);
                this.columnUseBarcodeIndex = new DataColumn("UseBarcodeIndex", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUseBarcodeIndex);
                this.columnReading_Id = new DataColumn("Reading_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnReading_Id);
                this.columnProductionParameterSettings_Id = new DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnProductionParameterSettings_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnReading_Id}, true));
                this.columnAudioReadSpeed.Namespace = "";
                this.columnAudioReadSpeed.DefaultValue = "Max";
                this.columnPreferredReader.Namespace = "";
                this.columnPreferredReader.DefaultValue = "Recorders";
                this.columnBarcodePort.Namespace = "";
                this.columnBarcodePort.DefaultValue = "None";
                this.columnBarcodeAngle.AllowDBNull = false;
                this.columnBarcodeAngle.Namespace = "";
                this.columnUseBarcodeIndex.Namespace = "";
                this.columnUseBarcodeIndex.DefaultValue = "false";
                this.columnReading_Id.AutoIncrement = true;
                this.columnReading_Id.AllowDBNull = false;
                this.columnReading_Id.Unique = true;
            }
            
            public ReadingRow NewReadingRow() {
                return ((ReadingRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ReadingRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ReadingRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReadingRowChanged != null)) {
                    this.ReadingRowChanged(this, new ReadingRowChangeEvent(((ReadingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReadingRowChanging != null)) {
                    this.ReadingRowChanging(this, new ReadingRowChangeEvent(((ReadingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReadingRowDeleted != null)) {
                    this.ReadingRowDeleted(this, new ReadingRowChangeEvent(((ReadingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReadingRowDeleting != null)) {
                    this.ReadingRowDeleting(this, new ReadingRowChangeEvent(((ReadingRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveReadingRow(ReadingRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ReadingRow : DataRow {
            
            private ReadingDataTable tableReading;
            
            internal ReadingRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableReading = ((ReadingDataTable)(this.Table));
            }
            
            public string AudioReadSpeed {
                get {
                    try {
                        return ((string)(this[this.tableReading.AudioReadSpeedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReading.AudioReadSpeedColumn] = value;
                }
            }
            
            public string PreferredReader {
                get {
                    try {
                        return ((string)(this[this.tableReading.PreferredReaderColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReading.PreferredReaderColumn] = value;
                }
            }
            
            public string BarcodePort {
                get {
                    try {
                        return ((string)(this[this.tableReading.BarcodePortColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReading.BarcodePortColumn] = value;
                }
            }
            
            public string BarcodeAngle {
                get {
                    return ((string)(this[this.tableReading.BarcodeAngleColumn]));
                }
                set {
                    this[this.tableReading.BarcodeAngleColumn] = value;
                }
            }
            
            public string UseBarcodeIndex {
                get {
                    try {
                        return ((string)(this[this.tableReading.UseBarcodeIndexColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReading.UseBarcodeIndexColumn] = value;
                }
            }
            
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Reading"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Reading"]);
                }
            }
            
            public bool IsAudioReadSpeedNull() {
                return this.IsNull(this.tableReading.AudioReadSpeedColumn);
            }
            
            public void SetAudioReadSpeedNull() {
                this[this.tableReading.AudioReadSpeedColumn] = System.Convert.DBNull;
            }
            
            public bool IsPreferredReaderNull() {
                return this.IsNull(this.tableReading.PreferredReaderColumn);
            }
            
            public void SetPreferredReaderNull() {
                this[this.tableReading.PreferredReaderColumn] = System.Convert.DBNull;
            }
            
            public bool IsBarcodePortNull() {
                return this.IsNull(this.tableReading.BarcodePortColumn);
            }
            
            public void SetBarcodePortNull() {
                this[this.tableReading.BarcodePortColumn] = System.Convert.DBNull;
            }
            
            public bool IsUseBarcodeIndexNull() {
                return this.IsNull(this.tableReading.UseBarcodeIndexColumn);
            }
            
            public void SetUseBarcodeIndexNull() {
                this[this.tableReading.UseBarcodeIndexColumn] = System.Convert.DBNull;
            }
            
            public AutoBulkReadRow[] GetAutoBulkReadRows() {
                return ((AutoBulkReadRow[])(this.GetChildRows(this.Table.ChildRelations["Reading_AutoBulkRead"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ReadingRowChangeEvent : EventArgs {
            
            private ReadingRow eventRow;
            
            private DataRowAction eventAction;
            
            public ReadingRowChangeEvent(ReadingRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ReadingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AutoBulkReadDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnBaseFolderForImages;
            
            private DataColumn columnUseVolumeIDAsFolderName;
            
            private DataColumn columnUseBarcodeAsFolderName;
            
            private DataColumn columnExtractISOImagesToFoldersAndFiles;
            
            private DataColumn columnImageTypeForAudioTracks;
            
            private DataColumn columnUseISRCAsFilenameForAudioTracks;
            
            private DataColumn columnPutFailuresToRejectBin;
            
            private DataColumn columnReading_Id;
            
            internal AutoBulkReadDataTable() : 
                    base("AutoBulkRead") {
                this.InitClass();
            }
            
            internal AutoBulkReadDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn BaseFolderForImagesColumn {
                get {
                    return this.columnBaseFolderForImages;
                }
            }
            
            internal DataColumn UseVolumeIDAsFolderNameColumn {
                get {
                    return this.columnUseVolumeIDAsFolderName;
                }
            }
            
            internal DataColumn UseBarcodeAsFolderNameColumn {
                get {
                    return this.columnUseBarcodeAsFolderName;
                }
            }
            
            internal DataColumn ExtractISOImagesToFoldersAndFilesColumn {
                get {
                    return this.columnExtractISOImagesToFoldersAndFiles;
                }
            }
            
            internal DataColumn ImageTypeForAudioTracksColumn {
                get {
                    return this.columnImageTypeForAudioTracks;
                }
            }
            
            internal DataColumn UseISRCAsFilenameForAudioTracksColumn {
                get {
                    return this.columnUseISRCAsFilenameForAudioTracks;
                }
            }
            
            internal DataColumn PutFailuresToRejectBinColumn {
                get {
                    return this.columnPutFailuresToRejectBin;
                }
            }
            
            internal DataColumn Reading_IdColumn {
                get {
                    return this.columnReading_Id;
                }
            }
            
            public AutoBulkReadRow this[int index] {
                get {
                    return ((AutoBulkReadRow)(this.Rows[index]));
                }
            }
            
            public event AutoBulkReadRowChangeEventHandler AutoBulkReadRowChanged;
            
            public event AutoBulkReadRowChangeEventHandler AutoBulkReadRowChanging;
            
            public event AutoBulkReadRowChangeEventHandler AutoBulkReadRowDeleted;
            
            public event AutoBulkReadRowChangeEventHandler AutoBulkReadRowDeleting;
            
            public void AddAutoBulkReadRow(AutoBulkReadRow row) {
                this.Rows.Add(row);
            }
            
            public AutoBulkReadRow AddAutoBulkReadRow(string BaseFolderForImages, string UseVolumeIDAsFolderName, string UseBarcodeAsFolderName, string ExtractISOImagesToFoldersAndFiles, string ImageTypeForAudioTracks, string UseISRCAsFilenameForAudioTracks, string PutFailuresToRejectBin, ReadingRow parentReadingRowByReading_AutoBulkRead) {
                AutoBulkReadRow rowAutoBulkReadRow = ((AutoBulkReadRow)(this.NewRow()));
                rowAutoBulkReadRow.ItemArray = new object[] {
                        BaseFolderForImages,
                        UseVolumeIDAsFolderName,
                        UseBarcodeAsFolderName,
                        ExtractISOImagesToFoldersAndFiles,
                        ImageTypeForAudioTracks,
                        UseISRCAsFilenameForAudioTracks,
                        PutFailuresToRejectBin,
                        parentReadingRowByReading_AutoBulkRead[5]};
                this.Rows.Add(rowAutoBulkReadRow);
                return rowAutoBulkReadRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AutoBulkReadDataTable cln = ((AutoBulkReadDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AutoBulkReadDataTable();
            }
            
            internal void InitVars() {
                this.columnBaseFolderForImages = this.Columns["BaseFolderForImages"];
                this.columnUseVolumeIDAsFolderName = this.Columns["UseVolumeIDAsFolderName"];
                this.columnUseBarcodeAsFolderName = this.Columns["UseBarcodeAsFolderName"];
                this.columnExtractISOImagesToFoldersAndFiles = this.Columns["ExtractISOImagesToFoldersAndFiles"];
                this.columnImageTypeForAudioTracks = this.Columns["ImageTypeForAudioTracks"];
                this.columnUseISRCAsFilenameForAudioTracks = this.Columns["UseISRCAsFilenameForAudioTracks"];
                this.columnPutFailuresToRejectBin = this.Columns["PutFailuresToRejectBin"];
                this.columnReading_Id = this.Columns["Reading_Id"];
            }
            
            private void InitClass() {
                this.columnBaseFolderForImages = new DataColumn("BaseFolderForImages", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnBaseFolderForImages);
                this.columnUseVolumeIDAsFolderName = new DataColumn("UseVolumeIDAsFolderName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUseVolumeIDAsFolderName);
                this.columnUseBarcodeAsFolderName = new DataColumn("UseBarcodeAsFolderName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUseBarcodeAsFolderName);
                this.columnExtractISOImagesToFoldersAndFiles = new DataColumn("ExtractISOImagesToFoldersAndFiles", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnExtractISOImagesToFoldersAndFiles);
                this.columnImageTypeForAudioTracks = new DataColumn("ImageTypeForAudioTracks", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnImageTypeForAudioTracks);
                this.columnUseISRCAsFilenameForAudioTracks = new DataColumn("UseISRCAsFilenameForAudioTracks", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUseISRCAsFilenameForAudioTracks);
                this.columnPutFailuresToRejectBin = new DataColumn("PutFailuresToRejectBin", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPutFailuresToRejectBin);
                this.columnReading_Id = new DataColumn("Reading_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnReading_Id);
                this.columnBaseFolderForImages.AllowDBNull = false;
                this.columnBaseFolderForImages.Namespace = "";
                this.columnUseVolumeIDAsFolderName.Namespace = "";
                this.columnUseVolumeIDAsFolderName.DefaultValue = "false";
                this.columnUseBarcodeAsFolderName.Namespace = "";
                this.columnUseBarcodeAsFolderName.DefaultValue = "false";
                this.columnExtractISOImagesToFoldersAndFiles.Namespace = "";
                this.columnExtractISOImagesToFoldersAndFiles.DefaultValue = "false";
                this.columnImageTypeForAudioTracks.Namespace = "";
                this.columnImageTypeForAudioTracks.DefaultValue = "PCM";
                this.columnUseISRCAsFilenameForAudioTracks.Namespace = "";
                this.columnUseISRCAsFilenameForAudioTracks.DefaultValue = "false";
                this.columnPutFailuresToRejectBin.Namespace = "";
                this.columnPutFailuresToRejectBin.DefaultValue = "false";
            }
            
            public AutoBulkReadRow NewAutoBulkReadRow() {
                return ((AutoBulkReadRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AutoBulkReadRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AutoBulkReadRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AutoBulkReadRowChanged != null)) {
                    this.AutoBulkReadRowChanged(this, new AutoBulkReadRowChangeEvent(((AutoBulkReadRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AutoBulkReadRowChanging != null)) {
                    this.AutoBulkReadRowChanging(this, new AutoBulkReadRowChangeEvent(((AutoBulkReadRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AutoBulkReadRowDeleted != null)) {
                    this.AutoBulkReadRowDeleted(this, new AutoBulkReadRowChangeEvent(((AutoBulkReadRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AutoBulkReadRowDeleting != null)) {
                    this.AutoBulkReadRowDeleting(this, new AutoBulkReadRowChangeEvent(((AutoBulkReadRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAutoBulkReadRow(AutoBulkReadRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AutoBulkReadRow : DataRow {
            
            private AutoBulkReadDataTable tableAutoBulkRead;
            
            internal AutoBulkReadRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAutoBulkRead = ((AutoBulkReadDataTable)(this.Table));
            }
            
            public string BaseFolderForImages {
                get {
                    return ((string)(this[this.tableAutoBulkRead.BaseFolderForImagesColumn]));
                }
                set {
                    this[this.tableAutoBulkRead.BaseFolderForImagesColumn] = value;
                }
            }
            
            public string UseVolumeIDAsFolderName {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.UseVolumeIDAsFolderNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.UseVolumeIDAsFolderNameColumn] = value;
                }
            }
            
            public string UseBarcodeAsFolderName {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.UseBarcodeAsFolderNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.UseBarcodeAsFolderNameColumn] = value;
                }
            }
            
            public string ExtractISOImagesToFoldersAndFiles {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.ExtractISOImagesToFoldersAndFilesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.ExtractISOImagesToFoldersAndFilesColumn] = value;
                }
            }
            
            public string ImageTypeForAudioTracks {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.ImageTypeForAudioTracksColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.ImageTypeForAudioTracksColumn] = value;
                }
            }
            
            public string UseISRCAsFilenameForAudioTracks {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.UseISRCAsFilenameForAudioTracksColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.UseISRCAsFilenameForAudioTracksColumn] = value;
                }
            }
            
            public string PutFailuresToRejectBin {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.PutFailuresToRejectBinColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.PutFailuresToRejectBinColumn] = value;
                }
            }
            
            public ReadingRow ReadingRow {
                get {
                    return ((ReadingRow)(this.GetParentRow(this.Table.ParentRelations["Reading_AutoBulkRead"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Reading_AutoBulkRead"]);
                }
            }
            
            public bool IsUseVolumeIDAsFolderNameNull() {
                return this.IsNull(this.tableAutoBulkRead.UseVolumeIDAsFolderNameColumn);
            }
            
            public void SetUseVolumeIDAsFolderNameNull() {
                this[this.tableAutoBulkRead.UseVolumeIDAsFolderNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsUseBarcodeAsFolderNameNull() {
                return this.IsNull(this.tableAutoBulkRead.UseBarcodeAsFolderNameColumn);
            }
            
            public void SetUseBarcodeAsFolderNameNull() {
                this[this.tableAutoBulkRead.UseBarcodeAsFolderNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsExtractISOImagesToFoldersAndFilesNull() {
                return this.IsNull(this.tableAutoBulkRead.ExtractISOImagesToFoldersAndFilesColumn);
            }
            
            public void SetExtractISOImagesToFoldersAndFilesNull() {
                this[this.tableAutoBulkRead.ExtractISOImagesToFoldersAndFilesColumn] = System.Convert.DBNull;
            }
            
            public bool IsImageTypeForAudioTracksNull() {
                return this.IsNull(this.tableAutoBulkRead.ImageTypeForAudioTracksColumn);
            }
            
            public void SetImageTypeForAudioTracksNull() {
                this[this.tableAutoBulkRead.ImageTypeForAudioTracksColumn] = System.Convert.DBNull;
            }
            
            public bool IsUseISRCAsFilenameForAudioTracksNull() {
                return this.IsNull(this.tableAutoBulkRead.UseISRCAsFilenameForAudioTracksColumn);
            }
            
            public void SetUseISRCAsFilenameForAudioTracksNull() {
                this[this.tableAutoBulkRead.UseISRCAsFilenameForAudioTracksColumn] = System.Convert.DBNull;
            }
            
            public bool IsPutFailuresToRejectBinNull() {
                return this.IsNull(this.tableAutoBulkRead.PutFailuresToRejectBinColumn);
            }
            
            public void SetPutFailuresToRejectBinNull() {
                this[this.tableAutoBulkRead.PutFailuresToRejectBinColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AutoBulkReadRowChangeEvent : EventArgs {
            
            private AutoBulkReadRow eventRow;
            
            private DataRowAction eventAction;
            
            public AutoBulkReadRowChangeEvent(AutoBulkReadRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AutoBulkReadRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MediaCodesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnUseMediaCodes;
            
            private DataColumn columnMediaCodes_Id;
            
            private DataColumn columnProductionParameterSettings_Id;
            
            internal MediaCodesDataTable() : 
                    base("MediaCodes") {
                this.InitClass();
            }
            
            internal MediaCodesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn UseMediaCodesColumn {
                get {
                    return this.columnUseMediaCodes;
                }
            }
            
            internal DataColumn MediaCodes_IdColumn {
                get {
                    return this.columnMediaCodes_Id;
                }
            }
            
            internal DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            public MediaCodesRow this[int index] {
                get {
                    return ((MediaCodesRow)(this.Rows[index]));
                }
            }
            
            public event MediaCodesRowChangeEventHandler MediaCodesRowChanged;
            
            public event MediaCodesRowChangeEventHandler MediaCodesRowChanging;
            
            public event MediaCodesRowChangeEventHandler MediaCodesRowDeleted;
            
            public event MediaCodesRowChangeEventHandler MediaCodesRowDeleting;
            
            public void AddMediaCodesRow(MediaCodesRow row) {
                this.Rows.Add(row);
            }
            
            public MediaCodesRow AddMediaCodesRow(string UseMediaCodes, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_MediaCodes) {
                MediaCodesRow rowMediaCodesRow = ((MediaCodesRow)(this.NewRow()));
                rowMediaCodesRow.ItemArray = new object[] {
                        UseMediaCodes,
                        null,
                        parentProductionParameterSettingsRowByProductionParameterSettings_MediaCodes[0]};
                this.Rows.Add(rowMediaCodesRow);
                return rowMediaCodesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MediaCodesDataTable cln = ((MediaCodesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MediaCodesDataTable();
            }
            
            internal void InitVars() {
                this.columnUseMediaCodes = this.Columns["UseMediaCodes"];
                this.columnMediaCodes_Id = this.Columns["MediaCodes_Id"];
                this.columnProductionParameterSettings_Id = this.Columns["ProductionParameterSettings_Id"];
            }
            
            private void InitClass() {
                this.columnUseMediaCodes = new DataColumn("UseMediaCodes", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUseMediaCodes);
                this.columnMediaCodes_Id = new DataColumn("MediaCodes_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnMediaCodes_Id);
                this.columnProductionParameterSettings_Id = new DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnProductionParameterSettings_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnMediaCodes_Id}, true));
                this.columnUseMediaCodes.Namespace = "";
                this.columnUseMediaCodes.DefaultValue = "false";
                this.columnMediaCodes_Id.AutoIncrement = true;
                this.columnMediaCodes_Id.AllowDBNull = false;
                this.columnMediaCodes_Id.Unique = true;
            }
            
            public MediaCodesRow NewMediaCodesRow() {
                return ((MediaCodesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MediaCodesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MediaCodesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MediaCodesRowChanged != null)) {
                    this.MediaCodesRowChanged(this, new MediaCodesRowChangeEvent(((MediaCodesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MediaCodesRowChanging != null)) {
                    this.MediaCodesRowChanging(this, new MediaCodesRowChangeEvent(((MediaCodesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MediaCodesRowDeleted != null)) {
                    this.MediaCodesRowDeleted(this, new MediaCodesRowChangeEvent(((MediaCodesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MediaCodesRowDeleting != null)) {
                    this.MediaCodesRowDeleting(this, new MediaCodesRowChangeEvent(((MediaCodesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMediaCodesRow(MediaCodesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MediaCodesRow : DataRow {
            
            private MediaCodesDataTable tableMediaCodes;
            
            internal MediaCodesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMediaCodes = ((MediaCodesDataTable)(this.Table));
            }
            
            public string UseMediaCodes {
                get {
                    try {
                        return ((string)(this[this.tableMediaCodes.UseMediaCodesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMediaCodes.UseMediaCodesColumn] = value;
                }
            }
            
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_MediaCodes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_MediaCodes"]);
                }
            }
            
            public bool IsUseMediaCodesNull() {
                return this.IsNull(this.tableMediaCodes.UseMediaCodesColumn);
            }
            
            public void SetUseMediaCodesNull() {
                this[this.tableMediaCodes.UseMediaCodesColumn] = System.Convert.DBNull;
            }
            
            public MediaCodeRow[] GetMediaCodeRows() {
                return ((MediaCodeRow[])(this.GetChildRows(this.Table.ChildRelations["MediaCodes_MediaCode"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MediaCodesRowChangeEvent : EventArgs {
            
            private MediaCodesRow eventRow;
            
            private DataRowAction eventAction;
            
            public MediaCodesRowChangeEvent(MediaCodesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MediaCodesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MediaCodeDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnValue;
            
            private DataColumn columnMediaCodes_Id;
            
            internal MediaCodeDataTable() : 
                    base("MediaCode") {
                this.InitClass();
            }
            
            internal MediaCodeDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            internal DataColumn MediaCodes_IdColumn {
                get {
                    return this.columnMediaCodes_Id;
                }
            }
            
            public MediaCodeRow this[int index] {
                get {
                    return ((MediaCodeRow)(this.Rows[index]));
                }
            }
            
            public event MediaCodeRowChangeEventHandler MediaCodeRowChanged;
            
            public event MediaCodeRowChangeEventHandler MediaCodeRowChanging;
            
            public event MediaCodeRowChangeEventHandler MediaCodeRowDeleted;
            
            public event MediaCodeRowChangeEventHandler MediaCodeRowDeleting;
            
            public void AddMediaCodeRow(MediaCodeRow row) {
                this.Rows.Add(row);
            }
            
            public MediaCodeRow AddMediaCodeRow(string Value, MediaCodesRow parentMediaCodesRowByMediaCodes_MediaCode) {
                MediaCodeRow rowMediaCodeRow = ((MediaCodeRow)(this.NewRow()));
                rowMediaCodeRow.ItemArray = new object[] {
                        Value,
                        parentMediaCodesRowByMediaCodes_MediaCode[1]};
                this.Rows.Add(rowMediaCodeRow);
                return rowMediaCodeRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MediaCodeDataTable cln = ((MediaCodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MediaCodeDataTable();
            }
            
            internal void InitVars() {
                this.columnValue = this.Columns["Value"];
                this.columnMediaCodes_Id = this.Columns["MediaCodes_Id"];
            }
            
            private void InitClass() {
                this.columnValue = new DataColumn("Value", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnValue);
                this.columnMediaCodes_Id = new DataColumn("MediaCodes_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnMediaCodes_Id);
                this.columnValue.AllowDBNull = false;
                this.columnValue.Namespace = "";
            }
            
            public MediaCodeRow NewMediaCodeRow() {
                return ((MediaCodeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MediaCodeRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MediaCodeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MediaCodeRowChanged != null)) {
                    this.MediaCodeRowChanged(this, new MediaCodeRowChangeEvent(((MediaCodeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MediaCodeRowChanging != null)) {
                    this.MediaCodeRowChanging(this, new MediaCodeRowChangeEvent(((MediaCodeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MediaCodeRowDeleted != null)) {
                    this.MediaCodeRowDeleted(this, new MediaCodeRowChangeEvent(((MediaCodeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MediaCodeRowDeleting != null)) {
                    this.MediaCodeRowDeleting(this, new MediaCodeRowChangeEvent(((MediaCodeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMediaCodeRow(MediaCodeRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MediaCodeRow : DataRow {
            
            private MediaCodeDataTable tableMediaCode;
            
            internal MediaCodeRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMediaCode = ((MediaCodeDataTable)(this.Table));
            }
            
            public string Value {
                get {
                    return ((string)(this[this.tableMediaCode.ValueColumn]));
                }
                set {
                    this[this.tableMediaCode.ValueColumn] = value;
                }
            }
            
            public MediaCodesRow MediaCodesRow {
                get {
                    return ((MediaCodesRow)(this.GetParentRow(this.Table.ParentRelations["MediaCodes_MediaCode"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MediaCodes_MediaCode"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MediaCodeRowChangeEvent : EventArgs {
            
            private MediaCodeRow eventRow;
            
            private DataRowAction eventAction;
            
            public MediaCodeRowChangeEvent(MediaCodeRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MediaCodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class KioskModeDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnRecoverOrders;
            
            private DataColumn columnRunNoPrinter;
            
            private DataColumn columnAutoloaderRecovery;
            
            private DataColumn columnPrinterRecovery;
            
            private DataColumn columnAutoRespondOnStartup;
            
            private DataColumn columnProductionParameterSettings_Id;
            
            internal KioskModeDataTable() : 
                    base("KioskMode") {
                this.InitClass();
            }
            
            internal KioskModeDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn RecoverOrdersColumn {
                get {
                    return this.columnRecoverOrders;
                }
            }
            
            internal DataColumn RunNoPrinterColumn {
                get {
                    return this.columnRunNoPrinter;
                }
            }
            
            internal DataColumn AutoloaderRecoveryColumn {
                get {
                    return this.columnAutoloaderRecovery;
                }
            }
            
            internal DataColumn PrinterRecoveryColumn {
                get {
                    return this.columnPrinterRecovery;
                }
            }
            
            internal DataColumn AutoRespondOnStartupColumn {
                get {
                    return this.columnAutoRespondOnStartup;
                }
            }
            
            internal DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            public KioskModeRow this[int index] {
                get {
                    return ((KioskModeRow)(this.Rows[index]));
                }
            }
            
            public event KioskModeRowChangeEventHandler KioskModeRowChanged;
            
            public event KioskModeRowChangeEventHandler KioskModeRowChanging;
            
            public event KioskModeRowChangeEventHandler KioskModeRowDeleted;
            
            public event KioskModeRowChangeEventHandler KioskModeRowDeleting;
            
            public void AddKioskModeRow(KioskModeRow row) {
                this.Rows.Add(row);
            }
            
            public KioskModeRow AddKioskModeRow(string RecoverOrders, string RunNoPrinter, string AutoloaderRecovery, string PrinterRecovery, string AutoRespondOnStartup, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_KioskMode) {
                KioskModeRow rowKioskModeRow = ((KioskModeRow)(this.NewRow()));
                rowKioskModeRow.ItemArray = new object[] {
                        RecoverOrders,
                        RunNoPrinter,
                        AutoloaderRecovery,
                        PrinterRecovery,
                        AutoRespondOnStartup,
                        parentProductionParameterSettingsRowByProductionParameterSettings_KioskMode[0]};
                this.Rows.Add(rowKioskModeRow);
                return rowKioskModeRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                KioskModeDataTable cln = ((KioskModeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new KioskModeDataTable();
            }
            
            internal void InitVars() {
                this.columnRecoverOrders = this.Columns["RecoverOrders"];
                this.columnRunNoPrinter = this.Columns["RunNoPrinter"];
                this.columnAutoloaderRecovery = this.Columns["AutoloaderRecovery"];
                this.columnPrinterRecovery = this.Columns["PrinterRecovery"];
                this.columnAutoRespondOnStartup = this.Columns["AutoRespondOnStartup"];
                this.columnProductionParameterSettings_Id = this.Columns["ProductionParameterSettings_Id"];
            }
            
            private void InitClass() {
                this.columnRecoverOrders = new DataColumn("RecoverOrders", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRecoverOrders);
                this.columnRunNoPrinter = new DataColumn("RunNoPrinter", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRunNoPrinter);
                this.columnAutoloaderRecovery = new DataColumn("AutoloaderRecovery", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAutoloaderRecovery);
                this.columnPrinterRecovery = new DataColumn("PrinterRecovery", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPrinterRecovery);
                this.columnAutoRespondOnStartup = new DataColumn("AutoRespondOnStartup", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAutoRespondOnStartup);
                this.columnProductionParameterSettings_Id = new DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnProductionParameterSettings_Id);
                this.columnRecoverOrders.Namespace = "";
                this.columnRecoverOrders.DefaultValue = "true";
                this.columnRunNoPrinter.Namespace = "";
                this.columnRunNoPrinter.DefaultValue = "false";
                this.columnAutoloaderRecovery.Namespace = "";
                this.columnAutoloaderRecovery.DefaultValue = "Retry";
                this.columnPrinterRecovery.Namespace = "";
                this.columnPrinterRecovery.DefaultValue = "Retry";
                this.columnAutoRespondOnStartup.Namespace = "";
                this.columnAutoRespondOnStartup.DefaultValue = "false";
            }
            
            public KioskModeRow NewKioskModeRow() {
                return ((KioskModeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new KioskModeRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(KioskModeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.KioskModeRowChanged != null)) {
                    this.KioskModeRowChanged(this, new KioskModeRowChangeEvent(((KioskModeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.KioskModeRowChanging != null)) {
                    this.KioskModeRowChanging(this, new KioskModeRowChangeEvent(((KioskModeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.KioskModeRowDeleted != null)) {
                    this.KioskModeRowDeleted(this, new KioskModeRowChangeEvent(((KioskModeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.KioskModeRowDeleting != null)) {
                    this.KioskModeRowDeleting(this, new KioskModeRowChangeEvent(((KioskModeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveKioskModeRow(KioskModeRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class KioskModeRow : DataRow {
            
            private KioskModeDataTable tableKioskMode;
            
            internal KioskModeRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableKioskMode = ((KioskModeDataTable)(this.Table));
            }
            
            public string RecoverOrders {
                get {
                    try {
                        return ((string)(this[this.tableKioskMode.RecoverOrdersColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKioskMode.RecoverOrdersColumn] = value;
                }
            }
            
            public string RunNoPrinter {
                get {
                    try {
                        return ((string)(this[this.tableKioskMode.RunNoPrinterColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKioskMode.RunNoPrinterColumn] = value;
                }
            }
            
            public string AutoloaderRecovery {
                get {
                    try {
                        return ((string)(this[this.tableKioskMode.AutoloaderRecoveryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKioskMode.AutoloaderRecoveryColumn] = value;
                }
            }
            
            public string PrinterRecovery {
                get {
                    try {
                        return ((string)(this[this.tableKioskMode.PrinterRecoveryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKioskMode.PrinterRecoveryColumn] = value;
                }
            }
            
            public string AutoRespondOnStartup {
                get {
                    try {
                        return ((string)(this[this.tableKioskMode.AutoRespondOnStartupColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKioskMode.AutoRespondOnStartupColumn] = value;
                }
            }
            
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_KioskMode"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_KioskMode"]);
                }
            }
            
            public bool IsRecoverOrdersNull() {
                return this.IsNull(this.tableKioskMode.RecoverOrdersColumn);
            }
            
            public void SetRecoverOrdersNull() {
                this[this.tableKioskMode.RecoverOrdersColumn] = System.Convert.DBNull;
            }
            
            public bool IsRunNoPrinterNull() {
                return this.IsNull(this.tableKioskMode.RunNoPrinterColumn);
            }
            
            public void SetRunNoPrinterNull() {
                this[this.tableKioskMode.RunNoPrinterColumn] = System.Convert.DBNull;
            }
            
            public bool IsAutoloaderRecoveryNull() {
                return this.IsNull(this.tableKioskMode.AutoloaderRecoveryColumn);
            }
            
            public void SetAutoloaderRecoveryNull() {
                this[this.tableKioskMode.AutoloaderRecoveryColumn] = System.Convert.DBNull;
            }
            
            public bool IsPrinterRecoveryNull() {
                return this.IsNull(this.tableKioskMode.PrinterRecoveryColumn);
            }
            
            public void SetPrinterRecoveryNull() {
                this[this.tableKioskMode.PrinterRecoveryColumn] = System.Convert.DBNull;
            }
            
            public bool IsAutoRespondOnStartupNull() {
                return this.IsNull(this.tableKioskMode.AutoRespondOnStartupColumn);
            }
            
            public void SetAutoRespondOnStartupNull() {
                this[this.tableKioskMode.AutoRespondOnStartupColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class KioskModeRowChangeEvent : EventArgs {
            
            private KioskModeRow eventRow;
            
            private DataRowAction eventAction;
            
            public KioskModeRowChangeEvent(KioskModeRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public KioskModeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UnlockingCodesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFeature;
            
            private DataColumn columnSessionCode;
            
            private DataColumn columnComputerCode;
            
            internal UnlockingCodesDataTable() : 
                    base("UnlockingCodes") {
                this.InitClass();
            }
            
            internal UnlockingCodesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FeatureColumn {
                get {
                    return this.columnFeature;
                }
            }
            
            internal DataColumn SessionCodeColumn {
                get {
                    return this.columnSessionCode;
                }
            }
            
            internal DataColumn ComputerCodeColumn {
                get {
                    return this.columnComputerCode;
                }
            }
            
            public UnlockingCodesRow this[int index] {
                get {
                    return ((UnlockingCodesRow)(this.Rows[index]));
                }
            }
            
            public event UnlockingCodesRowChangeEventHandler UnlockingCodesRowChanged;
            
            public event UnlockingCodesRowChangeEventHandler UnlockingCodesRowChanging;
            
            public event UnlockingCodesRowChangeEventHandler UnlockingCodesRowDeleted;
            
            public event UnlockingCodesRowChangeEventHandler UnlockingCodesRowDeleting;
            
            public void AddUnlockingCodesRow(UnlockingCodesRow row) {
                this.Rows.Add(row);
            }
            
            public UnlockingCodesRow AddUnlockingCodesRow(string Feature, string SessionCode, string ComputerCode) {
                UnlockingCodesRow rowUnlockingCodesRow = ((UnlockingCodesRow)(this.NewRow()));
                rowUnlockingCodesRow.ItemArray = new object[] {
                        Feature,
                        SessionCode,
                        ComputerCode};
                this.Rows.Add(rowUnlockingCodesRow);
                return rowUnlockingCodesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                UnlockingCodesDataTable cln = ((UnlockingCodesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new UnlockingCodesDataTable();
            }
            
            internal void InitVars() {
                this.columnFeature = this.Columns["Feature"];
                this.columnSessionCode = this.Columns["SessionCode"];
                this.columnComputerCode = this.Columns["ComputerCode"];
            }
            
            private void InitClass() {
                this.columnFeature = new DataColumn("Feature", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFeature);
                this.columnSessionCode = new DataColumn("SessionCode", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSessionCode);
                this.columnComputerCode = new DataColumn("ComputerCode", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnComputerCode);
                this.columnFeature.Namespace = "";
                this.columnFeature.DefaultValue = "Base";
                this.columnSessionCode.AllowDBNull = false;
                this.columnSessionCode.Namespace = "";
                this.columnComputerCode.AllowDBNull = false;
                this.columnComputerCode.Namespace = "";
            }
            
            public UnlockingCodesRow NewUnlockingCodesRow() {
                return ((UnlockingCodesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new UnlockingCodesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(UnlockingCodesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UnlockingCodesRowChanged != null)) {
                    this.UnlockingCodesRowChanged(this, new UnlockingCodesRowChangeEvent(((UnlockingCodesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UnlockingCodesRowChanging != null)) {
                    this.UnlockingCodesRowChanging(this, new UnlockingCodesRowChangeEvent(((UnlockingCodesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UnlockingCodesRowDeleted != null)) {
                    this.UnlockingCodesRowDeleted(this, new UnlockingCodesRowChangeEvent(((UnlockingCodesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UnlockingCodesRowDeleting != null)) {
                    this.UnlockingCodesRowDeleting(this, new UnlockingCodesRowChangeEvent(((UnlockingCodesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveUnlockingCodesRow(UnlockingCodesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UnlockingCodesRow : DataRow {
            
            private UnlockingCodesDataTable tableUnlockingCodes;
            
            internal UnlockingCodesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableUnlockingCodes = ((UnlockingCodesDataTable)(this.Table));
            }
            
            public string Feature {
                get {
                    try {
                        return ((string)(this[this.tableUnlockingCodes.FeatureColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnlockingCodes.FeatureColumn] = value;
                }
            }
            
            public string SessionCode {
                get {
                    return ((string)(this[this.tableUnlockingCodes.SessionCodeColumn]));
                }
                set {
                    this[this.tableUnlockingCodes.SessionCodeColumn] = value;
                }
            }
            
            public string ComputerCode {
                get {
                    return ((string)(this[this.tableUnlockingCodes.ComputerCodeColumn]));
                }
                set {
                    this[this.tableUnlockingCodes.ComputerCodeColumn] = value;
                }
            }
            
            public bool IsFeatureNull() {
                return this.IsNull(this.tableUnlockingCodes.FeatureColumn);
            }
            
            public void SetFeatureNull() {
                this[this.tableUnlockingCodes.FeatureColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UnlockingCodesRowChangeEvent : EventArgs {
            
            private UnlockingCodesRow eventRow;
            
            private DataRowAction eventAction;
            
            public UnlockingCodesRowChangeEvent(UnlockingCodesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public UnlockingCodesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
