//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace RImageSchemas.DataSets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DiscMap : DataSet {
        
        private DiscInfoDataTable tableDiscInfo;
        
        private TrackInfoDataTable tableTrackInfo;
        
        private SubchannelControlBitsDataTable tableSubchannelControlBits;
        
        private DataRelation relationTrackInfo_SubchannelControlBits;
        
        private DataRelation relationDiscInfo_TrackInfo;
        
        public DiscMap() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DiscMap(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["DiscInfo"] != null)) {
                    this.Tables.Add(new DiscInfoDataTable(ds.Tables["DiscInfo"]));
                }
                if ((ds.Tables["TrackInfo"] != null)) {
                    this.Tables.Add(new TrackInfoDataTable(ds.Tables["TrackInfo"]));
                }
                if ((ds.Tables["SubchannelControlBits"] != null)) {
                    this.Tables.Add(new SubchannelControlBitsDataTable(ds.Tables["SubchannelControlBits"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DiscInfoDataTable DiscInfo {
            get {
                return this.tableDiscInfo;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TrackInfoDataTable TrackInfo {
            get {
                return this.tableTrackInfo;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SubchannelControlBitsDataTable SubchannelControlBits {
            get {
                return this.tableSubchannelControlBits;
            }
        }
        
        public override DataSet Clone() {
            DiscMap cln = ((DiscMap)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["DiscInfo"] != null)) {
                this.Tables.Add(new DiscInfoDataTable(ds.Tables["DiscInfo"]));
            }
            if ((ds.Tables["TrackInfo"] != null)) {
                this.Tables.Add(new TrackInfoDataTable(ds.Tables["TrackInfo"]));
            }
            if ((ds.Tables["SubchannelControlBits"] != null)) {
                this.Tables.Add(new SubchannelControlBitsDataTable(ds.Tables["SubchannelControlBits"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableDiscInfo = ((DiscInfoDataTable)(this.Tables["DiscInfo"]));
            if ((this.tableDiscInfo != null)) {
                this.tableDiscInfo.InitVars();
            }
            this.tableTrackInfo = ((TrackInfoDataTable)(this.Tables["TrackInfo"]));
            if ((this.tableTrackInfo != null)) {
                this.tableTrackInfo.InitVars();
            }
            this.tableSubchannelControlBits = ((SubchannelControlBitsDataTable)(this.Tables["SubchannelControlBits"]));
            if ((this.tableSubchannelControlBits != null)) {
                this.tableSubchannelControlBits.InitVars();
            }
            this.relationTrackInfo_SubchannelControlBits = this.Relations["TrackInfo_SubchannelControlBits"];
            this.relationDiscInfo_TrackInfo = this.Relations["DiscInfo_TrackInfo"];
        }
        
        private void InitClass() {
            this.DataSetName = "DiscMap";
            this.Prefix = "";
            this.Namespace = "";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableDiscInfo = new DiscInfoDataTable();
            this.Tables.Add(this.tableDiscInfo);
            this.tableTrackInfo = new TrackInfoDataTable();
            this.Tables.Add(this.tableTrackInfo);
            this.tableSubchannelControlBits = new SubchannelControlBitsDataTable();
            this.Tables.Add(this.tableSubchannelControlBits);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("DiscInfo_TrackInfo", new DataColumn[] {
                        this.tableDiscInfo.DiscInfo_IdColumn}, new DataColumn[] {
                        this.tableTrackInfo.DiscInfo_IdColumn});
            this.tableTrackInfo.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("TrackInfo_SubchannelControlBits", new DataColumn[] {
                        this.tableTrackInfo.TrackInfo_IdColumn}, new DataColumn[] {
                        this.tableSubchannelControlBits.TrackInfo_IdColumn});
            this.tableSubchannelControlBits.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationTrackInfo_SubchannelControlBits = new DataRelation("TrackInfo_SubchannelControlBits", new DataColumn[] {
                        this.tableTrackInfo.TrackInfo_IdColumn}, new DataColumn[] {
                        this.tableSubchannelControlBits.TrackInfo_IdColumn}, false);
            this.relationTrackInfo_SubchannelControlBits.Nested = true;
            this.Relations.Add(this.relationTrackInfo_SubchannelControlBits);
            this.relationDiscInfo_TrackInfo = new DataRelation("DiscInfo_TrackInfo", new DataColumn[] {
                        this.tableDiscInfo.DiscInfo_IdColumn}, new DataColumn[] {
                        this.tableTrackInfo.DiscInfo_IdColumn}, false);
            this.relationDiscInfo_TrackInfo.Nested = true;
            this.Relations.Add(this.relationDiscInfo_TrackInfo);
        }
        
        private bool ShouldSerializeDiscInfo() {
            return false;
        }
        
        private bool ShouldSerializeTrackInfo() {
            return false;
        }
        
        private bool ShouldSerializeSubchannelControlBits() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void DiscInfoRowChangeEventHandler(object sender, DiscInfoRowChangeEvent e);
        
        public delegate void TrackInfoRowChangeEventHandler(object sender, TrackInfoRowChangeEvent e);
        
        public delegate void SubchannelControlBitsRowChangeEventHandler(object sender, SubchannelControlBitsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DiscInfoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFreeBlocks;
            
            private DataColumn columnFirstFreeBlock;
            
            private DataColumn columnLeadoutStartBlock;
            
            private DataColumn columnNumberOfSessions;
            
            private DataColumn columnNumberOfTracks;
            
            private DataColumn columnIsOrangeBook;
            
            private DataColumn columnIsBlueBook;
            
            private DataColumn columnUpc;
            
            private DataColumn columnDiscInfo_Id;
            
            internal DiscInfoDataTable() : 
                    base("DiscInfo") {
                this.InitClass();
            }
            
            internal DiscInfoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FreeBlocksColumn {
                get {
                    return this.columnFreeBlocks;
                }
            }
            
            internal DataColumn FirstFreeBlockColumn {
                get {
                    return this.columnFirstFreeBlock;
                }
            }
            
            internal DataColumn LeadoutStartBlockColumn {
                get {
                    return this.columnLeadoutStartBlock;
                }
            }
            
            internal DataColumn NumberOfSessionsColumn {
                get {
                    return this.columnNumberOfSessions;
                }
            }
            
            internal DataColumn NumberOfTracksColumn {
                get {
                    return this.columnNumberOfTracks;
                }
            }
            
            internal DataColumn IsOrangeBookColumn {
                get {
                    return this.columnIsOrangeBook;
                }
            }
            
            internal DataColumn IsBlueBookColumn {
                get {
                    return this.columnIsBlueBook;
                }
            }
            
            internal DataColumn UpcColumn {
                get {
                    return this.columnUpc;
                }
            }
            
            internal DataColumn DiscInfo_IdColumn {
                get {
                    return this.columnDiscInfo_Id;
                }
            }
            
            public DiscInfoRow this[int index] {
                get {
                    return ((DiscInfoRow)(this.Rows[index]));
                }
            }
            
            public event DiscInfoRowChangeEventHandler DiscInfoRowChanged;
            
            public event DiscInfoRowChangeEventHandler DiscInfoRowChanging;
            
            public event DiscInfoRowChangeEventHandler DiscInfoRowDeleted;
            
            public event DiscInfoRowChangeEventHandler DiscInfoRowDeleting;
            
            public void AddDiscInfoRow(DiscInfoRow row) {
                this.Rows.Add(row);
            }
            
            public DiscInfoRow AddDiscInfoRow(string FreeBlocks, string FirstFreeBlock, string LeadoutStartBlock, string NumberOfSessions, string NumberOfTracks, string IsOrangeBook, string IsBlueBook, string Upc) {
                DiscInfoRow rowDiscInfoRow = ((DiscInfoRow)(this.NewRow()));
                rowDiscInfoRow.ItemArray = new object[] {
                        FreeBlocks,
                        FirstFreeBlock,
                        LeadoutStartBlock,
                        NumberOfSessions,
                        NumberOfTracks,
                        IsOrangeBook,
                        IsBlueBook,
                        Upc,
                        null};
                this.Rows.Add(rowDiscInfoRow);
                return rowDiscInfoRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DiscInfoDataTable cln = ((DiscInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DiscInfoDataTable();
            }
            
            internal void InitVars() {
                this.columnFreeBlocks = this.Columns["FreeBlocks"];
                this.columnFirstFreeBlock = this.Columns["FirstFreeBlock"];
                this.columnLeadoutStartBlock = this.Columns["LeadoutStartBlock"];
                this.columnNumberOfSessions = this.Columns["NumberOfSessions"];
                this.columnNumberOfTracks = this.Columns["NumberOfTracks"];
                this.columnIsOrangeBook = this.Columns["IsOrangeBook"];
                this.columnIsBlueBook = this.Columns["IsBlueBook"];
                this.columnUpc = this.Columns["Upc"];
                this.columnDiscInfo_Id = this.Columns["DiscInfo_Id"];
            }
            
            private void InitClass() {
                this.columnFreeBlocks = new DataColumn("FreeBlocks", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFreeBlocks);
                this.columnFirstFreeBlock = new DataColumn("FirstFreeBlock", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFirstFreeBlock);
                this.columnLeadoutStartBlock = new DataColumn("LeadoutStartBlock", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnLeadoutStartBlock);
                this.columnNumberOfSessions = new DataColumn("NumberOfSessions", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnNumberOfSessions);
                this.columnNumberOfTracks = new DataColumn("NumberOfTracks", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnNumberOfTracks);
                this.columnIsOrangeBook = new DataColumn("IsOrangeBook", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnIsOrangeBook);
                this.columnIsBlueBook = new DataColumn("IsBlueBook", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnIsBlueBook);
                this.columnUpc = new DataColumn("Upc", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUpc);
                this.columnDiscInfo_Id = new DataColumn("DiscInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnDiscInfo_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnDiscInfo_Id}, true));
                this.columnFreeBlocks.AllowDBNull = false;
                this.columnFreeBlocks.Namespace = "";
                this.columnFirstFreeBlock.AllowDBNull = false;
                this.columnFirstFreeBlock.Namespace = "";
                this.columnLeadoutStartBlock.AllowDBNull = false;
                this.columnLeadoutStartBlock.Namespace = "";
                this.columnNumberOfSessions.AllowDBNull = false;
                this.columnNumberOfSessions.Namespace = "";
                this.columnNumberOfTracks.AllowDBNull = false;
                this.columnNumberOfTracks.Namespace = "";
                this.columnIsOrangeBook.Namespace = "";
                this.columnIsOrangeBook.DefaultValue = "false";
                this.columnIsBlueBook.Namespace = "";
                this.columnIsBlueBook.DefaultValue = "false";
                this.columnUpc.Namespace = "";
                this.columnDiscInfo_Id.AutoIncrement = true;
                this.columnDiscInfo_Id.AllowDBNull = false;
                this.columnDiscInfo_Id.Unique = true;
            }
            
            public DiscInfoRow NewDiscInfoRow() {
                return ((DiscInfoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DiscInfoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DiscInfoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DiscInfoRowChanged != null)) {
                    this.DiscInfoRowChanged(this, new DiscInfoRowChangeEvent(((DiscInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DiscInfoRowChanging != null)) {
                    this.DiscInfoRowChanging(this, new DiscInfoRowChangeEvent(((DiscInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DiscInfoRowDeleted != null)) {
                    this.DiscInfoRowDeleted(this, new DiscInfoRowChangeEvent(((DiscInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DiscInfoRowDeleting != null)) {
                    this.DiscInfoRowDeleting(this, new DiscInfoRowChangeEvent(((DiscInfoRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDiscInfoRow(DiscInfoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DiscInfoRow : DataRow {
            
            private DiscInfoDataTable tableDiscInfo;
            
            internal DiscInfoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDiscInfo = ((DiscInfoDataTable)(this.Table));
            }
            
            public string FreeBlocks {
                get {
                    return ((string)(this[this.tableDiscInfo.FreeBlocksColumn]));
                }
                set {
                    this[this.tableDiscInfo.FreeBlocksColumn] = value;
                }
            }
            
            public string FirstFreeBlock {
                get {
                    return ((string)(this[this.tableDiscInfo.FirstFreeBlockColumn]));
                }
                set {
                    this[this.tableDiscInfo.FirstFreeBlockColumn] = value;
                }
            }
            
            public string LeadoutStartBlock {
                get {
                    return ((string)(this[this.tableDiscInfo.LeadoutStartBlockColumn]));
                }
                set {
                    this[this.tableDiscInfo.LeadoutStartBlockColumn] = value;
                }
            }
            
            public string NumberOfSessions {
                get {
                    return ((string)(this[this.tableDiscInfo.NumberOfSessionsColumn]));
                }
                set {
                    this[this.tableDiscInfo.NumberOfSessionsColumn] = value;
                }
            }
            
            public string NumberOfTracks {
                get {
                    return ((string)(this[this.tableDiscInfo.NumberOfTracksColumn]));
                }
                set {
                    this[this.tableDiscInfo.NumberOfTracksColumn] = value;
                }
            }
            
            public string IsOrangeBook {
                get {
                    try {
                        return ((string)(this[this.tableDiscInfo.IsOrangeBookColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiscInfo.IsOrangeBookColumn] = value;
                }
            }
            
            public string IsBlueBook {
                get {
                    try {
                        return ((string)(this[this.tableDiscInfo.IsBlueBookColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiscInfo.IsBlueBookColumn] = value;
                }
            }
            
            public string Upc {
                get {
                    try {
                        return ((string)(this[this.tableDiscInfo.UpcColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiscInfo.UpcColumn] = value;
                }
            }
            
            public bool IsIsOrangeBookNull() {
                return this.IsNull(this.tableDiscInfo.IsOrangeBookColumn);
            }
            
            public void SetIsOrangeBookNull() {
                this[this.tableDiscInfo.IsOrangeBookColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsBlueBookNull() {
                return this.IsNull(this.tableDiscInfo.IsBlueBookColumn);
            }
            
            public void SetIsBlueBookNull() {
                this[this.tableDiscInfo.IsBlueBookColumn] = System.Convert.DBNull;
            }
            
            public bool IsUpcNull() {
                return this.IsNull(this.tableDiscInfo.UpcColumn);
            }
            
            public void SetUpcNull() {
                this[this.tableDiscInfo.UpcColumn] = System.Convert.DBNull;
            }
            
            public TrackInfoRow[] GetTrackInfoRows() {
                return ((TrackInfoRow[])(this.GetChildRows(this.Table.ChildRelations["DiscInfo_TrackInfo"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DiscInfoRowChangeEvent : EventArgs {
            
            private DiscInfoRow eventRow;
            
            private DataRowAction eventAction;
            
            public DiscInfoRowChangeEvent(DiscInfoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DiscInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TrackInfoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnSessionNumber;
            
            private DataColumn columnTrackNumber;
            
            private DataColumn columnTrackType;
            
            private DataColumn columnStartBlock;
            
            private DataColumn columnNumberOfBlocks;
            
            private DataColumn columnPregapBlocks;
            
            private DataColumn columnRunoutSubtracted;
            
            private DataColumn columnPregapSubtracted;
            
            private DataColumn columnMaxIndex;
            
            private DataColumn columnHasPVD;
            
            private DataColumn columnIsrc;
            
            private DataColumn columnTrackInfo_Id;
            
            private DataColumn columnDiscInfo_Id;
            
            internal TrackInfoDataTable() : 
                    base("TrackInfo") {
                this.InitClass();
            }
            
            internal TrackInfoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn SessionNumberColumn {
                get {
                    return this.columnSessionNumber;
                }
            }
            
            internal DataColumn TrackNumberColumn {
                get {
                    return this.columnTrackNumber;
                }
            }
            
            internal DataColumn TrackTypeColumn {
                get {
                    return this.columnTrackType;
                }
            }
            
            internal DataColumn StartBlockColumn {
                get {
                    return this.columnStartBlock;
                }
            }
            
            internal DataColumn NumberOfBlocksColumn {
                get {
                    return this.columnNumberOfBlocks;
                }
            }
            
            internal DataColumn PregapBlocksColumn {
                get {
                    return this.columnPregapBlocks;
                }
            }
            
            internal DataColumn RunoutSubtractedColumn {
                get {
                    return this.columnRunoutSubtracted;
                }
            }
            
            internal DataColumn PregapSubtractedColumn {
                get {
                    return this.columnPregapSubtracted;
                }
            }
            
            internal DataColumn MaxIndexColumn {
                get {
                    return this.columnMaxIndex;
                }
            }
            
            internal DataColumn HasPVDColumn {
                get {
                    return this.columnHasPVD;
                }
            }
            
            internal DataColumn IsrcColumn {
                get {
                    return this.columnIsrc;
                }
            }
            
            internal DataColumn TrackInfo_IdColumn {
                get {
                    return this.columnTrackInfo_Id;
                }
            }
            
            internal DataColumn DiscInfo_IdColumn {
                get {
                    return this.columnDiscInfo_Id;
                }
            }
            
            public TrackInfoRow this[int index] {
                get {
                    return ((TrackInfoRow)(this.Rows[index]));
                }
            }
            
            public event TrackInfoRowChangeEventHandler TrackInfoRowChanged;
            
            public event TrackInfoRowChangeEventHandler TrackInfoRowChanging;
            
            public event TrackInfoRowChangeEventHandler TrackInfoRowDeleted;
            
            public event TrackInfoRowChangeEventHandler TrackInfoRowDeleting;
            
            public void AddTrackInfoRow(TrackInfoRow row) {
                this.Rows.Add(row);
            }
            
            public TrackInfoRow AddTrackInfoRow(string SessionNumber, string TrackNumber, string TrackType, string StartBlock, string NumberOfBlocks, string PregapBlocks, string RunoutSubtracted, string PregapSubtracted, string MaxIndex, string HasPVD, string Isrc, DiscInfoRow parentDiscInfoRowByDiscInfo_TrackInfo) {
                TrackInfoRow rowTrackInfoRow = ((TrackInfoRow)(this.NewRow()));
                rowTrackInfoRow.ItemArray = new object[] {
                        SessionNumber,
                        TrackNumber,
                        TrackType,
                        StartBlock,
                        NumberOfBlocks,
                        PregapBlocks,
                        RunoutSubtracted,
                        PregapSubtracted,
                        MaxIndex,
                        HasPVD,
                        Isrc,
                        null,
                        parentDiscInfoRowByDiscInfo_TrackInfo[8]};
                this.Rows.Add(rowTrackInfoRow);
                return rowTrackInfoRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TrackInfoDataTable cln = ((TrackInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TrackInfoDataTable();
            }
            
            internal void InitVars() {
                this.columnSessionNumber = this.Columns["SessionNumber"];
                this.columnTrackNumber = this.Columns["TrackNumber"];
                this.columnTrackType = this.Columns["TrackType"];
                this.columnStartBlock = this.Columns["StartBlock"];
                this.columnNumberOfBlocks = this.Columns["NumberOfBlocks"];
                this.columnPregapBlocks = this.Columns["PregapBlocks"];
                this.columnRunoutSubtracted = this.Columns["RunoutSubtracted"];
                this.columnPregapSubtracted = this.Columns["PregapSubtracted"];
                this.columnMaxIndex = this.Columns["MaxIndex"];
                this.columnHasPVD = this.Columns["HasPVD"];
                this.columnIsrc = this.Columns["Isrc"];
                this.columnTrackInfo_Id = this.Columns["TrackInfo_Id"];
                this.columnDiscInfo_Id = this.Columns["DiscInfo_Id"];
            }
            
            private void InitClass() {
                this.columnSessionNumber = new DataColumn("SessionNumber", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSessionNumber);
                this.columnTrackNumber = new DataColumn("TrackNumber", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTrackNumber);
                this.columnTrackType = new DataColumn("TrackType", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTrackType);
                this.columnStartBlock = new DataColumn("StartBlock", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnStartBlock);
                this.columnNumberOfBlocks = new DataColumn("NumberOfBlocks", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnNumberOfBlocks);
                this.columnPregapBlocks = new DataColumn("PregapBlocks", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPregapBlocks);
                this.columnRunoutSubtracted = new DataColumn("RunoutSubtracted", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRunoutSubtracted);
                this.columnPregapSubtracted = new DataColumn("PregapSubtracted", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPregapSubtracted);
                this.columnMaxIndex = new DataColumn("MaxIndex", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnMaxIndex);
                this.columnHasPVD = new DataColumn("HasPVD", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnHasPVD);
                this.columnIsrc = new DataColumn("Isrc", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnIsrc);
                this.columnTrackInfo_Id = new DataColumn("TrackInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTrackInfo_Id);
                this.columnDiscInfo_Id = new DataColumn("DiscInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnDiscInfo_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnTrackInfo_Id}, true));
                this.columnSessionNumber.AllowDBNull = false;
                this.columnSessionNumber.Namespace = "";
                this.columnTrackNumber.AllowDBNull = false;
                this.columnTrackNumber.Namespace = "";
                this.columnTrackType.Namespace = "";
                this.columnTrackType.DefaultValue = "Audio";
                this.columnStartBlock.AllowDBNull = false;
                this.columnStartBlock.Namespace = "";
                this.columnNumberOfBlocks.AllowDBNull = false;
                this.columnNumberOfBlocks.Namespace = "";
                this.columnPregapBlocks.AllowDBNull = false;
                this.columnPregapBlocks.Namespace = "";
                this.columnRunoutSubtracted.Namespace = "";
                this.columnRunoutSubtracted.DefaultValue = "false";
                this.columnPregapSubtracted.Namespace = "";
                this.columnPregapSubtracted.DefaultValue = "false";
                this.columnMaxIndex.AllowDBNull = false;
                this.columnMaxIndex.Namespace = "";
                this.columnHasPVD.Namespace = "";
                this.columnHasPVD.DefaultValue = "false";
                this.columnIsrc.Namespace = "";
                this.columnTrackInfo_Id.AutoIncrement = true;
                this.columnTrackInfo_Id.AllowDBNull = false;
                this.columnTrackInfo_Id.Unique = true;
            }
            
            public TrackInfoRow NewTrackInfoRow() {
                return ((TrackInfoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TrackInfoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TrackInfoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TrackInfoRowChanged != null)) {
                    this.TrackInfoRowChanged(this, new TrackInfoRowChangeEvent(((TrackInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TrackInfoRowChanging != null)) {
                    this.TrackInfoRowChanging(this, new TrackInfoRowChangeEvent(((TrackInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TrackInfoRowDeleted != null)) {
                    this.TrackInfoRowDeleted(this, new TrackInfoRowChangeEvent(((TrackInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TrackInfoRowDeleting != null)) {
                    this.TrackInfoRowDeleting(this, new TrackInfoRowChangeEvent(((TrackInfoRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTrackInfoRow(TrackInfoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TrackInfoRow : DataRow {
            
            private TrackInfoDataTable tableTrackInfo;
            
            internal TrackInfoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTrackInfo = ((TrackInfoDataTable)(this.Table));
            }
            
            public string SessionNumber {
                get {
                    return ((string)(this[this.tableTrackInfo.SessionNumberColumn]));
                }
                set {
                    this[this.tableTrackInfo.SessionNumberColumn] = value;
                }
            }
            
            public string TrackNumber {
                get {
                    return ((string)(this[this.tableTrackInfo.TrackNumberColumn]));
                }
                set {
                    this[this.tableTrackInfo.TrackNumberColumn] = value;
                }
            }
            
            public string TrackType {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.TrackTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.TrackTypeColumn] = value;
                }
            }
            
            public string StartBlock {
                get {
                    return ((string)(this[this.tableTrackInfo.StartBlockColumn]));
                }
                set {
                    this[this.tableTrackInfo.StartBlockColumn] = value;
                }
            }
            
            public string NumberOfBlocks {
                get {
                    return ((string)(this[this.tableTrackInfo.NumberOfBlocksColumn]));
                }
                set {
                    this[this.tableTrackInfo.NumberOfBlocksColumn] = value;
                }
            }
            
            public string PregapBlocks {
                get {
                    return ((string)(this[this.tableTrackInfo.PregapBlocksColumn]));
                }
                set {
                    this[this.tableTrackInfo.PregapBlocksColumn] = value;
                }
            }
            
            public string RunoutSubtracted {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.RunoutSubtractedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.RunoutSubtractedColumn] = value;
                }
            }
            
            public string PregapSubtracted {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.PregapSubtractedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.PregapSubtractedColumn] = value;
                }
            }
            
            public string MaxIndex {
                get {
                    return ((string)(this[this.tableTrackInfo.MaxIndexColumn]));
                }
                set {
                    this[this.tableTrackInfo.MaxIndexColumn] = value;
                }
            }
            
            public string HasPVD {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.HasPVDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.HasPVDColumn] = value;
                }
            }
            
            public string Isrc {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.IsrcColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.IsrcColumn] = value;
                }
            }
            
            public DiscInfoRow DiscInfoRow {
                get {
                    return ((DiscInfoRow)(this.GetParentRow(this.Table.ParentRelations["DiscInfo_TrackInfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DiscInfo_TrackInfo"]);
                }
            }
            
            public bool IsTrackTypeNull() {
                return this.IsNull(this.tableTrackInfo.TrackTypeColumn);
            }
            
            public void SetTrackTypeNull() {
                this[this.tableTrackInfo.TrackTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRunoutSubtractedNull() {
                return this.IsNull(this.tableTrackInfo.RunoutSubtractedColumn);
            }
            
            public void SetRunoutSubtractedNull() {
                this[this.tableTrackInfo.RunoutSubtractedColumn] = System.Convert.DBNull;
            }
            
            public bool IsPregapSubtractedNull() {
                return this.IsNull(this.tableTrackInfo.PregapSubtractedColumn);
            }
            
            public void SetPregapSubtractedNull() {
                this[this.tableTrackInfo.PregapSubtractedColumn] = System.Convert.DBNull;
            }
            
            public bool IsHasPVDNull() {
                return this.IsNull(this.tableTrackInfo.HasPVDColumn);
            }
            
            public void SetHasPVDNull() {
                this[this.tableTrackInfo.HasPVDColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsrcNull() {
                return this.IsNull(this.tableTrackInfo.IsrcColumn);
            }
            
            public void SetIsrcNull() {
                this[this.tableTrackInfo.IsrcColumn] = System.Convert.DBNull;
            }
            
            public SubchannelControlBitsRow[] GetSubchannelControlBitsRows() {
                return ((SubchannelControlBitsRow[])(this.GetChildRows(this.Table.ChildRelations["TrackInfo_SubchannelControlBits"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TrackInfoRowChangeEvent : EventArgs {
            
            private TrackInfoRow eventRow;
            
            private DataRowAction eventAction;
            
            public TrackInfoRowChangeEvent(TrackInfoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TrackInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SubchannelControlBitsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPreEmphasis;
            
            private DataColumn columnAllowCopy;
            
            private DataColumn columnData;
            
            private DataColumn columnFourChannel;
            
            private DataColumn columnTrackInfo_Id;
            
            internal SubchannelControlBitsDataTable() : 
                    base("SubchannelControlBits") {
                this.InitClass();
            }
            
            internal SubchannelControlBitsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PreEmphasisColumn {
                get {
                    return this.columnPreEmphasis;
                }
            }
            
            internal DataColumn AllowCopyColumn {
                get {
                    return this.columnAllowCopy;
                }
            }
            
            internal DataColumn DataColumn {
                get {
                    return this.columnData;
                }
            }
            
            internal DataColumn FourChannelColumn {
                get {
                    return this.columnFourChannel;
                }
            }
            
            internal DataColumn TrackInfo_IdColumn {
                get {
                    return this.columnTrackInfo_Id;
                }
            }
            
            public SubchannelControlBitsRow this[int index] {
                get {
                    return ((SubchannelControlBitsRow)(this.Rows[index]));
                }
            }
            
            public event SubchannelControlBitsRowChangeEventHandler SubchannelControlBitsRowChanged;
            
            public event SubchannelControlBitsRowChangeEventHandler SubchannelControlBitsRowChanging;
            
            public event SubchannelControlBitsRowChangeEventHandler SubchannelControlBitsRowDeleted;
            
            public event SubchannelControlBitsRowChangeEventHandler SubchannelControlBitsRowDeleting;
            
            public void AddSubchannelControlBitsRow(SubchannelControlBitsRow row) {
                this.Rows.Add(row);
            }
            
            public SubchannelControlBitsRow AddSubchannelControlBitsRow(string PreEmphasis, string AllowCopy, string Data, string FourChannel, TrackInfoRow parentTrackInfoRowByTrackInfo_SubchannelControlBits) {
                SubchannelControlBitsRow rowSubchannelControlBitsRow = ((SubchannelControlBitsRow)(this.NewRow()));
                rowSubchannelControlBitsRow.ItemArray = new object[] {
                        PreEmphasis,
                        AllowCopy,
                        Data,
                        FourChannel,
                        parentTrackInfoRowByTrackInfo_SubchannelControlBits[11]};
                this.Rows.Add(rowSubchannelControlBitsRow);
                return rowSubchannelControlBitsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SubchannelControlBitsDataTable cln = ((SubchannelControlBitsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SubchannelControlBitsDataTable();
            }
            
            internal void InitVars() {
                this.columnPreEmphasis = this.Columns["PreEmphasis"];
                this.columnAllowCopy = this.Columns["AllowCopy"];
                this.columnData = this.Columns["Data"];
                this.columnFourChannel = this.Columns["FourChannel"];
                this.columnTrackInfo_Id = this.Columns["TrackInfo_Id"];
            }
            
            private void InitClass() {
                this.columnPreEmphasis = new DataColumn("PreEmphasis", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPreEmphasis);
                this.columnAllowCopy = new DataColumn("AllowCopy", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAllowCopy);
                this.columnData = new DataColumn("Data", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnData);
                this.columnFourChannel = new DataColumn("FourChannel", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFourChannel);
                this.columnTrackInfo_Id = new DataColumn("TrackInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTrackInfo_Id);
                this.columnPreEmphasis.Namespace = "";
                this.columnPreEmphasis.DefaultValue = "false";
                this.columnAllowCopy.Namespace = "";
                this.columnAllowCopy.DefaultValue = "false";
                this.columnData.Namespace = "";
                this.columnData.DefaultValue = "false";
                this.columnFourChannel.Namespace = "";
                this.columnFourChannel.DefaultValue = "false";
            }
            
            public SubchannelControlBitsRow NewSubchannelControlBitsRow() {
                return ((SubchannelControlBitsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SubchannelControlBitsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SubchannelControlBitsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SubchannelControlBitsRowChanged != null)) {
                    this.SubchannelControlBitsRowChanged(this, new SubchannelControlBitsRowChangeEvent(((SubchannelControlBitsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SubchannelControlBitsRowChanging != null)) {
                    this.SubchannelControlBitsRowChanging(this, new SubchannelControlBitsRowChangeEvent(((SubchannelControlBitsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SubchannelControlBitsRowDeleted != null)) {
                    this.SubchannelControlBitsRowDeleted(this, new SubchannelControlBitsRowChangeEvent(((SubchannelControlBitsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SubchannelControlBitsRowDeleting != null)) {
                    this.SubchannelControlBitsRowDeleting(this, new SubchannelControlBitsRowChangeEvent(((SubchannelControlBitsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSubchannelControlBitsRow(SubchannelControlBitsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SubchannelControlBitsRow : DataRow {
            
            private SubchannelControlBitsDataTable tableSubchannelControlBits;
            
            internal SubchannelControlBitsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSubchannelControlBits = ((SubchannelControlBitsDataTable)(this.Table));
            }
            
            public string PreEmphasis {
                get {
                    try {
                        return ((string)(this[this.tableSubchannelControlBits.PreEmphasisColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubchannelControlBits.PreEmphasisColumn] = value;
                }
            }
            
            public string AllowCopy {
                get {
                    try {
                        return ((string)(this[this.tableSubchannelControlBits.AllowCopyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubchannelControlBits.AllowCopyColumn] = value;
                }
            }
            
            public string Data {
                get {
                    try {
                        return ((string)(this[this.tableSubchannelControlBits.DataColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubchannelControlBits.DataColumn] = value;
                }
            }
            
            public string FourChannel {
                get {
                    try {
                        return ((string)(this[this.tableSubchannelControlBits.FourChannelColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubchannelControlBits.FourChannelColumn] = value;
                }
            }
            
            public TrackInfoRow TrackInfoRow {
                get {
                    return ((TrackInfoRow)(this.GetParentRow(this.Table.ParentRelations["TrackInfo_SubchannelControlBits"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TrackInfo_SubchannelControlBits"]);
                }
            }
            
            public bool IsPreEmphasisNull() {
                return this.IsNull(this.tableSubchannelControlBits.PreEmphasisColumn);
            }
            
            public void SetPreEmphasisNull() {
                this[this.tableSubchannelControlBits.PreEmphasisColumn] = System.Convert.DBNull;
            }
            
            public bool IsAllowCopyNull() {
                return this.IsNull(this.tableSubchannelControlBits.AllowCopyColumn);
            }
            
            public void SetAllowCopyNull() {
                this[this.tableSubchannelControlBits.AllowCopyColumn] = System.Convert.DBNull;
            }
            
            public bool IsDataNull() {
                return this.IsNull(this.tableSubchannelControlBits.DataColumn);
            }
            
            public void SetDataNull() {
                this[this.tableSubchannelControlBits.DataColumn] = System.Convert.DBNull;
            }
            
            public bool IsFourChannelNull() {
                return this.IsNull(this.tableSubchannelControlBits.FourChannelColumn);
            }
            
            public void SetFourChannelNull() {
                this[this.tableSubchannelControlBits.FourChannelColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SubchannelControlBitsRowChangeEvent : EventArgs {
            
            private SubchannelControlBitsRow eventRow;
            
            private DataRowAction eventAction;
            
            public SubchannelControlBitsRowChangeEvent(SubchannelControlBitsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SubchannelControlBitsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
