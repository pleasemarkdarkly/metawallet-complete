//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace RImageSchemas.DataSets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ProductionOrderStatus : DataSet {
        
        private StatusDataTable tableStatus;
        
        private TimestampsDataTable tableTimestamps;
        
        private DeviceDataTable tableDevice;
        
        public ProductionOrderStatus() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ProductionOrderStatus(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Status"] != null)) {
                    this.Tables.Add(new StatusDataTable(ds.Tables["Status"]));
                }
                if ((ds.Tables["Timestamps"] != null)) {
                    this.Tables.Add(new TimestampsDataTable(ds.Tables["Timestamps"]));
                }
                if ((ds.Tables["Device"] != null)) {
                    this.Tables.Add(new DeviceDataTable(ds.Tables["Device"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StatusDataTable Status {
            get {
                return this.tableStatus;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TimestampsDataTable Timestamps {
            get {
                return this.tableTimestamps;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DeviceDataTable Device {
            get {
                return this.tableDevice;
            }
        }
        
        public override DataSet Clone() {
            ProductionOrderStatus cln = ((ProductionOrderStatus)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Status"] != null)) {
                this.Tables.Add(new StatusDataTable(ds.Tables["Status"]));
            }
            if ((ds.Tables["Timestamps"] != null)) {
                this.Tables.Add(new TimestampsDataTable(ds.Tables["Timestamps"]));
            }
            if ((ds.Tables["Device"] != null)) {
                this.Tables.Add(new DeviceDataTable(ds.Tables["Device"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableStatus = ((StatusDataTable)(this.Tables["Status"]));
            if ((this.tableStatus != null)) {
                this.tableStatus.InitVars();
            }
            this.tableTimestamps = ((TimestampsDataTable)(this.Tables["Timestamps"]));
            if ((this.tableTimestamps != null)) {
                this.tableTimestamps.InitVars();
            }
            this.tableDevice = ((DeviceDataTable)(this.Tables["Device"]));
            if ((this.tableDevice != null)) {
                this.tableDevice.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "ProductionOrderStatus";
            this.Prefix = "";
            this.Namespace = "";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableStatus = new StatusDataTable();
            this.Tables.Add(this.tableStatus);
            this.tableTimestamps = new TimestampsDataTable();
            this.Tables.Add(this.tableTimestamps);
            this.tableDevice = new DeviceDataTable();
            this.Tables.Add(this.tableDevice);
        }
        
        private bool ShouldSerializeStatus() {
            return false;
        }
        
        private bool ShouldSerializeTimestamps() {
            return false;
        }
        
        private bool ShouldSerializeDevice() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void StatusRowChangeEventHandler(object sender, StatusRowChangeEvent e);
        
        public delegate void TimestampsRowChangeEventHandler(object sender, TimestampsRowChangeEvent e);
        
        public delegate void DeviceRowChangeEventHandler(object sender, DeviceRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StatusDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnState;
            
            private DataColumn columnStage;
            
            private DataColumn columnStageEx;
            
            private DataColumn columnErrorCode;
            
            private DataColumn columnErrorMessage;
            
            private DataColumn columnActionWithError;
            
            private DataColumn columnCopiesRequested;
            
            private DataColumn columnCopiesCompleted;
            
            private DataColumn columnPercentCompleted;
            
            private DataColumn columnOutputMailslot;
            
            private DataColumn columnBarcodeValue;
            
            internal StatusDataTable() : 
                    base("Status") {
                this.InitClass();
            }
            
            internal StatusDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            internal DataColumn StageColumn {
                get {
                    return this.columnStage;
                }
            }
            
            internal DataColumn StageExColumn {
                get {
                    return this.columnStageEx;
                }
            }
            
            internal DataColumn ErrorCodeColumn {
                get {
                    return this.columnErrorCode;
                }
            }
            
            internal DataColumn ErrorMessageColumn {
                get {
                    return this.columnErrorMessage;
                }
            }
            
            internal DataColumn ActionWithErrorColumn {
                get {
                    return this.columnActionWithError;
                }
            }
            
            internal DataColumn CopiesRequestedColumn {
                get {
                    return this.columnCopiesRequested;
                }
            }
            
            internal DataColumn CopiesCompletedColumn {
                get {
                    return this.columnCopiesCompleted;
                }
            }
            
            internal DataColumn PercentCompletedColumn {
                get {
                    return this.columnPercentCompleted;
                }
            }
            
            internal DataColumn OutputMailslotColumn {
                get {
                    return this.columnOutputMailslot;
                }
            }
            
            internal DataColumn BarcodeValueColumn {
                get {
                    return this.columnBarcodeValue;
                }
            }
            
            public StatusRow this[int index] {
                get {
                    return ((StatusRow)(this.Rows[index]));
                }
            }
            
            public event StatusRowChangeEventHandler StatusRowChanged;
            
            public event StatusRowChangeEventHandler StatusRowChanging;
            
            public event StatusRowChangeEventHandler StatusRowDeleted;
            
            public event StatusRowChangeEventHandler StatusRowDeleting;
            
            public void AddStatusRow(StatusRow row) {
                this.Rows.Add(row);
            }
            
            public StatusRow AddStatusRow(string State, string Stage, string StageEx, string ErrorCode, string ErrorMessage, string ActionWithError, string CopiesRequested, string CopiesCompleted, string PercentCompleted, string OutputMailslot, string BarcodeValue) {
                StatusRow rowStatusRow = ((StatusRow)(this.NewRow()));
                rowStatusRow.ItemArray = new object[] {
                        State,
                        Stage,
                        StageEx,
                        ErrorCode,
                        ErrorMessage,
                        ActionWithError,
                        CopiesRequested,
                        CopiesCompleted,
                        PercentCompleted,
                        OutputMailslot,
                        BarcodeValue};
                this.Rows.Add(rowStatusRow);
                return rowStatusRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                StatusDataTable cln = ((StatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new StatusDataTable();
            }
            
            internal void InitVars() {
                this.columnState = this.Columns["State"];
                this.columnStage = this.Columns["Stage"];
                this.columnStageEx = this.Columns["StageEx"];
                this.columnErrorCode = this.Columns["ErrorCode"];
                this.columnErrorMessage = this.Columns["ErrorMessage"];
                this.columnActionWithError = this.Columns["ActionWithError"];
                this.columnCopiesRequested = this.Columns["CopiesRequested"];
                this.columnCopiesCompleted = this.Columns["CopiesCompleted"];
                this.columnPercentCompleted = this.Columns["PercentCompleted"];
                this.columnOutputMailslot = this.Columns["OutputMailslot"];
                this.columnBarcodeValue = this.Columns["BarcodeValue"];
            }
            
            private void InitClass() {
                this.columnState = new DataColumn("State", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnState);
                this.columnStage = new DataColumn("Stage", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnStage);
                this.columnStageEx = new DataColumn("StageEx", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnStageEx);
                this.columnErrorCode = new DataColumn("ErrorCode", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnErrorCode);
                this.columnErrorMessage = new DataColumn("ErrorMessage", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnErrorMessage);
                this.columnActionWithError = new DataColumn("ActionWithError", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnActionWithError);
                this.columnCopiesRequested = new DataColumn("CopiesRequested", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCopiesRequested);
                this.columnCopiesCompleted = new DataColumn("CopiesCompleted", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCopiesCompleted);
                this.columnPercentCompleted = new DataColumn("PercentCompleted", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPercentCompleted);
                this.columnOutputMailslot = new DataColumn("OutputMailslot", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOutputMailslot);
                this.columnBarcodeValue = new DataColumn("BarcodeValue", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnBarcodeValue);
                this.columnState.AllowDBNull = false;
                this.columnState.Namespace = "";
                this.columnStage.AllowDBNull = false;
                this.columnStage.Namespace = "";
                this.columnStageEx.Namespace = "";
                this.columnErrorCode.Namespace = "";
                this.columnErrorMessage.Namespace = "";
                this.columnActionWithError.Namespace = "";
                this.columnCopiesRequested.AllowDBNull = false;
                this.columnCopiesRequested.Namespace = "";
                this.columnCopiesCompleted.AllowDBNull = false;
                this.columnCopiesCompleted.Namespace = "";
                this.columnPercentCompleted.AllowDBNull = false;
                this.columnPercentCompleted.Namespace = "";
                this.columnOutputMailslot.Namespace = "";
                this.columnBarcodeValue.Namespace = "";
            }
            
            public StatusRow NewStatusRow() {
                return ((StatusRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new StatusRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(StatusRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StatusRowChanged != null)) {
                    this.StatusRowChanged(this, new StatusRowChangeEvent(((StatusRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StatusRowChanging != null)) {
                    this.StatusRowChanging(this, new StatusRowChangeEvent(((StatusRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StatusRowDeleted != null)) {
                    this.StatusRowDeleted(this, new StatusRowChangeEvent(((StatusRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StatusRowDeleting != null)) {
                    this.StatusRowDeleting(this, new StatusRowChangeEvent(((StatusRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveStatusRow(StatusRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StatusRow : DataRow {
            
            private StatusDataTable tableStatus;
            
            internal StatusRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableStatus = ((StatusDataTable)(this.Table));
            }
            
            public string State {
                get {
                    return ((string)(this[this.tableStatus.StateColumn]));
                }
                set {
                    this[this.tableStatus.StateColumn] = value;
                }
            }
            
            public string Stage {
                get {
                    return ((string)(this[this.tableStatus.StageColumn]));
                }
                set {
                    this[this.tableStatus.StageColumn] = value;
                }
            }
            
            public string StageEx {
                get {
                    try {
                        return ((string)(this[this.tableStatus.StageExColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatus.StageExColumn] = value;
                }
            }
            
            public string ErrorCode {
                get {
                    try {
                        return ((string)(this[this.tableStatus.ErrorCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatus.ErrorCodeColumn] = value;
                }
            }
            
            public string ErrorMessage {
                get {
                    try {
                        return ((string)(this[this.tableStatus.ErrorMessageColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatus.ErrorMessageColumn] = value;
                }
            }
            
            public string ActionWithError {
                get {
                    try {
                        return ((string)(this[this.tableStatus.ActionWithErrorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatus.ActionWithErrorColumn] = value;
                }
            }
            
            public string CopiesRequested {
                get {
                    return ((string)(this[this.tableStatus.CopiesRequestedColumn]));
                }
                set {
                    this[this.tableStatus.CopiesRequestedColumn] = value;
                }
            }
            
            public string CopiesCompleted {
                get {
                    return ((string)(this[this.tableStatus.CopiesCompletedColumn]));
                }
                set {
                    this[this.tableStatus.CopiesCompletedColumn] = value;
                }
            }
            
            public string PercentCompleted {
                get {
                    return ((string)(this[this.tableStatus.PercentCompletedColumn]));
                }
                set {
                    this[this.tableStatus.PercentCompletedColumn] = value;
                }
            }
            
            public string OutputMailslot {
                get {
                    try {
                        return ((string)(this[this.tableStatus.OutputMailslotColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatus.OutputMailslotColumn] = value;
                }
            }
            
            public string BarcodeValue {
                get {
                    try {
                        return ((string)(this[this.tableStatus.BarcodeValueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatus.BarcodeValueColumn] = value;
                }
            }
            
            public bool IsStageExNull() {
                return this.IsNull(this.tableStatus.StageExColumn);
            }
            
            public void SetStageExNull() {
                this[this.tableStatus.StageExColumn] = System.Convert.DBNull;
            }
            
            public bool IsErrorCodeNull() {
                return this.IsNull(this.tableStatus.ErrorCodeColumn);
            }
            
            public void SetErrorCodeNull() {
                this[this.tableStatus.ErrorCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsErrorMessageNull() {
                return this.IsNull(this.tableStatus.ErrorMessageColumn);
            }
            
            public void SetErrorMessageNull() {
                this[this.tableStatus.ErrorMessageColumn] = System.Convert.DBNull;
            }
            
            public bool IsActionWithErrorNull() {
                return this.IsNull(this.tableStatus.ActionWithErrorColumn);
            }
            
            public void SetActionWithErrorNull() {
                this[this.tableStatus.ActionWithErrorColumn] = System.Convert.DBNull;
            }
            
            public bool IsOutputMailslotNull() {
                return this.IsNull(this.tableStatus.OutputMailslotColumn);
            }
            
            public void SetOutputMailslotNull() {
                this[this.tableStatus.OutputMailslotColumn] = System.Convert.DBNull;
            }
            
            public bool IsBarcodeValueNull() {
                return this.IsNull(this.tableStatus.BarcodeValueColumn);
            }
            
            public void SetBarcodeValueNull() {
                this[this.tableStatus.BarcodeValueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StatusRowChangeEvent : EventArgs {
            
            private StatusRow eventRow;
            
            private DataRowAction eventAction;
            
            public StatusRowChangeEvent(StatusRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public StatusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TimestampsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnOrderRead;
            
            private DataColumn columnOrderCompleted;
            
            internal TimestampsDataTable() : 
                    base("Timestamps") {
                this.InitClass();
            }
            
            internal TimestampsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn OrderReadColumn {
                get {
                    return this.columnOrderRead;
                }
            }
            
            internal DataColumn OrderCompletedColumn {
                get {
                    return this.columnOrderCompleted;
                }
            }
            
            public TimestampsRow this[int index] {
                get {
                    return ((TimestampsRow)(this.Rows[index]));
                }
            }
            
            public event TimestampsRowChangeEventHandler TimestampsRowChanged;
            
            public event TimestampsRowChangeEventHandler TimestampsRowChanging;
            
            public event TimestampsRowChangeEventHandler TimestampsRowDeleted;
            
            public event TimestampsRowChangeEventHandler TimestampsRowDeleting;
            
            public void AddTimestampsRow(TimestampsRow row) {
                this.Rows.Add(row);
            }
            
            public TimestampsRow AddTimestampsRow(string OrderRead, string OrderCompleted) {
                TimestampsRow rowTimestampsRow = ((TimestampsRow)(this.NewRow()));
                rowTimestampsRow.ItemArray = new object[] {
                        OrderRead,
                        OrderCompleted};
                this.Rows.Add(rowTimestampsRow);
                return rowTimestampsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TimestampsDataTable cln = ((TimestampsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TimestampsDataTable();
            }
            
            internal void InitVars() {
                this.columnOrderRead = this.Columns["OrderRead"];
                this.columnOrderCompleted = this.Columns["OrderCompleted"];
            }
            
            private void InitClass() {
                this.columnOrderRead = new DataColumn("OrderRead", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOrderRead);
                this.columnOrderCompleted = new DataColumn("OrderCompleted", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOrderCompleted);
                this.columnOrderRead.AllowDBNull = false;
                this.columnOrderRead.Namespace = "";
                this.columnOrderCompleted.Namespace = "";
            }
            
            public TimestampsRow NewTimestampsRow() {
                return ((TimestampsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TimestampsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TimestampsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TimestampsRowChanged != null)) {
                    this.TimestampsRowChanged(this, new TimestampsRowChangeEvent(((TimestampsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TimestampsRowChanging != null)) {
                    this.TimestampsRowChanging(this, new TimestampsRowChangeEvent(((TimestampsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TimestampsRowDeleted != null)) {
                    this.TimestampsRowDeleted(this, new TimestampsRowChangeEvent(((TimestampsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TimestampsRowDeleting != null)) {
                    this.TimestampsRowDeleting(this, new TimestampsRowChangeEvent(((TimestampsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTimestampsRow(TimestampsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TimestampsRow : DataRow {
            
            private TimestampsDataTable tableTimestamps;
            
            internal TimestampsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTimestamps = ((TimestampsDataTable)(this.Table));
            }
            
            public string OrderRead {
                get {
                    return ((string)(this[this.tableTimestamps.OrderReadColumn]));
                }
                set {
                    this[this.tableTimestamps.OrderReadColumn] = value;
                }
            }
            
            public string OrderCompleted {
                get {
                    try {
                        return ((string)(this[this.tableTimestamps.OrderCompletedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTimestamps.OrderCompletedColumn] = value;
                }
            }
            
            public bool IsOrderCompletedNull() {
                return this.IsNull(this.tableTimestamps.OrderCompletedColumn);
            }
            
            public void SetOrderCompletedNull() {
                this[this.tableTimestamps.OrderCompletedColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TimestampsRowChangeEvent : EventArgs {
            
            private TimestampsRow eventRow;
            
            private DataRowAction eventAction;
            
            public TimestampsRowChangeEvent(TimestampsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TimestampsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DeviceDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnIdentifier;
            
            private DataColumn columnCurrentState;
            
            private DataColumn columnPercentDone;
            
            private DataColumn columnRejectMessage;
            
            internal DeviceDataTable() : 
                    base("Device") {
                this.InitClass();
            }
            
            internal DeviceDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdentifierColumn {
                get {
                    return this.columnIdentifier;
                }
            }
            
            internal DataColumn CurrentStateColumn {
                get {
                    return this.columnCurrentState;
                }
            }
            
            internal DataColumn PercentDoneColumn {
                get {
                    return this.columnPercentDone;
                }
            }
            
            internal DataColumn RejectMessageColumn {
                get {
                    return this.columnRejectMessage;
                }
            }
            
            public DeviceRow this[int index] {
                get {
                    return ((DeviceRow)(this.Rows[index]));
                }
            }
            
            public event DeviceRowChangeEventHandler DeviceRowChanged;
            
            public event DeviceRowChangeEventHandler DeviceRowChanging;
            
            public event DeviceRowChangeEventHandler DeviceRowDeleted;
            
            public event DeviceRowChangeEventHandler DeviceRowDeleting;
            
            public void AddDeviceRow(DeviceRow row) {
                this.Rows.Add(row);
            }
            
            public DeviceRow AddDeviceRow(string Identifier, string CurrentState, string PercentDone, string RejectMessage) {
                DeviceRow rowDeviceRow = ((DeviceRow)(this.NewRow()));
                rowDeviceRow.ItemArray = new object[] {
                        Identifier,
                        CurrentState,
                        PercentDone,
                        RejectMessage};
                this.Rows.Add(rowDeviceRow);
                return rowDeviceRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DeviceDataTable cln = ((DeviceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DeviceDataTable();
            }
            
            internal void InitVars() {
                this.columnIdentifier = this.Columns["Identifier"];
                this.columnCurrentState = this.Columns["CurrentState"];
                this.columnPercentDone = this.Columns["PercentDone"];
                this.columnRejectMessage = this.Columns["RejectMessage"];
            }
            
            private void InitClass() {
                this.columnIdentifier = new DataColumn("Identifier", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnIdentifier);
                this.columnCurrentState = new DataColumn("CurrentState", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCurrentState);
                this.columnPercentDone = new DataColumn("PercentDone", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPercentDone);
                this.columnRejectMessage = new DataColumn("RejectMessage", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRejectMessage);
                this.columnIdentifier.AllowDBNull = false;
                this.columnIdentifier.Namespace = "";
                this.columnCurrentState.AllowDBNull = false;
                this.columnCurrentState.Namespace = "";
                this.columnPercentDone.Namespace = "";
                this.columnRejectMessage.Namespace = "";
            }
            
            public DeviceRow NewDeviceRow() {
                return ((DeviceRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DeviceRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DeviceRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DeviceRowChanged != null)) {
                    this.DeviceRowChanged(this, new DeviceRowChangeEvent(((DeviceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DeviceRowChanging != null)) {
                    this.DeviceRowChanging(this, new DeviceRowChangeEvent(((DeviceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DeviceRowDeleted != null)) {
                    this.DeviceRowDeleted(this, new DeviceRowChangeEvent(((DeviceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DeviceRowDeleting != null)) {
                    this.DeviceRowDeleting(this, new DeviceRowChangeEvent(((DeviceRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDeviceRow(DeviceRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DeviceRow : DataRow {
            
            private DeviceDataTable tableDevice;
            
            internal DeviceRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDevice = ((DeviceDataTable)(this.Table));
            }
            
            public string Identifier {
                get {
                    return ((string)(this[this.tableDevice.IdentifierColumn]));
                }
                set {
                    this[this.tableDevice.IdentifierColumn] = value;
                }
            }
            
            public string CurrentState {
                get {
                    return ((string)(this[this.tableDevice.CurrentStateColumn]));
                }
                set {
                    this[this.tableDevice.CurrentStateColumn] = value;
                }
            }
            
            public string PercentDone {
                get {
                    try {
                        return ((string)(this[this.tableDevice.PercentDoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDevice.PercentDoneColumn] = value;
                }
            }
            
            public string RejectMessage {
                get {
                    try {
                        return ((string)(this[this.tableDevice.RejectMessageColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDevice.RejectMessageColumn] = value;
                }
            }
            
            public bool IsPercentDoneNull() {
                return this.IsNull(this.tableDevice.PercentDoneColumn);
            }
            
            public void SetPercentDoneNull() {
                this[this.tableDevice.PercentDoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsRejectMessageNull() {
                return this.IsNull(this.tableDevice.RejectMessageColumn);
            }
            
            public void SetRejectMessageNull() {
                this[this.tableDevice.RejectMessageColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DeviceRowChangeEvent : EventArgs {
            
            private DeviceRow eventRow;
            
            private DataRowAction eventAction;
            
            public DeviceRowChangeEvent(DeviceRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DeviceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
