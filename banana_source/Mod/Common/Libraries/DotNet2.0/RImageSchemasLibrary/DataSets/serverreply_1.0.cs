//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace RImageSchemas.DataSets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ServerReply : DataSet {
        
        private AckOnlyDataTable tableAckOnly;
        
        private ServerStatusDataTable tableServerStatus;
        
        private ServerInfoDataTable tableServerInfo;
        
        private TimeStampsDataTable tableTimeStamps;
        
        private SwitchesDataTable tableSwitches;
        
        private OrderListDataTable tableOrderList;
        
        private ProductionOrderDataTable tableProductionOrder;
        
        private ImagingOrderDataTable tableImagingOrder;
        
        private SessionLogDataTable tableSessionLog;
        
        private EntryDataTable tableEntry;
        
        private DialogActionDataTable tableDialogAction;
        
        private ProductionParameterSettingsDataTable tableProductionParameterSettings;
        
        private ServerDataTable tableServer;
        
        private VerifyDataTable tableVerify;
        
        private RecordingDataTable tableRecording;
        
        private PrintingDataTable tablePrinting;
        
        private AutoloaderDataTable tableAutoloader;
        
        private BinDataTable tableBin;
        
        private ReadingDataTable tableReading;
        
        private AutoBulkReadDataTable tableAutoBulkRead;
        
        private KioskModeDataTable tableKioskMode;
        
        private MessagingDataTable tableMessaging;
        
        private ImagingParameterSettingsDataTable tableImagingParameterSettings;
        
        private DataRelation relationServerStatus_ServerInfo;
        
        private DataRelation relationServerStatus_TimeStamps;
        
        private DataRelation relationServerStatus_Switches;
        
        private DataRelation relationOrderList_ProductionOrder;
        
        private DataRelation relationOrderList_ImagingOrder;
        
        private DataRelation relationSessionLog_Entry;
        
        private DataRelation relationAutoloader_Bin;
        
        private DataRelation relationReading_AutoBulkRead;
        
        private DataRelation relationProductionParameterSettings_Server;
        
        private DataRelation relationProductionParameterSettings_Verify;
        
        private DataRelation relationProductionParameterSettings_Recording;
        
        private DataRelation relationProductionParameterSettings_Printing;
        
        private DataRelation relationProductionParameterSettings_Autoloader;
        
        private DataRelation relationProductionParameterSettings_Reading;
        
        private DataRelation relationProductionParameterSettings_KioskMode;
        
        private DataRelation relationProductionParameterSettings_Messaging;
        
        public ServerReply() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ServerReply(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["AckOnly"] != null)) {
                    this.Tables.Add(new AckOnlyDataTable(ds.Tables["AckOnly"]));
                }
                if ((ds.Tables["ServerStatus"] != null)) {
                    this.Tables.Add(new ServerStatusDataTable(ds.Tables["ServerStatus"]));
                }
                if ((ds.Tables["ServerInfo"] != null)) {
                    this.Tables.Add(new ServerInfoDataTable(ds.Tables["ServerInfo"]));
                }
                if ((ds.Tables["TimeStamps"] != null)) {
                    this.Tables.Add(new TimeStampsDataTable(ds.Tables["TimeStamps"]));
                }
                if ((ds.Tables["Switches"] != null)) {
                    this.Tables.Add(new SwitchesDataTable(ds.Tables["Switches"]));
                }
                if ((ds.Tables["OrderList"] != null)) {
                    this.Tables.Add(new OrderListDataTable(ds.Tables["OrderList"]));
                }
                if ((ds.Tables["ProductionOrder"] != null)) {
                    this.Tables.Add(new ProductionOrderDataTable(ds.Tables["ProductionOrder"]));
                }
                if ((ds.Tables["ImagingOrder"] != null)) {
                    this.Tables.Add(new ImagingOrderDataTable(ds.Tables["ImagingOrder"]));
                }
                if ((ds.Tables["SessionLog"] != null)) {
                    this.Tables.Add(new SessionLogDataTable(ds.Tables["SessionLog"]));
                }
                if ((ds.Tables["Entry"] != null)) {
                    this.Tables.Add(new EntryDataTable(ds.Tables["Entry"]));
                }
                if ((ds.Tables["DialogAction"] != null)) {
                    this.Tables.Add(new DialogActionDataTable(ds.Tables["DialogAction"]));
                }
                if ((ds.Tables["ProductionParameterSettings"] != null)) {
                    this.Tables.Add(new ProductionParameterSettingsDataTable(ds.Tables["ProductionParameterSettings"]));
                }
                if ((ds.Tables["Server"] != null)) {
                    this.Tables.Add(new ServerDataTable(ds.Tables["Server"]));
                }
                if ((ds.Tables["Verify"] != null)) {
                    this.Tables.Add(new VerifyDataTable(ds.Tables["Verify"]));
                }
                if ((ds.Tables["Recording"] != null)) {
                    this.Tables.Add(new RecordingDataTable(ds.Tables["Recording"]));
                }
                if ((ds.Tables["Printing"] != null)) {
                    this.Tables.Add(new PrintingDataTable(ds.Tables["Printing"]));
                }
                if ((ds.Tables["Autoloader"] != null)) {
                    this.Tables.Add(new AutoloaderDataTable(ds.Tables["Autoloader"]));
                }
                if ((ds.Tables["Bin"] != null)) {
                    this.Tables.Add(new BinDataTable(ds.Tables["Bin"]));
                }
                if ((ds.Tables["Reading"] != null)) {
                    this.Tables.Add(new ReadingDataTable(ds.Tables["Reading"]));
                }
                if ((ds.Tables["AutoBulkRead"] != null)) {
                    this.Tables.Add(new AutoBulkReadDataTable(ds.Tables["AutoBulkRead"]));
                }
                if ((ds.Tables["KioskMode"] != null)) {
                    this.Tables.Add(new KioskModeDataTable(ds.Tables["KioskMode"]));
                }
                if ((ds.Tables["Messaging"] != null)) {
                    this.Tables.Add(new MessagingDataTable(ds.Tables["Messaging"]));
                }
                if ((ds.Tables["ImagingParameterSettings"] != null)) {
                    this.Tables.Add(new ImagingParameterSettingsDataTable(ds.Tables["ImagingParameterSettings"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AckOnlyDataTable AckOnly {
            get {
                return this.tableAckOnly;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerStatusDataTable ServerStatus {
            get {
                return this.tableServerStatus;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerInfoDataTable ServerInfo {
            get {
                return this.tableServerInfo;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TimeStampsDataTable TimeStamps {
            get {
                return this.tableTimeStamps;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SwitchesDataTable Switches {
            get {
                return this.tableSwitches;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OrderListDataTable OrderList {
            get {
                return this.tableOrderList;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProductionOrderDataTable ProductionOrder {
            get {
                return this.tableProductionOrder;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ImagingOrderDataTable ImagingOrder {
            get {
                return this.tableImagingOrder;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SessionLogDataTable SessionLog {
            get {
                return this.tableSessionLog;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EntryDataTable Entry {
            get {
                return this.tableEntry;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DialogActionDataTable DialogAction {
            get {
                return this.tableDialogAction;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProductionParameterSettingsDataTable ProductionParameterSettings {
            get {
                return this.tableProductionParameterSettings;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerDataTable Server {
            get {
                return this.tableServer;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VerifyDataTable Verify {
            get {
                return this.tableVerify;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RecordingDataTable Recording {
            get {
                return this.tableRecording;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrintingDataTable Printing {
            get {
                return this.tablePrinting;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AutoloaderDataTable Autoloader {
            get {
                return this.tableAutoloader;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BinDataTable Bin {
            get {
                return this.tableBin;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReadingDataTable Reading {
            get {
                return this.tableReading;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AutoBulkReadDataTable AutoBulkRead {
            get {
                return this.tableAutoBulkRead;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public KioskModeDataTable KioskMode {
            get {
                return this.tableKioskMode;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MessagingDataTable Messaging {
            get {
                return this.tableMessaging;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ImagingParameterSettingsDataTable ImagingParameterSettings {
            get {
                return this.tableImagingParameterSettings;
            }
        }
        
        public override DataSet Clone() {
            ServerReply cln = ((ServerReply)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["AckOnly"] != null)) {
                this.Tables.Add(new AckOnlyDataTable(ds.Tables["AckOnly"]));
            }
            if ((ds.Tables["ServerStatus"] != null)) {
                this.Tables.Add(new ServerStatusDataTable(ds.Tables["ServerStatus"]));
            }
            if ((ds.Tables["ServerInfo"] != null)) {
                this.Tables.Add(new ServerInfoDataTable(ds.Tables["ServerInfo"]));
            }
            if ((ds.Tables["TimeStamps"] != null)) {
                this.Tables.Add(new TimeStampsDataTable(ds.Tables["TimeStamps"]));
            }
            if ((ds.Tables["Switches"] != null)) {
                this.Tables.Add(new SwitchesDataTable(ds.Tables["Switches"]));
            }
            if ((ds.Tables["OrderList"] != null)) {
                this.Tables.Add(new OrderListDataTable(ds.Tables["OrderList"]));
            }
            if ((ds.Tables["ProductionOrder"] != null)) {
                this.Tables.Add(new ProductionOrderDataTable(ds.Tables["ProductionOrder"]));
            }
            if ((ds.Tables["ImagingOrder"] != null)) {
                this.Tables.Add(new ImagingOrderDataTable(ds.Tables["ImagingOrder"]));
            }
            if ((ds.Tables["SessionLog"] != null)) {
                this.Tables.Add(new SessionLogDataTable(ds.Tables["SessionLog"]));
            }
            if ((ds.Tables["Entry"] != null)) {
                this.Tables.Add(new EntryDataTable(ds.Tables["Entry"]));
            }
            if ((ds.Tables["DialogAction"] != null)) {
                this.Tables.Add(new DialogActionDataTable(ds.Tables["DialogAction"]));
            }
            if ((ds.Tables["ProductionParameterSettings"] != null)) {
                this.Tables.Add(new ProductionParameterSettingsDataTable(ds.Tables["ProductionParameterSettings"]));
            }
            if ((ds.Tables["Server"] != null)) {
                this.Tables.Add(new ServerDataTable(ds.Tables["Server"]));
            }
            if ((ds.Tables["Verify"] != null)) {
                this.Tables.Add(new VerifyDataTable(ds.Tables["Verify"]));
            }
            if ((ds.Tables["Recording"] != null)) {
                this.Tables.Add(new RecordingDataTable(ds.Tables["Recording"]));
            }
            if ((ds.Tables["Printing"] != null)) {
                this.Tables.Add(new PrintingDataTable(ds.Tables["Printing"]));
            }
            if ((ds.Tables["Autoloader"] != null)) {
                this.Tables.Add(new AutoloaderDataTable(ds.Tables["Autoloader"]));
            }
            if ((ds.Tables["Bin"] != null)) {
                this.Tables.Add(new BinDataTable(ds.Tables["Bin"]));
            }
            if ((ds.Tables["Reading"] != null)) {
                this.Tables.Add(new ReadingDataTable(ds.Tables["Reading"]));
            }
            if ((ds.Tables["AutoBulkRead"] != null)) {
                this.Tables.Add(new AutoBulkReadDataTable(ds.Tables["AutoBulkRead"]));
            }
            if ((ds.Tables["KioskMode"] != null)) {
                this.Tables.Add(new KioskModeDataTable(ds.Tables["KioskMode"]));
            }
            if ((ds.Tables["Messaging"] != null)) {
                this.Tables.Add(new MessagingDataTable(ds.Tables["Messaging"]));
            }
            if ((ds.Tables["ImagingParameterSettings"] != null)) {
                this.Tables.Add(new ImagingParameterSettingsDataTable(ds.Tables["ImagingParameterSettings"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableAckOnly = ((AckOnlyDataTable)(this.Tables["AckOnly"]));
            if ((this.tableAckOnly != null)) {
                this.tableAckOnly.InitVars();
            }
            this.tableServerStatus = ((ServerStatusDataTable)(this.Tables["ServerStatus"]));
            if ((this.tableServerStatus != null)) {
                this.tableServerStatus.InitVars();
            }
            this.tableServerInfo = ((ServerInfoDataTable)(this.Tables["ServerInfo"]));
            if ((this.tableServerInfo != null)) {
                this.tableServerInfo.InitVars();
            }
            this.tableTimeStamps = ((TimeStampsDataTable)(this.Tables["TimeStamps"]));
            if ((this.tableTimeStamps != null)) {
                this.tableTimeStamps.InitVars();
            }
            this.tableSwitches = ((SwitchesDataTable)(this.Tables["Switches"]));
            if ((this.tableSwitches != null)) {
                this.tableSwitches.InitVars();
            }
            this.tableOrderList = ((OrderListDataTable)(this.Tables["OrderList"]));
            if ((this.tableOrderList != null)) {
                this.tableOrderList.InitVars();
            }
            this.tableProductionOrder = ((ProductionOrderDataTable)(this.Tables["ProductionOrder"]));
            if ((this.tableProductionOrder != null)) {
                this.tableProductionOrder.InitVars();
            }
            this.tableImagingOrder = ((ImagingOrderDataTable)(this.Tables["ImagingOrder"]));
            if ((this.tableImagingOrder != null)) {
                this.tableImagingOrder.InitVars();
            }
            this.tableSessionLog = ((SessionLogDataTable)(this.Tables["SessionLog"]));
            if ((this.tableSessionLog != null)) {
                this.tableSessionLog.InitVars();
            }
            this.tableEntry = ((EntryDataTable)(this.Tables["Entry"]));
            if ((this.tableEntry != null)) {
                this.tableEntry.InitVars();
            }
            this.tableDialogAction = ((DialogActionDataTable)(this.Tables["DialogAction"]));
            if ((this.tableDialogAction != null)) {
                this.tableDialogAction.InitVars();
            }
            this.tableProductionParameterSettings = ((ProductionParameterSettingsDataTable)(this.Tables["ProductionParameterSettings"]));
            if ((this.tableProductionParameterSettings != null)) {
                this.tableProductionParameterSettings.InitVars();
            }
            this.tableServer = ((ServerDataTable)(this.Tables["Server"]));
            if ((this.tableServer != null)) {
                this.tableServer.InitVars();
            }
            this.tableVerify = ((VerifyDataTable)(this.Tables["Verify"]));
            if ((this.tableVerify != null)) {
                this.tableVerify.InitVars();
            }
            this.tableRecording = ((RecordingDataTable)(this.Tables["Recording"]));
            if ((this.tableRecording != null)) {
                this.tableRecording.InitVars();
            }
            this.tablePrinting = ((PrintingDataTable)(this.Tables["Printing"]));
            if ((this.tablePrinting != null)) {
                this.tablePrinting.InitVars();
            }
            this.tableAutoloader = ((AutoloaderDataTable)(this.Tables["Autoloader"]));
            if ((this.tableAutoloader != null)) {
                this.tableAutoloader.InitVars();
            }
            this.tableBin = ((BinDataTable)(this.Tables["Bin"]));
            if ((this.tableBin != null)) {
                this.tableBin.InitVars();
            }
            this.tableReading = ((ReadingDataTable)(this.Tables["Reading"]));
            if ((this.tableReading != null)) {
                this.tableReading.InitVars();
            }
            this.tableAutoBulkRead = ((AutoBulkReadDataTable)(this.Tables["AutoBulkRead"]));
            if ((this.tableAutoBulkRead != null)) {
                this.tableAutoBulkRead.InitVars();
            }
            this.tableKioskMode = ((KioskModeDataTable)(this.Tables["KioskMode"]));
            if ((this.tableKioskMode != null)) {
                this.tableKioskMode.InitVars();
            }
            this.tableMessaging = ((MessagingDataTable)(this.Tables["Messaging"]));
            if ((this.tableMessaging != null)) {
                this.tableMessaging.InitVars();
            }
            this.tableImagingParameterSettings = ((ImagingParameterSettingsDataTable)(this.Tables["ImagingParameterSettings"]));
            if ((this.tableImagingParameterSettings != null)) {
                this.tableImagingParameterSettings.InitVars();
            }
            this.relationServerStatus_ServerInfo = this.Relations["ServerStatus_ServerInfo"];
            this.relationServerStatus_TimeStamps = this.Relations["ServerStatus_TimeStamps"];
            this.relationServerStatus_Switches = this.Relations["ServerStatus_Switches"];
            this.relationOrderList_ProductionOrder = this.Relations["OrderList_ProductionOrder"];
            this.relationOrderList_ImagingOrder = this.Relations["OrderList_ImagingOrder"];
            this.relationSessionLog_Entry = this.Relations["SessionLog_Entry"];
            this.relationAutoloader_Bin = this.Relations["Autoloader_Bin"];
            this.relationReading_AutoBulkRead = this.Relations["Reading_AutoBulkRead"];
            this.relationProductionParameterSettings_Server = this.Relations["ProductionParameterSettings_Server"];
            this.relationProductionParameterSettings_Verify = this.Relations["ProductionParameterSettings_Verify"];
            this.relationProductionParameterSettings_Recording = this.Relations["ProductionParameterSettings_Recording"];
            this.relationProductionParameterSettings_Printing = this.Relations["ProductionParameterSettings_Printing"];
            this.relationProductionParameterSettings_Autoloader = this.Relations["ProductionParameterSettings_Autoloader"];
            this.relationProductionParameterSettings_Reading = this.Relations["ProductionParameterSettings_Reading"];
            this.relationProductionParameterSettings_KioskMode = this.Relations["ProductionParameterSettings_KioskMode"];
            this.relationProductionParameterSettings_Messaging = this.Relations["ProductionParameterSettings_Messaging"];
        }
        
        private void InitClass() {
            this.DataSetName = "ServerReply";
            this.Prefix = "";
            this.Namespace = "";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableAckOnly = new AckOnlyDataTable();
            this.Tables.Add(this.tableAckOnly);
            this.tableServerStatus = new ServerStatusDataTable();
            this.Tables.Add(this.tableServerStatus);
            this.tableServerInfo = new ServerInfoDataTable();
            this.Tables.Add(this.tableServerInfo);
            this.tableTimeStamps = new TimeStampsDataTable();
            this.Tables.Add(this.tableTimeStamps);
            this.tableSwitches = new SwitchesDataTable();
            this.Tables.Add(this.tableSwitches);
            this.tableOrderList = new OrderListDataTable();
            this.Tables.Add(this.tableOrderList);
            this.tableProductionOrder = new ProductionOrderDataTable();
            this.Tables.Add(this.tableProductionOrder);
            this.tableImagingOrder = new ImagingOrderDataTable();
            this.Tables.Add(this.tableImagingOrder);
            this.tableSessionLog = new SessionLogDataTable();
            this.Tables.Add(this.tableSessionLog);
            this.tableEntry = new EntryDataTable();
            this.Tables.Add(this.tableEntry);
            this.tableDialogAction = new DialogActionDataTable();
            this.Tables.Add(this.tableDialogAction);
            this.tableProductionParameterSettings = new ProductionParameterSettingsDataTable();
            this.Tables.Add(this.tableProductionParameterSettings);
            this.tableServer = new ServerDataTable();
            this.Tables.Add(this.tableServer);
            this.tableVerify = new VerifyDataTable();
            this.Tables.Add(this.tableVerify);
            this.tableRecording = new RecordingDataTable();
            this.Tables.Add(this.tableRecording);
            this.tablePrinting = new PrintingDataTable();
            this.Tables.Add(this.tablePrinting);
            this.tableAutoloader = new AutoloaderDataTable();
            this.Tables.Add(this.tableAutoloader);
            this.tableBin = new BinDataTable();
            this.Tables.Add(this.tableBin);
            this.tableReading = new ReadingDataTable();
            this.Tables.Add(this.tableReading);
            this.tableAutoBulkRead = new AutoBulkReadDataTable();
            this.Tables.Add(this.tableAutoBulkRead);
            this.tableKioskMode = new KioskModeDataTable();
            this.Tables.Add(this.tableKioskMode);
            this.tableMessaging = new MessagingDataTable();
            this.Tables.Add(this.tableMessaging);
            this.tableImagingParameterSettings = new ImagingParameterSettingsDataTable();
            this.Tables.Add(this.tableImagingParameterSettings);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("ServerStatus_ServerInfo", new DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new DataColumn[] {
                        this.tableServerInfo.ServerStatus_IdColumn});
            this.tableServerInfo.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ServerStatus_TimeStamps", new DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new DataColumn[] {
                        this.tableTimeStamps.ServerStatus_IdColumn});
            this.tableTimeStamps.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ServerStatus_Switches", new DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new DataColumn[] {
                        this.tableSwitches.ServerStatus_IdColumn});
            this.tableSwitches.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("OrderList_ProductionOrder", new DataColumn[] {
                        this.tableOrderList.OrderList_IdColumn}, new DataColumn[] {
                        this.tableProductionOrder.OrderList_IdColumn});
            this.tableProductionOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("OrderList_ImagingOrder", new DataColumn[] {
                        this.tableOrderList.OrderList_IdColumn}, new DataColumn[] {
                        this.tableImagingOrder.OrderList_IdColumn});
            this.tableImagingOrder.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SessionLog_Entry", new DataColumn[] {
                        this.tableSessionLog.SessionLog_IdColumn}, new DataColumn[] {
                        this.tableEntry.SessionLog_IdColumn});
            this.tableEntry.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ProductionParameterSettings_Server", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableServer.ProductionParameterSettings_IdColumn});
            this.tableServer.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ProductionParameterSettings_Verify", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableVerify.ProductionParameterSettings_IdColumn});
            this.tableVerify.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ProductionParameterSettings_Recording", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableRecording.ProductionParameterSettings_IdColumn});
            this.tableRecording.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ProductionParameterSettings_Printing", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tablePrinting.ProductionParameterSettings_IdColumn});
            this.tablePrinting.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ProductionParameterSettings_Autoloader", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableAutoloader.ProductionParameterSettings_IdColumn});
            this.tableAutoloader.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Autoloader_Bin", new DataColumn[] {
                        this.tableAutoloader.Autoloader_IdColumn}, new DataColumn[] {
                        this.tableBin.Autoloader_IdColumn});
            this.tableBin.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ProductionParameterSettings_Reading", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableReading.ProductionParameterSettings_IdColumn});
            this.tableReading.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Reading_AutoBulkRead", new DataColumn[] {
                        this.tableReading.Reading_IdColumn}, new DataColumn[] {
                        this.tableAutoBulkRead.Reading_IdColumn});
            this.tableAutoBulkRead.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ProductionParameterSettings_KioskMode", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableKioskMode.ProductionParameterSettings_IdColumn});
            this.tableKioskMode.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("ProductionParameterSettings_Messaging", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableMessaging.ProductionParameterSettings_IdColumn});
            this.tableMessaging.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationServerStatus_ServerInfo = new DataRelation("ServerStatus_ServerInfo", new DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new DataColumn[] {
                        this.tableServerInfo.ServerStatus_IdColumn}, false);
            this.relationServerStatus_ServerInfo.Nested = true;
            this.Relations.Add(this.relationServerStatus_ServerInfo);
            this.relationServerStatus_TimeStamps = new DataRelation("ServerStatus_TimeStamps", new DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new DataColumn[] {
                        this.tableTimeStamps.ServerStatus_IdColumn}, false);
            this.relationServerStatus_TimeStamps.Nested = true;
            this.Relations.Add(this.relationServerStatus_TimeStamps);
            this.relationServerStatus_Switches = new DataRelation("ServerStatus_Switches", new DataColumn[] {
                        this.tableServerStatus.ServerStatus_IdColumn}, new DataColumn[] {
                        this.tableSwitches.ServerStatus_IdColumn}, false);
            this.relationServerStatus_Switches.Nested = true;
            this.Relations.Add(this.relationServerStatus_Switches);
            this.relationOrderList_ProductionOrder = new DataRelation("OrderList_ProductionOrder", new DataColumn[] {
                        this.tableOrderList.OrderList_IdColumn}, new DataColumn[] {
                        this.tableProductionOrder.OrderList_IdColumn}, false);
            this.relationOrderList_ProductionOrder.Nested = true;
            this.Relations.Add(this.relationOrderList_ProductionOrder);
            this.relationOrderList_ImagingOrder = new DataRelation("OrderList_ImagingOrder", new DataColumn[] {
                        this.tableOrderList.OrderList_IdColumn}, new DataColumn[] {
                        this.tableImagingOrder.OrderList_IdColumn}, false);
            this.relationOrderList_ImagingOrder.Nested = true;
            this.Relations.Add(this.relationOrderList_ImagingOrder);
            this.relationSessionLog_Entry = new DataRelation("SessionLog_Entry", new DataColumn[] {
                        this.tableSessionLog.SessionLog_IdColumn}, new DataColumn[] {
                        this.tableEntry.SessionLog_IdColumn}, false);
            this.relationSessionLog_Entry.Nested = true;
            this.Relations.Add(this.relationSessionLog_Entry);
            this.relationAutoloader_Bin = new DataRelation("Autoloader_Bin", new DataColumn[] {
                        this.tableAutoloader.Autoloader_IdColumn}, new DataColumn[] {
                        this.tableBin.Autoloader_IdColumn}, false);
            this.relationAutoloader_Bin.Nested = true;
            this.Relations.Add(this.relationAutoloader_Bin);
            this.relationReading_AutoBulkRead = new DataRelation("Reading_AutoBulkRead", new DataColumn[] {
                        this.tableReading.Reading_IdColumn}, new DataColumn[] {
                        this.tableAutoBulkRead.Reading_IdColumn}, false);
            this.relationReading_AutoBulkRead.Nested = true;
            this.Relations.Add(this.relationReading_AutoBulkRead);
            this.relationProductionParameterSettings_Server = new DataRelation("ProductionParameterSettings_Server", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableServer.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Server.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Server);
            this.relationProductionParameterSettings_Verify = new DataRelation("ProductionParameterSettings_Verify", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableVerify.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Verify.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Verify);
            this.relationProductionParameterSettings_Recording = new DataRelation("ProductionParameterSettings_Recording", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableRecording.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Recording.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Recording);
            this.relationProductionParameterSettings_Printing = new DataRelation("ProductionParameterSettings_Printing", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tablePrinting.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Printing.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Printing);
            this.relationProductionParameterSettings_Autoloader = new DataRelation("ProductionParameterSettings_Autoloader", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableAutoloader.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Autoloader.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Autoloader);
            this.relationProductionParameterSettings_Reading = new DataRelation("ProductionParameterSettings_Reading", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableReading.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Reading.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Reading);
            this.relationProductionParameterSettings_KioskMode = new DataRelation("ProductionParameterSettings_KioskMode", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableKioskMode.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_KioskMode.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_KioskMode);
            this.relationProductionParameterSettings_Messaging = new DataRelation("ProductionParameterSettings_Messaging", new DataColumn[] {
                        this.tableProductionParameterSettings.ProductionParameterSettings_IdColumn}, new DataColumn[] {
                        this.tableMessaging.ProductionParameterSettings_IdColumn}, false);
            this.relationProductionParameterSettings_Messaging.Nested = true;
            this.Relations.Add(this.relationProductionParameterSettings_Messaging);
        }
        
        private bool ShouldSerializeAckOnly() {
            return false;
        }
        
        private bool ShouldSerializeServerStatus() {
            return false;
        }
        
        private bool ShouldSerializeServerInfo() {
            return false;
        }
        
        private bool ShouldSerializeTimeStamps() {
            return false;
        }
        
        private bool ShouldSerializeSwitches() {
            return false;
        }
        
        private bool ShouldSerializeOrderList() {
            return false;
        }
        
        private bool ShouldSerializeProductionOrder() {
            return false;
        }
        
        private bool ShouldSerializeImagingOrder() {
            return false;
        }
        
        private bool ShouldSerializeSessionLog() {
            return false;
        }
        
        private bool ShouldSerializeEntry() {
            return false;
        }
        
        private bool ShouldSerializeDialogAction() {
            return false;
        }
        
        private bool ShouldSerializeProductionParameterSettings() {
            return false;
        }
        
        private bool ShouldSerializeServer() {
            return false;
        }
        
        private bool ShouldSerializeVerify() {
            return false;
        }
        
        private bool ShouldSerializeRecording() {
            return false;
        }
        
        private bool ShouldSerializePrinting() {
            return false;
        }
        
        private bool ShouldSerializeAutoloader() {
            return false;
        }
        
        private bool ShouldSerializeBin() {
            return false;
        }
        
        private bool ShouldSerializeReading() {
            return false;
        }
        
        private bool ShouldSerializeAutoBulkRead() {
            return false;
        }
        
        private bool ShouldSerializeKioskMode() {
            return false;
        }
        
        private bool ShouldSerializeMessaging() {
            return false;
        }
        
        private bool ShouldSerializeImagingParameterSettings() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void AckOnlyRowChangeEventHandler(object sender, AckOnlyRowChangeEvent e);
        
        public delegate void ServerStatusRowChangeEventHandler(object sender, ServerStatusRowChangeEvent e);
        
        public delegate void ServerInfoRowChangeEventHandler(object sender, ServerInfoRowChangeEvent e);
        
        public delegate void TimeStampsRowChangeEventHandler(object sender, TimeStampsRowChangeEvent e);
        
        public delegate void SwitchesRowChangeEventHandler(object sender, SwitchesRowChangeEvent e);
        
        public delegate void OrderListRowChangeEventHandler(object sender, OrderListRowChangeEvent e);
        
        public delegate void ProductionOrderRowChangeEventHandler(object sender, ProductionOrderRowChangeEvent e);
        
        public delegate void ImagingOrderRowChangeEventHandler(object sender, ImagingOrderRowChangeEvent e);
        
        public delegate void SessionLogRowChangeEventHandler(object sender, SessionLogRowChangeEvent e);
        
        public delegate void EntryRowChangeEventHandler(object sender, EntryRowChangeEvent e);
        
        public delegate void DialogActionRowChangeEventHandler(object sender, DialogActionRowChangeEvent e);
        
        public delegate void ProductionParameterSettingsRowChangeEventHandler(object sender, ProductionParameterSettingsRowChangeEvent e);
        
        public delegate void ServerRowChangeEventHandler(object sender, ServerRowChangeEvent e);
        
        public delegate void VerifyRowChangeEventHandler(object sender, VerifyRowChangeEvent e);
        
        public delegate void RecordingRowChangeEventHandler(object sender, RecordingRowChangeEvent e);
        
        public delegate void PrintingRowChangeEventHandler(object sender, PrintingRowChangeEvent e);
        
        public delegate void AutoloaderRowChangeEventHandler(object sender, AutoloaderRowChangeEvent e);
        
        public delegate void BinRowChangeEventHandler(object sender, BinRowChangeEvent e);
        
        public delegate void ReadingRowChangeEventHandler(object sender, ReadingRowChangeEvent e);
        
        public delegate void AutoBulkReadRowChangeEventHandler(object sender, AutoBulkReadRowChangeEvent e);
        
        public delegate void KioskModeRowChangeEventHandler(object sender, KioskModeRowChangeEvent e);
        
        public delegate void MessagingRowChangeEventHandler(object sender, MessagingRowChangeEvent e);
        
        public delegate void ImagingParameterSettingsRowChangeEventHandler(object sender, ImagingParameterSettingsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AckOnlyDataTable : DataTable, System.Collections.IEnumerable {
            
            internal AckOnlyDataTable() : 
                    base("AckOnly") {
                this.InitClass();
            }
            
            internal AckOnlyDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public AckOnlyRow this[int index] {
                get {
                    return ((AckOnlyRow)(this.Rows[index]));
                }
            }
            
            public event AckOnlyRowChangeEventHandler AckOnlyRowChanged;
            
            public event AckOnlyRowChangeEventHandler AckOnlyRowChanging;
            
            public event AckOnlyRowChangeEventHandler AckOnlyRowDeleted;
            
            public event AckOnlyRowChangeEventHandler AckOnlyRowDeleting;
            
            public void AddAckOnlyRow(AckOnlyRow row) {
                this.Rows.Add(row);
            }
            
            public AckOnlyRow AddAckOnlyRow() {
                AckOnlyRow rowAckOnlyRow = ((AckOnlyRow)(this.NewRow()));
                rowAckOnlyRow.ItemArray = new object[0];
                this.Rows.Add(rowAckOnlyRow);
                return rowAckOnlyRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AckOnlyDataTable cln = ((AckOnlyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AckOnlyDataTable();
            }
            
            internal void InitVars() {
            }
            
            private void InitClass() {
            }
            
            public AckOnlyRow NewAckOnlyRow() {
                return ((AckOnlyRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AckOnlyRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AckOnlyRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AckOnlyRowChanged != null)) {
                    this.AckOnlyRowChanged(this, new AckOnlyRowChangeEvent(((AckOnlyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AckOnlyRowChanging != null)) {
                    this.AckOnlyRowChanging(this, new AckOnlyRowChangeEvent(((AckOnlyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AckOnlyRowDeleted != null)) {
                    this.AckOnlyRowDeleted(this, new AckOnlyRowChangeEvent(((AckOnlyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AckOnlyRowDeleting != null)) {
                    this.AckOnlyRowDeleting(this, new AckOnlyRowChangeEvent(((AckOnlyRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAckOnlyRow(AckOnlyRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AckOnlyRow : DataRow {
            
            private AckOnlyDataTable tableAckOnly;
            
            internal AckOnlyRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAckOnly = ((AckOnlyDataTable)(this.Table));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AckOnlyRowChangeEvent : EventArgs {
            
            private AckOnlyRow eventRow;
            
            private DataRowAction eventAction;
            
            public AckOnlyRowChangeEvent(AckOnlyRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AckOnlyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerStatusDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnServerStatus_Id;
            
            internal ServerStatusDataTable() : 
                    base("ServerStatus") {
                this.InitClass();
            }
            
            internal ServerStatusDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ServerStatus_IdColumn {
                get {
                    return this.columnServerStatus_Id;
                }
            }
            
            public ServerStatusRow this[int index] {
                get {
                    return ((ServerStatusRow)(this.Rows[index]));
                }
            }
            
            public event ServerStatusRowChangeEventHandler ServerStatusRowChanged;
            
            public event ServerStatusRowChangeEventHandler ServerStatusRowChanging;
            
            public event ServerStatusRowChangeEventHandler ServerStatusRowDeleted;
            
            public event ServerStatusRowChangeEventHandler ServerStatusRowDeleting;
            
            public void AddServerStatusRow(ServerStatusRow row) {
                this.Rows.Add(row);
            }
            
            public ServerStatusRow AddServerStatusRow() {
                ServerStatusRow rowServerStatusRow = ((ServerStatusRow)(this.NewRow()));
                rowServerStatusRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowServerStatusRow);
                return rowServerStatusRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ServerStatusDataTable cln = ((ServerStatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ServerStatusDataTable();
            }
            
            internal void InitVars() {
                this.columnServerStatus_Id = this.Columns["ServerStatus_Id"];
            }
            
            private void InitClass() {
                this.columnServerStatus_Id = new DataColumn("ServerStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnServerStatus_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnServerStatus_Id}, true));
                this.columnServerStatus_Id.AutoIncrement = true;
                this.columnServerStatus_Id.AllowDBNull = false;
                this.columnServerStatus_Id.Unique = true;
            }
            
            public ServerStatusRow NewServerStatusRow() {
                return ((ServerStatusRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ServerStatusRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ServerStatusRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerStatusRowChanged != null)) {
                    this.ServerStatusRowChanged(this, new ServerStatusRowChangeEvent(((ServerStatusRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerStatusRowChanging != null)) {
                    this.ServerStatusRowChanging(this, new ServerStatusRowChangeEvent(((ServerStatusRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerStatusRowDeleted != null)) {
                    this.ServerStatusRowDeleted(this, new ServerStatusRowChangeEvent(((ServerStatusRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerStatusRowDeleting != null)) {
                    this.ServerStatusRowDeleting(this, new ServerStatusRowChangeEvent(((ServerStatusRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveServerStatusRow(ServerStatusRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerStatusRow : DataRow {
            
            private ServerStatusDataTable tableServerStatus;
            
            internal ServerStatusRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerStatus = ((ServerStatusDataTable)(this.Table));
            }
            
            public ServerInfoRow[] GetServerInfoRows() {
                return ((ServerInfoRow[])(this.GetChildRows(this.Table.ChildRelations["ServerStatus_ServerInfo"])));
            }
            
            public TimeStampsRow[] GetTimeStampsRows() {
                return ((TimeStampsRow[])(this.GetChildRows(this.Table.ChildRelations["ServerStatus_TimeStamps"])));
            }
            
            public SwitchesRow[] GetSwitchesRows() {
                return ((SwitchesRow[])(this.GetChildRows(this.Table.ChildRelations["ServerStatus_Switches"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerStatusRowChangeEvent : EventArgs {
            
            private ServerStatusRow eventRow;
            
            private DataRowAction eventAction;
            
            public ServerStatusRowChangeEvent(ServerStatusRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ServerStatusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerInfoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnSoftwareVersion;
            
            private DataColumn columnDescription;
            
            private DataColumn columnHostname;
            
            private DataColumn columnCluster;
            
            private DataColumn columnMessagingPort;
            
            private DataColumn columnDTDFolder;
            
            private DataColumn columnIsService;
            
            private DataColumn columnAutomation;
            
            private DataColumn columnCopiesProduced;
            
            private DataColumn columnCopiesRejected;
            
            private DataColumn columnImagesWritten;
            
            private DataColumn columnImagesRejected;
            
            private DataColumn columnPasswordSet;
            
            private DataColumn columnServerStatus_Id;
            
            internal ServerInfoDataTable() : 
                    base("ServerInfo") {
                this.InitClass();
            }
            
            internal ServerInfoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn SoftwareVersionColumn {
                get {
                    return this.columnSoftwareVersion;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn HostnameColumn {
                get {
                    return this.columnHostname;
                }
            }
            
            internal DataColumn ClusterColumn {
                get {
                    return this.columnCluster;
                }
            }
            
            internal DataColumn MessagingPortColumn {
                get {
                    return this.columnMessagingPort;
                }
            }
            
            internal DataColumn DTDFolderColumn {
                get {
                    return this.columnDTDFolder;
                }
            }
            
            internal DataColumn IsServiceColumn {
                get {
                    return this.columnIsService;
                }
            }
            
            internal DataColumn AutomationColumn {
                get {
                    return this.columnAutomation;
                }
            }
            
            internal DataColumn CopiesProducedColumn {
                get {
                    return this.columnCopiesProduced;
                }
            }
            
            internal DataColumn CopiesRejectedColumn {
                get {
                    return this.columnCopiesRejected;
                }
            }
            
            internal DataColumn ImagesWrittenColumn {
                get {
                    return this.columnImagesWritten;
                }
            }
            
            internal DataColumn ImagesRejectedColumn {
                get {
                    return this.columnImagesRejected;
                }
            }
            
            internal DataColumn PasswordSetColumn {
                get {
                    return this.columnPasswordSet;
                }
            }
            
            internal DataColumn ServerStatus_IdColumn {
                get {
                    return this.columnServerStatus_Id;
                }
            }
            
            public ServerInfoRow this[int index] {
                get {
                    return ((ServerInfoRow)(this.Rows[index]));
                }
            }
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowChanged;
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowChanging;
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowDeleted;
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowDeleting;
            
            public void AddServerInfoRow(ServerInfoRow row) {
                this.Rows.Add(row);
            }
            
            public ServerInfoRow AddServerInfoRow(string SoftwareVersion, string Description, string Hostname, string Cluster, string MessagingPort, string DTDFolder, string IsService, string Automation, string CopiesProduced, string CopiesRejected, string ImagesWritten, string ImagesRejected, string PasswordSet, ServerStatusRow parentServerStatusRowByServerStatus_ServerInfo) {
                ServerInfoRow rowServerInfoRow = ((ServerInfoRow)(this.NewRow()));
                rowServerInfoRow.ItemArray = new object[] {
                        SoftwareVersion,
                        Description,
                        Hostname,
                        Cluster,
                        MessagingPort,
                        DTDFolder,
                        IsService,
                        Automation,
                        CopiesProduced,
                        CopiesRejected,
                        ImagesWritten,
                        ImagesRejected,
                        PasswordSet,
                        parentServerStatusRowByServerStatus_ServerInfo[0]};
                this.Rows.Add(rowServerInfoRow);
                return rowServerInfoRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ServerInfoDataTable cln = ((ServerInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ServerInfoDataTable();
            }
            
            internal void InitVars() {
                this.columnSoftwareVersion = this.Columns["SoftwareVersion"];
                this.columnDescription = this.Columns["Description"];
                this.columnHostname = this.Columns["Hostname"];
                this.columnCluster = this.Columns["Cluster"];
                this.columnMessagingPort = this.Columns["MessagingPort"];
                this.columnDTDFolder = this.Columns["DTDFolder"];
                this.columnIsService = this.Columns["IsService"];
                this.columnAutomation = this.Columns["Automation"];
                this.columnCopiesProduced = this.Columns["CopiesProduced"];
                this.columnCopiesRejected = this.Columns["CopiesRejected"];
                this.columnImagesWritten = this.Columns["ImagesWritten"];
                this.columnImagesRejected = this.Columns["ImagesRejected"];
                this.columnPasswordSet = this.Columns["PasswordSet"];
                this.columnServerStatus_Id = this.Columns["ServerStatus_Id"];
            }
            
            private void InitClass() {
                this.columnSoftwareVersion = new DataColumn("SoftwareVersion", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSoftwareVersion);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDescription);
                this.columnHostname = new DataColumn("Hostname", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnHostname);
                this.columnCluster = new DataColumn("Cluster", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCluster);
                this.columnMessagingPort = new DataColumn("MessagingPort", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnMessagingPort);
                this.columnDTDFolder = new DataColumn("DTDFolder", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDTDFolder);
                this.columnIsService = new DataColumn("IsService", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnIsService);
                this.columnAutomation = new DataColumn("Automation", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAutomation);
                this.columnCopiesProduced = new DataColumn("CopiesProduced", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCopiesProduced);
                this.columnCopiesRejected = new DataColumn("CopiesRejected", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCopiesRejected);
                this.columnImagesWritten = new DataColumn("ImagesWritten", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnImagesWritten);
                this.columnImagesRejected = new DataColumn("ImagesRejected", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnImagesRejected);
                this.columnPasswordSet = new DataColumn("PasswordSet", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPasswordSet);
                this.columnServerStatus_Id = new DataColumn("ServerStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnServerStatus_Id);
                this.columnSoftwareVersion.AllowDBNull = false;
                this.columnSoftwareVersion.Namespace = "";
                this.columnDescription.Namespace = "";
                this.columnHostname.AllowDBNull = false;
                this.columnHostname.Namespace = "";
                this.columnCluster.AllowDBNull = false;
                this.columnCluster.Namespace = "";
                this.columnMessagingPort.AllowDBNull = false;
                this.columnMessagingPort.Namespace = "";
                this.columnDTDFolder.AllowDBNull = false;
                this.columnDTDFolder.Namespace = "";
                this.columnIsService.Namespace = "";
                this.columnIsService.DefaultValue = "false";
                this.columnAutomation.AllowDBNull = false;
                this.columnAutomation.Namespace = "";
                this.columnCopiesProduced.Namespace = "";
                this.columnCopiesRejected.Namespace = "";
                this.columnImagesWritten.Namespace = "";
                this.columnImagesRejected.Namespace = "";
                this.columnPasswordSet.AllowDBNull = false;
                this.columnPasswordSet.Namespace = "";
            }
            
            public ServerInfoRow NewServerInfoRow() {
                return ((ServerInfoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ServerInfoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ServerInfoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerInfoRowChanged != null)) {
                    this.ServerInfoRowChanged(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerInfoRowChanging != null)) {
                    this.ServerInfoRowChanging(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerInfoRowDeleted != null)) {
                    this.ServerInfoRowDeleted(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerInfoRowDeleting != null)) {
                    this.ServerInfoRowDeleting(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveServerInfoRow(ServerInfoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerInfoRow : DataRow {
            
            private ServerInfoDataTable tableServerInfo;
            
            internal ServerInfoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerInfo = ((ServerInfoDataTable)(this.Table));
            }
            
            public string SoftwareVersion {
                get {
                    return ((string)(this[this.tableServerInfo.SoftwareVersionColumn]));
                }
                set {
                    this[this.tableServerInfo.SoftwareVersionColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableServerInfo.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.DescriptionColumn] = value;
                }
            }
            
            public string Hostname {
                get {
                    return ((string)(this[this.tableServerInfo.HostnameColumn]));
                }
                set {
                    this[this.tableServerInfo.HostnameColumn] = value;
                }
            }
            
            public string Cluster {
                get {
                    return ((string)(this[this.tableServerInfo.ClusterColumn]));
                }
                set {
                    this[this.tableServerInfo.ClusterColumn] = value;
                }
            }
            
            public string MessagingPort {
                get {
                    return ((string)(this[this.tableServerInfo.MessagingPortColumn]));
                }
                set {
                    this[this.tableServerInfo.MessagingPortColumn] = value;
                }
            }
            
            public string DTDFolder {
                get {
                    return ((string)(this[this.tableServerInfo.DTDFolderColumn]));
                }
                set {
                    this[this.tableServerInfo.DTDFolderColumn] = value;
                }
            }
            
            public string IsService {
                get {
                    try {
                        return ((string)(this[this.tableServerInfo.IsServiceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.IsServiceColumn] = value;
                }
            }
            
            public string Automation {
                get {
                    return ((string)(this[this.tableServerInfo.AutomationColumn]));
                }
                set {
                    this[this.tableServerInfo.AutomationColumn] = value;
                }
            }
            
            public string CopiesProduced {
                get {
                    try {
                        return ((string)(this[this.tableServerInfo.CopiesProducedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.CopiesProducedColumn] = value;
                }
            }
            
            public string CopiesRejected {
                get {
                    try {
                        return ((string)(this[this.tableServerInfo.CopiesRejectedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.CopiesRejectedColumn] = value;
                }
            }
            
            public string ImagesWritten {
                get {
                    try {
                        return ((string)(this[this.tableServerInfo.ImagesWrittenColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.ImagesWrittenColumn] = value;
                }
            }
            
            public string ImagesRejected {
                get {
                    try {
                        return ((string)(this[this.tableServerInfo.ImagesRejectedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.ImagesRejectedColumn] = value;
                }
            }
            
            public string PasswordSet {
                get {
                    return ((string)(this[this.tableServerInfo.PasswordSetColumn]));
                }
                set {
                    this[this.tableServerInfo.PasswordSetColumn] = value;
                }
            }
            
            public ServerStatusRow ServerStatusRow {
                get {
                    return ((ServerStatusRow)(this.GetParentRow(this.Table.ParentRelations["ServerStatus_ServerInfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ServerStatus_ServerInfo"]);
                }
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableServerInfo.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableServerInfo.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsServiceNull() {
                return this.IsNull(this.tableServerInfo.IsServiceColumn);
            }
            
            public void SetIsServiceNull() {
                this[this.tableServerInfo.IsServiceColumn] = System.Convert.DBNull;
            }
            
            public bool IsCopiesProducedNull() {
                return this.IsNull(this.tableServerInfo.CopiesProducedColumn);
            }
            
            public void SetCopiesProducedNull() {
                this[this.tableServerInfo.CopiesProducedColumn] = System.Convert.DBNull;
            }
            
            public bool IsCopiesRejectedNull() {
                return this.IsNull(this.tableServerInfo.CopiesRejectedColumn);
            }
            
            public void SetCopiesRejectedNull() {
                this[this.tableServerInfo.CopiesRejectedColumn] = System.Convert.DBNull;
            }
            
            public bool IsImagesWrittenNull() {
                return this.IsNull(this.tableServerInfo.ImagesWrittenColumn);
            }
            
            public void SetImagesWrittenNull() {
                this[this.tableServerInfo.ImagesWrittenColumn] = System.Convert.DBNull;
            }
            
            public bool IsImagesRejectedNull() {
                return this.IsNull(this.tableServerInfo.ImagesRejectedColumn);
            }
            
            public void SetImagesRejectedNull() {
                this[this.tableServerInfo.ImagesRejectedColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerInfoRowChangeEvent : EventArgs {
            
            private ServerInfoRow eventRow;
            
            private DataRowAction eventAction;
            
            public ServerInfoRowChangeEvent(ServerInfoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ServerInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TimeStampsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnStart;
            
            private DataColumn columnStatus;
            
            private DataColumn columnServerStatus_Id;
            
            internal TimeStampsDataTable() : 
                    base("TimeStamps") {
                this.InitClass();
            }
            
            internal TimeStampsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn StartColumn {
                get {
                    return this.columnStart;
                }
            }
            
            internal DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            internal DataColumn ServerStatus_IdColumn {
                get {
                    return this.columnServerStatus_Id;
                }
            }
            
            public TimeStampsRow this[int index] {
                get {
                    return ((TimeStampsRow)(this.Rows[index]));
                }
            }
            
            public event TimeStampsRowChangeEventHandler TimeStampsRowChanged;
            
            public event TimeStampsRowChangeEventHandler TimeStampsRowChanging;
            
            public event TimeStampsRowChangeEventHandler TimeStampsRowDeleted;
            
            public event TimeStampsRowChangeEventHandler TimeStampsRowDeleting;
            
            public void AddTimeStampsRow(TimeStampsRow row) {
                this.Rows.Add(row);
            }
            
            public TimeStampsRow AddTimeStampsRow(string Start, string Status, ServerStatusRow parentServerStatusRowByServerStatus_TimeStamps) {
                TimeStampsRow rowTimeStampsRow = ((TimeStampsRow)(this.NewRow()));
                rowTimeStampsRow.ItemArray = new object[] {
                        Start,
                        Status,
                        parentServerStatusRowByServerStatus_TimeStamps[0]};
                this.Rows.Add(rowTimeStampsRow);
                return rowTimeStampsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TimeStampsDataTable cln = ((TimeStampsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TimeStampsDataTable();
            }
            
            internal void InitVars() {
                this.columnStart = this.Columns["Start"];
                this.columnStatus = this.Columns["Status"];
                this.columnServerStatus_Id = this.Columns["ServerStatus_Id"];
            }
            
            private void InitClass() {
                this.columnStart = new DataColumn("Start", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnStart);
                this.columnStatus = new DataColumn("Status", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnStatus);
                this.columnServerStatus_Id = new DataColumn("ServerStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnServerStatus_Id);
                this.columnStart.AllowDBNull = false;
                this.columnStart.Namespace = "";
                this.columnStatus.AllowDBNull = false;
                this.columnStatus.Namespace = "";
            }
            
            public TimeStampsRow NewTimeStampsRow() {
                return ((TimeStampsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TimeStampsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TimeStampsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TimeStampsRowChanged != null)) {
                    this.TimeStampsRowChanged(this, new TimeStampsRowChangeEvent(((TimeStampsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TimeStampsRowChanging != null)) {
                    this.TimeStampsRowChanging(this, new TimeStampsRowChangeEvent(((TimeStampsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TimeStampsRowDeleted != null)) {
                    this.TimeStampsRowDeleted(this, new TimeStampsRowChangeEvent(((TimeStampsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TimeStampsRowDeleting != null)) {
                    this.TimeStampsRowDeleting(this, new TimeStampsRowChangeEvent(((TimeStampsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTimeStampsRow(TimeStampsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TimeStampsRow : DataRow {
            
            private TimeStampsDataTable tableTimeStamps;
            
            internal TimeStampsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTimeStamps = ((TimeStampsDataTable)(this.Table));
            }
            
            public string Start {
                get {
                    return ((string)(this[this.tableTimeStamps.StartColumn]));
                }
                set {
                    this[this.tableTimeStamps.StartColumn] = value;
                }
            }
            
            public string Status {
                get {
                    return ((string)(this[this.tableTimeStamps.StatusColumn]));
                }
                set {
                    this[this.tableTimeStamps.StatusColumn] = value;
                }
            }
            
            public ServerStatusRow ServerStatusRow {
                get {
                    return ((ServerStatusRow)(this.GetParentRow(this.Table.ParentRelations["ServerStatus_TimeStamps"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ServerStatus_TimeStamps"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TimeStampsRowChangeEvent : EventArgs {
            
            private TimeStampsRow eventRow;
            
            private DataRowAction eventAction;
            
            public TimeStampsRowChangeEvent(TimeStampsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TimeStampsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SwitchesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnManufacturingTestMode;
            
            private DataColumn columnVerifyOnlyMode;
            
            private DataColumn columnNoLogLimit;
            
            private DataColumn columnSetupMode;
            
            private DataColumn columnDirectImaging;
            
            private DataColumn columnSkipOrderUpdate;
            
            private DataColumn columnAutoThroughPutMeasurement;
            
            private DataColumn columnTimingLogged;
            
            private DataColumn columnPreLoadBartender;
            
            private DataColumn columnSkipCaching;
            
            private DataColumn columnSkipOrderStatusUpdates;
            
            private DataColumn columnPrintOnlyMode;
            
            private DataColumn columnSkipAutoloaderScanning;
            
            private DataColumn columnPrintBeforeRecording;
            
            private DataColumn columnUseDriveLettersForRecorders;
            
            private DataColumn columnTraceSCSICommands;
            
            private DataColumn columnTraceReadWriteCommands;
            
            private DataColumn columnTraceSerialCommands;
            
            private DataColumn columnTraceLabelAndPrinting;
            
            private DataColumn columnTraceXMLMessages;
            
            private DataColumn columnLogSkippingOrder;
            
            private DataColumn columnRunWithoutDevices;
            
            private DataColumn columnDisablePreloadingRecorderAfterPrinterLoad;
            
            private DataColumn columnDisableCacheLocking;
            
            private DataColumn columnEnableCacheLimiting;
            
            private DataColumn columnSkipSerialPortForAutoloader;
            
            private DataColumn columnSkipDriveForReaderRecorderCache;
            
            private DataColumn columnUseDelayBeforeMainWindow;
            
            private DataColumn columnUserParallelPortForPrism;
            
            private DataColumn columnDisableDriverNameInRendering;
            
            private DataColumn columnDisableImageSizeChecking;
            
            private DataColumn columnServerStatus_Id;
            
            internal SwitchesDataTable() : 
                    base("Switches") {
                this.InitClass();
            }
            
            internal SwitchesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ManufacturingTestModeColumn {
                get {
                    return this.columnManufacturingTestMode;
                }
            }
            
            internal DataColumn VerifyOnlyModeColumn {
                get {
                    return this.columnVerifyOnlyMode;
                }
            }
            
            internal DataColumn NoLogLimitColumn {
                get {
                    return this.columnNoLogLimit;
                }
            }
            
            internal DataColumn SetupModeColumn {
                get {
                    return this.columnSetupMode;
                }
            }
            
            internal DataColumn DirectImagingColumn {
                get {
                    return this.columnDirectImaging;
                }
            }
            
            internal DataColumn SkipOrderUpdateColumn {
                get {
                    return this.columnSkipOrderUpdate;
                }
            }
            
            internal DataColumn AutoThroughPutMeasurementColumn {
                get {
                    return this.columnAutoThroughPutMeasurement;
                }
            }
            
            internal DataColumn TimingLoggedColumn {
                get {
                    return this.columnTimingLogged;
                }
            }
            
            internal DataColumn PreLoadBartenderColumn {
                get {
                    return this.columnPreLoadBartender;
                }
            }
            
            internal DataColumn SkipCachingColumn {
                get {
                    return this.columnSkipCaching;
                }
            }
            
            internal DataColumn SkipOrderStatusUpdatesColumn {
                get {
                    return this.columnSkipOrderStatusUpdates;
                }
            }
            
            internal DataColumn PrintOnlyModeColumn {
                get {
                    return this.columnPrintOnlyMode;
                }
            }
            
            internal DataColumn SkipAutoloaderScanningColumn {
                get {
                    return this.columnSkipAutoloaderScanning;
                }
            }
            
            internal DataColumn PrintBeforeRecordingColumn {
                get {
                    return this.columnPrintBeforeRecording;
                }
            }
            
            internal DataColumn UseDriveLettersForRecordersColumn {
                get {
                    return this.columnUseDriveLettersForRecorders;
                }
            }
            
            internal DataColumn TraceSCSICommandsColumn {
                get {
                    return this.columnTraceSCSICommands;
                }
            }
            
            internal DataColumn TraceReadWriteCommandsColumn {
                get {
                    return this.columnTraceReadWriteCommands;
                }
            }
            
            internal DataColumn TraceSerialCommandsColumn {
                get {
                    return this.columnTraceSerialCommands;
                }
            }
            
            internal DataColumn TraceLabelAndPrintingColumn {
                get {
                    return this.columnTraceLabelAndPrinting;
                }
            }
            
            internal DataColumn TraceXMLMessagesColumn {
                get {
                    return this.columnTraceXMLMessages;
                }
            }
            
            internal DataColumn LogSkippingOrderColumn {
                get {
                    return this.columnLogSkippingOrder;
                }
            }
            
            internal DataColumn RunWithoutDevicesColumn {
                get {
                    return this.columnRunWithoutDevices;
                }
            }
            
            internal DataColumn DisablePreloadingRecorderAfterPrinterLoadColumn {
                get {
                    return this.columnDisablePreloadingRecorderAfterPrinterLoad;
                }
            }
            
            internal DataColumn DisableCacheLockingColumn {
                get {
                    return this.columnDisableCacheLocking;
                }
            }
            
            internal DataColumn EnableCacheLimitingColumn {
                get {
                    return this.columnEnableCacheLimiting;
                }
            }
            
            internal DataColumn SkipSerialPortForAutoloaderColumn {
                get {
                    return this.columnSkipSerialPortForAutoloader;
                }
            }
            
            internal DataColumn SkipDriveForReaderRecorderCacheColumn {
                get {
                    return this.columnSkipDriveForReaderRecorderCache;
                }
            }
            
            internal DataColumn UseDelayBeforeMainWindowColumn {
                get {
                    return this.columnUseDelayBeforeMainWindow;
                }
            }
            
            internal DataColumn UserParallelPortForPrismColumn {
                get {
                    return this.columnUserParallelPortForPrism;
                }
            }
            
            internal DataColumn DisableDriverNameInRenderingColumn {
                get {
                    return this.columnDisableDriverNameInRendering;
                }
            }
            
            internal DataColumn DisableImageSizeCheckingColumn {
                get {
                    return this.columnDisableImageSizeChecking;
                }
            }
            
            internal DataColumn ServerStatus_IdColumn {
                get {
                    return this.columnServerStatus_Id;
                }
            }
            
            public SwitchesRow this[int index] {
                get {
                    return ((SwitchesRow)(this.Rows[index]));
                }
            }
            
            public event SwitchesRowChangeEventHandler SwitchesRowChanged;
            
            public event SwitchesRowChangeEventHandler SwitchesRowChanging;
            
            public event SwitchesRowChangeEventHandler SwitchesRowDeleted;
            
            public event SwitchesRowChangeEventHandler SwitchesRowDeleting;
            
            public void AddSwitchesRow(SwitchesRow row) {
                this.Rows.Add(row);
            }
            
            public SwitchesRow AddSwitchesRow(
                        string ManufacturingTestMode, 
                        string VerifyOnlyMode, 
                        string NoLogLimit, 
                        string SetupMode, 
                        string DirectImaging, 
                        string SkipOrderUpdate, 
                        string AutoThroughPutMeasurement, 
                        string TimingLogged, 
                        string PreLoadBartender, 
                        string SkipCaching, 
                        string SkipOrderStatusUpdates, 
                        string PrintOnlyMode, 
                        string SkipAutoloaderScanning, 
                        string PrintBeforeRecording, 
                        string UseDriveLettersForRecorders, 
                        string TraceSCSICommands, 
                        string TraceReadWriteCommands, 
                        string TraceSerialCommands, 
                        string TraceLabelAndPrinting, 
                        string TraceXMLMessages, 
                        string LogSkippingOrder, 
                        string RunWithoutDevices, 
                        string DisablePreloadingRecorderAfterPrinterLoad, 
                        string DisableCacheLocking, 
                        string EnableCacheLimiting, 
                        string SkipSerialPortForAutoloader, 
                        string SkipDriveForReaderRecorderCache, 
                        string UseDelayBeforeMainWindow, 
                        string UserParallelPortForPrism, 
                        string DisableDriverNameInRendering, 
                        string DisableImageSizeChecking, 
                        ServerStatusRow parentServerStatusRowByServerStatus_Switches) {
                SwitchesRow rowSwitchesRow = ((SwitchesRow)(this.NewRow()));
                rowSwitchesRow.ItemArray = new object[] {
                        ManufacturingTestMode,
                        VerifyOnlyMode,
                        NoLogLimit,
                        SetupMode,
                        DirectImaging,
                        SkipOrderUpdate,
                        AutoThroughPutMeasurement,
                        TimingLogged,
                        PreLoadBartender,
                        SkipCaching,
                        SkipOrderStatusUpdates,
                        PrintOnlyMode,
                        SkipAutoloaderScanning,
                        PrintBeforeRecording,
                        UseDriveLettersForRecorders,
                        TraceSCSICommands,
                        TraceReadWriteCommands,
                        TraceSerialCommands,
                        TraceLabelAndPrinting,
                        TraceXMLMessages,
                        LogSkippingOrder,
                        RunWithoutDevices,
                        DisablePreloadingRecorderAfterPrinterLoad,
                        DisableCacheLocking,
                        EnableCacheLimiting,
                        SkipSerialPortForAutoloader,
                        SkipDriveForReaderRecorderCache,
                        UseDelayBeforeMainWindow,
                        UserParallelPortForPrism,
                        DisableDriverNameInRendering,
                        DisableImageSizeChecking,
                        parentServerStatusRowByServerStatus_Switches[0]};
                this.Rows.Add(rowSwitchesRow);
                return rowSwitchesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SwitchesDataTable cln = ((SwitchesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SwitchesDataTable();
            }
            
            internal void InitVars() {
                this.columnManufacturingTestMode = this.Columns["ManufacturingTestMode"];
                this.columnVerifyOnlyMode = this.Columns["VerifyOnlyMode"];
                this.columnNoLogLimit = this.Columns["NoLogLimit"];
                this.columnSetupMode = this.Columns["SetupMode"];
                this.columnDirectImaging = this.Columns["DirectImaging"];
                this.columnSkipOrderUpdate = this.Columns["SkipOrderUpdate"];
                this.columnAutoThroughPutMeasurement = this.Columns["AutoThroughPutMeasurement"];
                this.columnTimingLogged = this.Columns["TimingLogged"];
                this.columnPreLoadBartender = this.Columns["PreLoadBartender"];
                this.columnSkipCaching = this.Columns["SkipCaching"];
                this.columnSkipOrderStatusUpdates = this.Columns["SkipOrderStatusUpdates"];
                this.columnPrintOnlyMode = this.Columns["PrintOnlyMode"];
                this.columnSkipAutoloaderScanning = this.Columns["SkipAutoloaderScanning"];
                this.columnPrintBeforeRecording = this.Columns["PrintBeforeRecording"];
                this.columnUseDriveLettersForRecorders = this.Columns["UseDriveLettersForRecorders"];
                this.columnTraceSCSICommands = this.Columns["TraceSCSICommands"];
                this.columnTraceReadWriteCommands = this.Columns["TraceReadWriteCommands"];
                this.columnTraceSerialCommands = this.Columns["TraceSerialCommands"];
                this.columnTraceLabelAndPrinting = this.Columns["TraceLabelAndPrinting"];
                this.columnTraceXMLMessages = this.Columns["TraceXMLMessages"];
                this.columnLogSkippingOrder = this.Columns["LogSkippingOrder"];
                this.columnRunWithoutDevices = this.Columns["RunWithoutDevices"];
                this.columnDisablePreloadingRecorderAfterPrinterLoad = this.Columns["DisablePreloadingRecorderAfterPrinterLoad"];
                this.columnDisableCacheLocking = this.Columns["DisableCacheLocking"];
                this.columnEnableCacheLimiting = this.Columns["EnableCacheLimiting"];
                this.columnSkipSerialPortForAutoloader = this.Columns["SkipSerialPortForAutoloader"];
                this.columnSkipDriveForReaderRecorderCache = this.Columns["SkipDriveForReaderRecorderCache"];
                this.columnUseDelayBeforeMainWindow = this.Columns["UseDelayBeforeMainWindow"];
                this.columnUserParallelPortForPrism = this.Columns["UserParallelPortForPrism"];
                this.columnDisableDriverNameInRendering = this.Columns["DisableDriverNameInRendering"];
                this.columnDisableImageSizeChecking = this.Columns["DisableImageSizeChecking"];
                this.columnServerStatus_Id = this.Columns["ServerStatus_Id"];
            }
            
            private void InitClass() {
                this.columnManufacturingTestMode = new DataColumn("ManufacturingTestMode", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnManufacturingTestMode);
                this.columnVerifyOnlyMode = new DataColumn("VerifyOnlyMode", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnVerifyOnlyMode);
                this.columnNoLogLimit = new DataColumn("NoLogLimit", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnNoLogLimit);
                this.columnSetupMode = new DataColumn("SetupMode", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSetupMode);
                this.columnDirectImaging = new DataColumn("DirectImaging", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDirectImaging);
                this.columnSkipOrderUpdate = new DataColumn("SkipOrderUpdate", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSkipOrderUpdate);
                this.columnAutoThroughPutMeasurement = new DataColumn("AutoThroughPutMeasurement", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAutoThroughPutMeasurement);
                this.columnTimingLogged = new DataColumn("TimingLogged", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTimingLogged);
                this.columnPreLoadBartender = new DataColumn("PreLoadBartender", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPreLoadBartender);
                this.columnSkipCaching = new DataColumn("SkipCaching", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSkipCaching);
                this.columnSkipOrderStatusUpdates = new DataColumn("SkipOrderStatusUpdates", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSkipOrderStatusUpdates);
                this.columnPrintOnlyMode = new DataColumn("PrintOnlyMode", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPrintOnlyMode);
                this.columnSkipAutoloaderScanning = new DataColumn("SkipAutoloaderScanning", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSkipAutoloaderScanning);
                this.columnPrintBeforeRecording = new DataColumn("PrintBeforeRecording", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPrintBeforeRecording);
                this.columnUseDriveLettersForRecorders = new DataColumn("UseDriveLettersForRecorders", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUseDriveLettersForRecorders);
                this.columnTraceSCSICommands = new DataColumn("TraceSCSICommands", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTraceSCSICommands);
                this.columnTraceReadWriteCommands = new DataColumn("TraceReadWriteCommands", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTraceReadWriteCommands);
                this.columnTraceSerialCommands = new DataColumn("TraceSerialCommands", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTraceSerialCommands);
                this.columnTraceLabelAndPrinting = new DataColumn("TraceLabelAndPrinting", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTraceLabelAndPrinting);
                this.columnTraceXMLMessages = new DataColumn("TraceXMLMessages", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTraceXMLMessages);
                this.columnLogSkippingOrder = new DataColumn("LogSkippingOrder", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnLogSkippingOrder);
                this.columnRunWithoutDevices = new DataColumn("RunWithoutDevices", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRunWithoutDevices);
                this.columnDisablePreloadingRecorderAfterPrinterLoad = new DataColumn("DisablePreloadingRecorderAfterPrinterLoad", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDisablePreloadingRecorderAfterPrinterLoad);
                this.columnDisableCacheLocking = new DataColumn("DisableCacheLocking", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDisableCacheLocking);
                this.columnEnableCacheLimiting = new DataColumn("EnableCacheLimiting", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnEnableCacheLimiting);
                this.columnSkipSerialPortForAutoloader = new DataColumn("SkipSerialPortForAutoloader", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSkipSerialPortForAutoloader);
                this.columnSkipDriveForReaderRecorderCache = new DataColumn("SkipDriveForReaderRecorderCache", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSkipDriveForReaderRecorderCache);
                this.columnUseDelayBeforeMainWindow = new DataColumn("UseDelayBeforeMainWindow", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUseDelayBeforeMainWindow);
                this.columnUserParallelPortForPrism = new DataColumn("UserParallelPortForPrism", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUserParallelPortForPrism);
                this.columnDisableDriverNameInRendering = new DataColumn("DisableDriverNameInRendering", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDisableDriverNameInRendering);
                this.columnDisableImageSizeChecking = new DataColumn("DisableImageSizeChecking", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDisableImageSizeChecking);
                this.columnServerStatus_Id = new DataColumn("ServerStatus_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnServerStatus_Id);
                this.columnManufacturingTestMode.Namespace = "";
                this.columnManufacturingTestMode.DefaultValue = "false";
                this.columnVerifyOnlyMode.Namespace = "";
                this.columnVerifyOnlyMode.DefaultValue = "false";
                this.columnNoLogLimit.Namespace = "";
                this.columnNoLogLimit.DefaultValue = "false";
                this.columnSetupMode.Namespace = "";
                this.columnSetupMode.DefaultValue = "false";
                this.columnDirectImaging.Namespace = "";
                this.columnDirectImaging.DefaultValue = "false";
                this.columnSkipOrderUpdate.Namespace = "";
                this.columnSkipOrderUpdate.DefaultValue = "false";
                this.columnAutoThroughPutMeasurement.Namespace = "";
                this.columnAutoThroughPutMeasurement.DefaultValue = "false";
                this.columnTimingLogged.Namespace = "";
                this.columnTimingLogged.DefaultValue = "false";
                this.columnPreLoadBartender.Namespace = "";
                this.columnPreLoadBartender.DefaultValue = "false";
                this.columnSkipCaching.Namespace = "";
                this.columnSkipCaching.DefaultValue = "false";
                this.columnSkipOrderStatusUpdates.Namespace = "";
                this.columnSkipOrderStatusUpdates.DefaultValue = "false";
                this.columnPrintOnlyMode.Namespace = "";
                this.columnPrintOnlyMode.DefaultValue = "false";
                this.columnSkipAutoloaderScanning.Namespace = "";
                this.columnSkipAutoloaderScanning.DefaultValue = "false";
                this.columnPrintBeforeRecording.Namespace = "";
                this.columnPrintBeforeRecording.DefaultValue = "false";
                this.columnUseDriveLettersForRecorders.Namespace = "";
                this.columnUseDriveLettersForRecorders.DefaultValue = "false";
                this.columnTraceSCSICommands.Namespace = "";
                this.columnTraceSCSICommands.DefaultValue = "false";
                this.columnTraceReadWriteCommands.Namespace = "";
                this.columnTraceReadWriteCommands.DefaultValue = "false";
                this.columnTraceSerialCommands.Namespace = "";
                this.columnTraceSerialCommands.DefaultValue = "false";
                this.columnTraceLabelAndPrinting.Namespace = "";
                this.columnTraceLabelAndPrinting.DefaultValue = "false";
                this.columnTraceXMLMessages.Namespace = "";
                this.columnTraceXMLMessages.DefaultValue = "false";
                this.columnLogSkippingOrder.Namespace = "";
                this.columnLogSkippingOrder.DefaultValue = "false";
                this.columnRunWithoutDevices.Namespace = "";
                this.columnRunWithoutDevices.DefaultValue = "false";
                this.columnDisablePreloadingRecorderAfterPrinterLoad.Namespace = "";
                this.columnDisablePreloadingRecorderAfterPrinterLoad.DefaultValue = "false";
                this.columnDisableCacheLocking.Namespace = "";
                this.columnDisableCacheLocking.DefaultValue = "false";
                this.columnEnableCacheLimiting.Namespace = "";
                this.columnEnableCacheLimiting.DefaultValue = "false";
                this.columnSkipSerialPortForAutoloader.Namespace = "";
                this.columnSkipSerialPortForAutoloader.DefaultValue = "false";
                this.columnSkipDriveForReaderRecorderCache.Namespace = "";
                this.columnSkipDriveForReaderRecorderCache.DefaultValue = "false";
                this.columnUseDelayBeforeMainWindow.Namespace = "";
                this.columnUseDelayBeforeMainWindow.DefaultValue = "false";
                this.columnUserParallelPortForPrism.Namespace = "";
                this.columnUserParallelPortForPrism.DefaultValue = "false";
                this.columnDisableDriverNameInRendering.Namespace = "";
                this.columnDisableDriverNameInRendering.DefaultValue = "false";
                this.columnDisableImageSizeChecking.Namespace = "";
                this.columnDisableImageSizeChecking.DefaultValue = "false";
            }
            
            public SwitchesRow NewSwitchesRow() {
                return ((SwitchesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SwitchesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SwitchesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SwitchesRowChanged != null)) {
                    this.SwitchesRowChanged(this, new SwitchesRowChangeEvent(((SwitchesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SwitchesRowChanging != null)) {
                    this.SwitchesRowChanging(this, new SwitchesRowChangeEvent(((SwitchesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SwitchesRowDeleted != null)) {
                    this.SwitchesRowDeleted(this, new SwitchesRowChangeEvent(((SwitchesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SwitchesRowDeleting != null)) {
                    this.SwitchesRowDeleting(this, new SwitchesRowChangeEvent(((SwitchesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSwitchesRow(SwitchesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SwitchesRow : DataRow {
            
            private SwitchesDataTable tableSwitches;
            
            internal SwitchesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSwitches = ((SwitchesDataTable)(this.Table));
            }
            
            public string ManufacturingTestMode {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.ManufacturingTestModeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.ManufacturingTestModeColumn] = value;
                }
            }
            
            public string VerifyOnlyMode {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.VerifyOnlyModeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.VerifyOnlyModeColumn] = value;
                }
            }
            
            public string NoLogLimit {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.NoLogLimitColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.NoLogLimitColumn] = value;
                }
            }
            
            public string SetupMode {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SetupModeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.SetupModeColumn] = value;
                }
            }
            
            public string DirectImaging {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.DirectImagingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.DirectImagingColumn] = value;
                }
            }
            
            public string SkipOrderUpdate {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SkipOrderUpdateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.SkipOrderUpdateColumn] = value;
                }
            }
            
            public string AutoThroughPutMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.AutoThroughPutMeasurementColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.AutoThroughPutMeasurementColumn] = value;
                }
            }
            
            public string TimingLogged {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.TimingLoggedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.TimingLoggedColumn] = value;
                }
            }
            
            public string PreLoadBartender {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.PreLoadBartenderColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.PreLoadBartenderColumn] = value;
                }
            }
            
            public string SkipCaching {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SkipCachingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.SkipCachingColumn] = value;
                }
            }
            
            public string SkipOrderStatusUpdates {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SkipOrderStatusUpdatesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.SkipOrderStatusUpdatesColumn] = value;
                }
            }
            
            public string PrintOnlyMode {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.PrintOnlyModeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.PrintOnlyModeColumn] = value;
                }
            }
            
            public string SkipAutoloaderScanning {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SkipAutoloaderScanningColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.SkipAutoloaderScanningColumn] = value;
                }
            }
            
            public string PrintBeforeRecording {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.PrintBeforeRecordingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.PrintBeforeRecordingColumn] = value;
                }
            }
            
            public string UseDriveLettersForRecorders {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.UseDriveLettersForRecordersColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.UseDriveLettersForRecordersColumn] = value;
                }
            }
            
            public string TraceSCSICommands {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.TraceSCSICommandsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.TraceSCSICommandsColumn] = value;
                }
            }
            
            public string TraceReadWriteCommands {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.TraceReadWriteCommandsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.TraceReadWriteCommandsColumn] = value;
                }
            }
            
            public string TraceSerialCommands {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.TraceSerialCommandsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.TraceSerialCommandsColumn] = value;
                }
            }
            
            public string TraceLabelAndPrinting {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.TraceLabelAndPrintingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.TraceLabelAndPrintingColumn] = value;
                }
            }
            
            public string TraceXMLMessages {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.TraceXMLMessagesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.TraceXMLMessagesColumn] = value;
                }
            }
            
            public string LogSkippingOrder {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.LogSkippingOrderColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.LogSkippingOrderColumn] = value;
                }
            }
            
            public string RunWithoutDevices {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.RunWithoutDevicesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.RunWithoutDevicesColumn] = value;
                }
            }
            
            public string DisablePreloadingRecorderAfterPrinterLoad {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.DisablePreloadingRecorderAfterPrinterLoadColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.DisablePreloadingRecorderAfterPrinterLoadColumn] = value;
                }
            }
            
            public string DisableCacheLocking {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.DisableCacheLockingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.DisableCacheLockingColumn] = value;
                }
            }
            
            public string EnableCacheLimiting {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.EnableCacheLimitingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.EnableCacheLimitingColumn] = value;
                }
            }
            
            public string SkipSerialPortForAutoloader {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SkipSerialPortForAutoloaderColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.SkipSerialPortForAutoloaderColumn] = value;
                }
            }
            
            public string SkipDriveForReaderRecorderCache {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.SkipDriveForReaderRecorderCacheColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.SkipDriveForReaderRecorderCacheColumn] = value;
                }
            }
            
            public string UseDelayBeforeMainWindow {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.UseDelayBeforeMainWindowColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.UseDelayBeforeMainWindowColumn] = value;
                }
            }
            
            public string UserParallelPortForPrism {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.UserParallelPortForPrismColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.UserParallelPortForPrismColumn] = value;
                }
            }
            
            public string DisableDriverNameInRendering {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.DisableDriverNameInRenderingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.DisableDriverNameInRenderingColumn] = value;
                }
            }
            
            public string DisableImageSizeChecking {
                get {
                    try {
                        return ((string)(this[this.tableSwitches.DisableImageSizeCheckingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSwitches.DisableImageSizeCheckingColumn] = value;
                }
            }
            
            public ServerStatusRow ServerStatusRow {
                get {
                    return ((ServerStatusRow)(this.GetParentRow(this.Table.ParentRelations["ServerStatus_Switches"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ServerStatus_Switches"]);
                }
            }
            
            public bool IsManufacturingTestModeNull() {
                return this.IsNull(this.tableSwitches.ManufacturingTestModeColumn);
            }
            
            public void SetManufacturingTestModeNull() {
                this[this.tableSwitches.ManufacturingTestModeColumn] = System.Convert.DBNull;
            }
            
            public bool IsVerifyOnlyModeNull() {
                return this.IsNull(this.tableSwitches.VerifyOnlyModeColumn);
            }
            
            public void SetVerifyOnlyModeNull() {
                this[this.tableSwitches.VerifyOnlyModeColumn] = System.Convert.DBNull;
            }
            
            public bool IsNoLogLimitNull() {
                return this.IsNull(this.tableSwitches.NoLogLimitColumn);
            }
            
            public void SetNoLogLimitNull() {
                this[this.tableSwitches.NoLogLimitColumn] = System.Convert.DBNull;
            }
            
            public bool IsSetupModeNull() {
                return this.IsNull(this.tableSwitches.SetupModeColumn);
            }
            
            public void SetSetupModeNull() {
                this[this.tableSwitches.SetupModeColumn] = System.Convert.DBNull;
            }
            
            public bool IsDirectImagingNull() {
                return this.IsNull(this.tableSwitches.DirectImagingColumn);
            }
            
            public void SetDirectImagingNull() {
                this[this.tableSwitches.DirectImagingColumn] = System.Convert.DBNull;
            }
            
            public bool IsSkipOrderUpdateNull() {
                return this.IsNull(this.tableSwitches.SkipOrderUpdateColumn);
            }
            
            public void SetSkipOrderUpdateNull() {
                this[this.tableSwitches.SkipOrderUpdateColumn] = System.Convert.DBNull;
            }
            
            public bool IsAutoThroughPutMeasurementNull() {
                return this.IsNull(this.tableSwitches.AutoThroughPutMeasurementColumn);
            }
            
            public void SetAutoThroughPutMeasurementNull() {
                this[this.tableSwitches.AutoThroughPutMeasurementColumn] = System.Convert.DBNull;
            }
            
            public bool IsTimingLoggedNull() {
                return this.IsNull(this.tableSwitches.TimingLoggedColumn);
            }
            
            public void SetTimingLoggedNull() {
                this[this.tableSwitches.TimingLoggedColumn] = System.Convert.DBNull;
            }
            
            public bool IsPreLoadBartenderNull() {
                return this.IsNull(this.tableSwitches.PreLoadBartenderColumn);
            }
            
            public void SetPreLoadBartenderNull() {
                this[this.tableSwitches.PreLoadBartenderColumn] = System.Convert.DBNull;
            }
            
            public bool IsSkipCachingNull() {
                return this.IsNull(this.tableSwitches.SkipCachingColumn);
            }
            
            public void SetSkipCachingNull() {
                this[this.tableSwitches.SkipCachingColumn] = System.Convert.DBNull;
            }
            
            public bool IsSkipOrderStatusUpdatesNull() {
                return this.IsNull(this.tableSwitches.SkipOrderStatusUpdatesColumn);
            }
            
            public void SetSkipOrderStatusUpdatesNull() {
                this[this.tableSwitches.SkipOrderStatusUpdatesColumn] = System.Convert.DBNull;
            }
            
            public bool IsPrintOnlyModeNull() {
                return this.IsNull(this.tableSwitches.PrintOnlyModeColumn);
            }
            
            public void SetPrintOnlyModeNull() {
                this[this.tableSwitches.PrintOnlyModeColumn] = System.Convert.DBNull;
            }
            
            public bool IsSkipAutoloaderScanningNull() {
                return this.IsNull(this.tableSwitches.SkipAutoloaderScanningColumn);
            }
            
            public void SetSkipAutoloaderScanningNull() {
                this[this.tableSwitches.SkipAutoloaderScanningColumn] = System.Convert.DBNull;
            }
            
            public bool IsPrintBeforeRecordingNull() {
                return this.IsNull(this.tableSwitches.PrintBeforeRecordingColumn);
            }
            
            public void SetPrintBeforeRecordingNull() {
                this[this.tableSwitches.PrintBeforeRecordingColumn] = System.Convert.DBNull;
            }
            
            public bool IsUseDriveLettersForRecordersNull() {
                return this.IsNull(this.tableSwitches.UseDriveLettersForRecordersColumn);
            }
            
            public void SetUseDriveLettersForRecordersNull() {
                this[this.tableSwitches.UseDriveLettersForRecordersColumn] = System.Convert.DBNull;
            }
            
            public bool IsTraceSCSICommandsNull() {
                return this.IsNull(this.tableSwitches.TraceSCSICommandsColumn);
            }
            
            public void SetTraceSCSICommandsNull() {
                this[this.tableSwitches.TraceSCSICommandsColumn] = System.Convert.DBNull;
            }
            
            public bool IsTraceReadWriteCommandsNull() {
                return this.IsNull(this.tableSwitches.TraceReadWriteCommandsColumn);
            }
            
            public void SetTraceReadWriteCommandsNull() {
                this[this.tableSwitches.TraceReadWriteCommandsColumn] = System.Convert.DBNull;
            }
            
            public bool IsTraceSerialCommandsNull() {
                return this.IsNull(this.tableSwitches.TraceSerialCommandsColumn);
            }
            
            public void SetTraceSerialCommandsNull() {
                this[this.tableSwitches.TraceSerialCommandsColumn] = System.Convert.DBNull;
            }
            
            public bool IsTraceLabelAndPrintingNull() {
                return this.IsNull(this.tableSwitches.TraceLabelAndPrintingColumn);
            }
            
            public void SetTraceLabelAndPrintingNull() {
                this[this.tableSwitches.TraceLabelAndPrintingColumn] = System.Convert.DBNull;
            }
            
            public bool IsTraceXMLMessagesNull() {
                return this.IsNull(this.tableSwitches.TraceXMLMessagesColumn);
            }
            
            public void SetTraceXMLMessagesNull() {
                this[this.tableSwitches.TraceXMLMessagesColumn] = System.Convert.DBNull;
            }
            
            public bool IsLogSkippingOrderNull() {
                return this.IsNull(this.tableSwitches.LogSkippingOrderColumn);
            }
            
            public void SetLogSkippingOrderNull() {
                this[this.tableSwitches.LogSkippingOrderColumn] = System.Convert.DBNull;
            }
            
            public bool IsRunWithoutDevicesNull() {
                return this.IsNull(this.tableSwitches.RunWithoutDevicesColumn);
            }
            
            public void SetRunWithoutDevicesNull() {
                this[this.tableSwitches.RunWithoutDevicesColumn] = System.Convert.DBNull;
            }
            
            public bool IsDisablePreloadingRecorderAfterPrinterLoadNull() {
                return this.IsNull(this.tableSwitches.DisablePreloadingRecorderAfterPrinterLoadColumn);
            }
            
            public void SetDisablePreloadingRecorderAfterPrinterLoadNull() {
                this[this.tableSwitches.DisablePreloadingRecorderAfterPrinterLoadColumn] = System.Convert.DBNull;
            }
            
            public bool IsDisableCacheLockingNull() {
                return this.IsNull(this.tableSwitches.DisableCacheLockingColumn);
            }
            
            public void SetDisableCacheLockingNull() {
                this[this.tableSwitches.DisableCacheLockingColumn] = System.Convert.DBNull;
            }
            
            public bool IsEnableCacheLimitingNull() {
                return this.IsNull(this.tableSwitches.EnableCacheLimitingColumn);
            }
            
            public void SetEnableCacheLimitingNull() {
                this[this.tableSwitches.EnableCacheLimitingColumn] = System.Convert.DBNull;
            }
            
            public bool IsSkipSerialPortForAutoloaderNull() {
                return this.IsNull(this.tableSwitches.SkipSerialPortForAutoloaderColumn);
            }
            
            public void SetSkipSerialPortForAutoloaderNull() {
                this[this.tableSwitches.SkipSerialPortForAutoloaderColumn] = System.Convert.DBNull;
            }
            
            public bool IsSkipDriveForReaderRecorderCacheNull() {
                return this.IsNull(this.tableSwitches.SkipDriveForReaderRecorderCacheColumn);
            }
            
            public void SetSkipDriveForReaderRecorderCacheNull() {
                this[this.tableSwitches.SkipDriveForReaderRecorderCacheColumn] = System.Convert.DBNull;
            }
            
            public bool IsUseDelayBeforeMainWindowNull() {
                return this.IsNull(this.tableSwitches.UseDelayBeforeMainWindowColumn);
            }
            
            public void SetUseDelayBeforeMainWindowNull() {
                this[this.tableSwitches.UseDelayBeforeMainWindowColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserParallelPortForPrismNull() {
                return this.IsNull(this.tableSwitches.UserParallelPortForPrismColumn);
            }
            
            public void SetUserParallelPortForPrismNull() {
                this[this.tableSwitches.UserParallelPortForPrismColumn] = System.Convert.DBNull;
            }
            
            public bool IsDisableDriverNameInRenderingNull() {
                return this.IsNull(this.tableSwitches.DisableDriverNameInRenderingColumn);
            }
            
            public void SetDisableDriverNameInRenderingNull() {
                this[this.tableSwitches.DisableDriverNameInRenderingColumn] = System.Convert.DBNull;
            }
            
            public bool IsDisableImageSizeCheckingNull() {
                return this.IsNull(this.tableSwitches.DisableImageSizeCheckingColumn);
            }
            
            public void SetDisableImageSizeCheckingNull() {
                this[this.tableSwitches.DisableImageSizeCheckingColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SwitchesRowChangeEvent : EventArgs {
            
            private SwitchesRow eventRow;
            
            private DataRowAction eventAction;
            
            public SwitchesRowChangeEvent(SwitchesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SwitchesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrderListDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAutomation;
            
            private DataColumn columnCluster;
            
            private DataColumn columnNumberOfOrders;
            
            private DataColumn columnStatusTime;
            
            private DataColumn columnOrderList_Id;
            
            internal OrderListDataTable() : 
                    base("OrderList") {
                this.InitClass();
            }
            
            internal OrderListDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AutomationColumn {
                get {
                    return this.columnAutomation;
                }
            }
            
            internal DataColumn ClusterColumn {
                get {
                    return this.columnCluster;
                }
            }
            
            internal DataColumn NumberOfOrdersColumn {
                get {
                    return this.columnNumberOfOrders;
                }
            }
            
            internal DataColumn StatusTimeColumn {
                get {
                    return this.columnStatusTime;
                }
            }
            
            internal DataColumn OrderList_IdColumn {
                get {
                    return this.columnOrderList_Id;
                }
            }
            
            public OrderListRow this[int index] {
                get {
                    return ((OrderListRow)(this.Rows[index]));
                }
            }
            
            public event OrderListRowChangeEventHandler OrderListRowChanged;
            
            public event OrderListRowChangeEventHandler OrderListRowChanging;
            
            public event OrderListRowChangeEventHandler OrderListRowDeleted;
            
            public event OrderListRowChangeEventHandler OrderListRowDeleting;
            
            public void AddOrderListRow(OrderListRow row) {
                this.Rows.Add(row);
            }
            
            public OrderListRow AddOrderListRow(string Automation, string Cluster, string NumberOfOrders, string StatusTime) {
                OrderListRow rowOrderListRow = ((OrderListRow)(this.NewRow()));
                rowOrderListRow.ItemArray = new object[] {
                        Automation,
                        Cluster,
                        NumberOfOrders,
                        StatusTime,
                        null};
                this.Rows.Add(rowOrderListRow);
                return rowOrderListRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                OrderListDataTable cln = ((OrderListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new OrderListDataTable();
            }
            
            internal void InitVars() {
                this.columnAutomation = this.Columns["Automation"];
                this.columnCluster = this.Columns["Cluster"];
                this.columnNumberOfOrders = this.Columns["NumberOfOrders"];
                this.columnStatusTime = this.Columns["StatusTime"];
                this.columnOrderList_Id = this.Columns["OrderList_Id"];
            }
            
            private void InitClass() {
                this.columnAutomation = new DataColumn("Automation", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAutomation);
                this.columnCluster = new DataColumn("Cluster", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCluster);
                this.columnNumberOfOrders = new DataColumn("NumberOfOrders", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnNumberOfOrders);
                this.columnStatusTime = new DataColumn("StatusTime", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnStatusTime);
                this.columnOrderList_Id = new DataColumn("OrderList_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnOrderList_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnOrderList_Id}, true));
                this.columnAutomation.AllowDBNull = false;
                this.columnAutomation.Namespace = "";
                this.columnCluster.AllowDBNull = false;
                this.columnCluster.Namespace = "";
                this.columnNumberOfOrders.AllowDBNull = false;
                this.columnNumberOfOrders.Namespace = "";
                this.columnStatusTime.AllowDBNull = false;
                this.columnStatusTime.Namespace = "";
                this.columnOrderList_Id.AutoIncrement = true;
                this.columnOrderList_Id.AllowDBNull = false;
                this.columnOrderList_Id.Unique = true;
            }
            
            public OrderListRow NewOrderListRow() {
                return ((OrderListRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new OrderListRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(OrderListRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OrderListRowChanged != null)) {
                    this.OrderListRowChanged(this, new OrderListRowChangeEvent(((OrderListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OrderListRowChanging != null)) {
                    this.OrderListRowChanging(this, new OrderListRowChangeEvent(((OrderListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OrderListRowDeleted != null)) {
                    this.OrderListRowDeleted(this, new OrderListRowChangeEvent(((OrderListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OrderListRowDeleting != null)) {
                    this.OrderListRowDeleting(this, new OrderListRowChangeEvent(((OrderListRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveOrderListRow(OrderListRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrderListRow : DataRow {
            
            private OrderListDataTable tableOrderList;
            
            internal OrderListRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableOrderList = ((OrderListDataTable)(this.Table));
            }
            
            public string Automation {
                get {
                    return ((string)(this[this.tableOrderList.AutomationColumn]));
                }
                set {
                    this[this.tableOrderList.AutomationColumn] = value;
                }
            }
            
            public string Cluster {
                get {
                    return ((string)(this[this.tableOrderList.ClusterColumn]));
                }
                set {
                    this[this.tableOrderList.ClusterColumn] = value;
                }
            }
            
            public string NumberOfOrders {
                get {
                    return ((string)(this[this.tableOrderList.NumberOfOrdersColumn]));
                }
                set {
                    this[this.tableOrderList.NumberOfOrdersColumn] = value;
                }
            }
            
            public string StatusTime {
                get {
                    return ((string)(this[this.tableOrderList.StatusTimeColumn]));
                }
                set {
                    this[this.tableOrderList.StatusTimeColumn] = value;
                }
            }
            
            public ProductionOrderRow[] GetProductionOrderRows() {
                return ((ProductionOrderRow[])(this.GetChildRows(this.Table.ChildRelations["OrderList_ProductionOrder"])));
            }
            
            public ImagingOrderRow[] GetImagingOrderRows() {
                return ((ImagingOrderRow[])(this.GetChildRows(this.Table.ChildRelations["OrderList_ImagingOrder"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OrderListRowChangeEvent : EventArgs {
            
            private OrderListRow eventRow;
            
            private DataRowAction eventAction;
            
            public OrderListRowChangeEvent(OrderListRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public OrderListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProductionOrderDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnOrderId;
            
            private DataColumn columnClientId;
            
            private DataColumn columnOrderType;
            
            private DataColumn columnMediaType;
            
            private DataColumn columnMediaSize;
            
            private DataColumn columnOrderState;
            
            private DataColumn columnOrderStage;
            
            private DataColumn columnCopiesRequested;
            
            private DataColumn columnCopiesCompleted;
            
            private DataColumn columnPercentCompleted;
            
            private DataColumn columnOrderList_Id;
            
            internal ProductionOrderDataTable() : 
                    base("ProductionOrder") {
                this.InitClass();
            }
            
            internal ProductionOrderDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn OrderIdColumn {
                get {
                    return this.columnOrderId;
                }
            }
            
            internal DataColumn ClientIdColumn {
                get {
                    return this.columnClientId;
                }
            }
            
            internal DataColumn OrderTypeColumn {
                get {
                    return this.columnOrderType;
                }
            }
            
            internal DataColumn MediaTypeColumn {
                get {
                    return this.columnMediaType;
                }
            }
            
            internal DataColumn MediaSizeColumn {
                get {
                    return this.columnMediaSize;
                }
            }
            
            internal DataColumn OrderStateColumn {
                get {
                    return this.columnOrderState;
                }
            }
            
            internal DataColumn OrderStageColumn {
                get {
                    return this.columnOrderStage;
                }
            }
            
            internal DataColumn CopiesRequestedColumn {
                get {
                    return this.columnCopiesRequested;
                }
            }
            
            internal DataColumn CopiesCompletedColumn {
                get {
                    return this.columnCopiesCompleted;
                }
            }
            
            internal DataColumn PercentCompletedColumn {
                get {
                    return this.columnPercentCompleted;
                }
            }
            
            internal DataColumn OrderList_IdColumn {
                get {
                    return this.columnOrderList_Id;
                }
            }
            
            public ProductionOrderRow this[int index] {
                get {
                    return ((ProductionOrderRow)(this.Rows[index]));
                }
            }
            
            public event ProductionOrderRowChangeEventHandler ProductionOrderRowChanged;
            
            public event ProductionOrderRowChangeEventHandler ProductionOrderRowChanging;
            
            public event ProductionOrderRowChangeEventHandler ProductionOrderRowDeleted;
            
            public event ProductionOrderRowChangeEventHandler ProductionOrderRowDeleting;
            
            public void AddProductionOrderRow(ProductionOrderRow row) {
                this.Rows.Add(row);
            }
            
            public ProductionOrderRow AddProductionOrderRow(string OrderId, string ClientId, string OrderType, string MediaType, string MediaSize, string OrderState, string OrderStage, string CopiesRequested, string CopiesCompleted, string PercentCompleted, OrderListRow parentOrderListRowByOrderList_ProductionOrder) {
                ProductionOrderRow rowProductionOrderRow = ((ProductionOrderRow)(this.NewRow()));
                rowProductionOrderRow.ItemArray = new object[] {
                        OrderId,
                        ClientId,
                        OrderType,
                        MediaType,
                        MediaSize,
                        OrderState,
                        OrderStage,
                        CopiesRequested,
                        CopiesCompleted,
                        PercentCompleted,
                        parentOrderListRowByOrderList_ProductionOrder[4]};
                this.Rows.Add(rowProductionOrderRow);
                return rowProductionOrderRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ProductionOrderDataTable cln = ((ProductionOrderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ProductionOrderDataTable();
            }
            
            internal void InitVars() {
                this.columnOrderId = this.Columns["OrderId"];
                this.columnClientId = this.Columns["ClientId"];
                this.columnOrderType = this.Columns["OrderType"];
                this.columnMediaType = this.Columns["MediaType"];
                this.columnMediaSize = this.Columns["MediaSize"];
                this.columnOrderState = this.Columns["OrderState"];
                this.columnOrderStage = this.Columns["OrderStage"];
                this.columnCopiesRequested = this.Columns["CopiesRequested"];
                this.columnCopiesCompleted = this.Columns["CopiesCompleted"];
                this.columnPercentCompleted = this.Columns["PercentCompleted"];
                this.columnOrderList_Id = this.Columns["OrderList_Id"];
            }
            
            private void InitClass() {
                this.columnOrderId = new DataColumn("OrderId", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOrderId);
                this.columnClientId = new DataColumn("ClientId", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnClientId);
                this.columnOrderType = new DataColumn("OrderType", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOrderType);
                this.columnMediaType = new DataColumn("MediaType", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnMediaType);
                this.columnMediaSize = new DataColumn("MediaSize", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnMediaSize);
                this.columnOrderState = new DataColumn("OrderState", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOrderState);
                this.columnOrderStage = new DataColumn("OrderStage", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOrderStage);
                this.columnCopiesRequested = new DataColumn("CopiesRequested", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCopiesRequested);
                this.columnCopiesCompleted = new DataColumn("CopiesCompleted", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCopiesCompleted);
                this.columnPercentCompleted = new DataColumn("PercentCompleted", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPercentCompleted);
                this.columnOrderList_Id = new DataColumn("OrderList_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnOrderList_Id);
                this.columnOrderId.AllowDBNull = false;
                this.columnOrderId.Namespace = "";
                this.columnClientId.AllowDBNull = false;
                this.columnClientId.Namespace = "";
                this.columnOrderType.Namespace = "";
                this.columnOrderType.DefaultValue = "Write";
                this.columnMediaType.Namespace = "";
                this.columnMediaType.DefaultValue = "CDR";
                this.columnMediaSize.Namespace = "";
                this.columnMediaSize.DefaultValue = "120mm";
                this.columnOrderState.Namespace = "";
                this.columnOrderState.DefaultValue = "Waiting";
                this.columnOrderStage.AllowDBNull = false;
                this.columnOrderStage.Namespace = "";
                this.columnCopiesRequested.AllowDBNull = false;
                this.columnCopiesRequested.Namespace = "";
                this.columnCopiesCompleted.AllowDBNull = false;
                this.columnCopiesCompleted.Namespace = "";
                this.columnPercentCompleted.AllowDBNull = false;
                this.columnPercentCompleted.Namespace = "";
            }
            
            public ProductionOrderRow NewProductionOrderRow() {
                return ((ProductionOrderRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ProductionOrderRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ProductionOrderRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProductionOrderRowChanged != null)) {
                    this.ProductionOrderRowChanged(this, new ProductionOrderRowChangeEvent(((ProductionOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProductionOrderRowChanging != null)) {
                    this.ProductionOrderRowChanging(this, new ProductionOrderRowChangeEvent(((ProductionOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProductionOrderRowDeleted != null)) {
                    this.ProductionOrderRowDeleted(this, new ProductionOrderRowChangeEvent(((ProductionOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProductionOrderRowDeleting != null)) {
                    this.ProductionOrderRowDeleting(this, new ProductionOrderRowChangeEvent(((ProductionOrderRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProductionOrderRow(ProductionOrderRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProductionOrderRow : DataRow {
            
            private ProductionOrderDataTable tableProductionOrder;
            
            internal ProductionOrderRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableProductionOrder = ((ProductionOrderDataTable)(this.Table));
            }
            
            public string OrderId {
                get {
                    return ((string)(this[this.tableProductionOrder.OrderIdColumn]));
                }
                set {
                    this[this.tableProductionOrder.OrderIdColumn] = value;
                }
            }
            
            public string ClientId {
                get {
                    return ((string)(this[this.tableProductionOrder.ClientIdColumn]));
                }
                set {
                    this[this.tableProductionOrder.ClientIdColumn] = value;
                }
            }
            
            public string OrderType {
                get {
                    try {
                        return ((string)(this[this.tableProductionOrder.OrderTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProductionOrder.OrderTypeColumn] = value;
                }
            }
            
            public string MediaType {
                get {
                    try {
                        return ((string)(this[this.tableProductionOrder.MediaTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProductionOrder.MediaTypeColumn] = value;
                }
            }
            
            public string MediaSize {
                get {
                    try {
                        return ((string)(this[this.tableProductionOrder.MediaSizeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProductionOrder.MediaSizeColumn] = value;
                }
            }
            
            public string OrderState {
                get {
                    try {
                        return ((string)(this[this.tableProductionOrder.OrderStateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProductionOrder.OrderStateColumn] = value;
                }
            }
            
            public string OrderStage {
                get {
                    return ((string)(this[this.tableProductionOrder.OrderStageColumn]));
                }
                set {
                    this[this.tableProductionOrder.OrderStageColumn] = value;
                }
            }
            
            public string CopiesRequested {
                get {
                    return ((string)(this[this.tableProductionOrder.CopiesRequestedColumn]));
                }
                set {
                    this[this.tableProductionOrder.CopiesRequestedColumn] = value;
                }
            }
            
            public string CopiesCompleted {
                get {
                    return ((string)(this[this.tableProductionOrder.CopiesCompletedColumn]));
                }
                set {
                    this[this.tableProductionOrder.CopiesCompletedColumn] = value;
                }
            }
            
            public string PercentCompleted {
                get {
                    return ((string)(this[this.tableProductionOrder.PercentCompletedColumn]));
                }
                set {
                    this[this.tableProductionOrder.PercentCompletedColumn] = value;
                }
            }
            
            public OrderListRow OrderListRow {
                get {
                    return ((OrderListRow)(this.GetParentRow(this.Table.ParentRelations["OrderList_ProductionOrder"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["OrderList_ProductionOrder"]);
                }
            }
            
            public bool IsOrderTypeNull() {
                return this.IsNull(this.tableProductionOrder.OrderTypeColumn);
            }
            
            public void SetOrderTypeNull() {
                this[this.tableProductionOrder.OrderTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsMediaTypeNull() {
                return this.IsNull(this.tableProductionOrder.MediaTypeColumn);
            }
            
            public void SetMediaTypeNull() {
                this[this.tableProductionOrder.MediaTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsMediaSizeNull() {
                return this.IsNull(this.tableProductionOrder.MediaSizeColumn);
            }
            
            public void SetMediaSizeNull() {
                this[this.tableProductionOrder.MediaSizeColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrderStateNull() {
                return this.IsNull(this.tableProductionOrder.OrderStateColumn);
            }
            
            public void SetOrderStateNull() {
                this[this.tableProductionOrder.OrderStateColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProductionOrderRowChangeEvent : EventArgs {
            
            private ProductionOrderRow eventRow;
            
            private DataRowAction eventAction;
            
            public ProductionOrderRowChangeEvent(ProductionOrderRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ProductionOrderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ImagingOrderDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnOrderList_Id;
            
            internal ImagingOrderDataTable() : 
                    base("ImagingOrder") {
                this.InitClass();
            }
            
            internal ImagingOrderDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn OrderList_IdColumn {
                get {
                    return this.columnOrderList_Id;
                }
            }
            
            public ImagingOrderRow this[int index] {
                get {
                    return ((ImagingOrderRow)(this.Rows[index]));
                }
            }
            
            public event ImagingOrderRowChangeEventHandler ImagingOrderRowChanged;
            
            public event ImagingOrderRowChangeEventHandler ImagingOrderRowChanging;
            
            public event ImagingOrderRowChangeEventHandler ImagingOrderRowDeleted;
            
            public event ImagingOrderRowChangeEventHandler ImagingOrderRowDeleting;
            
            public void AddImagingOrderRow(ImagingOrderRow row) {
                this.Rows.Add(row);
            }
            
            public ImagingOrderRow AddImagingOrderRow(OrderListRow parentOrderListRowByOrderList_ImagingOrder) {
                ImagingOrderRow rowImagingOrderRow = ((ImagingOrderRow)(this.NewRow()));
                rowImagingOrderRow.ItemArray = new object[] {
                        parentOrderListRowByOrderList_ImagingOrder[4]};
                this.Rows.Add(rowImagingOrderRow);
                return rowImagingOrderRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ImagingOrderDataTable cln = ((ImagingOrderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ImagingOrderDataTable();
            }
            
            internal void InitVars() {
                this.columnOrderList_Id = this.Columns["OrderList_Id"];
            }
            
            private void InitClass() {
                this.columnOrderList_Id = new DataColumn("OrderList_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnOrderList_Id);
            }
            
            public ImagingOrderRow NewImagingOrderRow() {
                return ((ImagingOrderRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ImagingOrderRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ImagingOrderRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ImagingOrderRowChanged != null)) {
                    this.ImagingOrderRowChanged(this, new ImagingOrderRowChangeEvent(((ImagingOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ImagingOrderRowChanging != null)) {
                    this.ImagingOrderRowChanging(this, new ImagingOrderRowChangeEvent(((ImagingOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ImagingOrderRowDeleted != null)) {
                    this.ImagingOrderRowDeleted(this, new ImagingOrderRowChangeEvent(((ImagingOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ImagingOrderRowDeleting != null)) {
                    this.ImagingOrderRowDeleting(this, new ImagingOrderRowChangeEvent(((ImagingOrderRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveImagingOrderRow(ImagingOrderRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ImagingOrderRow : DataRow {
            
            private ImagingOrderDataTable tableImagingOrder;
            
            internal ImagingOrderRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableImagingOrder = ((ImagingOrderDataTable)(this.Table));
            }
            
            public OrderListRow OrderListRow {
                get {
                    return ((OrderListRow)(this.GetParentRow(this.Table.ParentRelations["OrderList_ImagingOrder"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["OrderList_ImagingOrder"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ImagingOrderRowChangeEvent : EventArgs {
            
            private ImagingOrderRow eventRow;
            
            private DataRowAction eventAction;
            
            public ImagingOrderRowChangeEvent(ImagingOrderRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ImagingOrderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SessionLogDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnNumberOfEntries;
            
            private DataColumn columnSessionLog_Id;
            
            internal SessionLogDataTable() : 
                    base("SessionLog") {
                this.InitClass();
            }
            
            internal SessionLogDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NumberOfEntriesColumn {
                get {
                    return this.columnNumberOfEntries;
                }
            }
            
            internal DataColumn SessionLog_IdColumn {
                get {
                    return this.columnSessionLog_Id;
                }
            }
            
            public SessionLogRow this[int index] {
                get {
                    return ((SessionLogRow)(this.Rows[index]));
                }
            }
            
            public event SessionLogRowChangeEventHandler SessionLogRowChanged;
            
            public event SessionLogRowChangeEventHandler SessionLogRowChanging;
            
            public event SessionLogRowChangeEventHandler SessionLogRowDeleted;
            
            public event SessionLogRowChangeEventHandler SessionLogRowDeleting;
            
            public void AddSessionLogRow(SessionLogRow row) {
                this.Rows.Add(row);
            }
            
            public SessionLogRow AddSessionLogRow(string NumberOfEntries) {
                SessionLogRow rowSessionLogRow = ((SessionLogRow)(this.NewRow()));
                rowSessionLogRow.ItemArray = new object[] {
                        NumberOfEntries,
                        null};
                this.Rows.Add(rowSessionLogRow);
                return rowSessionLogRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SessionLogDataTable cln = ((SessionLogDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SessionLogDataTable();
            }
            
            internal void InitVars() {
                this.columnNumberOfEntries = this.Columns["NumberOfEntries"];
                this.columnSessionLog_Id = this.Columns["SessionLog_Id"];
            }
            
            private void InitClass() {
                this.columnNumberOfEntries = new DataColumn("NumberOfEntries", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnNumberOfEntries);
                this.columnSessionLog_Id = new DataColumn("SessionLog_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnSessionLog_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnSessionLog_Id}, true));
                this.columnNumberOfEntries.AllowDBNull = false;
                this.columnNumberOfEntries.Namespace = "";
                this.columnSessionLog_Id.AutoIncrement = true;
                this.columnSessionLog_Id.AllowDBNull = false;
                this.columnSessionLog_Id.Unique = true;
            }
            
            public SessionLogRow NewSessionLogRow() {
                return ((SessionLogRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SessionLogRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SessionLogRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SessionLogRowChanged != null)) {
                    this.SessionLogRowChanged(this, new SessionLogRowChangeEvent(((SessionLogRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SessionLogRowChanging != null)) {
                    this.SessionLogRowChanging(this, new SessionLogRowChangeEvent(((SessionLogRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SessionLogRowDeleted != null)) {
                    this.SessionLogRowDeleted(this, new SessionLogRowChangeEvent(((SessionLogRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SessionLogRowDeleting != null)) {
                    this.SessionLogRowDeleting(this, new SessionLogRowChangeEvent(((SessionLogRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSessionLogRow(SessionLogRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SessionLogRow : DataRow {
            
            private SessionLogDataTable tableSessionLog;
            
            internal SessionLogRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSessionLog = ((SessionLogDataTable)(this.Table));
            }
            
            public string NumberOfEntries {
                get {
                    return ((string)(this[this.tableSessionLog.NumberOfEntriesColumn]));
                }
                set {
                    this[this.tableSessionLog.NumberOfEntriesColumn] = value;
                }
            }
            
            public EntryRow[] GetEntryRows() {
                return ((EntryRow[])(this.GetChildRows(this.Table.ChildRelations["SessionLog_Entry"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SessionLogRowChangeEvent : EventArgs {
            
            private SessionLogRow eventRow;
            
            private DataRowAction eventAction;
            
            public SessionLogRowChangeEvent(SessionLogRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SessionLogRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EntryDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnText;
            
            private DataColumn columnTimestamp;
            
            private DataColumn columnErrorcode;
            
            private DataColumn columnSessionLog_Id;
            
            internal EntryDataTable() : 
                    base("Entry") {
                this.InitClass();
            }
            
            internal EntryDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TextColumn {
                get {
                    return this.columnText;
                }
            }
            
            internal DataColumn TimestampColumn {
                get {
                    return this.columnTimestamp;
                }
            }
            
            internal DataColumn ErrorcodeColumn {
                get {
                    return this.columnErrorcode;
                }
            }
            
            internal DataColumn SessionLog_IdColumn {
                get {
                    return this.columnSessionLog_Id;
                }
            }
            
            public EntryRow this[int index] {
                get {
                    return ((EntryRow)(this.Rows[index]));
                }
            }
            
            public event EntryRowChangeEventHandler EntryRowChanged;
            
            public event EntryRowChangeEventHandler EntryRowChanging;
            
            public event EntryRowChangeEventHandler EntryRowDeleted;
            
            public event EntryRowChangeEventHandler EntryRowDeleting;
            
            public void AddEntryRow(EntryRow row) {
                this.Rows.Add(row);
            }
            
            public EntryRow AddEntryRow(string Text, string Timestamp, string Errorcode, SessionLogRow parentSessionLogRowBySessionLog_Entry) {
                EntryRow rowEntryRow = ((EntryRow)(this.NewRow()));
                rowEntryRow.ItemArray = new object[] {
                        Text,
                        Timestamp,
                        Errorcode,
                        parentSessionLogRowBySessionLog_Entry[1]};
                this.Rows.Add(rowEntryRow);
                return rowEntryRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                EntryDataTable cln = ((EntryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new EntryDataTable();
            }
            
            internal void InitVars() {
                this.columnText = this.Columns["Text"];
                this.columnTimestamp = this.Columns["Timestamp"];
                this.columnErrorcode = this.Columns["Errorcode"];
                this.columnSessionLog_Id = this.Columns["SessionLog_Id"];
            }
            
            private void InitClass() {
                this.columnText = new DataColumn("Text", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnText);
                this.columnTimestamp = new DataColumn("Timestamp", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTimestamp);
                this.columnErrorcode = new DataColumn("Errorcode", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnErrorcode);
                this.columnSessionLog_Id = new DataColumn("SessionLog_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnSessionLog_Id);
                this.columnText.AllowDBNull = false;
                this.columnText.Namespace = "";
                this.columnTimestamp.AllowDBNull = false;
                this.columnTimestamp.Namespace = "";
                this.columnErrorcode.AllowDBNull = false;
                this.columnErrorcode.Namespace = "";
            }
            
            public EntryRow NewEntryRow() {
                return ((EntryRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new EntryRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(EntryRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EntryRowChanged != null)) {
                    this.EntryRowChanged(this, new EntryRowChangeEvent(((EntryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EntryRowChanging != null)) {
                    this.EntryRowChanging(this, new EntryRowChangeEvent(((EntryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EntryRowDeleted != null)) {
                    this.EntryRowDeleted(this, new EntryRowChangeEvent(((EntryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EntryRowDeleting != null)) {
                    this.EntryRowDeleting(this, new EntryRowChangeEvent(((EntryRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEntryRow(EntryRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EntryRow : DataRow {
            
            private EntryDataTable tableEntry;
            
            internal EntryRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEntry = ((EntryDataTable)(this.Table));
            }
            
            public string Text {
                get {
                    return ((string)(this[this.tableEntry.TextColumn]));
                }
                set {
                    this[this.tableEntry.TextColumn] = value;
                }
            }
            
            public string Timestamp {
                get {
                    return ((string)(this[this.tableEntry.TimestampColumn]));
                }
                set {
                    this[this.tableEntry.TimestampColumn] = value;
                }
            }
            
            public string Errorcode {
                get {
                    return ((string)(this[this.tableEntry.ErrorcodeColumn]));
                }
                set {
                    this[this.tableEntry.ErrorcodeColumn] = value;
                }
            }
            
            public SessionLogRow SessionLogRow {
                get {
                    return ((SessionLogRow)(this.GetParentRow(this.Table.ParentRelations["SessionLog_Entry"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SessionLog_Entry"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EntryRowChangeEvent : EventArgs {
            
            private EntryRow eventRow;
            
            private DataRowAction eventAction;
            
            public EntryRowChangeEvent(EntryRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public EntryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DialogActionDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnDialogId;
            
            private DataColumn columnButton;
            
            private DataColumn columnName;
            
            internal DialogActionDataTable() : 
                    base("DialogAction") {
                this.InitClass();
            }
            
            internal DialogActionDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn DialogIdColumn {
                get {
                    return this.columnDialogId;
                }
            }
            
            internal DataColumn ButtonColumn {
                get {
                    return this.columnButton;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            public DialogActionRow this[int index] {
                get {
                    return ((DialogActionRow)(this.Rows[index]));
                }
            }
            
            public event DialogActionRowChangeEventHandler DialogActionRowChanged;
            
            public event DialogActionRowChangeEventHandler DialogActionRowChanging;
            
            public event DialogActionRowChangeEventHandler DialogActionRowDeleted;
            
            public event DialogActionRowChangeEventHandler DialogActionRowDeleting;
            
            public void AddDialogActionRow(DialogActionRow row) {
                this.Rows.Add(row);
            }
            
            public DialogActionRow AddDialogActionRow(string DialogId, string Button, string Name) {
                DialogActionRow rowDialogActionRow = ((DialogActionRow)(this.NewRow()));
                rowDialogActionRow.ItemArray = new object[] {
                        DialogId,
                        Button,
                        Name};
                this.Rows.Add(rowDialogActionRow);
                return rowDialogActionRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DialogActionDataTable cln = ((DialogActionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DialogActionDataTable();
            }
            
            internal void InitVars() {
                this.columnDialogId = this.Columns["DialogId"];
                this.columnButton = this.Columns["Button"];
                this.columnName = this.Columns["Name"];
            }
            
            private void InitClass() {
                this.columnDialogId = new DataColumn("DialogId", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDialogId);
                this.columnButton = new DataColumn("Button", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnButton);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.columnDialogId.AllowDBNull = false;
                this.columnDialogId.Namespace = "";
                this.columnButton.AllowDBNull = false;
                this.columnButton.Namespace = "";
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
            }
            
            public DialogActionRow NewDialogActionRow() {
                return ((DialogActionRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DialogActionRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DialogActionRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DialogActionRowChanged != null)) {
                    this.DialogActionRowChanged(this, new DialogActionRowChangeEvent(((DialogActionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DialogActionRowChanging != null)) {
                    this.DialogActionRowChanging(this, new DialogActionRowChangeEvent(((DialogActionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DialogActionRowDeleted != null)) {
                    this.DialogActionRowDeleted(this, new DialogActionRowChangeEvent(((DialogActionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DialogActionRowDeleting != null)) {
                    this.DialogActionRowDeleting(this, new DialogActionRowChangeEvent(((DialogActionRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDialogActionRow(DialogActionRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DialogActionRow : DataRow {
            
            private DialogActionDataTable tableDialogAction;
            
            internal DialogActionRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDialogAction = ((DialogActionDataTable)(this.Table));
            }
            
            public string DialogId {
                get {
                    return ((string)(this[this.tableDialogAction.DialogIdColumn]));
                }
                set {
                    this[this.tableDialogAction.DialogIdColumn] = value;
                }
            }
            
            public string Button {
                get {
                    return ((string)(this[this.tableDialogAction.ButtonColumn]));
                }
                set {
                    this[this.tableDialogAction.ButtonColumn] = value;
                }
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableDialogAction.NameColumn]));
                }
                set {
                    this[this.tableDialogAction.NameColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DialogActionRowChangeEvent : EventArgs {
            
            private DialogActionRow eventRow;
            
            private DataRowAction eventAction;
            
            public DialogActionRowChangeEvent(DialogActionRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DialogActionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProductionParameterSettingsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnProductionParameterSettings_Id;
            
            internal ProductionParameterSettingsDataTable() : 
                    base("ProductionParameterSettings") {
                this.InitClass();
            }
            
            internal ProductionParameterSettingsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            public ProductionParameterSettingsRow this[int index] {
                get {
                    return ((ProductionParameterSettingsRow)(this.Rows[index]));
                }
            }
            
            public event ProductionParameterSettingsRowChangeEventHandler ProductionParameterSettingsRowChanged;
            
            public event ProductionParameterSettingsRowChangeEventHandler ProductionParameterSettingsRowChanging;
            
            public event ProductionParameterSettingsRowChangeEventHandler ProductionParameterSettingsRowDeleted;
            
            public event ProductionParameterSettingsRowChangeEventHandler ProductionParameterSettingsRowDeleting;
            
            public void AddProductionParameterSettingsRow(ProductionParameterSettingsRow row) {
                this.Rows.Add(row);
            }
            
            public ProductionParameterSettingsRow AddProductionParameterSettingsRow() {
                ProductionParameterSettingsRow rowProductionParameterSettingsRow = ((ProductionParameterSettingsRow)(this.NewRow()));
                rowProductionParameterSettingsRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowProductionParameterSettingsRow);
                return rowProductionParameterSettingsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ProductionParameterSettingsDataTable cln = ((ProductionParameterSettingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ProductionParameterSettingsDataTable();
            }
            
            internal void InitVars() {
                this.columnProductionParameterSettings_Id = this.Columns["ProductionParameterSettings_Id"];
            }
            
            private void InitClass() {
                this.columnProductionParameterSettings_Id = new DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnProductionParameterSettings_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnProductionParameterSettings_Id}, true));
                this.columnProductionParameterSettings_Id.AutoIncrement = true;
                this.columnProductionParameterSettings_Id.AllowDBNull = false;
                this.columnProductionParameterSettings_Id.Unique = true;
            }
            
            public ProductionParameterSettingsRow NewProductionParameterSettingsRow() {
                return ((ProductionParameterSettingsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ProductionParameterSettingsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ProductionParameterSettingsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProductionParameterSettingsRowChanged != null)) {
                    this.ProductionParameterSettingsRowChanged(this, new ProductionParameterSettingsRowChangeEvent(((ProductionParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProductionParameterSettingsRowChanging != null)) {
                    this.ProductionParameterSettingsRowChanging(this, new ProductionParameterSettingsRowChangeEvent(((ProductionParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProductionParameterSettingsRowDeleted != null)) {
                    this.ProductionParameterSettingsRowDeleted(this, new ProductionParameterSettingsRowChangeEvent(((ProductionParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProductionParameterSettingsRowDeleting != null)) {
                    this.ProductionParameterSettingsRowDeleting(this, new ProductionParameterSettingsRowChangeEvent(((ProductionParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProductionParameterSettingsRow(ProductionParameterSettingsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProductionParameterSettingsRow : DataRow {
            
            private ProductionParameterSettingsDataTable tableProductionParameterSettings;
            
            internal ProductionParameterSettingsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableProductionParameterSettings = ((ProductionParameterSettingsDataTable)(this.Table));
            }
            
            public ServerRow[] GetServerRows() {
                return ((ServerRow[])(this.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Server"])));
            }
            
            public VerifyRow[] GetVerifyRows() {
                return ((VerifyRow[])(this.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Verify"])));
            }
            
            public RecordingRow[] GetRecordingRows() {
                return ((RecordingRow[])(this.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Recording"])));
            }
            
            public PrintingRow[] GetPrintingRows() {
                return ((PrintingRow[])(this.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Printing"])));
            }
            
            public AutoloaderRow[] GetAutoloaderRows() {
                return ((AutoloaderRow[])(this.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Autoloader"])));
            }
            
            public ReadingRow[] GetReadingRows() {
                return ((ReadingRow[])(this.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Reading"])));
            }
            
            public KioskModeRow[] GetKioskModeRows() {
                return ((KioskModeRow[])(this.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_KioskMode"])));
            }
            
            public MessagingRow[] GetMessagingRows() {
                return ((MessagingRow[])(this.GetChildRows(this.Table.ChildRelations["ProductionParameterSettings_Messaging"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ProductionParameterSettingsRowChangeEvent : EventArgs {
            
            private ProductionParameterSettingsRow eventRow;
            
            private DataRowAction eventAction;
            
            public ProductionParameterSettingsRowChangeEvent(ProductionParameterSettingsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ProductionParameterSettingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnDescription;
            
            private DataColumn columnServerMode;
            
            private DataColumn columnUseFIFO;
            
            private DataColumn columnCluster;
            
            private DataColumn columnProductionParameterSettings_Id;
            
            internal ServerDataTable() : 
                    base("Server") {
                this.InitClass();
            }
            
            internal ServerDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn ServerModeColumn {
                get {
                    return this.columnServerMode;
                }
            }
            
            internal DataColumn UseFIFOColumn {
                get {
                    return this.columnUseFIFO;
                }
            }
            
            internal DataColumn ClusterColumn {
                get {
                    return this.columnCluster;
                }
            }
            
            internal DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            public ServerRow this[int index] {
                get {
                    return ((ServerRow)(this.Rows[index]));
                }
            }
            
            public event ServerRowChangeEventHandler ServerRowChanged;
            
            public event ServerRowChangeEventHandler ServerRowChanging;
            
            public event ServerRowChangeEventHandler ServerRowDeleted;
            
            public event ServerRowChangeEventHandler ServerRowDeleting;
            
            public void AddServerRow(ServerRow row) {
                this.Rows.Add(row);
            }
            
            public ServerRow AddServerRow(string Description, string ServerMode, string UseFIFO, string Cluster, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Server) {
                ServerRow rowServerRow = ((ServerRow)(this.NewRow()));
                rowServerRow.ItemArray = new object[] {
                        Description,
                        ServerMode,
                        UseFIFO,
                        Cluster,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Server[0]};
                this.Rows.Add(rowServerRow);
                return rowServerRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ServerDataTable cln = ((ServerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ServerDataTable();
            }
            
            internal void InitVars() {
                this.columnDescription = this.Columns["Description"];
                this.columnServerMode = this.Columns["ServerMode"];
                this.columnUseFIFO = this.Columns["UseFIFO"];
                this.columnCluster = this.Columns["Cluster"];
                this.columnProductionParameterSettings_Id = this.Columns["ProductionParameterSettings_Id"];
            }
            
            private void InitClass() {
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDescription);
                this.columnServerMode = new DataColumn("ServerMode", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnServerMode);
                this.columnUseFIFO = new DataColumn("UseFIFO", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUseFIFO);
                this.columnCluster = new DataColumn("Cluster", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCluster);
                this.columnProductionParameterSettings_Id = new DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnProductionParameterSettings_Id);
                this.columnDescription.Namespace = "";
                this.columnServerMode.Namespace = "";
                this.columnServerMode.DefaultValue = "Normal";
                this.columnUseFIFO.Namespace = "";
                this.columnUseFIFO.DefaultValue = "false";
                this.columnCluster.AllowDBNull = false;
                this.columnCluster.Namespace = "";
            }
            
            public ServerRow NewServerRow() {
                return ((ServerRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ServerRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ServerRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerRowChanged != null)) {
                    this.ServerRowChanged(this, new ServerRowChangeEvent(((ServerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerRowChanging != null)) {
                    this.ServerRowChanging(this, new ServerRowChangeEvent(((ServerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerRowDeleted != null)) {
                    this.ServerRowDeleted(this, new ServerRowChangeEvent(((ServerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerRowDeleting != null)) {
                    this.ServerRowDeleting(this, new ServerRowChangeEvent(((ServerRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveServerRow(ServerRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerRow : DataRow {
            
            private ServerDataTable tableServer;
            
            internal ServerRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableServer = ((ServerDataTable)(this.Table));
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableServer.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServer.DescriptionColumn] = value;
                }
            }
            
            public string ServerMode {
                get {
                    try {
                        return ((string)(this[this.tableServer.ServerModeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServer.ServerModeColumn] = value;
                }
            }
            
            public string UseFIFO {
                get {
                    try {
                        return ((string)(this[this.tableServer.UseFIFOColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServer.UseFIFOColumn] = value;
                }
            }
            
            public string Cluster {
                get {
                    return ((string)(this[this.tableServer.ClusterColumn]));
                }
                set {
                    this[this.tableServer.ClusterColumn] = value;
                }
            }
            
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Server"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Server"]);
                }
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableServer.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableServer.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsServerModeNull() {
                return this.IsNull(this.tableServer.ServerModeColumn);
            }
            
            public void SetServerModeNull() {
                this[this.tableServer.ServerModeColumn] = System.Convert.DBNull;
            }
            
            public bool IsUseFIFONull() {
                return this.IsNull(this.tableServer.UseFIFOColumn);
            }
            
            public void SetUseFIFONull() {
                this[this.tableServer.UseFIFOColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerRowChangeEvent : EventArgs {
            
            private ServerRow eventRow;
            
            private DataRowAction eventAction;
            
            public ServerRowChangeEvent(ServerRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ServerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VerifyDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnUseVerify;
            
            private DataColumn columnFrequency;
            
            private DataColumn columnProductionParameterSettings_Id;
            
            internal VerifyDataTable() : 
                    base("Verify") {
                this.InitClass();
            }
            
            internal VerifyDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn UseVerifyColumn {
                get {
                    return this.columnUseVerify;
                }
            }
            
            internal DataColumn FrequencyColumn {
                get {
                    return this.columnFrequency;
                }
            }
            
            internal DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            public VerifyRow this[int index] {
                get {
                    return ((VerifyRow)(this.Rows[index]));
                }
            }
            
            public event VerifyRowChangeEventHandler VerifyRowChanged;
            
            public event VerifyRowChangeEventHandler VerifyRowChanging;
            
            public event VerifyRowChangeEventHandler VerifyRowDeleted;
            
            public event VerifyRowChangeEventHandler VerifyRowDeleting;
            
            public void AddVerifyRow(VerifyRow row) {
                this.Rows.Add(row);
            }
            
            public VerifyRow AddVerifyRow(string UseVerify, string Frequency, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Verify) {
                VerifyRow rowVerifyRow = ((VerifyRow)(this.NewRow()));
                rowVerifyRow.ItemArray = new object[] {
                        UseVerify,
                        Frequency,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Verify[0]};
                this.Rows.Add(rowVerifyRow);
                return rowVerifyRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                VerifyDataTable cln = ((VerifyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new VerifyDataTable();
            }
            
            internal void InitVars() {
                this.columnUseVerify = this.Columns["UseVerify"];
                this.columnFrequency = this.Columns["Frequency"];
                this.columnProductionParameterSettings_Id = this.Columns["ProductionParameterSettings_Id"];
            }
            
            private void InitClass() {
                this.columnUseVerify = new DataColumn("UseVerify", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUseVerify);
                this.columnFrequency = new DataColumn("Frequency", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFrequency);
                this.columnProductionParameterSettings_Id = new DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnProductionParameterSettings_Id);
                this.columnUseVerify.Namespace = "";
                this.columnUseVerify.DefaultValue = "false";
                this.columnFrequency.AllowDBNull = false;
                this.columnFrequency.Namespace = "";
            }
            
            public VerifyRow NewVerifyRow() {
                return ((VerifyRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new VerifyRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(VerifyRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VerifyRowChanged != null)) {
                    this.VerifyRowChanged(this, new VerifyRowChangeEvent(((VerifyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VerifyRowChanging != null)) {
                    this.VerifyRowChanging(this, new VerifyRowChangeEvent(((VerifyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VerifyRowDeleted != null)) {
                    this.VerifyRowDeleted(this, new VerifyRowChangeEvent(((VerifyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VerifyRowDeleting != null)) {
                    this.VerifyRowDeleting(this, new VerifyRowChangeEvent(((VerifyRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveVerifyRow(VerifyRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VerifyRow : DataRow {
            
            private VerifyDataTable tableVerify;
            
            internal VerifyRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableVerify = ((VerifyDataTable)(this.Table));
            }
            
            public string UseVerify {
                get {
                    try {
                        return ((string)(this[this.tableVerify.UseVerifyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVerify.UseVerifyColumn] = value;
                }
            }
            
            public string Frequency {
                get {
                    return ((string)(this[this.tableVerify.FrequencyColumn]));
                }
                set {
                    this[this.tableVerify.FrequencyColumn] = value;
                }
            }
            
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Verify"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Verify"]);
                }
            }
            
            public bool IsUseVerifyNull() {
                return this.IsNull(this.tableVerify.UseVerifyColumn);
            }
            
            public void SetUseVerifyNull() {
                this[this.tableVerify.UseVerifyColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VerifyRowChangeEvent : EventArgs {
            
            private VerifyRow eventRow;
            
            private DataRowAction eventAction;
            
            public VerifyRowChangeEvent(VerifyRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public VerifyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RecordingDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnNewMedia;
            
            private DataColumn columnMaxSpeed;
            
            private DataColumn columnRejectNonISO;
            
            private DataColumn columnAddPostgap;
            
            private DataColumn columnDestroyRejects;
            
            private DataColumn columnOverburn;
            
            private DataColumn columnCacheDriveLetters;
            
            private DataColumn columnProductionParameterSettings_Id;
            
            internal RecordingDataTable() : 
                    base("Recording") {
                this.InitClass();
            }
            
            internal RecordingDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NewMediaColumn {
                get {
                    return this.columnNewMedia;
                }
            }
            
            internal DataColumn MaxSpeedColumn {
                get {
                    return this.columnMaxSpeed;
                }
            }
            
            internal DataColumn RejectNonISOColumn {
                get {
                    return this.columnRejectNonISO;
                }
            }
            
            internal DataColumn AddPostgapColumn {
                get {
                    return this.columnAddPostgap;
                }
            }
            
            internal DataColumn DestroyRejectsColumn {
                get {
                    return this.columnDestroyRejects;
                }
            }
            
            internal DataColumn OverburnColumn {
                get {
                    return this.columnOverburn;
                }
            }
            
            internal DataColumn CacheDriveLettersColumn {
                get {
                    return this.columnCacheDriveLetters;
                }
            }
            
            internal DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            public RecordingRow this[int index] {
                get {
                    return ((RecordingRow)(this.Rows[index]));
                }
            }
            
            public event RecordingRowChangeEventHandler RecordingRowChanged;
            
            public event RecordingRowChangeEventHandler RecordingRowChanging;
            
            public event RecordingRowChangeEventHandler RecordingRowDeleted;
            
            public event RecordingRowChangeEventHandler RecordingRowDeleting;
            
            public void AddRecordingRow(RecordingRow row) {
                this.Rows.Add(row);
            }
            
            public RecordingRow AddRecordingRow(string NewMedia, string MaxSpeed, string RejectNonISO, string AddPostgap, string DestroyRejects, string Overburn, string CacheDriveLetters, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Recording) {
                RecordingRow rowRecordingRow = ((RecordingRow)(this.NewRow()));
                rowRecordingRow.ItemArray = new object[] {
                        NewMedia,
                        MaxSpeed,
                        RejectNonISO,
                        AddPostgap,
                        DestroyRejects,
                        Overburn,
                        CacheDriveLetters,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Recording[0]};
                this.Rows.Add(rowRecordingRow);
                return rowRecordingRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                RecordingDataTable cln = ((RecordingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new RecordingDataTable();
            }
            
            internal void InitVars() {
                this.columnNewMedia = this.Columns["NewMedia"];
                this.columnMaxSpeed = this.Columns["MaxSpeed"];
                this.columnRejectNonISO = this.Columns["RejectNonISO"];
                this.columnAddPostgap = this.Columns["AddPostgap"];
                this.columnDestroyRejects = this.Columns["DestroyRejects"];
                this.columnOverburn = this.Columns["Overburn"];
                this.columnCacheDriveLetters = this.Columns["CacheDriveLetters"];
                this.columnProductionParameterSettings_Id = this.Columns["ProductionParameterSettings_Id"];
            }
            
            private void InitClass() {
                this.columnNewMedia = new DataColumn("NewMedia", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnNewMedia);
                this.columnMaxSpeed = new DataColumn("MaxSpeed", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnMaxSpeed);
                this.columnRejectNonISO = new DataColumn("RejectNonISO", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRejectNonISO);
                this.columnAddPostgap = new DataColumn("AddPostgap", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAddPostgap);
                this.columnDestroyRejects = new DataColumn("DestroyRejects", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDestroyRejects);
                this.columnOverburn = new DataColumn("Overburn", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOverburn);
                this.columnCacheDriveLetters = new DataColumn("CacheDriveLetters", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCacheDriveLetters);
                this.columnProductionParameterSettings_Id = new DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnProductionParameterSettings_Id);
                this.columnNewMedia.Namespace = "";
                this.columnNewMedia.DefaultValue = "false";
                this.columnMaxSpeed.AllowDBNull = false;
                this.columnMaxSpeed.Namespace = "";
                this.columnRejectNonISO.Namespace = "";
                this.columnRejectNonISO.DefaultValue = "true";
                this.columnAddPostgap.Namespace = "";
                this.columnAddPostgap.DefaultValue = "Disabled";
                this.columnDestroyRejects.Namespace = "";
                this.columnDestroyRejects.DefaultValue = "false";
                this.columnOverburn.Namespace = "";
                this.columnOverburn.DefaultValue = "false";
                this.columnCacheDriveLetters.Namespace = "";
            }
            
            public RecordingRow NewRecordingRow() {
                return ((RecordingRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new RecordingRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(RecordingRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RecordingRowChanged != null)) {
                    this.RecordingRowChanged(this, new RecordingRowChangeEvent(((RecordingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RecordingRowChanging != null)) {
                    this.RecordingRowChanging(this, new RecordingRowChangeEvent(((RecordingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RecordingRowDeleted != null)) {
                    this.RecordingRowDeleted(this, new RecordingRowChangeEvent(((RecordingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RecordingRowDeleting != null)) {
                    this.RecordingRowDeleting(this, new RecordingRowChangeEvent(((RecordingRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveRecordingRow(RecordingRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RecordingRow : DataRow {
            
            private RecordingDataTable tableRecording;
            
            internal RecordingRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableRecording = ((RecordingDataTable)(this.Table));
            }
            
            public string NewMedia {
                get {
                    try {
                        return ((string)(this[this.tableRecording.NewMediaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecording.NewMediaColumn] = value;
                }
            }
            
            public string MaxSpeed {
                get {
                    return ((string)(this[this.tableRecording.MaxSpeedColumn]));
                }
                set {
                    this[this.tableRecording.MaxSpeedColumn] = value;
                }
            }
            
            public string RejectNonISO {
                get {
                    try {
                        return ((string)(this[this.tableRecording.RejectNonISOColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecording.RejectNonISOColumn] = value;
                }
            }
            
            public string AddPostgap {
                get {
                    try {
                        return ((string)(this[this.tableRecording.AddPostgapColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecording.AddPostgapColumn] = value;
                }
            }
            
            public string DestroyRejects {
                get {
                    try {
                        return ((string)(this[this.tableRecording.DestroyRejectsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecording.DestroyRejectsColumn] = value;
                }
            }
            
            public string Overburn {
                get {
                    try {
                        return ((string)(this[this.tableRecording.OverburnColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecording.OverburnColumn] = value;
                }
            }
            
            public string CacheDriveLetters {
                get {
                    try {
                        return ((string)(this[this.tableRecording.CacheDriveLettersColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecording.CacheDriveLettersColumn] = value;
                }
            }
            
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Recording"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Recording"]);
                }
            }
            
            public bool IsNewMediaNull() {
                return this.IsNull(this.tableRecording.NewMediaColumn);
            }
            
            public void SetNewMediaNull() {
                this[this.tableRecording.NewMediaColumn] = System.Convert.DBNull;
            }
            
            public bool IsRejectNonISONull() {
                return this.IsNull(this.tableRecording.RejectNonISOColumn);
            }
            
            public void SetRejectNonISONull() {
                this[this.tableRecording.RejectNonISOColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddPostgapNull() {
                return this.IsNull(this.tableRecording.AddPostgapColumn);
            }
            
            public void SetAddPostgapNull() {
                this[this.tableRecording.AddPostgapColumn] = System.Convert.DBNull;
            }
            
            public bool IsDestroyRejectsNull() {
                return this.IsNull(this.tableRecording.DestroyRejectsColumn);
            }
            
            public void SetDestroyRejectsNull() {
                this[this.tableRecording.DestroyRejectsColumn] = System.Convert.DBNull;
            }
            
            public bool IsOverburnNull() {
                return this.IsNull(this.tableRecording.OverburnColumn);
            }
            
            public void SetOverburnNull() {
                this[this.tableRecording.OverburnColumn] = System.Convert.DBNull;
            }
            
            public bool IsCacheDriveLettersNull() {
                return this.IsNull(this.tableRecording.CacheDriveLettersColumn);
            }
            
            public void SetCacheDriveLettersNull() {
                this[this.tableRecording.CacheDriveLettersColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RecordingRowChangeEvent : EventArgs {
            
            private RecordingRow eventRow;
            
            private DataRowAction eventAction;
            
            public RecordingRowChangeEvent(RecordingRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public RecordingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PrintingDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnRejectPattern;
            
            private DataColumn columnProductionParameterSettings_Id;
            
            internal PrintingDataTable() : 
                    base("Printing") {
                this.InitClass();
            }
            
            internal PrintingDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn RejectPatternColumn {
                get {
                    return this.columnRejectPattern;
                }
            }
            
            internal DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            public PrintingRow this[int index] {
                get {
                    return ((PrintingRow)(this.Rows[index]));
                }
            }
            
            public event PrintingRowChangeEventHandler PrintingRowChanged;
            
            public event PrintingRowChangeEventHandler PrintingRowChanging;
            
            public event PrintingRowChangeEventHandler PrintingRowDeleted;
            
            public event PrintingRowChangeEventHandler PrintingRowDeleting;
            
            public void AddPrintingRow(PrintingRow row) {
                this.Rows.Add(row);
            }
            
            public PrintingRow AddPrintingRow(string RejectPattern, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Printing) {
                PrintingRow rowPrintingRow = ((PrintingRow)(this.NewRow()));
                rowPrintingRow.ItemArray = new object[] {
                        RejectPattern,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Printing[0]};
                this.Rows.Add(rowPrintingRow);
                return rowPrintingRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PrintingDataTable cln = ((PrintingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PrintingDataTable();
            }
            
            internal void InitVars() {
                this.columnRejectPattern = this.Columns["RejectPattern"];
                this.columnProductionParameterSettings_Id = this.Columns["ProductionParameterSettings_Id"];
            }
            
            private void InitClass() {
                this.columnRejectPattern = new DataColumn("RejectPattern", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRejectPattern);
                this.columnProductionParameterSettings_Id = new DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnProductionParameterSettings_Id);
                this.columnRejectPattern.Namespace = "";
                this.columnRejectPattern.DefaultValue = "Disabled";
            }
            
            public PrintingRow NewPrintingRow() {
                return ((PrintingRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PrintingRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PrintingRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrintingRowChanged != null)) {
                    this.PrintingRowChanged(this, new PrintingRowChangeEvent(((PrintingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrintingRowChanging != null)) {
                    this.PrintingRowChanging(this, new PrintingRowChangeEvent(((PrintingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrintingRowDeleted != null)) {
                    this.PrintingRowDeleted(this, new PrintingRowChangeEvent(((PrintingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrintingRowDeleting != null)) {
                    this.PrintingRowDeleting(this, new PrintingRowChangeEvent(((PrintingRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePrintingRow(PrintingRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PrintingRow : DataRow {
            
            private PrintingDataTable tablePrinting;
            
            internal PrintingRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrinting = ((PrintingDataTable)(this.Table));
            }
            
            public string RejectPattern {
                get {
                    try {
                        return ((string)(this[this.tablePrinting.RejectPatternColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrinting.RejectPatternColumn] = value;
                }
            }
            
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Printing"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Printing"]);
                }
            }
            
            public bool IsRejectPatternNull() {
                return this.IsNull(this.tablePrinting.RejectPatternColumn);
            }
            
            public void SetRejectPatternNull() {
                this[this.tablePrinting.RejectPatternColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PrintingRowChangeEvent : EventArgs {
            
            private PrintingRow eventRow;
            
            private DataRowAction eventAction;
            
            public PrintingRowChangeEvent(PrintingRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PrintingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AutoloaderDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnLoaderNumber;
            
            private DataColumn columnMailboxUsage;
            
            private DataColumn columnMediaSize;
            
            private DataColumn columnMediaType;
            
            private DataColumn columnAutoloader_Id;
            
            private DataColumn columnProductionParameterSettings_Id;
            
            internal AutoloaderDataTable() : 
                    base("Autoloader") {
                this.InitClass();
            }
            
            internal AutoloaderDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn LoaderNumberColumn {
                get {
                    return this.columnLoaderNumber;
                }
            }
            
            internal DataColumn MailboxUsageColumn {
                get {
                    return this.columnMailboxUsage;
                }
            }
            
            internal DataColumn MediaSizeColumn {
                get {
                    return this.columnMediaSize;
                }
            }
            
            internal DataColumn MediaTypeColumn {
                get {
                    return this.columnMediaType;
                }
            }
            
            internal DataColumn Autoloader_IdColumn {
                get {
                    return this.columnAutoloader_Id;
                }
            }
            
            internal DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            public AutoloaderRow this[int index] {
                get {
                    return ((AutoloaderRow)(this.Rows[index]));
                }
            }
            
            public event AutoloaderRowChangeEventHandler AutoloaderRowChanged;
            
            public event AutoloaderRowChangeEventHandler AutoloaderRowChanging;
            
            public event AutoloaderRowChangeEventHandler AutoloaderRowDeleted;
            
            public event AutoloaderRowChangeEventHandler AutoloaderRowDeleting;
            
            public void AddAutoloaderRow(AutoloaderRow row) {
                this.Rows.Add(row);
            }
            
            public AutoloaderRow AddAutoloaderRow(string LoaderNumber, string MailboxUsage, string MediaSize, string MediaType, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Autoloader) {
                AutoloaderRow rowAutoloaderRow = ((AutoloaderRow)(this.NewRow()));
                rowAutoloaderRow.ItemArray = new object[] {
                        LoaderNumber,
                        MailboxUsage,
                        MediaSize,
                        MediaType,
                        null,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Autoloader[0]};
                this.Rows.Add(rowAutoloaderRow);
                return rowAutoloaderRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AutoloaderDataTable cln = ((AutoloaderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AutoloaderDataTable();
            }
            
            internal void InitVars() {
                this.columnLoaderNumber = this.Columns["LoaderNumber"];
                this.columnMailboxUsage = this.Columns["MailboxUsage"];
                this.columnMediaSize = this.Columns["MediaSize"];
                this.columnMediaType = this.Columns["MediaType"];
                this.columnAutoloader_Id = this.Columns["Autoloader_Id"];
                this.columnProductionParameterSettings_Id = this.Columns["ProductionParameterSettings_Id"];
            }
            
            private void InitClass() {
                this.columnLoaderNumber = new DataColumn("LoaderNumber", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnLoaderNumber);
                this.columnMailboxUsage = new DataColumn("MailboxUsage", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnMailboxUsage);
                this.columnMediaSize = new DataColumn("MediaSize", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnMediaSize);
                this.columnMediaType = new DataColumn("MediaType", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnMediaType);
                this.columnAutoloader_Id = new DataColumn("Autoloader_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnAutoloader_Id);
                this.columnProductionParameterSettings_Id = new DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnProductionParameterSettings_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnAutoloader_Id}, true));
                this.columnLoaderNumber.AllowDBNull = false;
                this.columnLoaderNumber.Namespace = "";
                this.columnMailboxUsage.AllowDBNull = false;
                this.columnMailboxUsage.Namespace = "";
                this.columnMediaSize.Namespace = "";
                this.columnMediaSize.DefaultValue = "120mm";
                this.columnMediaType.Namespace = "";
                this.columnMediaType.DefaultValue = "CDR";
                this.columnAutoloader_Id.AutoIncrement = true;
                this.columnAutoloader_Id.AllowDBNull = false;
                this.columnAutoloader_Id.Unique = true;
            }
            
            public AutoloaderRow NewAutoloaderRow() {
                return ((AutoloaderRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AutoloaderRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AutoloaderRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AutoloaderRowChanged != null)) {
                    this.AutoloaderRowChanged(this, new AutoloaderRowChangeEvent(((AutoloaderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AutoloaderRowChanging != null)) {
                    this.AutoloaderRowChanging(this, new AutoloaderRowChangeEvent(((AutoloaderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AutoloaderRowDeleted != null)) {
                    this.AutoloaderRowDeleted(this, new AutoloaderRowChangeEvent(((AutoloaderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AutoloaderRowDeleting != null)) {
                    this.AutoloaderRowDeleting(this, new AutoloaderRowChangeEvent(((AutoloaderRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAutoloaderRow(AutoloaderRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AutoloaderRow : DataRow {
            
            private AutoloaderDataTable tableAutoloader;
            
            internal AutoloaderRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAutoloader = ((AutoloaderDataTable)(this.Table));
            }
            
            public string LoaderNumber {
                get {
                    return ((string)(this[this.tableAutoloader.LoaderNumberColumn]));
                }
                set {
                    this[this.tableAutoloader.LoaderNumberColumn] = value;
                }
            }
            
            public string MailboxUsage {
                get {
                    return ((string)(this[this.tableAutoloader.MailboxUsageColumn]));
                }
                set {
                    this[this.tableAutoloader.MailboxUsageColumn] = value;
                }
            }
            
            public string MediaSize {
                get {
                    try {
                        return ((string)(this[this.tableAutoloader.MediaSizeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoloader.MediaSizeColumn] = value;
                }
            }
            
            public string MediaType {
                get {
                    try {
                        return ((string)(this[this.tableAutoloader.MediaTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoloader.MediaTypeColumn] = value;
                }
            }
            
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Autoloader"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Autoloader"]);
                }
            }
            
            public bool IsMediaSizeNull() {
                return this.IsNull(this.tableAutoloader.MediaSizeColumn);
            }
            
            public void SetMediaSizeNull() {
                this[this.tableAutoloader.MediaSizeColumn] = System.Convert.DBNull;
            }
            
            public bool IsMediaTypeNull() {
                return this.IsNull(this.tableAutoloader.MediaTypeColumn);
            }
            
            public void SetMediaTypeNull() {
                this[this.tableAutoloader.MediaTypeColumn] = System.Convert.DBNull;
            }
            
            public BinRow[] GetBinRows() {
                return ((BinRow[])(this.GetChildRows(this.Table.ChildRelations["Autoloader_Bin"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AutoloaderRowChangeEvent : EventArgs {
            
            private AutoloaderRow eventRow;
            
            private DataRowAction eventAction;
            
            public AutoloaderRowChangeEvent(AutoloaderRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AutoloaderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BinDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnBinNumber;
            
            private DataColumn columnBinUsage;
            
            private DataColumn columnAutoloader_Id;
            
            internal BinDataTable() : 
                    base("Bin") {
                this.InitClass();
            }
            
            internal BinDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn BinNumberColumn {
                get {
                    return this.columnBinNumber;
                }
            }
            
            internal DataColumn BinUsageColumn {
                get {
                    return this.columnBinUsage;
                }
            }
            
            internal DataColumn Autoloader_IdColumn {
                get {
                    return this.columnAutoloader_Id;
                }
            }
            
            public BinRow this[int index] {
                get {
                    return ((BinRow)(this.Rows[index]));
                }
            }
            
            public event BinRowChangeEventHandler BinRowChanged;
            
            public event BinRowChangeEventHandler BinRowChanging;
            
            public event BinRowChangeEventHandler BinRowDeleted;
            
            public event BinRowChangeEventHandler BinRowDeleting;
            
            public void AddBinRow(BinRow row) {
                this.Rows.Add(row);
            }
            
            public BinRow AddBinRow(string BinNumber, string BinUsage, AutoloaderRow parentAutoloaderRowByAutoloader_Bin) {
                BinRow rowBinRow = ((BinRow)(this.NewRow()));
                rowBinRow.ItemArray = new object[] {
                        BinNumber,
                        BinUsage,
                        parentAutoloaderRowByAutoloader_Bin[4]};
                this.Rows.Add(rowBinRow);
                return rowBinRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                BinDataTable cln = ((BinDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new BinDataTable();
            }
            
            internal void InitVars() {
                this.columnBinNumber = this.Columns["BinNumber"];
                this.columnBinUsage = this.Columns["BinUsage"];
                this.columnAutoloader_Id = this.Columns["Autoloader_Id"];
            }
            
            private void InitClass() {
                this.columnBinNumber = new DataColumn("BinNumber", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnBinNumber);
                this.columnBinUsage = new DataColumn("BinUsage", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnBinUsage);
                this.columnAutoloader_Id = new DataColumn("Autoloader_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnAutoloader_Id);
                this.columnBinNumber.AllowDBNull = false;
                this.columnBinNumber.Namespace = "";
                this.columnBinUsage.AllowDBNull = false;
                this.columnBinUsage.Namespace = "";
            }
            
            public BinRow NewBinRow() {
                return ((BinRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new BinRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(BinRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BinRowChanged != null)) {
                    this.BinRowChanged(this, new BinRowChangeEvent(((BinRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BinRowChanging != null)) {
                    this.BinRowChanging(this, new BinRowChangeEvent(((BinRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BinRowDeleted != null)) {
                    this.BinRowDeleted(this, new BinRowChangeEvent(((BinRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BinRowDeleting != null)) {
                    this.BinRowDeleting(this, new BinRowChangeEvent(((BinRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBinRow(BinRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BinRow : DataRow {
            
            private BinDataTable tableBin;
            
            internal BinRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableBin = ((BinDataTable)(this.Table));
            }
            
            public string BinNumber {
                get {
                    return ((string)(this[this.tableBin.BinNumberColumn]));
                }
                set {
                    this[this.tableBin.BinNumberColumn] = value;
                }
            }
            
            public string BinUsage {
                get {
                    return ((string)(this[this.tableBin.BinUsageColumn]));
                }
                set {
                    this[this.tableBin.BinUsageColumn] = value;
                }
            }
            
            public AutoloaderRow AutoloaderRow {
                get {
                    return ((AutoloaderRow)(this.GetParentRow(this.Table.ParentRelations["Autoloader_Bin"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Autoloader_Bin"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BinRowChangeEvent : EventArgs {
            
            private BinRow eventRow;
            
            private DataRowAction eventAction;
            
            public BinRowChangeEvent(BinRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BinRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ReadingDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAudioReadSpeed;
            
            private DataColumn columnPreferredReader;
            
            private DataColumn columnReading_Id;
            
            private DataColumn columnProductionParameterSettings_Id;
            
            internal ReadingDataTable() : 
                    base("Reading") {
                this.InitClass();
            }
            
            internal ReadingDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AudioReadSpeedColumn {
                get {
                    return this.columnAudioReadSpeed;
                }
            }
            
            internal DataColumn PreferredReaderColumn {
                get {
                    return this.columnPreferredReader;
                }
            }
            
            internal DataColumn Reading_IdColumn {
                get {
                    return this.columnReading_Id;
                }
            }
            
            internal DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            public ReadingRow this[int index] {
                get {
                    return ((ReadingRow)(this.Rows[index]));
                }
            }
            
            public event ReadingRowChangeEventHandler ReadingRowChanged;
            
            public event ReadingRowChangeEventHandler ReadingRowChanging;
            
            public event ReadingRowChangeEventHandler ReadingRowDeleted;
            
            public event ReadingRowChangeEventHandler ReadingRowDeleting;
            
            public void AddReadingRow(ReadingRow row) {
                this.Rows.Add(row);
            }
            
            public ReadingRow AddReadingRow(string AudioReadSpeed, string PreferredReader, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Reading) {
                ReadingRow rowReadingRow = ((ReadingRow)(this.NewRow()));
                rowReadingRow.ItemArray = new object[] {
                        AudioReadSpeed,
                        PreferredReader,
                        null,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Reading[0]};
                this.Rows.Add(rowReadingRow);
                return rowReadingRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ReadingDataTable cln = ((ReadingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ReadingDataTable();
            }
            
            internal void InitVars() {
                this.columnAudioReadSpeed = this.Columns["AudioReadSpeed"];
                this.columnPreferredReader = this.Columns["PreferredReader"];
                this.columnReading_Id = this.Columns["Reading_Id"];
                this.columnProductionParameterSettings_Id = this.Columns["ProductionParameterSettings_Id"];
            }
            
            private void InitClass() {
                this.columnAudioReadSpeed = new DataColumn("AudioReadSpeed", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAudioReadSpeed);
                this.columnPreferredReader = new DataColumn("PreferredReader", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPreferredReader);
                this.columnReading_Id = new DataColumn("Reading_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnReading_Id);
                this.columnProductionParameterSettings_Id = new DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnProductionParameterSettings_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnReading_Id}, true));
                this.columnAudioReadSpeed.Namespace = "";
                this.columnAudioReadSpeed.DefaultValue = "Max";
                this.columnPreferredReader.Namespace = "";
                this.columnPreferredReader.DefaultValue = "Recorders";
                this.columnReading_Id.AutoIncrement = true;
                this.columnReading_Id.AllowDBNull = false;
                this.columnReading_Id.Unique = true;
            }
            
            public ReadingRow NewReadingRow() {
                return ((ReadingRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ReadingRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ReadingRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReadingRowChanged != null)) {
                    this.ReadingRowChanged(this, new ReadingRowChangeEvent(((ReadingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReadingRowChanging != null)) {
                    this.ReadingRowChanging(this, new ReadingRowChangeEvent(((ReadingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReadingRowDeleted != null)) {
                    this.ReadingRowDeleted(this, new ReadingRowChangeEvent(((ReadingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReadingRowDeleting != null)) {
                    this.ReadingRowDeleting(this, new ReadingRowChangeEvent(((ReadingRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveReadingRow(ReadingRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ReadingRow : DataRow {
            
            private ReadingDataTable tableReading;
            
            internal ReadingRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableReading = ((ReadingDataTable)(this.Table));
            }
            
            public string AudioReadSpeed {
                get {
                    try {
                        return ((string)(this[this.tableReading.AudioReadSpeedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReading.AudioReadSpeedColumn] = value;
                }
            }
            
            public string PreferredReader {
                get {
                    try {
                        return ((string)(this[this.tableReading.PreferredReaderColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReading.PreferredReaderColumn] = value;
                }
            }
            
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Reading"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Reading"]);
                }
            }
            
            public bool IsAudioReadSpeedNull() {
                return this.IsNull(this.tableReading.AudioReadSpeedColumn);
            }
            
            public void SetAudioReadSpeedNull() {
                this[this.tableReading.AudioReadSpeedColumn] = System.Convert.DBNull;
            }
            
            public bool IsPreferredReaderNull() {
                return this.IsNull(this.tableReading.PreferredReaderColumn);
            }
            
            public void SetPreferredReaderNull() {
                this[this.tableReading.PreferredReaderColumn] = System.Convert.DBNull;
            }
            
            public AutoBulkReadRow[] GetAutoBulkReadRows() {
                return ((AutoBulkReadRow[])(this.GetChildRows(this.Table.ChildRelations["Reading_AutoBulkRead"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ReadingRowChangeEvent : EventArgs {
            
            private ReadingRow eventRow;
            
            private DataRowAction eventAction;
            
            public ReadingRowChangeEvent(ReadingRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ReadingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AutoBulkReadDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnBulkReadBaseFolder;
            
            private DataColumn columnUseVolumeIDAsFolderName;
            
            private DataColumn columnUseBarcodeAsFolderName;
            
            private DataColumn columnExtractFoldersAndFiles;
            
            private DataColumn columnActionForNonFixatedDiscs;
            
            private DataColumn columnAudioImageType;
            
            private DataColumn columnUseISRCAsFilenameForAudioTracks;
            
            private DataColumn columnRejectFailures;
            
            private DataColumn columnFIFOUnloading;
            
            private DataColumn columnBarcodePort;
            
            private DataColumn columnBarcodeAngle;
            
            private DataColumn columnUseBarcodeIndex;
            
            private DataColumn columnReading_Id;
            
            internal AutoBulkReadDataTable() : 
                    base("AutoBulkRead") {
                this.InitClass();
            }
            
            internal AutoBulkReadDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn BulkReadBaseFolderColumn {
                get {
                    return this.columnBulkReadBaseFolder;
                }
            }
            
            internal DataColumn UseVolumeIDAsFolderNameColumn {
                get {
                    return this.columnUseVolumeIDAsFolderName;
                }
            }
            
            internal DataColumn UseBarcodeAsFolderNameColumn {
                get {
                    return this.columnUseBarcodeAsFolderName;
                }
            }
            
            internal DataColumn ExtractFoldersAndFilesColumn {
                get {
                    return this.columnExtractFoldersAndFiles;
                }
            }
            
            internal DataColumn ActionForNonFixatedDiscsColumn {
                get {
                    return this.columnActionForNonFixatedDiscs;
                }
            }
            
            internal DataColumn AudioImageTypeColumn {
                get {
                    return this.columnAudioImageType;
                }
            }
            
            internal DataColumn UseISRCAsFilenameForAudioTracksColumn {
                get {
                    return this.columnUseISRCAsFilenameForAudioTracks;
                }
            }
            
            internal DataColumn RejectFailuresColumn {
                get {
                    return this.columnRejectFailures;
                }
            }
            
            internal DataColumn FIFOUnloadingColumn {
                get {
                    return this.columnFIFOUnloading;
                }
            }
            
            internal DataColumn BarcodePortColumn {
                get {
                    return this.columnBarcodePort;
                }
            }
            
            internal DataColumn BarcodeAngleColumn {
                get {
                    return this.columnBarcodeAngle;
                }
            }
            
            internal DataColumn UseBarcodeIndexColumn {
                get {
                    return this.columnUseBarcodeIndex;
                }
            }
            
            internal DataColumn Reading_IdColumn {
                get {
                    return this.columnReading_Id;
                }
            }
            
            public AutoBulkReadRow this[int index] {
                get {
                    return ((AutoBulkReadRow)(this.Rows[index]));
                }
            }
            
            public event AutoBulkReadRowChangeEventHandler AutoBulkReadRowChanged;
            
            public event AutoBulkReadRowChangeEventHandler AutoBulkReadRowChanging;
            
            public event AutoBulkReadRowChangeEventHandler AutoBulkReadRowDeleted;
            
            public event AutoBulkReadRowChangeEventHandler AutoBulkReadRowDeleting;
            
            public void AddAutoBulkReadRow(AutoBulkReadRow row) {
                this.Rows.Add(row);
            }
            
            public AutoBulkReadRow AddAutoBulkReadRow(string BulkReadBaseFolder, string UseVolumeIDAsFolderName, string UseBarcodeAsFolderName, string ExtractFoldersAndFiles, string ActionForNonFixatedDiscs, string AudioImageType, string UseISRCAsFilenameForAudioTracks, string RejectFailures, string FIFOUnloading, string BarcodePort, string BarcodeAngle, string UseBarcodeIndex, ReadingRow parentReadingRowByReading_AutoBulkRead) {
                AutoBulkReadRow rowAutoBulkReadRow = ((AutoBulkReadRow)(this.NewRow()));
                rowAutoBulkReadRow.ItemArray = new object[] {
                        BulkReadBaseFolder,
                        UseVolumeIDAsFolderName,
                        UseBarcodeAsFolderName,
                        ExtractFoldersAndFiles,
                        ActionForNonFixatedDiscs,
                        AudioImageType,
                        UseISRCAsFilenameForAudioTracks,
                        RejectFailures,
                        FIFOUnloading,
                        BarcodePort,
                        BarcodeAngle,
                        UseBarcodeIndex,
                        parentReadingRowByReading_AutoBulkRead[2]};
                this.Rows.Add(rowAutoBulkReadRow);
                return rowAutoBulkReadRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AutoBulkReadDataTable cln = ((AutoBulkReadDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AutoBulkReadDataTable();
            }
            
            internal void InitVars() {
                this.columnBulkReadBaseFolder = this.Columns["BulkReadBaseFolder"];
                this.columnUseVolumeIDAsFolderName = this.Columns["UseVolumeIDAsFolderName"];
                this.columnUseBarcodeAsFolderName = this.Columns["UseBarcodeAsFolderName"];
                this.columnExtractFoldersAndFiles = this.Columns["ExtractFoldersAndFiles"];
                this.columnActionForNonFixatedDiscs = this.Columns["ActionForNonFixatedDiscs"];
                this.columnAudioImageType = this.Columns["AudioImageType"];
                this.columnUseISRCAsFilenameForAudioTracks = this.Columns["UseISRCAsFilenameForAudioTracks"];
                this.columnRejectFailures = this.Columns["RejectFailures"];
                this.columnFIFOUnloading = this.Columns["FIFOUnloading"];
                this.columnBarcodePort = this.Columns["BarcodePort"];
                this.columnBarcodeAngle = this.Columns["BarcodeAngle"];
                this.columnUseBarcodeIndex = this.Columns["UseBarcodeIndex"];
                this.columnReading_Id = this.Columns["Reading_Id"];
            }
            
            private void InitClass() {
                this.columnBulkReadBaseFolder = new DataColumn("BulkReadBaseFolder", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnBulkReadBaseFolder);
                this.columnUseVolumeIDAsFolderName = new DataColumn("UseVolumeIDAsFolderName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUseVolumeIDAsFolderName);
                this.columnUseBarcodeAsFolderName = new DataColumn("UseBarcodeAsFolderName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUseBarcodeAsFolderName);
                this.columnExtractFoldersAndFiles = new DataColumn("ExtractFoldersAndFiles", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnExtractFoldersAndFiles);
                this.columnActionForNonFixatedDiscs = new DataColumn("ActionForNonFixatedDiscs", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnActionForNonFixatedDiscs);
                this.columnAudioImageType = new DataColumn("AudioImageType", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAudioImageType);
                this.columnUseISRCAsFilenameForAudioTracks = new DataColumn("UseISRCAsFilenameForAudioTracks", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUseISRCAsFilenameForAudioTracks);
                this.columnRejectFailures = new DataColumn("RejectFailures", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRejectFailures);
                this.columnFIFOUnloading = new DataColumn("FIFOUnloading", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFIFOUnloading);
                this.columnBarcodePort = new DataColumn("BarcodePort", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnBarcodePort);
                this.columnBarcodeAngle = new DataColumn("BarcodeAngle", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnBarcodeAngle);
                this.columnUseBarcodeIndex = new DataColumn("UseBarcodeIndex", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUseBarcodeIndex);
                this.columnReading_Id = new DataColumn("Reading_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnReading_Id);
                this.columnBulkReadBaseFolder.AllowDBNull = false;
                this.columnBulkReadBaseFolder.Namespace = "";
                this.columnUseVolumeIDAsFolderName.Namespace = "";
                this.columnUseVolumeIDAsFolderName.DefaultValue = "false";
                this.columnUseBarcodeAsFolderName.Namespace = "";
                this.columnUseBarcodeAsFolderName.DefaultValue = "false";
                this.columnExtractFoldersAndFiles.Namespace = "";
                this.columnExtractFoldersAndFiles.DefaultValue = "false";
                this.columnActionForNonFixatedDiscs.Namespace = "";
                this.columnActionForNonFixatedDiscs.DefaultValue = "None";
                this.columnAudioImageType.Namespace = "";
                this.columnAudioImageType.DefaultValue = "PCM";
                this.columnUseISRCAsFilenameForAudioTracks.Namespace = "";
                this.columnUseISRCAsFilenameForAudioTracks.DefaultValue = "false";
                this.columnRejectFailures.Namespace = "";
                this.columnRejectFailures.DefaultValue = "false";
                this.columnFIFOUnloading.Namespace = "";
                this.columnFIFOUnloading.DefaultValue = "false";
                this.columnBarcodePort.Namespace = "";
                this.columnBarcodePort.DefaultValue = "None";
                this.columnBarcodeAngle.AllowDBNull = false;
                this.columnBarcodeAngle.Namespace = "";
                this.columnUseBarcodeIndex.Namespace = "";
                this.columnUseBarcodeIndex.DefaultValue = "false";
            }
            
            public AutoBulkReadRow NewAutoBulkReadRow() {
                return ((AutoBulkReadRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AutoBulkReadRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AutoBulkReadRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AutoBulkReadRowChanged != null)) {
                    this.AutoBulkReadRowChanged(this, new AutoBulkReadRowChangeEvent(((AutoBulkReadRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AutoBulkReadRowChanging != null)) {
                    this.AutoBulkReadRowChanging(this, new AutoBulkReadRowChangeEvent(((AutoBulkReadRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AutoBulkReadRowDeleted != null)) {
                    this.AutoBulkReadRowDeleted(this, new AutoBulkReadRowChangeEvent(((AutoBulkReadRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AutoBulkReadRowDeleting != null)) {
                    this.AutoBulkReadRowDeleting(this, new AutoBulkReadRowChangeEvent(((AutoBulkReadRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAutoBulkReadRow(AutoBulkReadRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AutoBulkReadRow : DataRow {
            
            private AutoBulkReadDataTable tableAutoBulkRead;
            
            internal AutoBulkReadRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAutoBulkRead = ((AutoBulkReadDataTable)(this.Table));
            }
            
            public string BulkReadBaseFolder {
                get {
                    return ((string)(this[this.tableAutoBulkRead.BulkReadBaseFolderColumn]));
                }
                set {
                    this[this.tableAutoBulkRead.BulkReadBaseFolderColumn] = value;
                }
            }
            
            public string UseVolumeIDAsFolderName {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.UseVolumeIDAsFolderNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.UseVolumeIDAsFolderNameColumn] = value;
                }
            }
            
            public string UseBarcodeAsFolderName {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.UseBarcodeAsFolderNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.UseBarcodeAsFolderNameColumn] = value;
                }
            }
            
            public string ExtractFoldersAndFiles {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.ExtractFoldersAndFilesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.ExtractFoldersAndFilesColumn] = value;
                }
            }
            
            public string ActionForNonFixatedDiscs {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.ActionForNonFixatedDiscsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.ActionForNonFixatedDiscsColumn] = value;
                }
            }
            
            public string AudioImageType {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.AudioImageTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.AudioImageTypeColumn] = value;
                }
            }
            
            public string UseISRCAsFilenameForAudioTracks {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.UseISRCAsFilenameForAudioTracksColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.UseISRCAsFilenameForAudioTracksColumn] = value;
                }
            }
            
            public string RejectFailures {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.RejectFailuresColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.RejectFailuresColumn] = value;
                }
            }
            
            public string FIFOUnloading {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.FIFOUnloadingColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.FIFOUnloadingColumn] = value;
                }
            }
            
            public string BarcodePort {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.BarcodePortColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.BarcodePortColumn] = value;
                }
            }
            
            public string BarcodeAngle {
                get {
                    return ((string)(this[this.tableAutoBulkRead.BarcodeAngleColumn]));
                }
                set {
                    this[this.tableAutoBulkRead.BarcodeAngleColumn] = value;
                }
            }
            
            public string UseBarcodeIndex {
                get {
                    try {
                        return ((string)(this[this.tableAutoBulkRead.UseBarcodeIndexColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAutoBulkRead.UseBarcodeIndexColumn] = value;
                }
            }
            
            public ReadingRow ReadingRow {
                get {
                    return ((ReadingRow)(this.GetParentRow(this.Table.ParentRelations["Reading_AutoBulkRead"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Reading_AutoBulkRead"]);
                }
            }
            
            public bool IsUseVolumeIDAsFolderNameNull() {
                return this.IsNull(this.tableAutoBulkRead.UseVolumeIDAsFolderNameColumn);
            }
            
            public void SetUseVolumeIDAsFolderNameNull() {
                this[this.tableAutoBulkRead.UseVolumeIDAsFolderNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsUseBarcodeAsFolderNameNull() {
                return this.IsNull(this.tableAutoBulkRead.UseBarcodeAsFolderNameColumn);
            }
            
            public void SetUseBarcodeAsFolderNameNull() {
                this[this.tableAutoBulkRead.UseBarcodeAsFolderNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsExtractFoldersAndFilesNull() {
                return this.IsNull(this.tableAutoBulkRead.ExtractFoldersAndFilesColumn);
            }
            
            public void SetExtractFoldersAndFilesNull() {
                this[this.tableAutoBulkRead.ExtractFoldersAndFilesColumn] = System.Convert.DBNull;
            }
            
            public bool IsActionForNonFixatedDiscsNull() {
                return this.IsNull(this.tableAutoBulkRead.ActionForNonFixatedDiscsColumn);
            }
            
            public void SetActionForNonFixatedDiscsNull() {
                this[this.tableAutoBulkRead.ActionForNonFixatedDiscsColumn] = System.Convert.DBNull;
            }
            
            public bool IsAudioImageTypeNull() {
                return this.IsNull(this.tableAutoBulkRead.AudioImageTypeColumn);
            }
            
            public void SetAudioImageTypeNull() {
                this[this.tableAutoBulkRead.AudioImageTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsUseISRCAsFilenameForAudioTracksNull() {
                return this.IsNull(this.tableAutoBulkRead.UseISRCAsFilenameForAudioTracksColumn);
            }
            
            public void SetUseISRCAsFilenameForAudioTracksNull() {
                this[this.tableAutoBulkRead.UseISRCAsFilenameForAudioTracksColumn] = System.Convert.DBNull;
            }
            
            public bool IsRejectFailuresNull() {
                return this.IsNull(this.tableAutoBulkRead.RejectFailuresColumn);
            }
            
            public void SetRejectFailuresNull() {
                this[this.tableAutoBulkRead.RejectFailuresColumn] = System.Convert.DBNull;
            }
            
            public bool IsFIFOUnloadingNull() {
                return this.IsNull(this.tableAutoBulkRead.FIFOUnloadingColumn);
            }
            
            public void SetFIFOUnloadingNull() {
                this[this.tableAutoBulkRead.FIFOUnloadingColumn] = System.Convert.DBNull;
            }
            
            public bool IsBarcodePortNull() {
                return this.IsNull(this.tableAutoBulkRead.BarcodePortColumn);
            }
            
            public void SetBarcodePortNull() {
                this[this.tableAutoBulkRead.BarcodePortColumn] = System.Convert.DBNull;
            }
            
            public bool IsUseBarcodeIndexNull() {
                return this.IsNull(this.tableAutoBulkRead.UseBarcodeIndexColumn);
            }
            
            public void SetUseBarcodeIndexNull() {
                this[this.tableAutoBulkRead.UseBarcodeIndexColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AutoBulkReadRowChangeEvent : EventArgs {
            
            private AutoBulkReadRow eventRow;
            
            private DataRowAction eventAction;
            
            public AutoBulkReadRowChangeEvent(AutoBulkReadRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AutoBulkReadRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class KioskModeDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnUseKiosk;
            
            private DataColumn columnAutoStart;
            
            private DataColumn columnRecoverOrders;
            
            private DataColumn columnRunNoPrinter;
            
            private DataColumn columnAutoloaderRecovery;
            
            private DataColumn columnPrinterRecover;
            
            private DataColumn columnProductionParameterSettings_Id;
            
            internal KioskModeDataTable() : 
                    base("KioskMode") {
                this.InitClass();
            }
            
            internal KioskModeDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn UseKioskColumn {
                get {
                    return this.columnUseKiosk;
                }
            }
            
            internal DataColumn AutoStartColumn {
                get {
                    return this.columnAutoStart;
                }
            }
            
            internal DataColumn RecoverOrdersColumn {
                get {
                    return this.columnRecoverOrders;
                }
            }
            
            internal DataColumn RunNoPrinterColumn {
                get {
                    return this.columnRunNoPrinter;
                }
            }
            
            internal DataColumn AutoloaderRecoveryColumn {
                get {
                    return this.columnAutoloaderRecovery;
                }
            }
            
            internal DataColumn PrinterRecoverColumn {
                get {
                    return this.columnPrinterRecover;
                }
            }
            
            internal DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            public KioskModeRow this[int index] {
                get {
                    return ((KioskModeRow)(this.Rows[index]));
                }
            }
            
            public event KioskModeRowChangeEventHandler KioskModeRowChanged;
            
            public event KioskModeRowChangeEventHandler KioskModeRowChanging;
            
            public event KioskModeRowChangeEventHandler KioskModeRowDeleted;
            
            public event KioskModeRowChangeEventHandler KioskModeRowDeleting;
            
            public void AddKioskModeRow(KioskModeRow row) {
                this.Rows.Add(row);
            }
            
            public KioskModeRow AddKioskModeRow(string UseKiosk, string AutoStart, string RecoverOrders, string RunNoPrinter, string AutoloaderRecovery, string PrinterRecover, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_KioskMode) {
                KioskModeRow rowKioskModeRow = ((KioskModeRow)(this.NewRow()));
                rowKioskModeRow.ItemArray = new object[] {
                        UseKiosk,
                        AutoStart,
                        RecoverOrders,
                        RunNoPrinter,
                        AutoloaderRecovery,
                        PrinterRecover,
                        parentProductionParameterSettingsRowByProductionParameterSettings_KioskMode[0]};
                this.Rows.Add(rowKioskModeRow);
                return rowKioskModeRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                KioskModeDataTable cln = ((KioskModeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new KioskModeDataTable();
            }
            
            internal void InitVars() {
                this.columnUseKiosk = this.Columns["UseKiosk"];
                this.columnAutoStart = this.Columns["AutoStart"];
                this.columnRecoverOrders = this.Columns["RecoverOrders"];
                this.columnRunNoPrinter = this.Columns["RunNoPrinter"];
                this.columnAutoloaderRecovery = this.Columns["AutoloaderRecovery"];
                this.columnPrinterRecover = this.Columns["PrinterRecover"];
                this.columnProductionParameterSettings_Id = this.Columns["ProductionParameterSettings_Id"];
            }
            
            private void InitClass() {
                this.columnUseKiosk = new DataColumn("UseKiosk", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUseKiosk);
                this.columnAutoStart = new DataColumn("AutoStart", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAutoStart);
                this.columnRecoverOrders = new DataColumn("RecoverOrders", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRecoverOrders);
                this.columnRunNoPrinter = new DataColumn("RunNoPrinter", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRunNoPrinter);
                this.columnAutoloaderRecovery = new DataColumn("AutoloaderRecovery", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAutoloaderRecovery);
                this.columnPrinterRecover = new DataColumn("PrinterRecover", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPrinterRecover);
                this.columnProductionParameterSettings_Id = new DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnProductionParameterSettings_Id);
                this.columnUseKiosk.Namespace = "";
                this.columnUseKiosk.DefaultValue = "false";
                this.columnAutoStart.Namespace = "";
                this.columnAutoStart.DefaultValue = "true";
                this.columnRecoverOrders.Namespace = "";
                this.columnRecoverOrders.DefaultValue = "true";
                this.columnRunNoPrinter.Namespace = "";
                this.columnRunNoPrinter.DefaultValue = "false";
                this.columnAutoloaderRecovery.Namespace = "";
                this.columnAutoloaderRecovery.DefaultValue = "Retry";
                this.columnPrinterRecover.Namespace = "";
                this.columnPrinterRecover.DefaultValue = "Retry";
            }
            
            public KioskModeRow NewKioskModeRow() {
                return ((KioskModeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new KioskModeRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(KioskModeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.KioskModeRowChanged != null)) {
                    this.KioskModeRowChanged(this, new KioskModeRowChangeEvent(((KioskModeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.KioskModeRowChanging != null)) {
                    this.KioskModeRowChanging(this, new KioskModeRowChangeEvent(((KioskModeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.KioskModeRowDeleted != null)) {
                    this.KioskModeRowDeleted(this, new KioskModeRowChangeEvent(((KioskModeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.KioskModeRowDeleting != null)) {
                    this.KioskModeRowDeleting(this, new KioskModeRowChangeEvent(((KioskModeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveKioskModeRow(KioskModeRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class KioskModeRow : DataRow {
            
            private KioskModeDataTable tableKioskMode;
            
            internal KioskModeRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableKioskMode = ((KioskModeDataTable)(this.Table));
            }
            
            public string UseKiosk {
                get {
                    try {
                        return ((string)(this[this.tableKioskMode.UseKioskColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKioskMode.UseKioskColumn] = value;
                }
            }
            
            public string AutoStart {
                get {
                    try {
                        return ((string)(this[this.tableKioskMode.AutoStartColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKioskMode.AutoStartColumn] = value;
                }
            }
            
            public string RecoverOrders {
                get {
                    try {
                        return ((string)(this[this.tableKioskMode.RecoverOrdersColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKioskMode.RecoverOrdersColumn] = value;
                }
            }
            
            public string RunNoPrinter {
                get {
                    try {
                        return ((string)(this[this.tableKioskMode.RunNoPrinterColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKioskMode.RunNoPrinterColumn] = value;
                }
            }
            
            public string AutoloaderRecovery {
                get {
                    try {
                        return ((string)(this[this.tableKioskMode.AutoloaderRecoveryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKioskMode.AutoloaderRecoveryColumn] = value;
                }
            }
            
            public string PrinterRecover {
                get {
                    try {
                        return ((string)(this[this.tableKioskMode.PrinterRecoverColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKioskMode.PrinterRecoverColumn] = value;
                }
            }
            
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_KioskMode"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_KioskMode"]);
                }
            }
            
            public bool IsUseKioskNull() {
                return this.IsNull(this.tableKioskMode.UseKioskColumn);
            }
            
            public void SetUseKioskNull() {
                this[this.tableKioskMode.UseKioskColumn] = System.Convert.DBNull;
            }
            
            public bool IsAutoStartNull() {
                return this.IsNull(this.tableKioskMode.AutoStartColumn);
            }
            
            public void SetAutoStartNull() {
                this[this.tableKioskMode.AutoStartColumn] = System.Convert.DBNull;
            }
            
            public bool IsRecoverOrdersNull() {
                return this.IsNull(this.tableKioskMode.RecoverOrdersColumn);
            }
            
            public void SetRecoverOrdersNull() {
                this[this.tableKioskMode.RecoverOrdersColumn] = System.Convert.DBNull;
            }
            
            public bool IsRunNoPrinterNull() {
                return this.IsNull(this.tableKioskMode.RunNoPrinterColumn);
            }
            
            public void SetRunNoPrinterNull() {
                this[this.tableKioskMode.RunNoPrinterColumn] = System.Convert.DBNull;
            }
            
            public bool IsAutoloaderRecoveryNull() {
                return this.IsNull(this.tableKioskMode.AutoloaderRecoveryColumn);
            }
            
            public void SetAutoloaderRecoveryNull() {
                this[this.tableKioskMode.AutoloaderRecoveryColumn] = System.Convert.DBNull;
            }
            
            public bool IsPrinterRecoverNull() {
                return this.IsNull(this.tableKioskMode.PrinterRecoverColumn);
            }
            
            public void SetPrinterRecoverNull() {
                this[this.tableKioskMode.PrinterRecoverColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class KioskModeRowChangeEvent : EventArgs {
            
            private KioskModeRow eventRow;
            
            private DataRowAction eventAction;
            
            public KioskModeRowChangeEvent(KioskModeRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public KioskModeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MessagingDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnOrderStatusUpdateInterval;
            
            private DataColumn columnProductionParameterSettings_Id;
            
            internal MessagingDataTable() : 
                    base("Messaging") {
                this.InitClass();
            }
            
            internal MessagingDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn OrderStatusUpdateIntervalColumn {
                get {
                    return this.columnOrderStatusUpdateInterval;
                }
            }
            
            internal DataColumn ProductionParameterSettings_IdColumn {
                get {
                    return this.columnProductionParameterSettings_Id;
                }
            }
            
            public MessagingRow this[int index] {
                get {
                    return ((MessagingRow)(this.Rows[index]));
                }
            }
            
            public event MessagingRowChangeEventHandler MessagingRowChanged;
            
            public event MessagingRowChangeEventHandler MessagingRowChanging;
            
            public event MessagingRowChangeEventHandler MessagingRowDeleted;
            
            public event MessagingRowChangeEventHandler MessagingRowDeleting;
            
            public void AddMessagingRow(MessagingRow row) {
                this.Rows.Add(row);
            }
            
            public MessagingRow AddMessagingRow(string OrderStatusUpdateInterval, ProductionParameterSettingsRow parentProductionParameterSettingsRowByProductionParameterSettings_Messaging) {
                MessagingRow rowMessagingRow = ((MessagingRow)(this.NewRow()));
                rowMessagingRow.ItemArray = new object[] {
                        OrderStatusUpdateInterval,
                        parentProductionParameterSettingsRowByProductionParameterSettings_Messaging[0]};
                this.Rows.Add(rowMessagingRow);
                return rowMessagingRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MessagingDataTable cln = ((MessagingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MessagingDataTable();
            }
            
            internal void InitVars() {
                this.columnOrderStatusUpdateInterval = this.Columns["OrderStatusUpdateInterval"];
                this.columnProductionParameterSettings_Id = this.Columns["ProductionParameterSettings_Id"];
            }
            
            private void InitClass() {
                this.columnOrderStatusUpdateInterval = new DataColumn("OrderStatusUpdateInterval", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOrderStatusUpdateInterval);
                this.columnProductionParameterSettings_Id = new DataColumn("ProductionParameterSettings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnProductionParameterSettings_Id);
                this.columnOrderStatusUpdateInterval.AllowDBNull = false;
                this.columnOrderStatusUpdateInterval.Namespace = "";
            }
            
            public MessagingRow NewMessagingRow() {
                return ((MessagingRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MessagingRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MessagingRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MessagingRowChanged != null)) {
                    this.MessagingRowChanged(this, new MessagingRowChangeEvent(((MessagingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MessagingRowChanging != null)) {
                    this.MessagingRowChanging(this, new MessagingRowChangeEvent(((MessagingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MessagingRowDeleted != null)) {
                    this.MessagingRowDeleted(this, new MessagingRowChangeEvent(((MessagingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MessagingRowDeleting != null)) {
                    this.MessagingRowDeleting(this, new MessagingRowChangeEvent(((MessagingRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMessagingRow(MessagingRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MessagingRow : DataRow {
            
            private MessagingDataTable tableMessaging;
            
            internal MessagingRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMessaging = ((MessagingDataTable)(this.Table));
            }
            
            public string OrderStatusUpdateInterval {
                get {
                    return ((string)(this[this.tableMessaging.OrderStatusUpdateIntervalColumn]));
                }
                set {
                    this[this.tableMessaging.OrderStatusUpdateIntervalColumn] = value;
                }
            }
            
            public ProductionParameterSettingsRow ProductionParameterSettingsRow {
                get {
                    return ((ProductionParameterSettingsRow)(this.GetParentRow(this.Table.ParentRelations["ProductionParameterSettings_Messaging"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductionParameterSettings_Messaging"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MessagingRowChangeEvent : EventArgs {
            
            private MessagingRow eventRow;
            
            private DataRowAction eventAction;
            
            public MessagingRowChangeEvent(MessagingRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MessagingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ImagingParameterSettingsDataTable : DataTable, System.Collections.IEnumerable {
            
            internal ImagingParameterSettingsDataTable() : 
                    base("ImagingParameterSettings") {
                this.InitClass();
            }
            
            internal ImagingParameterSettingsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public ImagingParameterSettingsRow this[int index] {
                get {
                    return ((ImagingParameterSettingsRow)(this.Rows[index]));
                }
            }
            
            public event ImagingParameterSettingsRowChangeEventHandler ImagingParameterSettingsRowChanged;
            
            public event ImagingParameterSettingsRowChangeEventHandler ImagingParameterSettingsRowChanging;
            
            public event ImagingParameterSettingsRowChangeEventHandler ImagingParameterSettingsRowDeleted;
            
            public event ImagingParameterSettingsRowChangeEventHandler ImagingParameterSettingsRowDeleting;
            
            public void AddImagingParameterSettingsRow(ImagingParameterSettingsRow row) {
                this.Rows.Add(row);
            }
            
            public ImagingParameterSettingsRow AddImagingParameterSettingsRow() {
                ImagingParameterSettingsRow rowImagingParameterSettingsRow = ((ImagingParameterSettingsRow)(this.NewRow()));
                rowImagingParameterSettingsRow.ItemArray = new object[0];
                this.Rows.Add(rowImagingParameterSettingsRow);
                return rowImagingParameterSettingsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ImagingParameterSettingsDataTable cln = ((ImagingParameterSettingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ImagingParameterSettingsDataTable();
            }
            
            internal void InitVars() {
            }
            
            private void InitClass() {
            }
            
            public ImagingParameterSettingsRow NewImagingParameterSettingsRow() {
                return ((ImagingParameterSettingsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ImagingParameterSettingsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ImagingParameterSettingsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ImagingParameterSettingsRowChanged != null)) {
                    this.ImagingParameterSettingsRowChanged(this, new ImagingParameterSettingsRowChangeEvent(((ImagingParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ImagingParameterSettingsRowChanging != null)) {
                    this.ImagingParameterSettingsRowChanging(this, new ImagingParameterSettingsRowChangeEvent(((ImagingParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ImagingParameterSettingsRowDeleted != null)) {
                    this.ImagingParameterSettingsRowDeleted(this, new ImagingParameterSettingsRowChangeEvent(((ImagingParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ImagingParameterSettingsRowDeleting != null)) {
                    this.ImagingParameterSettingsRowDeleting(this, new ImagingParameterSettingsRowChangeEvent(((ImagingParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveImagingParameterSettingsRow(ImagingParameterSettingsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ImagingParameterSettingsRow : DataRow {
            
            private ImagingParameterSettingsDataTable tableImagingParameterSettings;
            
            internal ImagingParameterSettingsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableImagingParameterSettings = ((ImagingParameterSettingsDataTable)(this.Table));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ImagingParameterSettingsRowChangeEvent : EventArgs {
            
            private ImagingParameterSettingsRow eventRow;
            
            private DataRowAction eventAction;
            
            public ImagingParameterSettingsRowChangeEvent(ImagingParameterSettingsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ImagingParameterSettingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
