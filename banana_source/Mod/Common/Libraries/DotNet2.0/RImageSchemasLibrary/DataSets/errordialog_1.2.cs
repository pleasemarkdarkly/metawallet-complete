//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace RImageSchemas.DataSets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ErrorDialog : DataSet {
        
        private ButtonsDataTable tableButtons;
        
        private TopDataTable tableTop;
        
        private MiddleDataTable tableMiddle;
        
        private BottomDataTable tableBottom;
        
        private DataRelation relationButtons_Top;
        
        private DataRelation relationButtons_Middle;
        
        private DataRelation relationButtons_Bottom;
        
        public ErrorDialog() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ErrorDialog(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Buttons"] != null)) {
                    this.Tables.Add(new ButtonsDataTable(ds.Tables["Buttons"]));
                }
                if ((ds.Tables["Top"] != null)) {
                    this.Tables.Add(new TopDataTable(ds.Tables["Top"]));
                }
                if ((ds.Tables["Middle"] != null)) {
                    this.Tables.Add(new MiddleDataTable(ds.Tables["Middle"]));
                }
                if ((ds.Tables["Bottom"] != null)) {
                    this.Tables.Add(new BottomDataTable(ds.Tables["Bottom"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ButtonsDataTable Buttons {
            get {
                return this.tableButtons;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TopDataTable Top {
            get {
                return this.tableTop;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MiddleDataTable Middle {
            get {
                return this.tableMiddle;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BottomDataTable Bottom {
            get {
                return this.tableBottom;
            }
        }
        
        public override DataSet Clone() {
            ErrorDialog cln = ((ErrorDialog)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Buttons"] != null)) {
                this.Tables.Add(new ButtonsDataTable(ds.Tables["Buttons"]));
            }
            if ((ds.Tables["Top"] != null)) {
                this.Tables.Add(new TopDataTable(ds.Tables["Top"]));
            }
            if ((ds.Tables["Middle"] != null)) {
                this.Tables.Add(new MiddleDataTable(ds.Tables["Middle"]));
            }
            if ((ds.Tables["Bottom"] != null)) {
                this.Tables.Add(new BottomDataTable(ds.Tables["Bottom"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableButtons = ((ButtonsDataTable)(this.Tables["Buttons"]));
            if ((this.tableButtons != null)) {
                this.tableButtons.InitVars();
            }
            this.tableTop = ((TopDataTable)(this.Tables["Top"]));
            if ((this.tableTop != null)) {
                this.tableTop.InitVars();
            }
            this.tableMiddle = ((MiddleDataTable)(this.Tables["Middle"]));
            if ((this.tableMiddle != null)) {
                this.tableMiddle.InitVars();
            }
            this.tableBottom = ((BottomDataTable)(this.Tables["Bottom"]));
            if ((this.tableBottom != null)) {
                this.tableBottom.InitVars();
            }
            this.relationButtons_Top = this.Relations["Buttons_Top"];
            this.relationButtons_Middle = this.Relations["Buttons_Middle"];
            this.relationButtons_Bottom = this.Relations["Buttons_Bottom"];
        }
        
        private void InitClass() {
            this.DataSetName = "ErrorDialog";
            this.Prefix = "";
            this.Namespace = "";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableButtons = new ButtonsDataTable();
            this.Tables.Add(this.tableButtons);
            this.tableTop = new TopDataTable();
            this.Tables.Add(this.tableTop);
            this.tableMiddle = new MiddleDataTable();
            this.Tables.Add(this.tableMiddle);
            this.tableBottom = new BottomDataTable();
            this.Tables.Add(this.tableBottom);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("Buttons_Top", new DataColumn[] {
                        this.tableButtons.Buttons_IdColumn}, new DataColumn[] {
                        this.tableTop.Buttons_IdColumn});
            this.tableTop.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Buttons_Middle", new DataColumn[] {
                        this.tableButtons.Buttons_IdColumn}, new DataColumn[] {
                        this.tableMiddle.Buttons_IdColumn});
            this.tableMiddle.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Buttons_Bottom", new DataColumn[] {
                        this.tableButtons.Buttons_IdColumn}, new DataColumn[] {
                        this.tableBottom.Buttons_IdColumn});
            this.tableBottom.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationButtons_Top = new DataRelation("Buttons_Top", new DataColumn[] {
                        this.tableButtons.Buttons_IdColumn}, new DataColumn[] {
                        this.tableTop.Buttons_IdColumn}, false);
            this.relationButtons_Top.Nested = true;
            this.Relations.Add(this.relationButtons_Top);
            this.relationButtons_Middle = new DataRelation("Buttons_Middle", new DataColumn[] {
                        this.tableButtons.Buttons_IdColumn}, new DataColumn[] {
                        this.tableMiddle.Buttons_IdColumn}, false);
            this.relationButtons_Middle.Nested = true;
            this.Relations.Add(this.relationButtons_Middle);
            this.relationButtons_Bottom = new DataRelation("Buttons_Bottom", new DataColumn[] {
                        this.tableButtons.Buttons_IdColumn}, new DataColumn[] {
                        this.tableBottom.Buttons_IdColumn}, false);
            this.relationButtons_Bottom.Nested = true;
            this.Relations.Add(this.relationButtons_Bottom);
        }
        
        private bool ShouldSerializeButtons() {
            return false;
        }
        
        private bool ShouldSerializeTop() {
            return false;
        }
        
        private bool ShouldSerializeMiddle() {
            return false;
        }
        
        private bool ShouldSerializeBottom() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ButtonsRowChangeEventHandler(object sender, ButtonsRowChangeEvent e);
        
        public delegate void TopRowChangeEventHandler(object sender, TopRowChangeEvent e);
        
        public delegate void MiddleRowChangeEventHandler(object sender, MiddleRowChangeEvent e);
        
        public delegate void BottomRowChangeEventHandler(object sender, BottomRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ButtonsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnButtons_Id;
            
            internal ButtonsDataTable() : 
                    base("Buttons") {
                this.InitClass();
            }
            
            internal ButtonsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn Buttons_IdColumn {
                get {
                    return this.columnButtons_Id;
                }
            }
            
            public ButtonsRow this[int index] {
                get {
                    return ((ButtonsRow)(this.Rows[index]));
                }
            }
            
            public event ButtonsRowChangeEventHandler ButtonsRowChanged;
            
            public event ButtonsRowChangeEventHandler ButtonsRowChanging;
            
            public event ButtonsRowChangeEventHandler ButtonsRowDeleted;
            
            public event ButtonsRowChangeEventHandler ButtonsRowDeleting;
            
            public void AddButtonsRow(ButtonsRow row) {
                this.Rows.Add(row);
            }
            
            public ButtonsRow AddButtonsRow() {
                ButtonsRow rowButtonsRow = ((ButtonsRow)(this.NewRow()));
                rowButtonsRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowButtonsRow);
                return rowButtonsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ButtonsDataTable cln = ((ButtonsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ButtonsDataTable();
            }
            
            internal void InitVars() {
                this.columnButtons_Id = this.Columns["Buttons_Id"];
            }
            
            private void InitClass() {
                this.columnButtons_Id = new DataColumn("Buttons_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnButtons_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnButtons_Id}, true));
                this.columnButtons_Id.AutoIncrement = true;
                this.columnButtons_Id.AllowDBNull = false;
                this.columnButtons_Id.Unique = true;
            }
            
            public ButtonsRow NewButtonsRow() {
                return ((ButtonsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ButtonsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ButtonsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ButtonsRowChanged != null)) {
                    this.ButtonsRowChanged(this, new ButtonsRowChangeEvent(((ButtonsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ButtonsRowChanging != null)) {
                    this.ButtonsRowChanging(this, new ButtonsRowChangeEvent(((ButtonsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ButtonsRowDeleted != null)) {
                    this.ButtonsRowDeleted(this, new ButtonsRowChangeEvent(((ButtonsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ButtonsRowDeleting != null)) {
                    this.ButtonsRowDeleting(this, new ButtonsRowChangeEvent(((ButtonsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveButtonsRow(ButtonsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ButtonsRow : DataRow {
            
            private ButtonsDataTable tableButtons;
            
            internal ButtonsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableButtons = ((ButtonsDataTable)(this.Table));
            }
            
            public TopRow[] GetTopRows() {
                return ((TopRow[])(this.GetChildRows(this.Table.ChildRelations["Buttons_Top"])));
            }
            
            public MiddleRow[] GetMiddleRows() {
                return ((MiddleRow[])(this.GetChildRows(this.Table.ChildRelations["Buttons_Middle"])));
            }
            
            public BottomRow[] GetBottomRows() {
                return ((BottomRow[])(this.GetChildRows(this.Table.ChildRelations["Buttons_Bottom"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ButtonsRowChangeEvent : EventArgs {
            
            private ButtonsRow eventRow;
            
            private DataRowAction eventAction;
            
            public ButtonsRowChangeEvent(ButtonsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ButtonsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TopDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnText;
            
            private DataColumn columnButtons_Id;
            
            internal TopDataTable() : 
                    base("Top") {
                this.InitClass();
            }
            
            internal TopDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TextColumn {
                get {
                    return this.columnText;
                }
            }
            
            internal DataColumn Buttons_IdColumn {
                get {
                    return this.columnButtons_Id;
                }
            }
            
            public TopRow this[int index] {
                get {
                    return ((TopRow)(this.Rows[index]));
                }
            }
            
            public event TopRowChangeEventHandler TopRowChanged;
            
            public event TopRowChangeEventHandler TopRowChanging;
            
            public event TopRowChangeEventHandler TopRowDeleted;
            
            public event TopRowChangeEventHandler TopRowDeleting;
            
            public void AddTopRow(TopRow row) {
                this.Rows.Add(row);
            }
            
            public TopRow AddTopRow(string Text, ButtonsRow parentButtonsRowByButtons_Top) {
                TopRow rowTopRow = ((TopRow)(this.NewRow()));
                rowTopRow.ItemArray = new object[] {
                        Text,
                        parentButtonsRowByButtons_Top[0]};
                this.Rows.Add(rowTopRow);
                return rowTopRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TopDataTable cln = ((TopDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TopDataTable();
            }
            
            internal void InitVars() {
                this.columnText = this.Columns["Text"];
                this.columnButtons_Id = this.Columns["Buttons_Id"];
            }
            
            private void InitClass() {
                this.columnText = new DataColumn("Text", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnText);
                this.columnButtons_Id = new DataColumn("Buttons_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnButtons_Id);
                this.columnText.AllowDBNull = false;
                this.columnText.Namespace = "";
            }
            
            public TopRow NewTopRow() {
                return ((TopRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TopRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TopRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TopRowChanged != null)) {
                    this.TopRowChanged(this, new TopRowChangeEvent(((TopRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TopRowChanging != null)) {
                    this.TopRowChanging(this, new TopRowChangeEvent(((TopRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TopRowDeleted != null)) {
                    this.TopRowDeleted(this, new TopRowChangeEvent(((TopRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TopRowDeleting != null)) {
                    this.TopRowDeleting(this, new TopRowChangeEvent(((TopRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTopRow(TopRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TopRow : DataRow {
            
            private TopDataTable tableTop;
            
            internal TopRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTop = ((TopDataTable)(this.Table));
            }
            
            public string Text {
                get {
                    return ((string)(this[this.tableTop.TextColumn]));
                }
                set {
                    this[this.tableTop.TextColumn] = value;
                }
            }
            
            public ButtonsRow ButtonsRow {
                get {
                    return ((ButtonsRow)(this.GetParentRow(this.Table.ParentRelations["Buttons_Top"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Buttons_Top"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TopRowChangeEvent : EventArgs {
            
            private TopRow eventRow;
            
            private DataRowAction eventAction;
            
            public TopRowChangeEvent(TopRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TopRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MiddleDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnText;
            
            private DataColumn columnButtons_Id;
            
            internal MiddleDataTable() : 
                    base("Middle") {
                this.InitClass();
            }
            
            internal MiddleDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TextColumn {
                get {
                    return this.columnText;
                }
            }
            
            internal DataColumn Buttons_IdColumn {
                get {
                    return this.columnButtons_Id;
                }
            }
            
            public MiddleRow this[int index] {
                get {
                    return ((MiddleRow)(this.Rows[index]));
                }
            }
            
            public event MiddleRowChangeEventHandler MiddleRowChanged;
            
            public event MiddleRowChangeEventHandler MiddleRowChanging;
            
            public event MiddleRowChangeEventHandler MiddleRowDeleted;
            
            public event MiddleRowChangeEventHandler MiddleRowDeleting;
            
            public void AddMiddleRow(MiddleRow row) {
                this.Rows.Add(row);
            }
            
            public MiddleRow AddMiddleRow(string Text, ButtonsRow parentButtonsRowByButtons_Middle) {
                MiddleRow rowMiddleRow = ((MiddleRow)(this.NewRow()));
                rowMiddleRow.ItemArray = new object[] {
                        Text,
                        parentButtonsRowByButtons_Middle[0]};
                this.Rows.Add(rowMiddleRow);
                return rowMiddleRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MiddleDataTable cln = ((MiddleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MiddleDataTable();
            }
            
            internal void InitVars() {
                this.columnText = this.Columns["Text"];
                this.columnButtons_Id = this.Columns["Buttons_Id"];
            }
            
            private void InitClass() {
                this.columnText = new DataColumn("Text", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnText);
                this.columnButtons_Id = new DataColumn("Buttons_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnButtons_Id);
                this.columnText.AllowDBNull = false;
                this.columnText.Namespace = "";
            }
            
            public MiddleRow NewMiddleRow() {
                return ((MiddleRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MiddleRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MiddleRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MiddleRowChanged != null)) {
                    this.MiddleRowChanged(this, new MiddleRowChangeEvent(((MiddleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MiddleRowChanging != null)) {
                    this.MiddleRowChanging(this, new MiddleRowChangeEvent(((MiddleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MiddleRowDeleted != null)) {
                    this.MiddleRowDeleted(this, new MiddleRowChangeEvent(((MiddleRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MiddleRowDeleting != null)) {
                    this.MiddleRowDeleting(this, new MiddleRowChangeEvent(((MiddleRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMiddleRow(MiddleRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MiddleRow : DataRow {
            
            private MiddleDataTable tableMiddle;
            
            internal MiddleRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMiddle = ((MiddleDataTable)(this.Table));
            }
            
            public string Text {
                get {
                    return ((string)(this[this.tableMiddle.TextColumn]));
                }
                set {
                    this[this.tableMiddle.TextColumn] = value;
                }
            }
            
            public ButtonsRow ButtonsRow {
                get {
                    return ((ButtonsRow)(this.GetParentRow(this.Table.ParentRelations["Buttons_Middle"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Buttons_Middle"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MiddleRowChangeEvent : EventArgs {
            
            private MiddleRow eventRow;
            
            private DataRowAction eventAction;
            
            public MiddleRowChangeEvent(MiddleRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MiddleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BottomDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnText;
            
            private DataColumn columnButtons_Id;
            
            internal BottomDataTable() : 
                    base("Bottom") {
                this.InitClass();
            }
            
            internal BottomDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TextColumn {
                get {
                    return this.columnText;
                }
            }
            
            internal DataColumn Buttons_IdColumn {
                get {
                    return this.columnButtons_Id;
                }
            }
            
            public BottomRow this[int index] {
                get {
                    return ((BottomRow)(this.Rows[index]));
                }
            }
            
            public event BottomRowChangeEventHandler BottomRowChanged;
            
            public event BottomRowChangeEventHandler BottomRowChanging;
            
            public event BottomRowChangeEventHandler BottomRowDeleted;
            
            public event BottomRowChangeEventHandler BottomRowDeleting;
            
            public void AddBottomRow(BottomRow row) {
                this.Rows.Add(row);
            }
            
            public BottomRow AddBottomRow(string Text, ButtonsRow parentButtonsRowByButtons_Bottom) {
                BottomRow rowBottomRow = ((BottomRow)(this.NewRow()));
                rowBottomRow.ItemArray = new object[] {
                        Text,
                        parentButtonsRowByButtons_Bottom[0]};
                this.Rows.Add(rowBottomRow);
                return rowBottomRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                BottomDataTable cln = ((BottomDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new BottomDataTable();
            }
            
            internal void InitVars() {
                this.columnText = this.Columns["Text"];
                this.columnButtons_Id = this.Columns["Buttons_Id"];
            }
            
            private void InitClass() {
                this.columnText = new DataColumn("Text", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnText);
                this.columnButtons_Id = new DataColumn("Buttons_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnButtons_Id);
                this.columnText.AllowDBNull = false;
                this.columnText.Namespace = "";
            }
            
            public BottomRow NewBottomRow() {
                return ((BottomRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new BottomRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(BottomRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BottomRowChanged != null)) {
                    this.BottomRowChanged(this, new BottomRowChangeEvent(((BottomRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BottomRowChanging != null)) {
                    this.BottomRowChanging(this, new BottomRowChangeEvent(((BottomRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BottomRowDeleted != null)) {
                    this.BottomRowDeleted(this, new BottomRowChangeEvent(((BottomRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BottomRowDeleting != null)) {
                    this.BottomRowDeleting(this, new BottomRowChangeEvent(((BottomRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBottomRow(BottomRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BottomRow : DataRow {
            
            private BottomDataTable tableBottom;
            
            internal BottomRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableBottom = ((BottomDataTable)(this.Table));
            }
            
            public string Text {
                get {
                    return ((string)(this[this.tableBottom.TextColumn]));
                }
                set {
                    this[this.tableBottom.TextColumn] = value;
                }
            }
            
            public ButtonsRow ButtonsRow {
                get {
                    return ((ButtonsRow)(this.GetParentRow(this.Table.ParentRelations["Buttons_Bottom"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Buttons_Bottom"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BottomRowChangeEvent : EventArgs {
            
            private BottomRow eventRow;
            
            private DataRowAction eventAction;
            
            public BottomRowChangeEvent(BottomRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BottomRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
