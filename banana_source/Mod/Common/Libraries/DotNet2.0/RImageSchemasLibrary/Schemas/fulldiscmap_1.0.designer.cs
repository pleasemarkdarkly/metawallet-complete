//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace RImageSchemas.Schemas {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("FullDiscMap")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class FullDiscMap : System.Data.DataSet {
        
        private DiscInfoDataTable tableDiscInfo;
        
        private SessionInfoDataTable tableSessionInfo;
        
        private TrackInfoDataTable tableTrackInfo;
        
        private SubchannelControlBitsDataTable tableSubchannelControlBits;
        
        private SubIndexDataTable tableSubIndex;
        
        private TocEntryDataTable tableTocEntry;
        
        private System.Data.DataRelation relationDiscInfo_SessionInfo;
        
        private System.Data.DataRelation relationSessionInfo_TrackInfo;
        
        private System.Data.DataRelation relationTrackInfo_SubchannelControlBits;
        
        private System.Data.DataRelation relationTrackInfo_SubIndex;
        
        private System.Data.DataRelation relationDiscInfo_TocEntry;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FullDiscMap() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected FullDiscMap(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["DiscInfo"] != null)) {
                    base.Tables.Add(new DiscInfoDataTable(ds.Tables["DiscInfo"]));
                }
                if ((ds.Tables["SessionInfo"] != null)) {
                    base.Tables.Add(new SessionInfoDataTable(ds.Tables["SessionInfo"]));
                }
                if ((ds.Tables["TrackInfo"] != null)) {
                    base.Tables.Add(new TrackInfoDataTable(ds.Tables["TrackInfo"]));
                }
                if ((ds.Tables["SubchannelControlBits"] != null)) {
                    base.Tables.Add(new SubchannelControlBitsDataTable(ds.Tables["SubchannelControlBits"]));
                }
                if ((ds.Tables["SubIndex"] != null)) {
                    base.Tables.Add(new SubIndexDataTable(ds.Tables["SubIndex"]));
                }
                if ((ds.Tables["TocEntry"] != null)) {
                    base.Tables.Add(new TocEntryDataTable(ds.Tables["TocEntry"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DiscInfoDataTable DiscInfo {
            get {
                return this.tableDiscInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SessionInfoDataTable SessionInfo {
            get {
                return this.tableSessionInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TrackInfoDataTable TrackInfo {
            get {
                return this.tableTrackInfo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SubchannelControlBitsDataTable SubchannelControlBits {
            get {
                return this.tableSubchannelControlBits;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SubIndexDataTable SubIndex {
            get {
                return this.tableSubIndex;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TocEntryDataTable TocEntry {
            get {
                return this.tableTocEntry;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            FullDiscMap cln = ((FullDiscMap)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DiscInfo"] != null)) {
                    base.Tables.Add(new DiscInfoDataTable(ds.Tables["DiscInfo"]));
                }
                if ((ds.Tables["SessionInfo"] != null)) {
                    base.Tables.Add(new SessionInfoDataTable(ds.Tables["SessionInfo"]));
                }
                if ((ds.Tables["TrackInfo"] != null)) {
                    base.Tables.Add(new TrackInfoDataTable(ds.Tables["TrackInfo"]));
                }
                if ((ds.Tables["SubchannelControlBits"] != null)) {
                    base.Tables.Add(new SubchannelControlBitsDataTable(ds.Tables["SubchannelControlBits"]));
                }
                if ((ds.Tables["SubIndex"] != null)) {
                    base.Tables.Add(new SubIndexDataTable(ds.Tables["SubIndex"]));
                }
                if ((ds.Tables["TocEntry"] != null)) {
                    base.Tables.Add(new TocEntryDataTable(ds.Tables["TocEntry"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDiscInfo = ((DiscInfoDataTable)(base.Tables["DiscInfo"]));
            if ((initTable == true)) {
                if ((this.tableDiscInfo != null)) {
                    this.tableDiscInfo.InitVars();
                }
            }
            this.tableSessionInfo = ((SessionInfoDataTable)(base.Tables["SessionInfo"]));
            if ((initTable == true)) {
                if ((this.tableSessionInfo != null)) {
                    this.tableSessionInfo.InitVars();
                }
            }
            this.tableTrackInfo = ((TrackInfoDataTable)(base.Tables["TrackInfo"]));
            if ((initTable == true)) {
                if ((this.tableTrackInfo != null)) {
                    this.tableTrackInfo.InitVars();
                }
            }
            this.tableSubchannelControlBits = ((SubchannelControlBitsDataTable)(base.Tables["SubchannelControlBits"]));
            if ((initTable == true)) {
                if ((this.tableSubchannelControlBits != null)) {
                    this.tableSubchannelControlBits.InitVars();
                }
            }
            this.tableSubIndex = ((SubIndexDataTable)(base.Tables["SubIndex"]));
            if ((initTable == true)) {
                if ((this.tableSubIndex != null)) {
                    this.tableSubIndex.InitVars();
                }
            }
            this.tableTocEntry = ((TocEntryDataTable)(base.Tables["TocEntry"]));
            if ((initTable == true)) {
                if ((this.tableTocEntry != null)) {
                    this.tableTocEntry.InitVars();
                }
            }
            this.relationDiscInfo_SessionInfo = this.Relations["DiscInfo_SessionInfo"];
            this.relationSessionInfo_TrackInfo = this.Relations["SessionInfo_TrackInfo"];
            this.relationTrackInfo_SubchannelControlBits = this.Relations["TrackInfo_SubchannelControlBits"];
            this.relationTrackInfo_SubIndex = this.Relations["TrackInfo_SubIndex"];
            this.relationDiscInfo_TocEntry = this.Relations["DiscInfo_TocEntry"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "FullDiscMap";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDiscInfo = new DiscInfoDataTable();
            base.Tables.Add(this.tableDiscInfo);
            this.tableSessionInfo = new SessionInfoDataTable();
            base.Tables.Add(this.tableSessionInfo);
            this.tableTrackInfo = new TrackInfoDataTable();
            base.Tables.Add(this.tableTrackInfo);
            this.tableSubchannelControlBits = new SubchannelControlBitsDataTable();
            base.Tables.Add(this.tableSubchannelControlBits);
            this.tableSubIndex = new SubIndexDataTable();
            base.Tables.Add(this.tableSubIndex);
            this.tableTocEntry = new TocEntryDataTable();
            base.Tables.Add(this.tableTocEntry);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("DiscInfo_SessionInfo", new System.Data.DataColumn[] {
                        this.tableDiscInfo.DiscInfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tableSessionInfo.DiscInfo_IdColumn});
            this.tableSessionInfo.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("SessionInfo_TrackInfo", new System.Data.DataColumn[] {
                        this.tableSessionInfo.SessionInfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tableTrackInfo.SessionInfo_IdColumn});
            this.tableTrackInfo.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("TrackInfo_SubchannelControlBits", new System.Data.DataColumn[] {
                        this.tableTrackInfo.TrackInfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tableSubchannelControlBits.TrackInfo_IdColumn});
            this.tableSubchannelControlBits.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("TrackInfo_SubIndex", new System.Data.DataColumn[] {
                        this.tableTrackInfo.TrackInfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tableSubIndex.TrackInfo_IdColumn});
            this.tableSubIndex.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("DiscInfo_TocEntry", new System.Data.DataColumn[] {
                        this.tableDiscInfo.DiscInfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tableTocEntry.DiscInfo_IdColumn});
            this.tableTocEntry.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationDiscInfo_SessionInfo = new System.Data.DataRelation("DiscInfo_SessionInfo", new System.Data.DataColumn[] {
                        this.tableDiscInfo.DiscInfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tableSessionInfo.DiscInfo_IdColumn}, false);
            this.relationDiscInfo_SessionInfo.Nested = true;
            this.Relations.Add(this.relationDiscInfo_SessionInfo);
            this.relationSessionInfo_TrackInfo = new System.Data.DataRelation("SessionInfo_TrackInfo", new System.Data.DataColumn[] {
                        this.tableSessionInfo.SessionInfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tableTrackInfo.SessionInfo_IdColumn}, false);
            this.relationSessionInfo_TrackInfo.Nested = true;
            this.Relations.Add(this.relationSessionInfo_TrackInfo);
            this.relationTrackInfo_SubchannelControlBits = new System.Data.DataRelation("TrackInfo_SubchannelControlBits", new System.Data.DataColumn[] {
                        this.tableTrackInfo.TrackInfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tableSubchannelControlBits.TrackInfo_IdColumn}, false);
            this.relationTrackInfo_SubchannelControlBits.Nested = true;
            this.Relations.Add(this.relationTrackInfo_SubchannelControlBits);
            this.relationTrackInfo_SubIndex = new System.Data.DataRelation("TrackInfo_SubIndex", new System.Data.DataColumn[] {
                        this.tableTrackInfo.TrackInfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tableSubIndex.TrackInfo_IdColumn}, false);
            this.relationTrackInfo_SubIndex.Nested = true;
            this.Relations.Add(this.relationTrackInfo_SubIndex);
            this.relationDiscInfo_TocEntry = new System.Data.DataRelation("DiscInfo_TocEntry", new System.Data.DataColumn[] {
                        this.tableDiscInfo.DiscInfo_IdColumn}, new System.Data.DataColumn[] {
                        this.tableTocEntry.DiscInfo_IdColumn}, false);
            this.relationDiscInfo_TocEntry.Nested = true;
            this.Relations.Add(this.relationDiscInfo_TocEntry);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDiscInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSessionInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTrackInfo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSubchannelControlBits() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSubIndex() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTocEntry() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            FullDiscMap ds = new FullDiscMap();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void DiscInfoRowChangeEventHandler(object sender, DiscInfoRowChangeEvent e);
        
        public delegate void SessionInfoRowChangeEventHandler(object sender, SessionInfoRowChangeEvent e);
        
        public delegate void TrackInfoRowChangeEventHandler(object sender, TrackInfoRowChangeEvent e);
        
        public delegate void SubchannelControlBitsRowChangeEventHandler(object sender, SubchannelControlBitsRowChangeEvent e);
        
        public delegate void SubIndexRowChangeEventHandler(object sender, SubIndexRowChangeEvent e);
        
        public delegate void TocEntryRowChangeEventHandler(object sender, TocEntryRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DiscInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFreeBlocks;
            
            private System.Data.DataColumn columnFirstFreeBlock;
            
            private System.Data.DataColumn columnLeadoutStartBlock;
            
            private System.Data.DataColumn columnNumberOfSessions;
            
            private System.Data.DataColumn columnNumberOfTracks;
            
            private System.Data.DataColumn columnFirstLeadinBlockMsf;
            
            private System.Data.DataColumn columnNumberOfDvdLayers;
            
            private System.Data.DataColumn columnUpc;
            
            private System.Data.DataColumn columnRawMode;
            
            private System.Data.DataColumn columnDiscInfo_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiscInfoDataTable() {
                this.TableName = "DiscInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DiscInfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DiscInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FreeBlocksColumn {
                get {
                    return this.columnFreeBlocks;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FirstFreeBlockColumn {
                get {
                    return this.columnFirstFreeBlock;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LeadoutStartBlockColumn {
                get {
                    return this.columnLeadoutStartBlock;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberOfSessionsColumn {
                get {
                    return this.columnNumberOfSessions;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberOfTracksColumn {
                get {
                    return this.columnNumberOfTracks;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FirstLeadinBlockMsfColumn {
                get {
                    return this.columnFirstLeadinBlockMsf;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberOfDvdLayersColumn {
                get {
                    return this.columnNumberOfDvdLayers;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UpcColumn {
                get {
                    return this.columnUpc;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RawModeColumn {
                get {
                    return this.columnRawMode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DiscInfo_IdColumn {
                get {
                    return this.columnDiscInfo_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiscInfoRow this[int index] {
                get {
                    return ((DiscInfoRow)(this.Rows[index]));
                }
            }
            
            public event DiscInfoRowChangeEventHandler DiscInfoRowChanging;
            
            public event DiscInfoRowChangeEventHandler DiscInfoRowChanged;
            
            public event DiscInfoRowChangeEventHandler DiscInfoRowDeleting;
            
            public event DiscInfoRowChangeEventHandler DiscInfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDiscInfoRow(DiscInfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiscInfoRow AddDiscInfoRow(string FreeBlocks, string FirstFreeBlock, string LeadoutStartBlock, string NumberOfSessions, string NumberOfTracks, string FirstLeadinBlockMsf, string NumberOfDvdLayers, string Upc, string RawMode) {
                DiscInfoRow rowDiscInfoRow = ((DiscInfoRow)(this.NewRow()));
                rowDiscInfoRow.ItemArray = new object[] {
                        FreeBlocks,
                        FirstFreeBlock,
                        LeadoutStartBlock,
                        NumberOfSessions,
                        NumberOfTracks,
                        FirstLeadinBlockMsf,
                        NumberOfDvdLayers,
                        Upc,
                        RawMode,
                        null};
                this.Rows.Add(rowDiscInfoRow);
                return rowDiscInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DiscInfoDataTable cln = ((DiscInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DiscInfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFreeBlocks = base.Columns["FreeBlocks"];
                this.columnFirstFreeBlock = base.Columns["FirstFreeBlock"];
                this.columnLeadoutStartBlock = base.Columns["LeadoutStartBlock"];
                this.columnNumberOfSessions = base.Columns["NumberOfSessions"];
                this.columnNumberOfTracks = base.Columns["NumberOfTracks"];
                this.columnFirstLeadinBlockMsf = base.Columns["FirstLeadinBlockMsf"];
                this.columnNumberOfDvdLayers = base.Columns["NumberOfDvdLayers"];
                this.columnUpc = base.Columns["Upc"];
                this.columnRawMode = base.Columns["RawMode"];
                this.columnDiscInfo_Id = base.Columns["DiscInfo_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFreeBlocks = new System.Data.DataColumn("FreeBlocks", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFreeBlocks);
                this.columnFirstFreeBlock = new System.Data.DataColumn("FirstFreeBlock", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFirstFreeBlock);
                this.columnLeadoutStartBlock = new System.Data.DataColumn("LeadoutStartBlock", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLeadoutStartBlock);
                this.columnNumberOfSessions = new System.Data.DataColumn("NumberOfSessions", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNumberOfSessions);
                this.columnNumberOfTracks = new System.Data.DataColumn("NumberOfTracks", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNumberOfTracks);
                this.columnFirstLeadinBlockMsf = new System.Data.DataColumn("FirstLeadinBlockMsf", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFirstLeadinBlockMsf);
                this.columnNumberOfDvdLayers = new System.Data.DataColumn("NumberOfDvdLayers", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNumberOfDvdLayers);
                this.columnUpc = new System.Data.DataColumn("Upc", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUpc);
                this.columnRawMode = new System.Data.DataColumn("RawMode", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnRawMode);
                this.columnDiscInfo_Id = new System.Data.DataColumn("DiscInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDiscInfo_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnDiscInfo_Id}, true));
                this.columnFreeBlocks.AllowDBNull = false;
                this.columnFreeBlocks.Namespace = "";
                this.columnFirstFreeBlock.AllowDBNull = false;
                this.columnFirstFreeBlock.Namespace = "";
                this.columnLeadoutStartBlock.AllowDBNull = false;
                this.columnLeadoutStartBlock.Namespace = "";
                this.columnNumberOfSessions.AllowDBNull = false;
                this.columnNumberOfSessions.Namespace = "";
                this.columnNumberOfTracks.AllowDBNull = false;
                this.columnNumberOfTracks.Namespace = "";
                this.columnFirstLeadinBlockMsf.Namespace = "";
                this.columnNumberOfDvdLayers.Namespace = "";
                this.columnUpc.Namespace = "";
                this.columnRawMode.Namespace = "";
                this.columnRawMode.DefaultValue = ((string)("false"));
                this.columnDiscInfo_Id.AutoIncrement = true;
                this.columnDiscInfo_Id.AllowDBNull = false;
                this.columnDiscInfo_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiscInfoRow NewDiscInfoRow() {
                return ((DiscInfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DiscInfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DiscInfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DiscInfoRowChanged != null)) {
                    this.DiscInfoRowChanged(this, new DiscInfoRowChangeEvent(((DiscInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DiscInfoRowChanging != null)) {
                    this.DiscInfoRowChanging(this, new DiscInfoRowChangeEvent(((DiscInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DiscInfoRowDeleted != null)) {
                    this.DiscInfoRowDeleted(this, new DiscInfoRowChangeEvent(((DiscInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DiscInfoRowDeleting != null)) {
                    this.DiscInfoRowDeleting(this, new DiscInfoRowChangeEvent(((DiscInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDiscInfoRow(DiscInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FullDiscMap ds = new FullDiscMap();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DiscInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SessionInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSessionNumber;
            
            private System.Data.DataColumn columnSessionType;
            
            private System.Data.DataColumn columnLeadinControl;
            
            private System.Data.DataColumn columnLeadoutControl;
            
            private System.Data.DataColumn columnLeadoutStartBlock;
            
            private System.Data.DataColumn columnNextSessionStartBlock;
            
            private System.Data.DataColumn columnOpen;
            
            private System.Data.DataColumn columnSessionInfo_Id;
            
            private System.Data.DataColumn columnDiscInfo_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionInfoDataTable() {
                this.TableName = "SessionInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SessionInfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SessionInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SessionNumberColumn {
                get {
                    return this.columnSessionNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SessionTypeColumn {
                get {
                    return this.columnSessionType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LeadinControlColumn {
                get {
                    return this.columnLeadinControl;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LeadoutControlColumn {
                get {
                    return this.columnLeadoutControl;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LeadoutStartBlockColumn {
                get {
                    return this.columnLeadoutStartBlock;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NextSessionStartBlockColumn {
                get {
                    return this.columnNextSessionStartBlock;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OpenColumn {
                get {
                    return this.columnOpen;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SessionInfo_IdColumn {
                get {
                    return this.columnSessionInfo_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DiscInfo_IdColumn {
                get {
                    return this.columnDiscInfo_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionInfoRow this[int index] {
                get {
                    return ((SessionInfoRow)(this.Rows[index]));
                }
            }
            
            public event SessionInfoRowChangeEventHandler SessionInfoRowChanging;
            
            public event SessionInfoRowChangeEventHandler SessionInfoRowChanged;
            
            public event SessionInfoRowChangeEventHandler SessionInfoRowDeleting;
            
            public event SessionInfoRowChangeEventHandler SessionInfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSessionInfoRow(SessionInfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionInfoRow AddSessionInfoRow(string SessionNumber, string SessionType, string LeadinControl, string LeadoutControl, string LeadoutStartBlock, string NextSessionStartBlock, string Open, DiscInfoRow parentDiscInfoRowByDiscInfo_SessionInfo) {
                SessionInfoRow rowSessionInfoRow = ((SessionInfoRow)(this.NewRow()));
                rowSessionInfoRow.ItemArray = new object[] {
                        SessionNumber,
                        SessionType,
                        LeadinControl,
                        LeadoutControl,
                        LeadoutStartBlock,
                        NextSessionStartBlock,
                        Open,
                        null,
                        parentDiscInfoRowByDiscInfo_SessionInfo[9]};
                this.Rows.Add(rowSessionInfoRow);
                return rowSessionInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SessionInfoDataTable cln = ((SessionInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SessionInfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSessionNumber = base.Columns["SessionNumber"];
                this.columnSessionType = base.Columns["SessionType"];
                this.columnLeadinControl = base.Columns["LeadinControl"];
                this.columnLeadoutControl = base.Columns["LeadoutControl"];
                this.columnLeadoutStartBlock = base.Columns["LeadoutStartBlock"];
                this.columnNextSessionStartBlock = base.Columns["NextSessionStartBlock"];
                this.columnOpen = base.Columns["Open"];
                this.columnSessionInfo_Id = base.Columns["SessionInfo_Id"];
                this.columnDiscInfo_Id = base.Columns["DiscInfo_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSessionNumber = new System.Data.DataColumn("SessionNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSessionNumber);
                this.columnSessionType = new System.Data.DataColumn("SessionType", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSessionType);
                this.columnLeadinControl = new System.Data.DataColumn("LeadinControl", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLeadinControl);
                this.columnLeadoutControl = new System.Data.DataColumn("LeadoutControl", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLeadoutControl);
                this.columnLeadoutStartBlock = new System.Data.DataColumn("LeadoutStartBlock", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLeadoutStartBlock);
                this.columnNextSessionStartBlock = new System.Data.DataColumn("NextSessionStartBlock", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNextSessionStartBlock);
                this.columnOpen = new System.Data.DataColumn("Open", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnOpen);
                this.columnSessionInfo_Id = new System.Data.DataColumn("SessionInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSessionInfo_Id);
                this.columnDiscInfo_Id = new System.Data.DataColumn("DiscInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDiscInfo_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnSessionInfo_Id}, true));
                this.columnSessionNumber.AllowDBNull = false;
                this.columnSessionNumber.Namespace = "";
                this.columnSessionType.Namespace = "";
                this.columnSessionType.DefaultValue = ((string)("Standard"));
                this.columnLeadinControl.AllowDBNull = false;
                this.columnLeadinControl.Namespace = "";
                this.columnLeadoutControl.AllowDBNull = false;
                this.columnLeadoutControl.Namespace = "";
                this.columnLeadoutStartBlock.AllowDBNull = false;
                this.columnLeadoutStartBlock.Namespace = "";
                this.columnNextSessionStartBlock.AllowDBNull = false;
                this.columnNextSessionStartBlock.Namespace = "";
                this.columnOpen.Namespace = "";
                this.columnOpen.DefaultValue = ((string)("false"));
                this.columnSessionInfo_Id.AutoIncrement = true;
                this.columnSessionInfo_Id.AllowDBNull = false;
                this.columnSessionInfo_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionInfoRow NewSessionInfoRow() {
                return ((SessionInfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SessionInfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SessionInfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SessionInfoRowChanged != null)) {
                    this.SessionInfoRowChanged(this, new SessionInfoRowChangeEvent(((SessionInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SessionInfoRowChanging != null)) {
                    this.SessionInfoRowChanging(this, new SessionInfoRowChangeEvent(((SessionInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SessionInfoRowDeleted != null)) {
                    this.SessionInfoRowDeleted(this, new SessionInfoRowChangeEvent(((SessionInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SessionInfoRowDeleting != null)) {
                    this.SessionInfoRowDeleting(this, new SessionInfoRowChangeEvent(((SessionInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSessionInfoRow(SessionInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FullDiscMap ds = new FullDiscMap();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SessionInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TrackInfoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSessionNumber;
            
            private System.Data.DataColumn columnTrackNumber;
            
            private System.Data.DataColumn columnTrackType;
            
            private System.Data.DataColumn columnStartBlock;
            
            private System.Data.DataColumn columnNumberOfBlocks;
            
            private System.Data.DataColumn columnPregapBlocks;
            
            private System.Data.DataColumn columnPostgapBlocks;
            
            private System.Data.DataColumn columnHasRunoutBlocks;
            
            private System.Data.DataColumn columnHasTrailingPregap;
            
            private System.Data.DataColumn columnMaxIndex;
            
            private System.Data.DataColumn columnIso9660;
            
            private System.Data.DataColumn columnJoliet;
            
            private System.Data.DataColumn columnUDF;
            
            private System.Data.DataColumn columnIsrc;
            
            private System.Data.DataColumn columnVolumeId;
            
            private System.Data.DataColumn columnBlockSize;
            
            private System.Data.DataColumn columnTrackInfo_Id;
            
            private System.Data.DataColumn columnSessionInfo_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrackInfoDataTable() {
                this.TableName = "TrackInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TrackInfoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TrackInfoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SessionNumberColumn {
                get {
                    return this.columnSessionNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TrackNumberColumn {
                get {
                    return this.columnTrackNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TrackTypeColumn {
                get {
                    return this.columnTrackType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StartBlockColumn {
                get {
                    return this.columnStartBlock;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumberOfBlocksColumn {
                get {
                    return this.columnNumberOfBlocks;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PregapBlocksColumn {
                get {
                    return this.columnPregapBlocks;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PostgapBlocksColumn {
                get {
                    return this.columnPostgapBlocks;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HasRunoutBlocksColumn {
                get {
                    return this.columnHasRunoutBlocks;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HasTrailingPregapColumn {
                get {
                    return this.columnHasTrailingPregap;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MaxIndexColumn {
                get {
                    return this.columnMaxIndex;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn Iso9660Column {
                get {
                    return this.columnIso9660;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn JolietColumn {
                get {
                    return this.columnJoliet;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UDFColumn {
                get {
                    return this.columnUDF;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsrcColumn {
                get {
                    return this.columnIsrc;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VolumeIdColumn {
                get {
                    return this.columnVolumeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BlockSizeColumn {
                get {
                    return this.columnBlockSize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TrackInfo_IdColumn {
                get {
                    return this.columnTrackInfo_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SessionInfo_IdColumn {
                get {
                    return this.columnSessionInfo_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrackInfoRow this[int index] {
                get {
                    return ((TrackInfoRow)(this.Rows[index]));
                }
            }
            
            public event TrackInfoRowChangeEventHandler TrackInfoRowChanging;
            
            public event TrackInfoRowChangeEventHandler TrackInfoRowChanged;
            
            public event TrackInfoRowChangeEventHandler TrackInfoRowDeleting;
            
            public event TrackInfoRowChangeEventHandler TrackInfoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTrackInfoRow(TrackInfoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrackInfoRow AddTrackInfoRow(
                        string SessionNumber, 
                        string TrackNumber, 
                        string TrackType, 
                        string StartBlock, 
                        string NumberOfBlocks, 
                        string PregapBlocks, 
                        string PostgapBlocks, 
                        string HasRunoutBlocks, 
                        string HasTrailingPregap, 
                        string MaxIndex, 
                        string Iso9660, 
                        string Joliet, 
                        string UDF, 
                        string Isrc, 
                        string VolumeId, 
                        string BlockSize, 
                        SessionInfoRow parentSessionInfoRowBySessionInfo_TrackInfo) {
                TrackInfoRow rowTrackInfoRow = ((TrackInfoRow)(this.NewRow()));
                rowTrackInfoRow.ItemArray = new object[] {
                        SessionNumber,
                        TrackNumber,
                        TrackType,
                        StartBlock,
                        NumberOfBlocks,
                        PregapBlocks,
                        PostgapBlocks,
                        HasRunoutBlocks,
                        HasTrailingPregap,
                        MaxIndex,
                        Iso9660,
                        Joliet,
                        UDF,
                        Isrc,
                        VolumeId,
                        BlockSize,
                        null,
                        parentSessionInfoRowBySessionInfo_TrackInfo[7]};
                this.Rows.Add(rowTrackInfoRow);
                return rowTrackInfoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TrackInfoDataTable cln = ((TrackInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TrackInfoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSessionNumber = base.Columns["SessionNumber"];
                this.columnTrackNumber = base.Columns["TrackNumber"];
                this.columnTrackType = base.Columns["TrackType"];
                this.columnStartBlock = base.Columns["StartBlock"];
                this.columnNumberOfBlocks = base.Columns["NumberOfBlocks"];
                this.columnPregapBlocks = base.Columns["PregapBlocks"];
                this.columnPostgapBlocks = base.Columns["PostgapBlocks"];
                this.columnHasRunoutBlocks = base.Columns["HasRunoutBlocks"];
                this.columnHasTrailingPregap = base.Columns["HasTrailingPregap"];
                this.columnMaxIndex = base.Columns["MaxIndex"];
                this.columnIso9660 = base.Columns["Iso9660"];
                this.columnJoliet = base.Columns["Joliet"];
                this.columnUDF = base.Columns["UDF"];
                this.columnIsrc = base.Columns["Isrc"];
                this.columnVolumeId = base.Columns["VolumeId"];
                this.columnBlockSize = base.Columns["BlockSize"];
                this.columnTrackInfo_Id = base.Columns["TrackInfo_Id"];
                this.columnSessionInfo_Id = base.Columns["SessionInfo_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSessionNumber = new System.Data.DataColumn("SessionNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSessionNumber);
                this.columnTrackNumber = new System.Data.DataColumn("TrackNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTrackNumber);
                this.columnTrackType = new System.Data.DataColumn("TrackType", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTrackType);
                this.columnStartBlock = new System.Data.DataColumn("StartBlock", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnStartBlock);
                this.columnNumberOfBlocks = new System.Data.DataColumn("NumberOfBlocks", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnNumberOfBlocks);
                this.columnPregapBlocks = new System.Data.DataColumn("PregapBlocks", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPregapBlocks);
                this.columnPostgapBlocks = new System.Data.DataColumn("PostgapBlocks", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPostgapBlocks);
                this.columnHasRunoutBlocks = new System.Data.DataColumn("HasRunoutBlocks", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnHasRunoutBlocks);
                this.columnHasTrailingPregap = new System.Data.DataColumn("HasTrailingPregap", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnHasTrailingPregap);
                this.columnMaxIndex = new System.Data.DataColumn("MaxIndex", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMaxIndex);
                this.columnIso9660 = new System.Data.DataColumn("Iso9660", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIso9660);
                this.columnJoliet = new System.Data.DataColumn("Joliet", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnJoliet);
                this.columnUDF = new System.Data.DataColumn("UDF", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnUDF);
                this.columnIsrc = new System.Data.DataColumn("Isrc", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnIsrc);
                this.columnVolumeId = new System.Data.DataColumn("VolumeId", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnVolumeId);
                this.columnBlockSize = new System.Data.DataColumn("BlockSize", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnBlockSize);
                this.columnTrackInfo_Id = new System.Data.DataColumn("TrackInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTrackInfo_Id);
                this.columnSessionInfo_Id = new System.Data.DataColumn("SessionInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnSessionInfo_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnTrackInfo_Id}, true));
                this.columnSessionNumber.AllowDBNull = false;
                this.columnSessionNumber.Namespace = "";
                this.columnTrackNumber.AllowDBNull = false;
                this.columnTrackNumber.Namespace = "";
                this.columnTrackType.Namespace = "";
                this.columnTrackType.DefaultValue = ((string)("Audio"));
                this.columnStartBlock.AllowDBNull = false;
                this.columnStartBlock.Namespace = "";
                this.columnNumberOfBlocks.AllowDBNull = false;
                this.columnNumberOfBlocks.Namespace = "";
                this.columnPregapBlocks.AllowDBNull = false;
                this.columnPregapBlocks.Namespace = "";
                this.columnPostgapBlocks.AllowDBNull = false;
                this.columnPostgapBlocks.Namespace = "";
                this.columnHasRunoutBlocks.Namespace = "";
                this.columnHasRunoutBlocks.DefaultValue = ((string)("false"));
                this.columnHasTrailingPregap.Namespace = "";
                this.columnHasTrailingPregap.DefaultValue = ((string)("false"));
                this.columnMaxIndex.AllowDBNull = false;
                this.columnMaxIndex.Namespace = "";
                this.columnIso9660.Namespace = "";
                this.columnIso9660.DefaultValue = ((string)("false"));
                this.columnJoliet.Namespace = "";
                this.columnJoliet.DefaultValue = ((string)("false"));
                this.columnUDF.Namespace = "";
                this.columnUDF.DefaultValue = ((string)("false"));
                this.columnIsrc.Namespace = "";
                this.columnVolumeId.Namespace = "";
                this.columnBlockSize.Namespace = "";
                this.columnTrackInfo_Id.AutoIncrement = true;
                this.columnTrackInfo_Id.AllowDBNull = false;
                this.columnTrackInfo_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrackInfoRow NewTrackInfoRow() {
                return ((TrackInfoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TrackInfoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TrackInfoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TrackInfoRowChanged != null)) {
                    this.TrackInfoRowChanged(this, new TrackInfoRowChangeEvent(((TrackInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TrackInfoRowChanging != null)) {
                    this.TrackInfoRowChanging(this, new TrackInfoRowChangeEvent(((TrackInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TrackInfoRowDeleted != null)) {
                    this.TrackInfoRowDeleted(this, new TrackInfoRowChangeEvent(((TrackInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TrackInfoRowDeleting != null)) {
                    this.TrackInfoRowDeleting(this, new TrackInfoRowChangeEvent(((TrackInfoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTrackInfoRow(TrackInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FullDiscMap ds = new FullDiscMap();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TrackInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SubchannelControlBitsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnPreEmphasis;
            
            private System.Data.DataColumn columnAllowCopy;
            
            private System.Data.DataColumn columnData;
            
            private System.Data.DataColumn columnFourChannel;
            
            private System.Data.DataColumn columnTrackInfo_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubchannelControlBitsDataTable() {
                this.TableName = "SubchannelControlBits";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubchannelControlBitsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SubchannelControlBitsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PreEmphasisColumn {
                get {
                    return this.columnPreEmphasis;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AllowCopyColumn {
                get {
                    return this.columnAllowCopy;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DataColumn {
                get {
                    return this.columnData;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FourChannelColumn {
                get {
                    return this.columnFourChannel;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TrackInfo_IdColumn {
                get {
                    return this.columnTrackInfo_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubchannelControlBitsRow this[int index] {
                get {
                    return ((SubchannelControlBitsRow)(this.Rows[index]));
                }
            }
            
            public event SubchannelControlBitsRowChangeEventHandler SubchannelControlBitsRowChanging;
            
            public event SubchannelControlBitsRowChangeEventHandler SubchannelControlBitsRowChanged;
            
            public event SubchannelControlBitsRowChangeEventHandler SubchannelControlBitsRowDeleting;
            
            public event SubchannelControlBitsRowChangeEventHandler SubchannelControlBitsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSubchannelControlBitsRow(SubchannelControlBitsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubchannelControlBitsRow AddSubchannelControlBitsRow(string PreEmphasis, string AllowCopy, string Data, string FourChannel, TrackInfoRow parentTrackInfoRowByTrackInfo_SubchannelControlBits) {
                SubchannelControlBitsRow rowSubchannelControlBitsRow = ((SubchannelControlBitsRow)(this.NewRow()));
                rowSubchannelControlBitsRow.ItemArray = new object[] {
                        PreEmphasis,
                        AllowCopy,
                        Data,
                        FourChannel,
                        parentTrackInfoRowByTrackInfo_SubchannelControlBits[16]};
                this.Rows.Add(rowSubchannelControlBitsRow);
                return rowSubchannelControlBitsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SubchannelControlBitsDataTable cln = ((SubchannelControlBitsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SubchannelControlBitsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPreEmphasis = base.Columns["PreEmphasis"];
                this.columnAllowCopy = base.Columns["AllowCopy"];
                this.columnData = base.Columns["Data"];
                this.columnFourChannel = base.Columns["FourChannel"];
                this.columnTrackInfo_Id = base.Columns["TrackInfo_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPreEmphasis = new System.Data.DataColumn("PreEmphasis", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPreEmphasis);
                this.columnAllowCopy = new System.Data.DataColumn("AllowCopy", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAllowCopy);
                this.columnData = new System.Data.DataColumn("Data", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnData);
                this.columnFourChannel = new System.Data.DataColumn("FourChannel", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFourChannel);
                this.columnTrackInfo_Id = new System.Data.DataColumn("TrackInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTrackInfo_Id);
                this.columnPreEmphasis.Namespace = "";
                this.columnPreEmphasis.DefaultValue = ((string)("false"));
                this.columnAllowCopy.Namespace = "";
                this.columnAllowCopy.DefaultValue = ((string)("false"));
                this.columnData.Namespace = "";
                this.columnData.DefaultValue = ((string)("false"));
                this.columnFourChannel.Namespace = "";
                this.columnFourChannel.DefaultValue = ((string)("false"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubchannelControlBitsRow NewSubchannelControlBitsRow() {
                return ((SubchannelControlBitsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SubchannelControlBitsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SubchannelControlBitsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SubchannelControlBitsRowChanged != null)) {
                    this.SubchannelControlBitsRowChanged(this, new SubchannelControlBitsRowChangeEvent(((SubchannelControlBitsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SubchannelControlBitsRowChanging != null)) {
                    this.SubchannelControlBitsRowChanging(this, new SubchannelControlBitsRowChangeEvent(((SubchannelControlBitsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SubchannelControlBitsRowDeleted != null)) {
                    this.SubchannelControlBitsRowDeleted(this, new SubchannelControlBitsRowChangeEvent(((SubchannelControlBitsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SubchannelControlBitsRowDeleting != null)) {
                    this.SubchannelControlBitsRowDeleting(this, new SubchannelControlBitsRowChangeEvent(((SubchannelControlBitsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSubchannelControlBitsRow(SubchannelControlBitsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FullDiscMap ds = new FullDiscMap();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SubchannelControlBitsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SubIndexDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnBlockNumber;
            
            private System.Data.DataColumn columnTrackInfo_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubIndexDataTable() {
                this.TableName = "SubIndex";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubIndexDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SubIndexDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BlockNumberColumn {
                get {
                    return this.columnBlockNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TrackInfo_IdColumn {
                get {
                    return this.columnTrackInfo_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubIndexRow this[int index] {
                get {
                    return ((SubIndexRow)(this.Rows[index]));
                }
            }
            
            public event SubIndexRowChangeEventHandler SubIndexRowChanging;
            
            public event SubIndexRowChangeEventHandler SubIndexRowChanged;
            
            public event SubIndexRowChangeEventHandler SubIndexRowDeleting;
            
            public event SubIndexRowChangeEventHandler SubIndexRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSubIndexRow(SubIndexRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubIndexRow AddSubIndexRow(string BlockNumber, TrackInfoRow parentTrackInfoRowByTrackInfo_SubIndex) {
                SubIndexRow rowSubIndexRow = ((SubIndexRow)(this.NewRow()));
                rowSubIndexRow.ItemArray = new object[] {
                        BlockNumber,
                        parentTrackInfoRowByTrackInfo_SubIndex[16]};
                this.Rows.Add(rowSubIndexRow);
                return rowSubIndexRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SubIndexDataTable cln = ((SubIndexDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SubIndexDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBlockNumber = base.Columns["BlockNumber"];
                this.columnTrackInfo_Id = base.Columns["TrackInfo_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBlockNumber = new System.Data.DataColumn("BlockNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnBlockNumber);
                this.columnTrackInfo_Id = new System.Data.DataColumn("TrackInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTrackInfo_Id);
                this.columnBlockNumber.AllowDBNull = false;
                this.columnBlockNumber.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubIndexRow NewSubIndexRow() {
                return ((SubIndexRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SubIndexRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SubIndexRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SubIndexRowChanged != null)) {
                    this.SubIndexRowChanged(this, new SubIndexRowChangeEvent(((SubIndexRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SubIndexRowChanging != null)) {
                    this.SubIndexRowChanging(this, new SubIndexRowChangeEvent(((SubIndexRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SubIndexRowDeleted != null)) {
                    this.SubIndexRowDeleted(this, new SubIndexRowChangeEvent(((SubIndexRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SubIndexRowDeleting != null)) {
                    this.SubIndexRowDeleting(this, new SubIndexRowChangeEvent(((SubIndexRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSubIndexRow(SubIndexRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FullDiscMap ds = new FullDiscMap();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SubIndexDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TocEntryDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSessionNumber;
            
            private System.Data.DataColumn columnControl;
            
            private System.Data.DataColumn columnAdr;
            
            private System.Data.DataColumn columnTno;
            
            private System.Data.DataColumn columnPoint;
            
            private System.Data.DataColumn columnMsf;
            
            private System.Data.DataColumn columnZero;
            
            private System.Data.DataColumn columnPmsf;
            
            private System.Data.DataColumn columnDiscInfo_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TocEntryDataTable() {
                this.TableName = "TocEntry";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TocEntryDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TocEntryDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SessionNumberColumn {
                get {
                    return this.columnSessionNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ControlColumn {
                get {
                    return this.columnControl;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AdrColumn {
                get {
                    return this.columnAdr;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TnoColumn {
                get {
                    return this.columnTno;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PointColumn {
                get {
                    return this.columnPoint;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MsfColumn {
                get {
                    return this.columnMsf;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ZeroColumn {
                get {
                    return this.columnZero;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PmsfColumn {
                get {
                    return this.columnPmsf;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DiscInfo_IdColumn {
                get {
                    return this.columnDiscInfo_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TocEntryRow this[int index] {
                get {
                    return ((TocEntryRow)(this.Rows[index]));
                }
            }
            
            public event TocEntryRowChangeEventHandler TocEntryRowChanging;
            
            public event TocEntryRowChangeEventHandler TocEntryRowChanged;
            
            public event TocEntryRowChangeEventHandler TocEntryRowDeleting;
            
            public event TocEntryRowChangeEventHandler TocEntryRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTocEntryRow(TocEntryRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TocEntryRow AddTocEntryRow(string SessionNumber, string Control, string Adr, string Tno, string Point, string Msf, string Zero, string Pmsf, DiscInfoRow parentDiscInfoRowByDiscInfo_TocEntry) {
                TocEntryRow rowTocEntryRow = ((TocEntryRow)(this.NewRow()));
                rowTocEntryRow.ItemArray = new object[] {
                        SessionNumber,
                        Control,
                        Adr,
                        Tno,
                        Point,
                        Msf,
                        Zero,
                        Pmsf,
                        parentDiscInfoRowByDiscInfo_TocEntry[9]};
                this.Rows.Add(rowTocEntryRow);
                return rowTocEntryRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TocEntryDataTable cln = ((TocEntryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TocEntryDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSessionNumber = base.Columns["SessionNumber"];
                this.columnControl = base.Columns["Control"];
                this.columnAdr = base.Columns["Adr"];
                this.columnTno = base.Columns["Tno"];
                this.columnPoint = base.Columns["Point"];
                this.columnMsf = base.Columns["Msf"];
                this.columnZero = base.Columns["Zero"];
                this.columnPmsf = base.Columns["Pmsf"];
                this.columnDiscInfo_Id = base.Columns["DiscInfo_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSessionNumber = new System.Data.DataColumn("SessionNumber", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnSessionNumber);
                this.columnControl = new System.Data.DataColumn("Control", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnControl);
                this.columnAdr = new System.Data.DataColumn("Adr", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnAdr);
                this.columnTno = new System.Data.DataColumn("Tno", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnTno);
                this.columnPoint = new System.Data.DataColumn("Point", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPoint);
                this.columnMsf = new System.Data.DataColumn("Msf", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnMsf);
                this.columnZero = new System.Data.DataColumn("Zero", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnZero);
                this.columnPmsf = new System.Data.DataColumn("Pmsf", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnPmsf);
                this.columnDiscInfo_Id = new System.Data.DataColumn("DiscInfo_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDiscInfo_Id);
                this.columnSessionNumber.AllowDBNull = false;
                this.columnSessionNumber.Namespace = "";
                this.columnControl.AllowDBNull = false;
                this.columnControl.Namespace = "";
                this.columnAdr.AllowDBNull = false;
                this.columnAdr.Namespace = "";
                this.columnTno.AllowDBNull = false;
                this.columnTno.Namespace = "";
                this.columnPoint.AllowDBNull = false;
                this.columnPoint.Namespace = "";
                this.columnMsf.AllowDBNull = false;
                this.columnMsf.Namespace = "";
                this.columnZero.AllowDBNull = false;
                this.columnZero.Namespace = "";
                this.columnPmsf.AllowDBNull = false;
                this.columnPmsf.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TocEntryRow NewTocEntryRow() {
                return ((TocEntryRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TocEntryRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TocEntryRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TocEntryRowChanged != null)) {
                    this.TocEntryRowChanged(this, new TocEntryRowChangeEvent(((TocEntryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TocEntryRowChanging != null)) {
                    this.TocEntryRowChanging(this, new TocEntryRowChangeEvent(((TocEntryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TocEntryRowDeleted != null)) {
                    this.TocEntryRowDeleted(this, new TocEntryRowChangeEvent(((TocEntryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TocEntryRowDeleting != null)) {
                    this.TocEntryRowDeleting(this, new TocEntryRowChangeEvent(((TocEntryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTocEntryRow(TocEntryRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FullDiscMap ds = new FullDiscMap();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TocEntryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DiscInfoRow : System.Data.DataRow {
            
            private DiscInfoDataTable tableDiscInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DiscInfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDiscInfo = ((DiscInfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FreeBlocks {
                get {
                    return ((string)(this[this.tableDiscInfo.FreeBlocksColumn]));
                }
                set {
                    this[this.tableDiscInfo.FreeBlocksColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstFreeBlock {
                get {
                    return ((string)(this[this.tableDiscInfo.FirstFreeBlockColumn]));
                }
                set {
                    this[this.tableDiscInfo.FirstFreeBlockColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LeadoutStartBlock {
                get {
                    return ((string)(this[this.tableDiscInfo.LeadoutStartBlockColumn]));
                }
                set {
                    this[this.tableDiscInfo.LeadoutStartBlockColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NumberOfSessions {
                get {
                    return ((string)(this[this.tableDiscInfo.NumberOfSessionsColumn]));
                }
                set {
                    this[this.tableDiscInfo.NumberOfSessionsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NumberOfTracks {
                get {
                    return ((string)(this[this.tableDiscInfo.NumberOfTracksColumn]));
                }
                set {
                    this[this.tableDiscInfo.NumberOfTracksColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstLeadinBlockMsf {
                get {
                    try {
                        return ((string)(this[this.tableDiscInfo.FirstLeadinBlockMsfColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FirstLeadinBlockMsf\' in table \'DiscInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiscInfo.FirstLeadinBlockMsfColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NumberOfDvdLayers {
                get {
                    try {
                        return ((string)(this[this.tableDiscInfo.NumberOfDvdLayersColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'NumberOfDvdLayers\' in table \'DiscInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiscInfo.NumberOfDvdLayersColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Upc {
                get {
                    try {
                        return ((string)(this[this.tableDiscInfo.UpcColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Upc\' in table \'DiscInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiscInfo.UpcColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RawMode {
                get {
                    try {
                        return ((string)(this[this.tableDiscInfo.RawModeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RawMode\' in table \'DiscInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDiscInfo.RawModeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DiscInfo_Id {
                get {
                    return ((int)(this[this.tableDiscInfo.DiscInfo_IdColumn]));
                }
                set {
                    this[this.tableDiscInfo.DiscInfo_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstLeadinBlockMsfNull() {
                return this.IsNull(this.tableDiscInfo.FirstLeadinBlockMsfColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstLeadinBlockMsfNull() {
                this[this.tableDiscInfo.FirstLeadinBlockMsfColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumberOfDvdLayersNull() {
                return this.IsNull(this.tableDiscInfo.NumberOfDvdLayersColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumberOfDvdLayersNull() {
                this[this.tableDiscInfo.NumberOfDvdLayersColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpcNull() {
                return this.IsNull(this.tableDiscInfo.UpcColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpcNull() {
                this[this.tableDiscInfo.UpcColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRawModeNull() {
                return this.IsNull(this.tableDiscInfo.RawModeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRawModeNull() {
                this[this.tableDiscInfo.RawModeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionInfoRow[] GetSessionInfoRows() {
                return ((SessionInfoRow[])(base.GetChildRows(this.Table.ChildRelations["DiscInfo_SessionInfo"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TocEntryRow[] GetTocEntryRows() {
                return ((TocEntryRow[])(base.GetChildRows(this.Table.ChildRelations["DiscInfo_TocEntry"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SessionInfoRow : System.Data.DataRow {
            
            private SessionInfoDataTable tableSessionInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SessionInfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSessionInfo = ((SessionInfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SessionNumber {
                get {
                    return ((string)(this[this.tableSessionInfo.SessionNumberColumn]));
                }
                set {
                    this[this.tableSessionInfo.SessionNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SessionType {
                get {
                    try {
                        return ((string)(this[this.tableSessionInfo.SessionTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SessionType\' in table \'SessionInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSessionInfo.SessionTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LeadinControl {
                get {
                    return ((string)(this[this.tableSessionInfo.LeadinControlColumn]));
                }
                set {
                    this[this.tableSessionInfo.LeadinControlColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LeadoutControl {
                get {
                    return ((string)(this[this.tableSessionInfo.LeadoutControlColumn]));
                }
                set {
                    this[this.tableSessionInfo.LeadoutControlColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LeadoutStartBlock {
                get {
                    return ((string)(this[this.tableSessionInfo.LeadoutStartBlockColumn]));
                }
                set {
                    this[this.tableSessionInfo.LeadoutStartBlockColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NextSessionStartBlock {
                get {
                    return ((string)(this[this.tableSessionInfo.NextSessionStartBlockColumn]));
                }
                set {
                    this[this.tableSessionInfo.NextSessionStartBlockColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Open {
                get {
                    try {
                        return ((string)(this[this.tableSessionInfo.OpenColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Open\' in table \'SessionInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSessionInfo.OpenColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SessionInfo_Id {
                get {
                    return ((int)(this[this.tableSessionInfo.SessionInfo_IdColumn]));
                }
                set {
                    this[this.tableSessionInfo.SessionInfo_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DiscInfo_Id {
                get {
                    try {
                        return ((int)(this[this.tableSessionInfo.DiscInfo_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DiscInfo_Id\' in table \'SessionInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSessionInfo.DiscInfo_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiscInfoRow DiscInfoRow {
                get {
                    return ((DiscInfoRow)(this.GetParentRow(this.Table.ParentRelations["DiscInfo_SessionInfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DiscInfo_SessionInfo"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSessionTypeNull() {
                return this.IsNull(this.tableSessionInfo.SessionTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSessionTypeNull() {
                this[this.tableSessionInfo.SessionTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOpenNull() {
                return this.IsNull(this.tableSessionInfo.OpenColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOpenNull() {
                this[this.tableSessionInfo.OpenColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiscInfo_IdNull() {
                return this.IsNull(this.tableSessionInfo.DiscInfo_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiscInfo_IdNull() {
                this[this.tableSessionInfo.DiscInfo_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrackInfoRow[] GetTrackInfoRows() {
                return ((TrackInfoRow[])(base.GetChildRows(this.Table.ChildRelations["SessionInfo_TrackInfo"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TrackInfoRow : System.Data.DataRow {
            
            private TrackInfoDataTable tableTrackInfo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TrackInfoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTrackInfo = ((TrackInfoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SessionNumber {
                get {
                    return ((string)(this[this.tableTrackInfo.SessionNumberColumn]));
                }
                set {
                    this[this.tableTrackInfo.SessionNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrackNumber {
                get {
                    return ((string)(this[this.tableTrackInfo.TrackNumberColumn]));
                }
                set {
                    this[this.tableTrackInfo.TrackNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrackType {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.TrackTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TrackType\' in table \'TrackInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.TrackTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StartBlock {
                get {
                    return ((string)(this[this.tableTrackInfo.StartBlockColumn]));
                }
                set {
                    this[this.tableTrackInfo.StartBlockColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NumberOfBlocks {
                get {
                    return ((string)(this[this.tableTrackInfo.NumberOfBlocksColumn]));
                }
                set {
                    this[this.tableTrackInfo.NumberOfBlocksColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PregapBlocks {
                get {
                    return ((string)(this[this.tableTrackInfo.PregapBlocksColumn]));
                }
                set {
                    this[this.tableTrackInfo.PregapBlocksColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PostgapBlocks {
                get {
                    return ((string)(this[this.tableTrackInfo.PostgapBlocksColumn]));
                }
                set {
                    this[this.tableTrackInfo.PostgapBlocksColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HasRunoutBlocks {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.HasRunoutBlocksColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HasRunoutBlocks\' in table \'TrackInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.HasRunoutBlocksColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HasTrailingPregap {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.HasTrailingPregapColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HasTrailingPregap\' in table \'TrackInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.HasTrailingPregapColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaxIndex {
                get {
                    return ((string)(this[this.tableTrackInfo.MaxIndexColumn]));
                }
                set {
                    this[this.tableTrackInfo.MaxIndexColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Iso9660 {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.Iso9660Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Iso9660\' in table \'TrackInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.Iso9660Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Joliet {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.JolietColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Joliet\' in table \'TrackInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.JolietColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UDF {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.UDFColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UDF\' in table \'TrackInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.UDFColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Isrc {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.IsrcColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Isrc\' in table \'TrackInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.IsrcColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VolumeId {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.VolumeIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'VolumeId\' in table \'TrackInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.VolumeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BlockSize {
                get {
                    try {
                        return ((string)(this[this.tableTrackInfo.BlockSizeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'BlockSize\' in table \'TrackInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.BlockSizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TrackInfo_Id {
                get {
                    return ((int)(this[this.tableTrackInfo.TrackInfo_IdColumn]));
                }
                set {
                    this[this.tableTrackInfo.TrackInfo_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SessionInfo_Id {
                get {
                    try {
                        return ((int)(this[this.tableTrackInfo.SessionInfo_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SessionInfo_Id\' in table \'TrackInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrackInfo.SessionInfo_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionInfoRow SessionInfoRow {
                get {
                    return ((SessionInfoRow)(this.GetParentRow(this.Table.ParentRelations["SessionInfo_TrackInfo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SessionInfo_TrackInfo"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrackTypeNull() {
                return this.IsNull(this.tableTrackInfo.TrackTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrackTypeNull() {
                this[this.tableTrackInfo.TrackTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasRunoutBlocksNull() {
                return this.IsNull(this.tableTrackInfo.HasRunoutBlocksColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasRunoutBlocksNull() {
                this[this.tableTrackInfo.HasRunoutBlocksColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasTrailingPregapNull() {
                return this.IsNull(this.tableTrackInfo.HasTrailingPregapColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasTrailingPregapNull() {
                this[this.tableTrackInfo.HasTrailingPregapColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIso9660Null() {
                return this.IsNull(this.tableTrackInfo.Iso9660Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIso9660Null() {
                this[this.tableTrackInfo.Iso9660Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJolietNull() {
                return this.IsNull(this.tableTrackInfo.JolietColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJolietNull() {
                this[this.tableTrackInfo.JolietColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUDFNull() {
                return this.IsNull(this.tableTrackInfo.UDFColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUDFNull() {
                this[this.tableTrackInfo.UDFColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsrcNull() {
                return this.IsNull(this.tableTrackInfo.IsrcColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsrcNull() {
                this[this.tableTrackInfo.IsrcColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVolumeIdNull() {
                return this.IsNull(this.tableTrackInfo.VolumeIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVolumeIdNull() {
                this[this.tableTrackInfo.VolumeIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBlockSizeNull() {
                return this.IsNull(this.tableTrackInfo.BlockSizeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBlockSizeNull() {
                this[this.tableTrackInfo.BlockSizeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSessionInfo_IdNull() {
                return this.IsNull(this.tableTrackInfo.SessionInfo_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSessionInfo_IdNull() {
                this[this.tableTrackInfo.SessionInfo_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubchannelControlBitsRow[] GetSubchannelControlBitsRows() {
                return ((SubchannelControlBitsRow[])(base.GetChildRows(this.Table.ChildRelations["TrackInfo_SubchannelControlBits"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubIndexRow[] GetSubIndexRows() {
                return ((SubIndexRow[])(base.GetChildRows(this.Table.ChildRelations["TrackInfo_SubIndex"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SubchannelControlBitsRow : System.Data.DataRow {
            
            private SubchannelControlBitsDataTable tableSubchannelControlBits;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubchannelControlBitsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSubchannelControlBits = ((SubchannelControlBitsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PreEmphasis {
                get {
                    try {
                        return ((string)(this[this.tableSubchannelControlBits.PreEmphasisColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PreEmphasis\' in table \'SubchannelControlBits\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubchannelControlBits.PreEmphasisColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AllowCopy {
                get {
                    try {
                        return ((string)(this[this.tableSubchannelControlBits.AllowCopyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AllowCopy\' in table \'SubchannelControlBits\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubchannelControlBits.AllowCopyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Data {
                get {
                    try {
                        return ((string)(this[this.tableSubchannelControlBits.DataColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Data\' in table \'SubchannelControlBits\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubchannelControlBits.DataColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FourChannel {
                get {
                    try {
                        return ((string)(this[this.tableSubchannelControlBits.FourChannelColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FourChannel\' in table \'SubchannelControlBits\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubchannelControlBits.FourChannelColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TrackInfo_Id {
                get {
                    try {
                        return ((int)(this[this.tableSubchannelControlBits.TrackInfo_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TrackInfo_Id\' in table \'SubchannelControlBits\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubchannelControlBits.TrackInfo_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrackInfoRow TrackInfoRow {
                get {
                    return ((TrackInfoRow)(this.GetParentRow(this.Table.ParentRelations["TrackInfo_SubchannelControlBits"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TrackInfo_SubchannelControlBits"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreEmphasisNull() {
                return this.IsNull(this.tableSubchannelControlBits.PreEmphasisColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreEmphasisNull() {
                this[this.tableSubchannelControlBits.PreEmphasisColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAllowCopyNull() {
                return this.IsNull(this.tableSubchannelControlBits.AllowCopyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAllowCopyNull() {
                this[this.tableSubchannelControlBits.AllowCopyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataNull() {
                return this.IsNull(this.tableSubchannelControlBits.DataColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataNull() {
                this[this.tableSubchannelControlBits.DataColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourChannelNull() {
                return this.IsNull(this.tableSubchannelControlBits.FourChannelColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourChannelNull() {
                this[this.tableSubchannelControlBits.FourChannelColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrackInfo_IdNull() {
                return this.IsNull(this.tableSubchannelControlBits.TrackInfo_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrackInfo_IdNull() {
                this[this.tableSubchannelControlBits.TrackInfo_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SubIndexRow : System.Data.DataRow {
            
            private SubIndexDataTable tableSubIndex;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubIndexRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSubIndex = ((SubIndexDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BlockNumber {
                get {
                    return ((string)(this[this.tableSubIndex.BlockNumberColumn]));
                }
                set {
                    this[this.tableSubIndex.BlockNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TrackInfo_Id {
                get {
                    try {
                        return ((int)(this[this.tableSubIndex.TrackInfo_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TrackInfo_Id\' in table \'SubIndex\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubIndex.TrackInfo_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrackInfoRow TrackInfoRow {
                get {
                    return ((TrackInfoRow)(this.GetParentRow(this.Table.ParentRelations["TrackInfo_SubIndex"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TrackInfo_SubIndex"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrackInfo_IdNull() {
                return this.IsNull(this.tableSubIndex.TrackInfo_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrackInfo_IdNull() {
                this[this.tableSubIndex.TrackInfo_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TocEntryRow : System.Data.DataRow {
            
            private TocEntryDataTable tableTocEntry;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TocEntryRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTocEntry = ((TocEntryDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SessionNumber {
                get {
                    return ((string)(this[this.tableTocEntry.SessionNumberColumn]));
                }
                set {
                    this[this.tableTocEntry.SessionNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Control {
                get {
                    return ((string)(this[this.tableTocEntry.ControlColumn]));
                }
                set {
                    this[this.tableTocEntry.ControlColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Adr {
                get {
                    return ((string)(this[this.tableTocEntry.AdrColumn]));
                }
                set {
                    this[this.tableTocEntry.AdrColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tno {
                get {
                    return ((string)(this[this.tableTocEntry.TnoColumn]));
                }
                set {
                    this[this.tableTocEntry.TnoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Point {
                get {
                    return ((string)(this[this.tableTocEntry.PointColumn]));
                }
                set {
                    this[this.tableTocEntry.PointColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Msf {
                get {
                    return ((string)(this[this.tableTocEntry.MsfColumn]));
                }
                set {
                    this[this.tableTocEntry.MsfColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Zero {
                get {
                    return ((string)(this[this.tableTocEntry.ZeroColumn]));
                }
                set {
                    this[this.tableTocEntry.ZeroColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Pmsf {
                get {
                    return ((string)(this[this.tableTocEntry.PmsfColumn]));
                }
                set {
                    this[this.tableTocEntry.PmsfColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DiscInfo_Id {
                get {
                    try {
                        return ((int)(this[this.tableTocEntry.DiscInfo_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DiscInfo_Id\' in table \'TocEntry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTocEntry.DiscInfo_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiscInfoRow DiscInfoRow {
                get {
                    return ((DiscInfoRow)(this.GetParentRow(this.Table.ParentRelations["DiscInfo_TocEntry"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DiscInfo_TocEntry"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiscInfo_IdNull() {
                return this.IsNull(this.tableTocEntry.DiscInfo_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiscInfo_IdNull() {
                this[this.tableTocEntry.DiscInfo_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DiscInfoRowChangeEvent : System.EventArgs {
            
            private DiscInfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiscInfoRowChangeEvent(DiscInfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DiscInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SessionInfoRowChangeEvent : System.EventArgs {
            
            private SessionInfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionInfoRowChangeEvent(SessionInfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TrackInfoRowChangeEvent : System.EventArgs {
            
            private TrackInfoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrackInfoRowChangeEvent(TrackInfoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrackInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SubchannelControlBitsRowChangeEvent : System.EventArgs {
            
            private SubchannelControlBitsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubchannelControlBitsRowChangeEvent(SubchannelControlBitsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubchannelControlBitsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SubIndexRowChangeEvent : System.EventArgs {
            
            private SubIndexRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubIndexRowChangeEvent(SubIndexRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubIndexRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TocEntryRowChangeEvent : System.EventArgs {
            
            private TocEntryRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TocEntryRowChangeEvent(TocEntryRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TocEntryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591