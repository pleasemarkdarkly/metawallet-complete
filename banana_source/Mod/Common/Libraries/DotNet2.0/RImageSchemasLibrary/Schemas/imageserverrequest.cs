//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace RImageSchemas.Schemas {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ImageServerRequest : DataSet {
        
        private GetServerStatusDataTable tableGetServerStatus;
        
        private GetParameterSettingsDataTable tableGetParameterSettings;
        
        private GetOrderListDataTable tableGetOrderList;
        
        private ServerPasswordDataTable tableServerPassword;
        
        private VerifyServerPasswordDataTable tableVerifyServerPassword;
        
        private ServerPassword7DataTable tableServerPassword7;
        
        private SetServerPasswordDataTable tableSetServerPassword;
        
        private OldPasswordDataTable tableOldPassword;
        
        private ServerPassword1DataTable tableServerPassword1;
        
        private NewPasswordDataTable tableNewPassword;
        
        private ServerPassword2DataTable tableServerPassword2;
        
        private CancelOrderDataTable tableCancelOrder;
        
        private ServerPassword6DataTable tableServerPassword6;
        
        private GetSessionLogDataTable tableGetSessionLog;
        
        private SetParameterDataTable tableSetParameter;
        
        private ServerPassword3DataTable tableServerPassword3;
        
        private SettingDataTable tableSetting;
        
        private ServerDataTable tableServer;
        
        private PauseServerDataTable tablePauseServer;
        
        private ServerPassword4DataTable tableServerPassword4;
        
        private ResumeServerDataTable tableResumeServer;
        
        private StopServerDataTable tableStopServer;
        
        private ServerPassword5DataTable tableServerPassword5;
        
        private DataRelation relationVerifyServerPassword_ServerPassword7;
        
        private DataRelation relationOldPassword_ServerPassword1;
        
        private DataRelation relationNewPassword_ServerPassword2;
        
        private DataRelation relationSetServerPassword_OldPassword;
        
        private DataRelation relationSetServerPassword_NewPassword;
        
        private DataRelation relationCancelOrder_ServerPassword6;
        
        private DataRelation relationSetting_Server;
        
        private DataRelation relationSetParameter_ServerPassword3;
        
        private DataRelation relationSetParameter_Setting;
        
        private DataRelation relationPauseServer_ServerPassword4;
        
        private DataRelation relationResumeServer_ServerPassword;
        
        private DataRelation relationStopServer_ServerPassword5;
        
        public ImageServerRequest() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ImageServerRequest(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["GetServerStatus"] != null)) {
                    this.Tables.Add(new GetServerStatusDataTable(ds.Tables["GetServerStatus"]));
                }
                if ((ds.Tables["GetParameterSettings"] != null)) {
                    this.Tables.Add(new GetParameterSettingsDataTable(ds.Tables["GetParameterSettings"]));
                }
                if ((ds.Tables["GetOrderList"] != null)) {
                    this.Tables.Add(new GetOrderListDataTable(ds.Tables["GetOrderList"]));
                }
                if ((ds.Tables["ServerPassword"] != null)) {
                    this.Tables.Add(new ServerPasswordDataTable(ds.Tables["ServerPassword"]));
                }
                if ((ds.Tables["VerifyServerPassword"] != null)) {
                    this.Tables.Add(new VerifyServerPasswordDataTable(ds.Tables["VerifyServerPassword"]));
                }
                if ((ds.Tables["ServerPassword7"] != null)) {
                    this.Tables.Add(new ServerPassword7DataTable(ds.Tables["ServerPassword7"]));
                }
                if ((ds.Tables["SetServerPassword"] != null)) {
                    this.Tables.Add(new SetServerPasswordDataTable(ds.Tables["SetServerPassword"]));
                }
                if ((ds.Tables["OldPassword"] != null)) {
                    this.Tables.Add(new OldPasswordDataTable(ds.Tables["OldPassword"]));
                }
                if ((ds.Tables["ServerPassword1"] != null)) {
                    this.Tables.Add(new ServerPassword1DataTable(ds.Tables["ServerPassword1"]));
                }
                if ((ds.Tables["NewPassword"] != null)) {
                    this.Tables.Add(new NewPasswordDataTable(ds.Tables["NewPassword"]));
                }
                if ((ds.Tables["ServerPassword2"] != null)) {
                    this.Tables.Add(new ServerPassword2DataTable(ds.Tables["ServerPassword2"]));
                }
                if ((ds.Tables["CancelOrder"] != null)) {
                    this.Tables.Add(new CancelOrderDataTable(ds.Tables["CancelOrder"]));
                }
                if ((ds.Tables["ServerPassword6"] != null)) {
                    this.Tables.Add(new ServerPassword6DataTable(ds.Tables["ServerPassword6"]));
                }
                if ((ds.Tables["GetSessionLog"] != null)) {
                    this.Tables.Add(new GetSessionLogDataTable(ds.Tables["GetSessionLog"]));
                }
                if ((ds.Tables["SetParameter"] != null)) {
                    this.Tables.Add(new SetParameterDataTable(ds.Tables["SetParameter"]));
                }
                if ((ds.Tables["ServerPassword3"] != null)) {
                    this.Tables.Add(new ServerPassword3DataTable(ds.Tables["ServerPassword3"]));
                }
                if ((ds.Tables["Setting"] != null)) {
                    this.Tables.Add(new SettingDataTable(ds.Tables["Setting"]));
                }
                if ((ds.Tables["Server"] != null)) {
                    this.Tables.Add(new ServerDataTable(ds.Tables["Server"]));
                }
                if ((ds.Tables["PauseServer"] != null)) {
                    this.Tables.Add(new PauseServerDataTable(ds.Tables["PauseServer"]));
                }
                if ((ds.Tables["ServerPassword4"] != null)) {
                    this.Tables.Add(new ServerPassword4DataTable(ds.Tables["ServerPassword4"]));
                }
                if ((ds.Tables["ResumeServer"] != null)) {
                    this.Tables.Add(new ResumeServerDataTable(ds.Tables["ResumeServer"]));
                }
                if ((ds.Tables["StopServer"] != null)) {
                    this.Tables.Add(new StopServerDataTable(ds.Tables["StopServer"]));
                }
                if ((ds.Tables["ServerPassword5"] != null)) {
                    this.Tables.Add(new ServerPassword5DataTable(ds.Tables["ServerPassword5"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetServerStatusDataTable GetServerStatus {
            get {
                return this.tableGetServerStatus;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetParameterSettingsDataTable GetParameterSettings {
            get {
                return this.tableGetParameterSettings;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetOrderListDataTable GetOrderList {
            get {
                return this.tableGetOrderList;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerPasswordDataTable ServerPassword {
            get {
                return this.tableServerPassword;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VerifyServerPasswordDataTable VerifyServerPassword {
            get {
                return this.tableVerifyServerPassword;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerPassword7DataTable ServerPassword7 {
            get {
                return this.tableServerPassword7;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SetServerPasswordDataTable SetServerPassword {
            get {
                return this.tableSetServerPassword;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OldPasswordDataTable OldPassword {
            get {
                return this.tableOldPassword;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerPassword1DataTable ServerPassword1 {
            get {
                return this.tableServerPassword1;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NewPasswordDataTable NewPassword {
            get {
                return this.tableNewPassword;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerPassword2DataTable ServerPassword2 {
            get {
                return this.tableServerPassword2;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CancelOrderDataTable CancelOrder {
            get {
                return this.tableCancelOrder;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerPassword6DataTable ServerPassword6 {
            get {
                return this.tableServerPassword6;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GetSessionLogDataTable GetSessionLog {
            get {
                return this.tableGetSessionLog;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SetParameterDataTable SetParameter {
            get {
                return this.tableSetParameter;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerPassword3DataTable ServerPassword3 {
            get {
                return this.tableServerPassword3;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SettingDataTable Setting {
            get {
                return this.tableSetting;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerDataTable Server {
            get {
                return this.tableServer;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PauseServerDataTable PauseServer {
            get {
                return this.tablePauseServer;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerPassword4DataTable ServerPassword4 {
            get {
                return this.tableServerPassword4;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ResumeServerDataTable ResumeServer {
            get {
                return this.tableResumeServer;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StopServerDataTable StopServer {
            get {
                return this.tableStopServer;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerPassword5DataTable ServerPassword5 {
            get {
                return this.tableServerPassword5;
            }
        }
        
        public override DataSet Clone() {
            ImageServerRequest cln = ((ImageServerRequest)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["GetServerStatus"] != null)) {
                this.Tables.Add(new GetServerStatusDataTable(ds.Tables["GetServerStatus"]));
            }
            if ((ds.Tables["GetParameterSettings"] != null)) {
                this.Tables.Add(new GetParameterSettingsDataTable(ds.Tables["GetParameterSettings"]));
            }
            if ((ds.Tables["GetOrderList"] != null)) {
                this.Tables.Add(new GetOrderListDataTable(ds.Tables["GetOrderList"]));
            }
            if ((ds.Tables["ServerPassword"] != null)) {
                this.Tables.Add(new ServerPasswordDataTable(ds.Tables["ServerPassword"]));
            }
            if ((ds.Tables["VerifyServerPassword"] != null)) {
                this.Tables.Add(new VerifyServerPasswordDataTable(ds.Tables["VerifyServerPassword"]));
            }
            if ((ds.Tables["ServerPassword7"] != null)) {
                this.Tables.Add(new ServerPassword7DataTable(ds.Tables["ServerPassword7"]));
            }
            if ((ds.Tables["SetServerPassword"] != null)) {
                this.Tables.Add(new SetServerPasswordDataTable(ds.Tables["SetServerPassword"]));
            }
            if ((ds.Tables["OldPassword"] != null)) {
                this.Tables.Add(new OldPasswordDataTable(ds.Tables["OldPassword"]));
            }
            if ((ds.Tables["ServerPassword1"] != null)) {
                this.Tables.Add(new ServerPassword1DataTable(ds.Tables["ServerPassword1"]));
            }
            if ((ds.Tables["NewPassword"] != null)) {
                this.Tables.Add(new NewPasswordDataTable(ds.Tables["NewPassword"]));
            }
            if ((ds.Tables["ServerPassword2"] != null)) {
                this.Tables.Add(new ServerPassword2DataTable(ds.Tables["ServerPassword2"]));
            }
            if ((ds.Tables["CancelOrder"] != null)) {
                this.Tables.Add(new CancelOrderDataTable(ds.Tables["CancelOrder"]));
            }
            if ((ds.Tables["ServerPassword6"] != null)) {
                this.Tables.Add(new ServerPassword6DataTable(ds.Tables["ServerPassword6"]));
            }
            if ((ds.Tables["GetSessionLog"] != null)) {
                this.Tables.Add(new GetSessionLogDataTable(ds.Tables["GetSessionLog"]));
            }
            if ((ds.Tables["SetParameter"] != null)) {
                this.Tables.Add(new SetParameterDataTable(ds.Tables["SetParameter"]));
            }
            if ((ds.Tables["ServerPassword3"] != null)) {
                this.Tables.Add(new ServerPassword3DataTable(ds.Tables["ServerPassword3"]));
            }
            if ((ds.Tables["Setting"] != null)) {
                this.Tables.Add(new SettingDataTable(ds.Tables["Setting"]));
            }
            if ((ds.Tables["Server"] != null)) {
                this.Tables.Add(new ServerDataTable(ds.Tables["Server"]));
            }
            if ((ds.Tables["PauseServer"] != null)) {
                this.Tables.Add(new PauseServerDataTable(ds.Tables["PauseServer"]));
            }
            if ((ds.Tables["ServerPassword4"] != null)) {
                this.Tables.Add(new ServerPassword4DataTable(ds.Tables["ServerPassword4"]));
            }
            if ((ds.Tables["ResumeServer"] != null)) {
                this.Tables.Add(new ResumeServerDataTable(ds.Tables["ResumeServer"]));
            }
            if ((ds.Tables["StopServer"] != null)) {
                this.Tables.Add(new StopServerDataTable(ds.Tables["StopServer"]));
            }
            if ((ds.Tables["ServerPassword5"] != null)) {
                this.Tables.Add(new ServerPassword5DataTable(ds.Tables["ServerPassword5"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableGetServerStatus = ((GetServerStatusDataTable)(this.Tables["GetServerStatus"]));
            if ((this.tableGetServerStatus != null)) {
                this.tableGetServerStatus.InitVars();
            }
            this.tableGetParameterSettings = ((GetParameterSettingsDataTable)(this.Tables["GetParameterSettings"]));
            if ((this.tableGetParameterSettings != null)) {
                this.tableGetParameterSettings.InitVars();
            }
            this.tableGetOrderList = ((GetOrderListDataTable)(this.Tables["GetOrderList"]));
            if ((this.tableGetOrderList != null)) {
                this.tableGetOrderList.InitVars();
            }
            this.tableServerPassword = ((ServerPasswordDataTable)(this.Tables["ServerPassword"]));
            if ((this.tableServerPassword != null)) {
                this.tableServerPassword.InitVars();
            }
            this.tableVerifyServerPassword = ((VerifyServerPasswordDataTable)(this.Tables["VerifyServerPassword"]));
            if ((this.tableVerifyServerPassword != null)) {
                this.tableVerifyServerPassword.InitVars();
            }
            this.tableServerPassword7 = ((ServerPassword7DataTable)(this.Tables["ServerPassword7"]));
            if ((this.tableServerPassword7 != null)) {
                this.tableServerPassword7.InitVars();
            }
            this.tableSetServerPassword = ((SetServerPasswordDataTable)(this.Tables["SetServerPassword"]));
            if ((this.tableSetServerPassword != null)) {
                this.tableSetServerPassword.InitVars();
            }
            this.tableOldPassword = ((OldPasswordDataTable)(this.Tables["OldPassword"]));
            if ((this.tableOldPassword != null)) {
                this.tableOldPassword.InitVars();
            }
            this.tableServerPassword1 = ((ServerPassword1DataTable)(this.Tables["ServerPassword1"]));
            if ((this.tableServerPassword1 != null)) {
                this.tableServerPassword1.InitVars();
            }
            this.tableNewPassword = ((NewPasswordDataTable)(this.Tables["NewPassword"]));
            if ((this.tableNewPassword != null)) {
                this.tableNewPassword.InitVars();
            }
            this.tableServerPassword2 = ((ServerPassword2DataTable)(this.Tables["ServerPassword2"]));
            if ((this.tableServerPassword2 != null)) {
                this.tableServerPassword2.InitVars();
            }
            this.tableCancelOrder = ((CancelOrderDataTable)(this.Tables["CancelOrder"]));
            if ((this.tableCancelOrder != null)) {
                this.tableCancelOrder.InitVars();
            }
            this.tableServerPassword6 = ((ServerPassword6DataTable)(this.Tables["ServerPassword6"]));
            if ((this.tableServerPassword6 != null)) {
                this.tableServerPassword6.InitVars();
            }
            this.tableGetSessionLog = ((GetSessionLogDataTable)(this.Tables["GetSessionLog"]));
            if ((this.tableGetSessionLog != null)) {
                this.tableGetSessionLog.InitVars();
            }
            this.tableSetParameter = ((SetParameterDataTable)(this.Tables["SetParameter"]));
            if ((this.tableSetParameter != null)) {
                this.tableSetParameter.InitVars();
            }
            this.tableServerPassword3 = ((ServerPassword3DataTable)(this.Tables["ServerPassword3"]));
            if ((this.tableServerPassword3 != null)) {
                this.tableServerPassword3.InitVars();
            }
            this.tableSetting = ((SettingDataTable)(this.Tables["Setting"]));
            if ((this.tableSetting != null)) {
                this.tableSetting.InitVars();
            }
            this.tableServer = ((ServerDataTable)(this.Tables["Server"]));
            if ((this.tableServer != null)) {
                this.tableServer.InitVars();
            }
            this.tablePauseServer = ((PauseServerDataTable)(this.Tables["PauseServer"]));
            if ((this.tablePauseServer != null)) {
                this.tablePauseServer.InitVars();
            }
            this.tableServerPassword4 = ((ServerPassword4DataTable)(this.Tables["ServerPassword4"]));
            if ((this.tableServerPassword4 != null)) {
                this.tableServerPassword4.InitVars();
            }
            this.tableResumeServer = ((ResumeServerDataTable)(this.Tables["ResumeServer"]));
            if ((this.tableResumeServer != null)) {
                this.tableResumeServer.InitVars();
            }
            this.tableStopServer = ((StopServerDataTable)(this.Tables["StopServer"]));
            if ((this.tableStopServer != null)) {
                this.tableStopServer.InitVars();
            }
            this.tableServerPassword5 = ((ServerPassword5DataTable)(this.Tables["ServerPassword5"]));
            if ((this.tableServerPassword5 != null)) {
                this.tableServerPassword5.InitVars();
            }
            this.relationVerifyServerPassword_ServerPassword7 = this.Relations["VerifyServerPassword_ServerPassword7"];
            this.relationOldPassword_ServerPassword1 = this.Relations["OldPassword_ServerPassword1"];
            this.relationNewPassword_ServerPassword2 = this.Relations["NewPassword_ServerPassword2"];
            this.relationSetServerPassword_OldPassword = this.Relations["SetServerPassword_OldPassword"];
            this.relationSetServerPassword_NewPassword = this.Relations["SetServerPassword_NewPassword"];
            this.relationCancelOrder_ServerPassword6 = this.Relations["CancelOrder_ServerPassword6"];
            this.relationSetting_Server = this.Relations["Setting_Server"];
            this.relationSetParameter_ServerPassword3 = this.Relations["SetParameter_ServerPassword3"];
            this.relationSetParameter_Setting = this.Relations["SetParameter_Setting"];
            this.relationPauseServer_ServerPassword4 = this.Relations["PauseServer_ServerPassword4"];
            this.relationResumeServer_ServerPassword = this.Relations["ResumeServer_ServerPassword"];
            this.relationStopServer_ServerPassword5 = this.Relations["StopServer_ServerPassword5"];
        }
        
        private void InitClass() {
            this.DataSetName = "ImageServerRequest";
            this.Prefix = "";
            this.Namespace = "";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableGetServerStatus = new GetServerStatusDataTable();
            this.Tables.Add(this.tableGetServerStatus);
            this.tableGetParameterSettings = new GetParameterSettingsDataTable();
            this.Tables.Add(this.tableGetParameterSettings);
            this.tableGetOrderList = new GetOrderListDataTable();
            this.Tables.Add(this.tableGetOrderList);
            this.tableServerPassword = new ServerPasswordDataTable();
            this.Tables.Add(this.tableServerPassword);
            this.tableVerifyServerPassword = new VerifyServerPasswordDataTable();
            this.Tables.Add(this.tableVerifyServerPassword);
            this.tableServerPassword7 = new ServerPassword7DataTable();
            this.Tables.Add(this.tableServerPassword7);
            this.tableSetServerPassword = new SetServerPasswordDataTable();
            this.Tables.Add(this.tableSetServerPassword);
            this.tableOldPassword = new OldPasswordDataTable();
            this.Tables.Add(this.tableOldPassword);
            this.tableServerPassword1 = new ServerPassword1DataTable();
            this.Tables.Add(this.tableServerPassword1);
            this.tableNewPassword = new NewPasswordDataTable();
            this.Tables.Add(this.tableNewPassword);
            this.tableServerPassword2 = new ServerPassword2DataTable();
            this.Tables.Add(this.tableServerPassword2);
            this.tableCancelOrder = new CancelOrderDataTable();
            this.Tables.Add(this.tableCancelOrder);
            this.tableServerPassword6 = new ServerPassword6DataTable();
            this.Tables.Add(this.tableServerPassword6);
            this.tableGetSessionLog = new GetSessionLogDataTable();
            this.Tables.Add(this.tableGetSessionLog);
            this.tableSetParameter = new SetParameterDataTable();
            this.Tables.Add(this.tableSetParameter);
            this.tableServerPassword3 = new ServerPassword3DataTable();
            this.Tables.Add(this.tableServerPassword3);
            this.tableSetting = new SettingDataTable();
            this.Tables.Add(this.tableSetting);
            this.tableServer = new ServerDataTable();
            this.Tables.Add(this.tableServer);
            this.tablePauseServer = new PauseServerDataTable();
            this.Tables.Add(this.tablePauseServer);
            this.tableServerPassword4 = new ServerPassword4DataTable();
            this.Tables.Add(this.tableServerPassword4);
            this.tableResumeServer = new ResumeServerDataTable();
            this.Tables.Add(this.tableResumeServer);
            this.tableStopServer = new StopServerDataTable();
            this.Tables.Add(this.tableStopServer);
            this.tableServerPassword5 = new ServerPassword5DataTable();
            this.Tables.Add(this.tableServerPassword5);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("ResumeServer_ServerPassword", new DataColumn[] {
                        this.tableResumeServer.ResumeServer_IdColumn}, new DataColumn[] {
                        this.tableServerPassword.ResumeServer_IdColumn});
            this.tableServerPassword.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("VerifyServerPassword_ServerPassword7", new DataColumn[] {
                        this.tableVerifyServerPassword.VerifyServerPassword_IdColumn}, new DataColumn[] {
                        this.tableServerPassword7.VerifyServerPassword_IdColumn});
            this.tableServerPassword7.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SetServerPassword_OldPassword", new DataColumn[] {
                        this.tableSetServerPassword.SetServerPassword_IdColumn}, new DataColumn[] {
                        this.tableOldPassword.SetServerPassword_IdColumn});
            this.tableOldPassword.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("OldPassword_ServerPassword1", new DataColumn[] {
                        this.tableOldPassword.OldPassword_IdColumn}, new DataColumn[] {
                        this.tableServerPassword1.OldPassword_IdColumn});
            this.tableServerPassword1.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SetServerPassword_NewPassword", new DataColumn[] {
                        this.tableSetServerPassword.SetServerPassword_IdColumn}, new DataColumn[] {
                        this.tableNewPassword.SetServerPassword_IdColumn});
            this.tableNewPassword.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("NewPassword_ServerPassword2", new DataColumn[] {
                        this.tableNewPassword.NewPassword_IdColumn}, new DataColumn[] {
                        this.tableServerPassword2.NewPassword_IdColumn});
            this.tableServerPassword2.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("CancelOrder_ServerPassword6", new DataColumn[] {
                        this.tableCancelOrder.CancelOrder_IdColumn}, new DataColumn[] {
                        this.tableServerPassword6.CancelOrder_IdColumn});
            this.tableServerPassword6.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SetParameter_ServerPassword3", new DataColumn[] {
                        this.tableSetParameter.SetParameter_IdColumn}, new DataColumn[] {
                        this.tableServerPassword3.SetParameter_IdColumn});
            this.tableServerPassword3.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SetParameter_Setting", new DataColumn[] {
                        this.tableSetParameter.SetParameter_IdColumn}, new DataColumn[] {
                        this.tableSetting.SetParameter_IdColumn});
            this.tableSetting.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Setting_Server", new DataColumn[] {
                        this.tableSetting.Setting_IdColumn}, new DataColumn[] {
                        this.tableServer.Setting_IdColumn});
            this.tableServer.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("PauseServer_ServerPassword4", new DataColumn[] {
                        this.tablePauseServer.PauseServer_IdColumn}, new DataColumn[] {
                        this.tableServerPassword4.PauseServer_IdColumn});
            this.tableServerPassword4.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("StopServer_ServerPassword5", new DataColumn[] {
                        this.tableStopServer.StopServer_IdColumn}, new DataColumn[] {
                        this.tableServerPassword5.StopServer_IdColumn});
            this.tableServerPassword5.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationVerifyServerPassword_ServerPassword7 = new DataRelation("VerifyServerPassword_ServerPassword7", new DataColumn[] {
                        this.tableVerifyServerPassword.VerifyServerPassword_IdColumn}, new DataColumn[] {
                        this.tableServerPassword7.VerifyServerPassword_IdColumn}, false);
            this.relationVerifyServerPassword_ServerPassword7.Nested = true;
            this.Relations.Add(this.relationVerifyServerPassword_ServerPassword7);
            this.relationOldPassword_ServerPassword1 = new DataRelation("OldPassword_ServerPassword1", new DataColumn[] {
                        this.tableOldPassword.OldPassword_IdColumn}, new DataColumn[] {
                        this.tableServerPassword1.OldPassword_IdColumn}, false);
            this.relationOldPassword_ServerPassword1.Nested = true;
            this.Relations.Add(this.relationOldPassword_ServerPassword1);
            this.relationNewPassword_ServerPassword2 = new DataRelation("NewPassword_ServerPassword2", new DataColumn[] {
                        this.tableNewPassword.NewPassword_IdColumn}, new DataColumn[] {
                        this.tableServerPassword2.NewPassword_IdColumn}, false);
            this.relationNewPassword_ServerPassword2.Nested = true;
            this.Relations.Add(this.relationNewPassword_ServerPassword2);
            this.relationSetServerPassword_OldPassword = new DataRelation("SetServerPassword_OldPassword", new DataColumn[] {
                        this.tableSetServerPassword.SetServerPassword_IdColumn}, new DataColumn[] {
                        this.tableOldPassword.SetServerPassword_IdColumn}, false);
            this.relationSetServerPassword_OldPassword.Nested = true;
            this.Relations.Add(this.relationSetServerPassword_OldPassword);
            this.relationSetServerPassword_NewPassword = new DataRelation("SetServerPassword_NewPassword", new DataColumn[] {
                        this.tableSetServerPassword.SetServerPassword_IdColumn}, new DataColumn[] {
                        this.tableNewPassword.SetServerPassword_IdColumn}, false);
            this.relationSetServerPassword_NewPassword.Nested = true;
            this.Relations.Add(this.relationSetServerPassword_NewPassword);
            this.relationCancelOrder_ServerPassword6 = new DataRelation("CancelOrder_ServerPassword6", new DataColumn[] {
                        this.tableCancelOrder.CancelOrder_IdColumn}, new DataColumn[] {
                        this.tableServerPassword6.CancelOrder_IdColumn}, false);
            this.relationCancelOrder_ServerPassword6.Nested = true;
            this.Relations.Add(this.relationCancelOrder_ServerPassword6);
            this.relationSetting_Server = new DataRelation("Setting_Server", new DataColumn[] {
                        this.tableSetting.Setting_IdColumn}, new DataColumn[] {
                        this.tableServer.Setting_IdColumn}, false);
            this.relationSetting_Server.Nested = true;
            this.Relations.Add(this.relationSetting_Server);
            this.relationSetParameter_ServerPassword3 = new DataRelation("SetParameter_ServerPassword3", new DataColumn[] {
                        this.tableSetParameter.SetParameter_IdColumn}, new DataColumn[] {
                        this.tableServerPassword3.SetParameter_IdColumn}, false);
            this.relationSetParameter_ServerPassword3.Nested = true;
            this.Relations.Add(this.relationSetParameter_ServerPassword3);
            this.relationSetParameter_Setting = new DataRelation("SetParameter_Setting", new DataColumn[] {
                        this.tableSetParameter.SetParameter_IdColumn}, new DataColumn[] {
                        this.tableSetting.SetParameter_IdColumn}, false);
            this.relationSetParameter_Setting.Nested = true;
            this.Relations.Add(this.relationSetParameter_Setting);
            this.relationPauseServer_ServerPassword4 = new DataRelation("PauseServer_ServerPassword4", new DataColumn[] {
                        this.tablePauseServer.PauseServer_IdColumn}, new DataColumn[] {
                        this.tableServerPassword4.PauseServer_IdColumn}, false);
            this.relationPauseServer_ServerPassword4.Nested = true;
            this.Relations.Add(this.relationPauseServer_ServerPassword4);
            this.relationResumeServer_ServerPassword = new DataRelation("ResumeServer_ServerPassword", new DataColumn[] {
                        this.tableResumeServer.ResumeServer_IdColumn}, new DataColumn[] {
                        this.tableServerPassword.ResumeServer_IdColumn}, false);
            this.relationResumeServer_ServerPassword.Nested = true;
            this.Relations.Add(this.relationResumeServer_ServerPassword);
            this.relationStopServer_ServerPassword5 = new DataRelation("StopServer_ServerPassword5", new DataColumn[] {
                        this.tableStopServer.StopServer_IdColumn}, new DataColumn[] {
                        this.tableServerPassword5.StopServer_IdColumn}, false);
            this.relationStopServer_ServerPassword5.Nested = true;
            this.Relations.Add(this.relationStopServer_ServerPassword5);
        }
        
        private bool ShouldSerializeGetServerStatus() {
            return false;
        }
        
        private bool ShouldSerializeGetParameterSettings() {
            return false;
        }
        
        private bool ShouldSerializeGetOrderList() {
            return false;
        }
        
        private bool ShouldSerializeServerPassword() {
            return false;
        }
        
        private bool ShouldSerializeVerifyServerPassword() {
            return false;
        }
        
        private bool ShouldSerializeServerPassword7() {
            return false;
        }
        
        private bool ShouldSerializeSetServerPassword() {
            return false;
        }
        
        private bool ShouldSerializeOldPassword() {
            return false;
        }
        
        private bool ShouldSerializeServerPassword1() {
            return false;
        }
        
        private bool ShouldSerializeNewPassword() {
            return false;
        }
        
        private bool ShouldSerializeServerPassword2() {
            return false;
        }
        
        private bool ShouldSerializeCancelOrder() {
            return false;
        }
        
        private bool ShouldSerializeServerPassword6() {
            return false;
        }
        
        private bool ShouldSerializeGetSessionLog() {
            return false;
        }
        
        private bool ShouldSerializeSetParameter() {
            return false;
        }
        
        private bool ShouldSerializeServerPassword3() {
            return false;
        }
        
        private bool ShouldSerializeSetting() {
            return false;
        }
        
        private bool ShouldSerializeServer() {
            return false;
        }
        
        private bool ShouldSerializePauseServer() {
            return false;
        }
        
        private bool ShouldSerializeServerPassword4() {
            return false;
        }
        
        private bool ShouldSerializeResumeServer() {
            return false;
        }
        
        private bool ShouldSerializeStopServer() {
            return false;
        }
        
        private bool ShouldSerializeServerPassword5() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void GetServerStatusRowChangeEventHandler(object sender, GetServerStatusRowChangeEvent e);
        
        public delegate void GetParameterSettingsRowChangeEventHandler(object sender, GetParameterSettingsRowChangeEvent e);
        
        public delegate void GetOrderListRowChangeEventHandler(object sender, GetOrderListRowChangeEvent e);
        
        public delegate void ServerPasswordRowChangeEventHandler(object sender, ServerPasswordRowChangeEvent e);
        
        public delegate void VerifyServerPasswordRowChangeEventHandler(object sender, VerifyServerPasswordRowChangeEvent e);
        
        public delegate void ServerPassword7RowChangeEventHandler(object sender, ServerPassword7RowChangeEvent e);
        
        public delegate void SetServerPasswordRowChangeEventHandler(object sender, SetServerPasswordRowChangeEvent e);
        
        public delegate void OldPasswordRowChangeEventHandler(object sender, OldPasswordRowChangeEvent e);
        
        public delegate void ServerPassword1RowChangeEventHandler(object sender, ServerPassword1RowChangeEvent e);
        
        public delegate void NewPasswordRowChangeEventHandler(object sender, NewPasswordRowChangeEvent e);
        
        public delegate void ServerPassword2RowChangeEventHandler(object sender, ServerPassword2RowChangeEvent e);
        
        public delegate void CancelOrderRowChangeEventHandler(object sender, CancelOrderRowChangeEvent e);
        
        public delegate void ServerPassword6RowChangeEventHandler(object sender, ServerPassword6RowChangeEvent e);
        
        public delegate void GetSessionLogRowChangeEventHandler(object sender, GetSessionLogRowChangeEvent e);
        
        public delegate void SetParameterRowChangeEventHandler(object sender, SetParameterRowChangeEvent e);
        
        public delegate void ServerPassword3RowChangeEventHandler(object sender, ServerPassword3RowChangeEvent e);
        
        public delegate void SettingRowChangeEventHandler(object sender, SettingRowChangeEvent e);
        
        public delegate void ServerRowChangeEventHandler(object sender, ServerRowChangeEvent e);
        
        public delegate void PauseServerRowChangeEventHandler(object sender, PauseServerRowChangeEvent e);
        
        public delegate void ServerPassword4RowChangeEventHandler(object sender, ServerPassword4RowChangeEvent e);
        
        public delegate void ResumeServerRowChangeEventHandler(object sender, ResumeServerRowChangeEvent e);
        
        public delegate void StopServerRowChangeEventHandler(object sender, StopServerRowChangeEvent e);
        
        public delegate void ServerPassword5RowChangeEventHandler(object sender, ServerPassword5RowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GetServerStatusDataTable : DataTable, System.Collections.IEnumerable {
            
            internal GetServerStatusDataTable() : 
                    base("GetServerStatus") {
                this.InitClass();
            }
            
            internal GetServerStatusDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public GetServerStatusRow this[int index] {
                get {
                    return ((GetServerStatusRow)(this.Rows[index]));
                }
            }
            
            public event GetServerStatusRowChangeEventHandler GetServerStatusRowChanged;
            
            public event GetServerStatusRowChangeEventHandler GetServerStatusRowChanging;
            
            public event GetServerStatusRowChangeEventHandler GetServerStatusRowDeleted;
            
            public event GetServerStatusRowChangeEventHandler GetServerStatusRowDeleting;
            
            public void AddGetServerStatusRow(GetServerStatusRow row) {
                this.Rows.Add(row);
            }
            
            public GetServerStatusRow AddGetServerStatusRow() {
                GetServerStatusRow rowGetServerStatusRow = ((GetServerStatusRow)(this.NewRow()));
                rowGetServerStatusRow.ItemArray = new object[0];
                this.Rows.Add(rowGetServerStatusRow);
                return rowGetServerStatusRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                GetServerStatusDataTable cln = ((GetServerStatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new GetServerStatusDataTable();
            }
            
            internal void InitVars() {
            }
            
            private void InitClass() {
            }
            
            public GetServerStatusRow NewGetServerStatusRow() {
                return ((GetServerStatusRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new GetServerStatusRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(GetServerStatusRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetServerStatusRowChanged != null)) {
                    this.GetServerStatusRowChanged(this, new GetServerStatusRowChangeEvent(((GetServerStatusRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetServerStatusRowChanging != null)) {
                    this.GetServerStatusRowChanging(this, new GetServerStatusRowChangeEvent(((GetServerStatusRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetServerStatusRowDeleted != null)) {
                    this.GetServerStatusRowDeleted(this, new GetServerStatusRowChangeEvent(((GetServerStatusRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetServerStatusRowDeleting != null)) {
                    this.GetServerStatusRowDeleting(this, new GetServerStatusRowChangeEvent(((GetServerStatusRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGetServerStatusRow(GetServerStatusRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GetServerStatusRow : DataRow {
            
            private GetServerStatusDataTable tableGetServerStatus;
            
            internal GetServerStatusRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetServerStatus = ((GetServerStatusDataTable)(this.Table));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GetServerStatusRowChangeEvent : EventArgs {
            
            private GetServerStatusRow eventRow;
            
            private DataRowAction eventAction;
            
            public GetServerStatusRowChangeEvent(GetServerStatusRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public GetServerStatusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GetParameterSettingsDataTable : DataTable, System.Collections.IEnumerable {
            
            internal GetParameterSettingsDataTable() : 
                    base("GetParameterSettings") {
                this.InitClass();
            }
            
            internal GetParameterSettingsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public GetParameterSettingsRow this[int index] {
                get {
                    return ((GetParameterSettingsRow)(this.Rows[index]));
                }
            }
            
            public event GetParameterSettingsRowChangeEventHandler GetParameterSettingsRowChanged;
            
            public event GetParameterSettingsRowChangeEventHandler GetParameterSettingsRowChanging;
            
            public event GetParameterSettingsRowChangeEventHandler GetParameterSettingsRowDeleted;
            
            public event GetParameterSettingsRowChangeEventHandler GetParameterSettingsRowDeleting;
            
            public void AddGetParameterSettingsRow(GetParameterSettingsRow row) {
                this.Rows.Add(row);
            }
            
            public GetParameterSettingsRow AddGetParameterSettingsRow() {
                GetParameterSettingsRow rowGetParameterSettingsRow = ((GetParameterSettingsRow)(this.NewRow()));
                rowGetParameterSettingsRow.ItemArray = new object[0];
                this.Rows.Add(rowGetParameterSettingsRow);
                return rowGetParameterSettingsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                GetParameterSettingsDataTable cln = ((GetParameterSettingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new GetParameterSettingsDataTable();
            }
            
            internal void InitVars() {
            }
            
            private void InitClass() {
            }
            
            public GetParameterSettingsRow NewGetParameterSettingsRow() {
                return ((GetParameterSettingsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new GetParameterSettingsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(GetParameterSettingsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetParameterSettingsRowChanged != null)) {
                    this.GetParameterSettingsRowChanged(this, new GetParameterSettingsRowChangeEvent(((GetParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetParameterSettingsRowChanging != null)) {
                    this.GetParameterSettingsRowChanging(this, new GetParameterSettingsRowChangeEvent(((GetParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetParameterSettingsRowDeleted != null)) {
                    this.GetParameterSettingsRowDeleted(this, new GetParameterSettingsRowChangeEvent(((GetParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetParameterSettingsRowDeleting != null)) {
                    this.GetParameterSettingsRowDeleting(this, new GetParameterSettingsRowChangeEvent(((GetParameterSettingsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGetParameterSettingsRow(GetParameterSettingsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GetParameterSettingsRow : DataRow {
            
            private GetParameterSettingsDataTable tableGetParameterSettings;
            
            internal GetParameterSettingsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetParameterSettings = ((GetParameterSettingsDataTable)(this.Table));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GetParameterSettingsRowChangeEvent : EventArgs {
            
            private GetParameterSettingsRow eventRow;
            
            private DataRowAction eventAction;
            
            public GetParameterSettingsRowChangeEvent(GetParameterSettingsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public GetParameterSettingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GetOrderListDataTable : DataTable, System.Collections.IEnumerable {
            
            internal GetOrderListDataTable() : 
                    base("GetOrderList") {
                this.InitClass();
            }
            
            internal GetOrderListDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public GetOrderListRow this[int index] {
                get {
                    return ((GetOrderListRow)(this.Rows[index]));
                }
            }
            
            public event GetOrderListRowChangeEventHandler GetOrderListRowChanged;
            
            public event GetOrderListRowChangeEventHandler GetOrderListRowChanging;
            
            public event GetOrderListRowChangeEventHandler GetOrderListRowDeleted;
            
            public event GetOrderListRowChangeEventHandler GetOrderListRowDeleting;
            
            public void AddGetOrderListRow(GetOrderListRow row) {
                this.Rows.Add(row);
            }
            
            public GetOrderListRow AddGetOrderListRow() {
                GetOrderListRow rowGetOrderListRow = ((GetOrderListRow)(this.NewRow()));
                rowGetOrderListRow.ItemArray = new object[0];
                this.Rows.Add(rowGetOrderListRow);
                return rowGetOrderListRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                GetOrderListDataTable cln = ((GetOrderListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new GetOrderListDataTable();
            }
            
            internal void InitVars() {
            }
            
            private void InitClass() {
            }
            
            public GetOrderListRow NewGetOrderListRow() {
                return ((GetOrderListRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new GetOrderListRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(GetOrderListRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetOrderListRowChanged != null)) {
                    this.GetOrderListRowChanged(this, new GetOrderListRowChangeEvent(((GetOrderListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetOrderListRowChanging != null)) {
                    this.GetOrderListRowChanging(this, new GetOrderListRowChangeEvent(((GetOrderListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetOrderListRowDeleted != null)) {
                    this.GetOrderListRowDeleted(this, new GetOrderListRowChangeEvent(((GetOrderListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetOrderListRowDeleting != null)) {
                    this.GetOrderListRowDeleting(this, new GetOrderListRowChangeEvent(((GetOrderListRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGetOrderListRow(GetOrderListRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GetOrderListRow : DataRow {
            
            private GetOrderListDataTable tableGetOrderList;
            
            internal GetOrderListRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetOrderList = ((GetOrderListDataTable)(this.Table));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GetOrderListRowChangeEvent : EventArgs {
            
            private GetOrderListRow eventRow;
            
            private DataRowAction eventAction;
            
            public GetOrderListRowChangeEvent(GetOrderListRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public GetOrderListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerPasswordDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnEncodedPassword;
            
            private DataColumn columnEncodeNumber;
            
            private DataColumn columnResumeServer_Id;
            
            internal ServerPasswordDataTable() : 
                    base("ServerPassword") {
                this.InitClass();
            }
            
            internal ServerPasswordDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn EncodedPasswordColumn {
                get {
                    return this.columnEncodedPassword;
                }
            }
            
            internal DataColumn EncodeNumberColumn {
                get {
                    return this.columnEncodeNumber;
                }
            }
            
            internal DataColumn ResumeServer_IdColumn {
                get {
                    return this.columnResumeServer_Id;
                }
            }
            
            public ServerPasswordRow this[int index] {
                get {
                    return ((ServerPasswordRow)(this.Rows[index]));
                }
            }
            
            public event ServerPasswordRowChangeEventHandler ServerPasswordRowChanged;
            
            public event ServerPasswordRowChangeEventHandler ServerPasswordRowChanging;
            
            public event ServerPasswordRowChangeEventHandler ServerPasswordRowDeleted;
            
            public event ServerPasswordRowChangeEventHandler ServerPasswordRowDeleting;
            
            public void AddServerPasswordRow(ServerPasswordRow row) {
                this.Rows.Add(row);
            }
            
            public ServerPasswordRow AddServerPasswordRow(string EncodedPassword, string EncodeNumber, ResumeServerRow parentResumeServerRowByResumeServer_ServerPassword) {
                ServerPasswordRow rowServerPasswordRow = ((ServerPasswordRow)(this.NewRow()));
                rowServerPasswordRow.ItemArray = new object[] {
                        EncodedPassword,
                        EncodeNumber,
                        parentResumeServerRowByResumeServer_ServerPassword[0]};
                this.Rows.Add(rowServerPasswordRow);
                return rowServerPasswordRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ServerPasswordDataTable cln = ((ServerPasswordDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ServerPasswordDataTable();
            }
            
            internal void InitVars() {
                this.columnEncodedPassword = this.Columns["EncodedPassword"];
                this.columnEncodeNumber = this.Columns["EncodeNumber"];
                this.columnResumeServer_Id = this.Columns["ResumeServer_Id"];
            }
            
            private void InitClass() {
                this.columnEncodedPassword = new DataColumn("EncodedPassword", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnEncodedPassword);
                this.columnEncodeNumber = new DataColumn("EncodeNumber", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnEncodeNumber);
                this.columnResumeServer_Id = new DataColumn("ResumeServer_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnResumeServer_Id);
                this.columnEncodedPassword.AllowDBNull = false;
                this.columnEncodedPassword.Namespace = "";
                this.columnEncodeNumber.Namespace = "";
                this.columnEncodeNumber.DefaultValue = "7";
            }
            
            public ServerPasswordRow NewServerPasswordRow() {
                return ((ServerPasswordRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ServerPasswordRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ServerPasswordRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerPasswordRowChanged != null)) {
                    this.ServerPasswordRowChanged(this, new ServerPasswordRowChangeEvent(((ServerPasswordRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerPasswordRowChanging != null)) {
                    this.ServerPasswordRowChanging(this, new ServerPasswordRowChangeEvent(((ServerPasswordRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerPasswordRowDeleted != null)) {
                    this.ServerPasswordRowDeleted(this, new ServerPasswordRowChangeEvent(((ServerPasswordRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerPasswordRowDeleting != null)) {
                    this.ServerPasswordRowDeleting(this, new ServerPasswordRowChangeEvent(((ServerPasswordRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveServerPasswordRow(ServerPasswordRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerPasswordRow : DataRow {
            
            private ServerPasswordDataTable tableServerPassword;
            
            internal ServerPasswordRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerPassword = ((ServerPasswordDataTable)(this.Table));
            }
            
            public string EncodedPassword {
                get {
                    return ((string)(this[this.tableServerPassword.EncodedPasswordColumn]));
                }
                set {
                    this[this.tableServerPassword.EncodedPasswordColumn] = value;
                }
            }
            
            public string EncodeNumber {
                get {
                    try {
                        return ((string)(this[this.tableServerPassword.EncodeNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerPassword.EncodeNumberColumn] = value;
                }
            }
            
            public ResumeServerRow ResumeServerRow {
                get {
                    return ((ResumeServerRow)(this.GetParentRow(this.Table.ParentRelations["ResumeServer_ServerPassword"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ResumeServer_ServerPassword"]);
                }
            }
            
            public bool IsEncodeNumberNull() {
                return this.IsNull(this.tableServerPassword.EncodeNumberColumn);
            }
            
            public void SetEncodeNumberNull() {
                this[this.tableServerPassword.EncodeNumberColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerPasswordRowChangeEvent : EventArgs {
            
            private ServerPasswordRow eventRow;
            
            private DataRowAction eventAction;
            
            public ServerPasswordRowChangeEvent(ServerPasswordRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ServerPasswordRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VerifyServerPasswordDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnVerifyServerPassword_Id;
            
            internal VerifyServerPasswordDataTable() : 
                    base("VerifyServerPassword") {
                this.InitClass();
            }
            
            internal VerifyServerPasswordDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn VerifyServerPassword_IdColumn {
                get {
                    return this.columnVerifyServerPassword_Id;
                }
            }
            
            public VerifyServerPasswordRow this[int index] {
                get {
                    return ((VerifyServerPasswordRow)(this.Rows[index]));
                }
            }
            
            public event VerifyServerPasswordRowChangeEventHandler VerifyServerPasswordRowChanged;
            
            public event VerifyServerPasswordRowChangeEventHandler VerifyServerPasswordRowChanging;
            
            public event VerifyServerPasswordRowChangeEventHandler VerifyServerPasswordRowDeleted;
            
            public event VerifyServerPasswordRowChangeEventHandler VerifyServerPasswordRowDeleting;
            
            public void AddVerifyServerPasswordRow(VerifyServerPasswordRow row) {
                this.Rows.Add(row);
            }
            
            public VerifyServerPasswordRow AddVerifyServerPasswordRow() {
                VerifyServerPasswordRow rowVerifyServerPasswordRow = ((VerifyServerPasswordRow)(this.NewRow()));
                rowVerifyServerPasswordRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowVerifyServerPasswordRow);
                return rowVerifyServerPasswordRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                VerifyServerPasswordDataTable cln = ((VerifyServerPasswordDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new VerifyServerPasswordDataTable();
            }
            
            internal void InitVars() {
                this.columnVerifyServerPassword_Id = this.Columns["VerifyServerPassword_Id"];
            }
            
            private void InitClass() {
                this.columnVerifyServerPassword_Id = new DataColumn("VerifyServerPassword_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnVerifyServerPassword_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnVerifyServerPassword_Id}, true));
                this.columnVerifyServerPassword_Id.AutoIncrement = true;
                this.columnVerifyServerPassword_Id.AllowDBNull = false;
                this.columnVerifyServerPassword_Id.Unique = true;
            }
            
            public VerifyServerPasswordRow NewVerifyServerPasswordRow() {
                return ((VerifyServerPasswordRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new VerifyServerPasswordRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(VerifyServerPasswordRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VerifyServerPasswordRowChanged != null)) {
                    this.VerifyServerPasswordRowChanged(this, new VerifyServerPasswordRowChangeEvent(((VerifyServerPasswordRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VerifyServerPasswordRowChanging != null)) {
                    this.VerifyServerPasswordRowChanging(this, new VerifyServerPasswordRowChangeEvent(((VerifyServerPasswordRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VerifyServerPasswordRowDeleted != null)) {
                    this.VerifyServerPasswordRowDeleted(this, new VerifyServerPasswordRowChangeEvent(((VerifyServerPasswordRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VerifyServerPasswordRowDeleting != null)) {
                    this.VerifyServerPasswordRowDeleting(this, new VerifyServerPasswordRowChangeEvent(((VerifyServerPasswordRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveVerifyServerPasswordRow(VerifyServerPasswordRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VerifyServerPasswordRow : DataRow {
            
            private VerifyServerPasswordDataTable tableVerifyServerPassword;
            
            internal VerifyServerPasswordRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableVerifyServerPassword = ((VerifyServerPasswordDataTable)(this.Table));
            }
            
            public ServerPassword7Row[] GetServerPassword7Rows() {
                return ((ServerPassword7Row[])(this.GetChildRows(this.Table.ChildRelations["VerifyServerPassword_ServerPassword7"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class VerifyServerPasswordRowChangeEvent : EventArgs {
            
            private VerifyServerPasswordRow eventRow;
            
            private DataRowAction eventAction;
            
            public VerifyServerPasswordRowChangeEvent(VerifyServerPasswordRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public VerifyServerPasswordRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerPassword7DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnEncodedPassword;
            
            private DataColumn columnEncodeNumber;
            
            private DataColumn columnVerifyServerPassword_Id;
            
            internal ServerPassword7DataTable() : 
                    base("ServerPassword7") {
                this.InitClass();
            }
            
            internal ServerPassword7DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn EncodedPasswordColumn {
                get {
                    return this.columnEncodedPassword;
                }
            }
            
            internal DataColumn EncodeNumberColumn {
                get {
                    return this.columnEncodeNumber;
                }
            }
            
            internal DataColumn VerifyServerPassword_IdColumn {
                get {
                    return this.columnVerifyServerPassword_Id;
                }
            }
            
            public ServerPassword7Row this[int index] {
                get {
                    return ((ServerPassword7Row)(this.Rows[index]));
                }
            }
            
            public event ServerPassword7RowChangeEventHandler ServerPassword7RowChanged;
            
            public event ServerPassword7RowChangeEventHandler ServerPassword7RowChanging;
            
            public event ServerPassword7RowChangeEventHandler ServerPassword7RowDeleted;
            
            public event ServerPassword7RowChangeEventHandler ServerPassword7RowDeleting;
            
            public void AddServerPassword7Row(ServerPassword7Row row) {
                this.Rows.Add(row);
            }
            
            public ServerPassword7Row AddServerPassword7Row(string EncodedPassword, string EncodeNumber, VerifyServerPasswordRow parentVerifyServerPasswordRowByVerifyServerPassword_ServerPassword7) {
                ServerPassword7Row rowServerPassword7Row = ((ServerPassword7Row)(this.NewRow()));
                rowServerPassword7Row.ItemArray = new object[] {
                        EncodedPassword,
                        EncodeNumber,
                        parentVerifyServerPasswordRowByVerifyServerPassword_ServerPassword7[0]};
                this.Rows.Add(rowServerPassword7Row);
                return rowServerPassword7Row;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ServerPassword7DataTable cln = ((ServerPassword7DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ServerPassword7DataTable();
            }
            
            internal void InitVars() {
                this.columnEncodedPassword = this.Columns["EncodedPassword"];
                this.columnEncodeNumber = this.Columns["EncodeNumber"];
                this.columnVerifyServerPassword_Id = this.Columns["VerifyServerPassword_Id"];
            }
            
            private void InitClass() {
                this.columnEncodedPassword = new DataColumn("EncodedPassword", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnEncodedPassword);
                this.columnEncodeNumber = new DataColumn("EncodeNumber", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnEncodeNumber);
                this.columnVerifyServerPassword_Id = new DataColumn("VerifyServerPassword_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnVerifyServerPassword_Id);
                this.columnEncodedPassword.AllowDBNull = false;
                this.columnEncodedPassword.Namespace = "";
                this.columnEncodeNumber.Namespace = "";
                this.columnEncodeNumber.DefaultValue = "7";
            }
            
            public ServerPassword7Row NewServerPassword7Row() {
                return ((ServerPassword7Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ServerPassword7Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ServerPassword7Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerPassword7RowChanged != null)) {
                    this.ServerPassword7RowChanged(this, new ServerPassword7RowChangeEvent(((ServerPassword7Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerPassword7RowChanging != null)) {
                    this.ServerPassword7RowChanging(this, new ServerPassword7RowChangeEvent(((ServerPassword7Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerPassword7RowDeleted != null)) {
                    this.ServerPassword7RowDeleted(this, new ServerPassword7RowChangeEvent(((ServerPassword7Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerPassword7RowDeleting != null)) {
                    this.ServerPassword7RowDeleting(this, new ServerPassword7RowChangeEvent(((ServerPassword7Row)(e.Row)), e.Action));
                }
            }
            
            public void RemoveServerPassword7Row(ServerPassword7Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerPassword7Row : DataRow {
            
            private ServerPassword7DataTable tableServerPassword7;
            
            internal ServerPassword7Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerPassword7 = ((ServerPassword7DataTable)(this.Table));
            }
            
            public string EncodedPassword {
                get {
                    return ((string)(this[this.tableServerPassword7.EncodedPasswordColumn]));
                }
                set {
                    this[this.tableServerPassword7.EncodedPasswordColumn] = value;
                }
            }
            
            public string EncodeNumber {
                get {
                    try {
                        return ((string)(this[this.tableServerPassword7.EncodeNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerPassword7.EncodeNumberColumn] = value;
                }
            }
            
            public VerifyServerPasswordRow VerifyServerPasswordRow {
                get {
                    return ((VerifyServerPasswordRow)(this.GetParentRow(this.Table.ParentRelations["VerifyServerPassword_ServerPassword7"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["VerifyServerPassword_ServerPassword7"]);
                }
            }
            
            public bool IsEncodeNumberNull() {
                return this.IsNull(this.tableServerPassword7.EncodeNumberColumn);
            }
            
            public void SetEncodeNumberNull() {
                this[this.tableServerPassword7.EncodeNumberColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerPassword7RowChangeEvent : EventArgs {
            
            private ServerPassword7Row eventRow;
            
            private DataRowAction eventAction;
            
            public ServerPassword7RowChangeEvent(ServerPassword7Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ServerPassword7Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SetServerPasswordDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnSetServerPassword_Id;
            
            internal SetServerPasswordDataTable() : 
                    base("SetServerPassword") {
                this.InitClass();
            }
            
            internal SetServerPasswordDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn SetServerPassword_IdColumn {
                get {
                    return this.columnSetServerPassword_Id;
                }
            }
            
            public SetServerPasswordRow this[int index] {
                get {
                    return ((SetServerPasswordRow)(this.Rows[index]));
                }
            }
            
            public event SetServerPasswordRowChangeEventHandler SetServerPasswordRowChanged;
            
            public event SetServerPasswordRowChangeEventHandler SetServerPasswordRowChanging;
            
            public event SetServerPasswordRowChangeEventHandler SetServerPasswordRowDeleted;
            
            public event SetServerPasswordRowChangeEventHandler SetServerPasswordRowDeleting;
            
            public void AddSetServerPasswordRow(SetServerPasswordRow row) {
                this.Rows.Add(row);
            }
            
            public SetServerPasswordRow AddSetServerPasswordRow() {
                SetServerPasswordRow rowSetServerPasswordRow = ((SetServerPasswordRow)(this.NewRow()));
                rowSetServerPasswordRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowSetServerPasswordRow);
                return rowSetServerPasswordRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SetServerPasswordDataTable cln = ((SetServerPasswordDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SetServerPasswordDataTable();
            }
            
            internal void InitVars() {
                this.columnSetServerPassword_Id = this.Columns["SetServerPassword_Id"];
            }
            
            private void InitClass() {
                this.columnSetServerPassword_Id = new DataColumn("SetServerPassword_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnSetServerPassword_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnSetServerPassword_Id}, true));
                this.columnSetServerPassword_Id.AutoIncrement = true;
                this.columnSetServerPassword_Id.AllowDBNull = false;
                this.columnSetServerPassword_Id.Unique = true;
            }
            
            public SetServerPasswordRow NewSetServerPasswordRow() {
                return ((SetServerPasswordRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SetServerPasswordRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SetServerPasswordRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SetServerPasswordRowChanged != null)) {
                    this.SetServerPasswordRowChanged(this, new SetServerPasswordRowChangeEvent(((SetServerPasswordRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SetServerPasswordRowChanging != null)) {
                    this.SetServerPasswordRowChanging(this, new SetServerPasswordRowChangeEvent(((SetServerPasswordRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SetServerPasswordRowDeleted != null)) {
                    this.SetServerPasswordRowDeleted(this, new SetServerPasswordRowChangeEvent(((SetServerPasswordRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SetServerPasswordRowDeleting != null)) {
                    this.SetServerPasswordRowDeleting(this, new SetServerPasswordRowChangeEvent(((SetServerPasswordRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSetServerPasswordRow(SetServerPasswordRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SetServerPasswordRow : DataRow {
            
            private SetServerPasswordDataTable tableSetServerPassword;
            
            internal SetServerPasswordRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSetServerPassword = ((SetServerPasswordDataTable)(this.Table));
            }
            
            public OldPasswordRow[] GetOldPasswordRows() {
                return ((OldPasswordRow[])(this.GetChildRows(this.Table.ChildRelations["SetServerPassword_OldPassword"])));
            }
            
            public NewPasswordRow[] GetNewPasswordRows() {
                return ((NewPasswordRow[])(this.GetChildRows(this.Table.ChildRelations["SetServerPassword_NewPassword"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SetServerPasswordRowChangeEvent : EventArgs {
            
            private SetServerPasswordRow eventRow;
            
            private DataRowAction eventAction;
            
            public SetServerPasswordRowChangeEvent(SetServerPasswordRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SetServerPasswordRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OldPasswordDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnOldPassword_Id;
            
            private DataColumn columnSetServerPassword_Id;
            
            internal OldPasswordDataTable() : 
                    base("OldPassword") {
                this.InitClass();
            }
            
            internal OldPasswordDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn OldPassword_IdColumn {
                get {
                    return this.columnOldPassword_Id;
                }
            }
            
            internal DataColumn SetServerPassword_IdColumn {
                get {
                    return this.columnSetServerPassword_Id;
                }
            }
            
            public OldPasswordRow this[int index] {
                get {
                    return ((OldPasswordRow)(this.Rows[index]));
                }
            }
            
            public event OldPasswordRowChangeEventHandler OldPasswordRowChanged;
            
            public event OldPasswordRowChangeEventHandler OldPasswordRowChanging;
            
            public event OldPasswordRowChangeEventHandler OldPasswordRowDeleted;
            
            public event OldPasswordRowChangeEventHandler OldPasswordRowDeleting;
            
            public void AddOldPasswordRow(OldPasswordRow row) {
                this.Rows.Add(row);
            }
            
            public OldPasswordRow AddOldPasswordRow(SetServerPasswordRow parentSetServerPasswordRowBySetServerPassword_OldPassword) {
                OldPasswordRow rowOldPasswordRow = ((OldPasswordRow)(this.NewRow()));
                rowOldPasswordRow.ItemArray = new object[] {
                        null,
                        parentSetServerPasswordRowBySetServerPassword_OldPassword[0]};
                this.Rows.Add(rowOldPasswordRow);
                return rowOldPasswordRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                OldPasswordDataTable cln = ((OldPasswordDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new OldPasswordDataTable();
            }
            
            internal void InitVars() {
                this.columnOldPassword_Id = this.Columns["OldPassword_Id"];
                this.columnSetServerPassword_Id = this.Columns["SetServerPassword_Id"];
            }
            
            private void InitClass() {
                this.columnOldPassword_Id = new DataColumn("OldPassword_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnOldPassword_Id);
                this.columnSetServerPassword_Id = new DataColumn("SetServerPassword_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnSetServerPassword_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnOldPassword_Id}, true));
                this.columnOldPassword_Id.AutoIncrement = true;
                this.columnOldPassword_Id.AllowDBNull = false;
                this.columnOldPassword_Id.Unique = true;
            }
            
            public OldPasswordRow NewOldPasswordRow() {
                return ((OldPasswordRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new OldPasswordRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(OldPasswordRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OldPasswordRowChanged != null)) {
                    this.OldPasswordRowChanged(this, new OldPasswordRowChangeEvent(((OldPasswordRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OldPasswordRowChanging != null)) {
                    this.OldPasswordRowChanging(this, new OldPasswordRowChangeEvent(((OldPasswordRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OldPasswordRowDeleted != null)) {
                    this.OldPasswordRowDeleted(this, new OldPasswordRowChangeEvent(((OldPasswordRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OldPasswordRowDeleting != null)) {
                    this.OldPasswordRowDeleting(this, new OldPasswordRowChangeEvent(((OldPasswordRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveOldPasswordRow(OldPasswordRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OldPasswordRow : DataRow {
            
            private OldPasswordDataTable tableOldPassword;
            
            internal OldPasswordRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableOldPassword = ((OldPasswordDataTable)(this.Table));
            }
            
            public SetServerPasswordRow SetServerPasswordRow {
                get {
                    return ((SetServerPasswordRow)(this.GetParentRow(this.Table.ParentRelations["SetServerPassword_OldPassword"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SetServerPassword_OldPassword"]);
                }
            }
            
            public ServerPassword1Row[] GetServerPassword1Rows() {
                return ((ServerPassword1Row[])(this.GetChildRows(this.Table.ChildRelations["OldPassword_ServerPassword1"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OldPasswordRowChangeEvent : EventArgs {
            
            private OldPasswordRow eventRow;
            
            private DataRowAction eventAction;
            
            public OldPasswordRowChangeEvent(OldPasswordRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public OldPasswordRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerPassword1DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnEncodedPassword;
            
            private DataColumn columnEncodeNumber;
            
            private DataColumn columnOldPassword_Id;
            
            internal ServerPassword1DataTable() : 
                    base("ServerPassword1") {
                this.InitClass();
            }
            
            internal ServerPassword1DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn EncodedPasswordColumn {
                get {
                    return this.columnEncodedPassword;
                }
            }
            
            internal DataColumn EncodeNumberColumn {
                get {
                    return this.columnEncodeNumber;
                }
            }
            
            internal DataColumn OldPassword_IdColumn {
                get {
                    return this.columnOldPassword_Id;
                }
            }
            
            public ServerPassword1Row this[int index] {
                get {
                    return ((ServerPassword1Row)(this.Rows[index]));
                }
            }
            
            public event ServerPassword1RowChangeEventHandler ServerPassword1RowChanged;
            
            public event ServerPassword1RowChangeEventHandler ServerPassword1RowChanging;
            
            public event ServerPassword1RowChangeEventHandler ServerPassword1RowDeleted;
            
            public event ServerPassword1RowChangeEventHandler ServerPassword1RowDeleting;
            
            public void AddServerPassword1Row(ServerPassword1Row row) {
                this.Rows.Add(row);
            }
            
            public ServerPassword1Row AddServerPassword1Row(string EncodedPassword, string EncodeNumber, OldPasswordRow parentOldPasswordRowByOldPassword_ServerPassword1) {
                ServerPassword1Row rowServerPassword1Row = ((ServerPassword1Row)(this.NewRow()));
                rowServerPassword1Row.ItemArray = new object[] {
                        EncodedPassword,
                        EncodeNumber,
                        parentOldPasswordRowByOldPassword_ServerPassword1[0]};
                this.Rows.Add(rowServerPassword1Row);
                return rowServerPassword1Row;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ServerPassword1DataTable cln = ((ServerPassword1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ServerPassword1DataTable();
            }
            
            internal void InitVars() {
                this.columnEncodedPassword = this.Columns["EncodedPassword"];
                this.columnEncodeNumber = this.Columns["EncodeNumber"];
                this.columnOldPassword_Id = this.Columns["OldPassword_Id"];
            }
            
            private void InitClass() {
                this.columnEncodedPassword = new DataColumn("EncodedPassword", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnEncodedPassword);
                this.columnEncodeNumber = new DataColumn("EncodeNumber", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnEncodeNumber);
                this.columnOldPassword_Id = new DataColumn("OldPassword_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnOldPassword_Id);
                this.columnEncodedPassword.AllowDBNull = false;
                this.columnEncodedPassword.Namespace = "";
                this.columnEncodeNumber.Namespace = "";
                this.columnEncodeNumber.DefaultValue = "7";
            }
            
            public ServerPassword1Row NewServerPassword1Row() {
                return ((ServerPassword1Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ServerPassword1Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ServerPassword1Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerPassword1RowChanged != null)) {
                    this.ServerPassword1RowChanged(this, new ServerPassword1RowChangeEvent(((ServerPassword1Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerPassword1RowChanging != null)) {
                    this.ServerPassword1RowChanging(this, new ServerPassword1RowChangeEvent(((ServerPassword1Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerPassword1RowDeleted != null)) {
                    this.ServerPassword1RowDeleted(this, new ServerPassword1RowChangeEvent(((ServerPassword1Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerPassword1RowDeleting != null)) {
                    this.ServerPassword1RowDeleting(this, new ServerPassword1RowChangeEvent(((ServerPassword1Row)(e.Row)), e.Action));
                }
            }
            
            public void RemoveServerPassword1Row(ServerPassword1Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerPassword1Row : DataRow {
            
            private ServerPassword1DataTable tableServerPassword1;
            
            internal ServerPassword1Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerPassword1 = ((ServerPassword1DataTable)(this.Table));
            }
            
            public string EncodedPassword {
                get {
                    return ((string)(this[this.tableServerPassword1.EncodedPasswordColumn]));
                }
                set {
                    this[this.tableServerPassword1.EncodedPasswordColumn] = value;
                }
            }
            
            public string EncodeNumber {
                get {
                    try {
                        return ((string)(this[this.tableServerPassword1.EncodeNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerPassword1.EncodeNumberColumn] = value;
                }
            }
            
            public OldPasswordRow OldPasswordRow {
                get {
                    return ((OldPasswordRow)(this.GetParentRow(this.Table.ParentRelations["OldPassword_ServerPassword1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["OldPassword_ServerPassword1"]);
                }
            }
            
            public bool IsEncodeNumberNull() {
                return this.IsNull(this.tableServerPassword1.EncodeNumberColumn);
            }
            
            public void SetEncodeNumberNull() {
                this[this.tableServerPassword1.EncodeNumberColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerPassword1RowChangeEvent : EventArgs {
            
            private ServerPassword1Row eventRow;
            
            private DataRowAction eventAction;
            
            public ServerPassword1RowChangeEvent(ServerPassword1Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ServerPassword1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class NewPasswordDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnNewPassword_Id;
            
            private DataColumn columnSetServerPassword_Id;
            
            internal NewPasswordDataTable() : 
                    base("NewPassword") {
                this.InitClass();
            }
            
            internal NewPasswordDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NewPassword_IdColumn {
                get {
                    return this.columnNewPassword_Id;
                }
            }
            
            internal DataColumn SetServerPassword_IdColumn {
                get {
                    return this.columnSetServerPassword_Id;
                }
            }
            
            public NewPasswordRow this[int index] {
                get {
                    return ((NewPasswordRow)(this.Rows[index]));
                }
            }
            
            public event NewPasswordRowChangeEventHandler NewPasswordRowChanged;
            
            public event NewPasswordRowChangeEventHandler NewPasswordRowChanging;
            
            public event NewPasswordRowChangeEventHandler NewPasswordRowDeleted;
            
            public event NewPasswordRowChangeEventHandler NewPasswordRowDeleting;
            
            public void AddNewPasswordRow(NewPasswordRow row) {
                this.Rows.Add(row);
            }
            
            public NewPasswordRow AddNewPasswordRow(SetServerPasswordRow parentSetServerPasswordRowBySetServerPassword_NewPassword) {
                NewPasswordRow rowNewPasswordRow = ((NewPasswordRow)(this.NewRow()));
                rowNewPasswordRow.ItemArray = new object[] {
                        null,
                        parentSetServerPasswordRowBySetServerPassword_NewPassword[0]};
                this.Rows.Add(rowNewPasswordRow);
                return rowNewPasswordRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                NewPasswordDataTable cln = ((NewPasswordDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new NewPasswordDataTable();
            }
            
            internal void InitVars() {
                this.columnNewPassword_Id = this.Columns["NewPassword_Id"];
                this.columnSetServerPassword_Id = this.Columns["SetServerPassword_Id"];
            }
            
            private void InitClass() {
                this.columnNewPassword_Id = new DataColumn("NewPassword_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnNewPassword_Id);
                this.columnSetServerPassword_Id = new DataColumn("SetServerPassword_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnSetServerPassword_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnNewPassword_Id}, true));
                this.columnNewPassword_Id.AutoIncrement = true;
                this.columnNewPassword_Id.AllowDBNull = false;
                this.columnNewPassword_Id.Unique = true;
            }
            
            public NewPasswordRow NewNewPasswordRow() {
                return ((NewPasswordRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new NewPasswordRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(NewPasswordRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NewPasswordRowChanged != null)) {
                    this.NewPasswordRowChanged(this, new NewPasswordRowChangeEvent(((NewPasswordRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NewPasswordRowChanging != null)) {
                    this.NewPasswordRowChanging(this, new NewPasswordRowChangeEvent(((NewPasswordRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NewPasswordRowDeleted != null)) {
                    this.NewPasswordRowDeleted(this, new NewPasswordRowChangeEvent(((NewPasswordRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NewPasswordRowDeleting != null)) {
                    this.NewPasswordRowDeleting(this, new NewPasswordRowChangeEvent(((NewPasswordRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveNewPasswordRow(NewPasswordRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class NewPasswordRow : DataRow {
            
            private NewPasswordDataTable tableNewPassword;
            
            internal NewPasswordRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableNewPassword = ((NewPasswordDataTable)(this.Table));
            }
            
            public SetServerPasswordRow SetServerPasswordRow {
                get {
                    return ((SetServerPasswordRow)(this.GetParentRow(this.Table.ParentRelations["SetServerPassword_NewPassword"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SetServerPassword_NewPassword"]);
                }
            }
            
            public ServerPassword2Row[] GetServerPassword2Rows() {
                return ((ServerPassword2Row[])(this.GetChildRows(this.Table.ChildRelations["NewPassword_ServerPassword2"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class NewPasswordRowChangeEvent : EventArgs {
            
            private NewPasswordRow eventRow;
            
            private DataRowAction eventAction;
            
            public NewPasswordRowChangeEvent(NewPasswordRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public NewPasswordRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerPassword2DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnEncodedPassword;
            
            private DataColumn columnEncodeNumber;
            
            private DataColumn columnNewPassword_Id;
            
            internal ServerPassword2DataTable() : 
                    base("ServerPassword2") {
                this.InitClass();
            }
            
            internal ServerPassword2DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn EncodedPasswordColumn {
                get {
                    return this.columnEncodedPassword;
                }
            }
            
            internal DataColumn EncodeNumberColumn {
                get {
                    return this.columnEncodeNumber;
                }
            }
            
            internal DataColumn NewPassword_IdColumn {
                get {
                    return this.columnNewPassword_Id;
                }
            }
            
            public ServerPassword2Row this[int index] {
                get {
                    return ((ServerPassword2Row)(this.Rows[index]));
                }
            }
            
            public event ServerPassword2RowChangeEventHandler ServerPassword2RowChanged;
            
            public event ServerPassword2RowChangeEventHandler ServerPassword2RowChanging;
            
            public event ServerPassword2RowChangeEventHandler ServerPassword2RowDeleted;
            
            public event ServerPassword2RowChangeEventHandler ServerPassword2RowDeleting;
            
            public void AddServerPassword2Row(ServerPassword2Row row) {
                this.Rows.Add(row);
            }
            
            public ServerPassword2Row AddServerPassword2Row(string EncodedPassword, string EncodeNumber, NewPasswordRow parentNewPasswordRowByNewPassword_ServerPassword2) {
                ServerPassword2Row rowServerPassword2Row = ((ServerPassword2Row)(this.NewRow()));
                rowServerPassword2Row.ItemArray = new object[] {
                        EncodedPassword,
                        EncodeNumber,
                        parentNewPasswordRowByNewPassword_ServerPassword2[0]};
                this.Rows.Add(rowServerPassword2Row);
                return rowServerPassword2Row;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ServerPassword2DataTable cln = ((ServerPassword2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ServerPassword2DataTable();
            }
            
            internal void InitVars() {
                this.columnEncodedPassword = this.Columns["EncodedPassword"];
                this.columnEncodeNumber = this.Columns["EncodeNumber"];
                this.columnNewPassword_Id = this.Columns["NewPassword_Id"];
            }
            
            private void InitClass() {
                this.columnEncodedPassword = new DataColumn("EncodedPassword", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnEncodedPassword);
                this.columnEncodeNumber = new DataColumn("EncodeNumber", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnEncodeNumber);
                this.columnNewPassword_Id = new DataColumn("NewPassword_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnNewPassword_Id);
                this.columnEncodedPassword.AllowDBNull = false;
                this.columnEncodedPassword.Namespace = "";
                this.columnEncodeNumber.Namespace = "";
                this.columnEncodeNumber.DefaultValue = "7";
            }
            
            public ServerPassword2Row NewServerPassword2Row() {
                return ((ServerPassword2Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ServerPassword2Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ServerPassword2Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerPassword2RowChanged != null)) {
                    this.ServerPassword2RowChanged(this, new ServerPassword2RowChangeEvent(((ServerPassword2Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerPassword2RowChanging != null)) {
                    this.ServerPassword2RowChanging(this, new ServerPassword2RowChangeEvent(((ServerPassword2Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerPassword2RowDeleted != null)) {
                    this.ServerPassword2RowDeleted(this, new ServerPassword2RowChangeEvent(((ServerPassword2Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerPassword2RowDeleting != null)) {
                    this.ServerPassword2RowDeleting(this, new ServerPassword2RowChangeEvent(((ServerPassword2Row)(e.Row)), e.Action));
                }
            }
            
            public void RemoveServerPassword2Row(ServerPassword2Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerPassword2Row : DataRow {
            
            private ServerPassword2DataTable tableServerPassword2;
            
            internal ServerPassword2Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerPassword2 = ((ServerPassword2DataTable)(this.Table));
            }
            
            public string EncodedPassword {
                get {
                    return ((string)(this[this.tableServerPassword2.EncodedPasswordColumn]));
                }
                set {
                    this[this.tableServerPassword2.EncodedPasswordColumn] = value;
                }
            }
            
            public string EncodeNumber {
                get {
                    try {
                        return ((string)(this[this.tableServerPassword2.EncodeNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerPassword2.EncodeNumberColumn] = value;
                }
            }
            
            public NewPasswordRow NewPasswordRow {
                get {
                    return ((NewPasswordRow)(this.GetParentRow(this.Table.ParentRelations["NewPassword_ServerPassword2"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["NewPassword_ServerPassword2"]);
                }
            }
            
            public bool IsEncodeNumberNull() {
                return this.IsNull(this.tableServerPassword2.EncodeNumberColumn);
            }
            
            public void SetEncodeNumberNull() {
                this[this.tableServerPassword2.EncodeNumberColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerPassword2RowChangeEvent : EventArgs {
            
            private ServerPassword2Row eventRow;
            
            private DataRowAction eventAction;
            
            public ServerPassword2RowChangeEvent(ServerPassword2Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ServerPassword2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CancelOrderDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnOrderId;
            
            private DataColumn columnClientId;
            
            private DataColumn columnCancelOrder_Id;
            
            internal CancelOrderDataTable() : 
                    base("CancelOrder") {
                this.InitClass();
            }
            
            internal CancelOrderDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn OrderIdColumn {
                get {
                    return this.columnOrderId;
                }
            }
            
            internal DataColumn ClientIdColumn {
                get {
                    return this.columnClientId;
                }
            }
            
            internal DataColumn CancelOrder_IdColumn {
                get {
                    return this.columnCancelOrder_Id;
                }
            }
            
            public CancelOrderRow this[int index] {
                get {
                    return ((CancelOrderRow)(this.Rows[index]));
                }
            }
            
            public event CancelOrderRowChangeEventHandler CancelOrderRowChanged;
            
            public event CancelOrderRowChangeEventHandler CancelOrderRowChanging;
            
            public event CancelOrderRowChangeEventHandler CancelOrderRowDeleted;
            
            public event CancelOrderRowChangeEventHandler CancelOrderRowDeleting;
            
            public void AddCancelOrderRow(CancelOrderRow row) {
                this.Rows.Add(row);
            }
            
            public CancelOrderRow AddCancelOrderRow(string OrderId, string ClientId) {
                CancelOrderRow rowCancelOrderRow = ((CancelOrderRow)(this.NewRow()));
                rowCancelOrderRow.ItemArray = new object[] {
                        OrderId,
                        ClientId,
                        null};
                this.Rows.Add(rowCancelOrderRow);
                return rowCancelOrderRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CancelOrderDataTable cln = ((CancelOrderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CancelOrderDataTable();
            }
            
            internal void InitVars() {
                this.columnOrderId = this.Columns["OrderId"];
                this.columnClientId = this.Columns["ClientId"];
                this.columnCancelOrder_Id = this.Columns["CancelOrder_Id"];
            }
            
            private void InitClass() {
                this.columnOrderId = new DataColumn("OrderId", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOrderId);
                this.columnClientId = new DataColumn("ClientId", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnClientId);
                this.columnCancelOrder_Id = new DataColumn("CancelOrder_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCancelOrder_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnCancelOrder_Id}, true));
                this.columnOrderId.AllowDBNull = false;
                this.columnOrderId.Namespace = "";
                this.columnClientId.AllowDBNull = false;
                this.columnClientId.Namespace = "";
                this.columnCancelOrder_Id.AutoIncrement = true;
                this.columnCancelOrder_Id.AllowDBNull = false;
                this.columnCancelOrder_Id.Unique = true;
            }
            
            public CancelOrderRow NewCancelOrderRow() {
                return ((CancelOrderRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CancelOrderRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CancelOrderRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CancelOrderRowChanged != null)) {
                    this.CancelOrderRowChanged(this, new CancelOrderRowChangeEvent(((CancelOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CancelOrderRowChanging != null)) {
                    this.CancelOrderRowChanging(this, new CancelOrderRowChangeEvent(((CancelOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CancelOrderRowDeleted != null)) {
                    this.CancelOrderRowDeleted(this, new CancelOrderRowChangeEvent(((CancelOrderRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CancelOrderRowDeleting != null)) {
                    this.CancelOrderRowDeleting(this, new CancelOrderRowChangeEvent(((CancelOrderRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCancelOrderRow(CancelOrderRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CancelOrderRow : DataRow {
            
            private CancelOrderDataTable tableCancelOrder;
            
            internal CancelOrderRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCancelOrder = ((CancelOrderDataTable)(this.Table));
            }
            
            public string OrderId {
                get {
                    return ((string)(this[this.tableCancelOrder.OrderIdColumn]));
                }
                set {
                    this[this.tableCancelOrder.OrderIdColumn] = value;
                }
            }
            
            public string ClientId {
                get {
                    return ((string)(this[this.tableCancelOrder.ClientIdColumn]));
                }
                set {
                    this[this.tableCancelOrder.ClientIdColumn] = value;
                }
            }
            
            public ServerPassword6Row[] GetServerPassword6Rows() {
                return ((ServerPassword6Row[])(this.GetChildRows(this.Table.ChildRelations["CancelOrder_ServerPassword6"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CancelOrderRowChangeEvent : EventArgs {
            
            private CancelOrderRow eventRow;
            
            private DataRowAction eventAction;
            
            public CancelOrderRowChangeEvent(CancelOrderRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CancelOrderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerPassword6DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnEncodedPassword;
            
            private DataColumn columnEncodeNumber;
            
            private DataColumn columnCancelOrder_Id;
            
            internal ServerPassword6DataTable() : 
                    base("ServerPassword6") {
                this.InitClass();
            }
            
            internal ServerPassword6DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn EncodedPasswordColumn {
                get {
                    return this.columnEncodedPassword;
                }
            }
            
            internal DataColumn EncodeNumberColumn {
                get {
                    return this.columnEncodeNumber;
                }
            }
            
            internal DataColumn CancelOrder_IdColumn {
                get {
                    return this.columnCancelOrder_Id;
                }
            }
            
            public ServerPassword6Row this[int index] {
                get {
                    return ((ServerPassword6Row)(this.Rows[index]));
                }
            }
            
            public event ServerPassword6RowChangeEventHandler ServerPassword6RowChanged;
            
            public event ServerPassword6RowChangeEventHandler ServerPassword6RowChanging;
            
            public event ServerPassword6RowChangeEventHandler ServerPassword6RowDeleted;
            
            public event ServerPassword6RowChangeEventHandler ServerPassword6RowDeleting;
            
            public void AddServerPassword6Row(ServerPassword6Row row) {
                this.Rows.Add(row);
            }
            
            public ServerPassword6Row AddServerPassword6Row(string EncodedPassword, string EncodeNumber, CancelOrderRow parentCancelOrderRowByCancelOrder_ServerPassword6) {
                ServerPassword6Row rowServerPassword6Row = ((ServerPassword6Row)(this.NewRow()));
                rowServerPassword6Row.ItemArray = new object[] {
                        EncodedPassword,
                        EncodeNumber,
                        parentCancelOrderRowByCancelOrder_ServerPassword6[2]};
                this.Rows.Add(rowServerPassword6Row);
                return rowServerPassword6Row;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ServerPassword6DataTable cln = ((ServerPassword6DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ServerPassword6DataTable();
            }
            
            internal void InitVars() {
                this.columnEncodedPassword = this.Columns["EncodedPassword"];
                this.columnEncodeNumber = this.Columns["EncodeNumber"];
                this.columnCancelOrder_Id = this.Columns["CancelOrder_Id"];
            }
            
            private void InitClass() {
                this.columnEncodedPassword = new DataColumn("EncodedPassword", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnEncodedPassword);
                this.columnEncodeNumber = new DataColumn("EncodeNumber", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnEncodeNumber);
                this.columnCancelOrder_Id = new DataColumn("CancelOrder_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCancelOrder_Id);
                this.columnEncodedPassword.AllowDBNull = false;
                this.columnEncodedPassword.Namespace = "";
                this.columnEncodeNumber.Namespace = "";
                this.columnEncodeNumber.DefaultValue = "7";
            }
            
            public ServerPassword6Row NewServerPassword6Row() {
                return ((ServerPassword6Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ServerPassword6Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ServerPassword6Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerPassword6RowChanged != null)) {
                    this.ServerPassword6RowChanged(this, new ServerPassword6RowChangeEvent(((ServerPassword6Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerPassword6RowChanging != null)) {
                    this.ServerPassword6RowChanging(this, new ServerPassword6RowChangeEvent(((ServerPassword6Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerPassword6RowDeleted != null)) {
                    this.ServerPassword6RowDeleted(this, new ServerPassword6RowChangeEvent(((ServerPassword6Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerPassword6RowDeleting != null)) {
                    this.ServerPassword6RowDeleting(this, new ServerPassword6RowChangeEvent(((ServerPassword6Row)(e.Row)), e.Action));
                }
            }
            
            public void RemoveServerPassword6Row(ServerPassword6Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerPassword6Row : DataRow {
            
            private ServerPassword6DataTable tableServerPassword6;
            
            internal ServerPassword6Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerPassword6 = ((ServerPassword6DataTable)(this.Table));
            }
            
            public string EncodedPassword {
                get {
                    return ((string)(this[this.tableServerPassword6.EncodedPasswordColumn]));
                }
                set {
                    this[this.tableServerPassword6.EncodedPasswordColumn] = value;
                }
            }
            
            public string EncodeNumber {
                get {
                    try {
                        return ((string)(this[this.tableServerPassword6.EncodeNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerPassword6.EncodeNumberColumn] = value;
                }
            }
            
            public CancelOrderRow CancelOrderRow {
                get {
                    return ((CancelOrderRow)(this.GetParentRow(this.Table.ParentRelations["CancelOrder_ServerPassword6"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CancelOrder_ServerPassword6"]);
                }
            }
            
            public bool IsEncodeNumberNull() {
                return this.IsNull(this.tableServerPassword6.EncodeNumberColumn);
            }
            
            public void SetEncodeNumberNull() {
                this[this.tableServerPassword6.EncodeNumberColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerPassword6RowChangeEvent : EventArgs {
            
            private ServerPassword6Row eventRow;
            
            private DataRowAction eventAction;
            
            public ServerPassword6RowChangeEvent(ServerPassword6Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ServerPassword6Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GetSessionLogDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnNumberEvents;
            
            internal GetSessionLogDataTable() : 
                    base("GetSessionLog") {
                this.InitClass();
            }
            
            internal GetSessionLogDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NumberEventsColumn {
                get {
                    return this.columnNumberEvents;
                }
            }
            
            public GetSessionLogRow this[int index] {
                get {
                    return ((GetSessionLogRow)(this.Rows[index]));
                }
            }
            
            public event GetSessionLogRowChangeEventHandler GetSessionLogRowChanged;
            
            public event GetSessionLogRowChangeEventHandler GetSessionLogRowChanging;
            
            public event GetSessionLogRowChangeEventHandler GetSessionLogRowDeleted;
            
            public event GetSessionLogRowChangeEventHandler GetSessionLogRowDeleting;
            
            public void AddGetSessionLogRow(GetSessionLogRow row) {
                this.Rows.Add(row);
            }
            
            public GetSessionLogRow AddGetSessionLogRow(string NumberEvents) {
                GetSessionLogRow rowGetSessionLogRow = ((GetSessionLogRow)(this.NewRow()));
                rowGetSessionLogRow.ItemArray = new object[] {
                        NumberEvents};
                this.Rows.Add(rowGetSessionLogRow);
                return rowGetSessionLogRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                GetSessionLogDataTable cln = ((GetSessionLogDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new GetSessionLogDataTable();
            }
            
            internal void InitVars() {
                this.columnNumberEvents = this.Columns["NumberEvents"];
            }
            
            private void InitClass() {
                this.columnNumberEvents = new DataColumn("NumberEvents", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnNumberEvents);
                this.columnNumberEvents.Namespace = "";
            }
            
            public GetSessionLogRow NewGetSessionLogRow() {
                return ((GetSessionLogRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new GetSessionLogRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(GetSessionLogRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetSessionLogRowChanged != null)) {
                    this.GetSessionLogRowChanged(this, new GetSessionLogRowChangeEvent(((GetSessionLogRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetSessionLogRowChanging != null)) {
                    this.GetSessionLogRowChanging(this, new GetSessionLogRowChangeEvent(((GetSessionLogRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetSessionLogRowDeleted != null)) {
                    this.GetSessionLogRowDeleted(this, new GetSessionLogRowChangeEvent(((GetSessionLogRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetSessionLogRowDeleting != null)) {
                    this.GetSessionLogRowDeleting(this, new GetSessionLogRowChangeEvent(((GetSessionLogRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGetSessionLogRow(GetSessionLogRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GetSessionLogRow : DataRow {
            
            private GetSessionLogDataTable tableGetSessionLog;
            
            internal GetSessionLogRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetSessionLog = ((GetSessionLogDataTable)(this.Table));
            }
            
            public string NumberEvents {
                get {
                    try {
                        return ((string)(this[this.tableGetSessionLog.NumberEventsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGetSessionLog.NumberEventsColumn] = value;
                }
            }
            
            public bool IsNumberEventsNull() {
                return this.IsNull(this.tableGetSessionLog.NumberEventsColumn);
            }
            
            public void SetNumberEventsNull() {
                this[this.tableGetSessionLog.NumberEventsColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GetSessionLogRowChangeEvent : EventArgs {
            
            private GetSessionLogRow eventRow;
            
            private DataRowAction eventAction;
            
            public GetSessionLogRowChangeEvent(GetSessionLogRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public GetSessionLogRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SetParameterDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnSetParameter_Id;
            
            internal SetParameterDataTable() : 
                    base("SetParameter") {
                this.InitClass();
            }
            
            internal SetParameterDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn SetParameter_IdColumn {
                get {
                    return this.columnSetParameter_Id;
                }
            }
            
            public SetParameterRow this[int index] {
                get {
                    return ((SetParameterRow)(this.Rows[index]));
                }
            }
            
            public event SetParameterRowChangeEventHandler SetParameterRowChanged;
            
            public event SetParameterRowChangeEventHandler SetParameterRowChanging;
            
            public event SetParameterRowChangeEventHandler SetParameterRowDeleted;
            
            public event SetParameterRowChangeEventHandler SetParameterRowDeleting;
            
            public void AddSetParameterRow(SetParameterRow row) {
                this.Rows.Add(row);
            }
            
            public SetParameterRow AddSetParameterRow() {
                SetParameterRow rowSetParameterRow = ((SetParameterRow)(this.NewRow()));
                rowSetParameterRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowSetParameterRow);
                return rowSetParameterRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SetParameterDataTable cln = ((SetParameterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SetParameterDataTable();
            }
            
            internal void InitVars() {
                this.columnSetParameter_Id = this.Columns["SetParameter_Id"];
            }
            
            private void InitClass() {
                this.columnSetParameter_Id = new DataColumn("SetParameter_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnSetParameter_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnSetParameter_Id}, true));
                this.columnSetParameter_Id.AutoIncrement = true;
                this.columnSetParameter_Id.AllowDBNull = false;
                this.columnSetParameter_Id.Unique = true;
            }
            
            public SetParameterRow NewSetParameterRow() {
                return ((SetParameterRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SetParameterRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SetParameterRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SetParameterRowChanged != null)) {
                    this.SetParameterRowChanged(this, new SetParameterRowChangeEvent(((SetParameterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SetParameterRowChanging != null)) {
                    this.SetParameterRowChanging(this, new SetParameterRowChangeEvent(((SetParameterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SetParameterRowDeleted != null)) {
                    this.SetParameterRowDeleted(this, new SetParameterRowChangeEvent(((SetParameterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SetParameterRowDeleting != null)) {
                    this.SetParameterRowDeleting(this, new SetParameterRowChangeEvent(((SetParameterRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSetParameterRow(SetParameterRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SetParameterRow : DataRow {
            
            private SetParameterDataTable tableSetParameter;
            
            internal SetParameterRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSetParameter = ((SetParameterDataTable)(this.Table));
            }
            
            public ServerPassword3Row[] GetServerPassword3Rows() {
                return ((ServerPassword3Row[])(this.GetChildRows(this.Table.ChildRelations["SetParameter_ServerPassword3"])));
            }
            
            public SettingRow[] GetSettingRows() {
                return ((SettingRow[])(this.GetChildRows(this.Table.ChildRelations["SetParameter_Setting"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SetParameterRowChangeEvent : EventArgs {
            
            private SetParameterRow eventRow;
            
            private DataRowAction eventAction;
            
            public SetParameterRowChangeEvent(SetParameterRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SetParameterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerPassword3DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnEncodedPassword;
            
            private DataColumn columnEncodeNumber;
            
            private DataColumn columnSetParameter_Id;
            
            internal ServerPassword3DataTable() : 
                    base("ServerPassword3") {
                this.InitClass();
            }
            
            internal ServerPassword3DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn EncodedPasswordColumn {
                get {
                    return this.columnEncodedPassword;
                }
            }
            
            internal DataColumn EncodeNumberColumn {
                get {
                    return this.columnEncodeNumber;
                }
            }
            
            internal DataColumn SetParameter_IdColumn {
                get {
                    return this.columnSetParameter_Id;
                }
            }
            
            public ServerPassword3Row this[int index] {
                get {
                    return ((ServerPassword3Row)(this.Rows[index]));
                }
            }
            
            public event ServerPassword3RowChangeEventHandler ServerPassword3RowChanged;
            
            public event ServerPassword3RowChangeEventHandler ServerPassword3RowChanging;
            
            public event ServerPassword3RowChangeEventHandler ServerPassword3RowDeleted;
            
            public event ServerPassword3RowChangeEventHandler ServerPassword3RowDeleting;
            
            public void AddServerPassword3Row(ServerPassword3Row row) {
                this.Rows.Add(row);
            }
            
            public ServerPassword3Row AddServerPassword3Row(string EncodedPassword, string EncodeNumber, SetParameterRow parentSetParameterRowBySetParameter_ServerPassword3) {
                ServerPassword3Row rowServerPassword3Row = ((ServerPassword3Row)(this.NewRow()));
                rowServerPassword3Row.ItemArray = new object[] {
                        EncodedPassword,
                        EncodeNumber,
                        parentSetParameterRowBySetParameter_ServerPassword3[0]};
                this.Rows.Add(rowServerPassword3Row);
                return rowServerPassword3Row;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ServerPassword3DataTable cln = ((ServerPassword3DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ServerPassword3DataTable();
            }
            
            internal void InitVars() {
                this.columnEncodedPassword = this.Columns["EncodedPassword"];
                this.columnEncodeNumber = this.Columns["EncodeNumber"];
                this.columnSetParameter_Id = this.Columns["SetParameter_Id"];
            }
            
            private void InitClass() {
                this.columnEncodedPassword = new DataColumn("EncodedPassword", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnEncodedPassword);
                this.columnEncodeNumber = new DataColumn("EncodeNumber", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnEncodeNumber);
                this.columnSetParameter_Id = new DataColumn("SetParameter_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnSetParameter_Id);
                this.columnEncodedPassword.AllowDBNull = false;
                this.columnEncodedPassword.Namespace = "";
                this.columnEncodeNumber.Namespace = "";
                this.columnEncodeNumber.DefaultValue = "7";
            }
            
            public ServerPassword3Row NewServerPassword3Row() {
                return ((ServerPassword3Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ServerPassword3Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ServerPassword3Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerPassword3RowChanged != null)) {
                    this.ServerPassword3RowChanged(this, new ServerPassword3RowChangeEvent(((ServerPassword3Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerPassword3RowChanging != null)) {
                    this.ServerPassword3RowChanging(this, new ServerPassword3RowChangeEvent(((ServerPassword3Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerPassword3RowDeleted != null)) {
                    this.ServerPassword3RowDeleted(this, new ServerPassword3RowChangeEvent(((ServerPassword3Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerPassword3RowDeleting != null)) {
                    this.ServerPassword3RowDeleting(this, new ServerPassword3RowChangeEvent(((ServerPassword3Row)(e.Row)), e.Action));
                }
            }
            
            public void RemoveServerPassword3Row(ServerPassword3Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerPassword3Row : DataRow {
            
            private ServerPassword3DataTable tableServerPassword3;
            
            internal ServerPassword3Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerPassword3 = ((ServerPassword3DataTable)(this.Table));
            }
            
            public string EncodedPassword {
                get {
                    return ((string)(this[this.tableServerPassword3.EncodedPasswordColumn]));
                }
                set {
                    this[this.tableServerPassword3.EncodedPasswordColumn] = value;
                }
            }
            
            public string EncodeNumber {
                get {
                    try {
                        return ((string)(this[this.tableServerPassword3.EncodeNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerPassword3.EncodeNumberColumn] = value;
                }
            }
            
            public SetParameterRow SetParameterRow {
                get {
                    return ((SetParameterRow)(this.GetParentRow(this.Table.ParentRelations["SetParameter_ServerPassword3"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SetParameter_ServerPassword3"]);
                }
            }
            
            public bool IsEncodeNumberNull() {
                return this.IsNull(this.tableServerPassword3.EncodeNumberColumn);
            }
            
            public void SetEncodeNumberNull() {
                this[this.tableServerPassword3.EncodeNumberColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerPassword3RowChangeEvent : EventArgs {
            
            private ServerPassword3Row eventRow;
            
            private DataRowAction eventAction;
            
            public ServerPassword3RowChangeEvent(ServerPassword3Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ServerPassword3Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SettingDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnSetting_Id;
            
            private DataColumn columnSetParameter_Id;
            
            internal SettingDataTable() : 
                    base("Setting") {
                this.InitClass();
            }
            
            internal SettingDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn Setting_IdColumn {
                get {
                    return this.columnSetting_Id;
                }
            }
            
            internal DataColumn SetParameter_IdColumn {
                get {
                    return this.columnSetParameter_Id;
                }
            }
            
            public SettingRow this[int index] {
                get {
                    return ((SettingRow)(this.Rows[index]));
                }
            }
            
            public event SettingRowChangeEventHandler SettingRowChanged;
            
            public event SettingRowChangeEventHandler SettingRowChanging;
            
            public event SettingRowChangeEventHandler SettingRowDeleted;
            
            public event SettingRowChangeEventHandler SettingRowDeleting;
            
            public void AddSettingRow(SettingRow row) {
                this.Rows.Add(row);
            }
            
            public SettingRow AddSettingRow(SetParameterRow parentSetParameterRowBySetParameter_Setting) {
                SettingRow rowSettingRow = ((SettingRow)(this.NewRow()));
                rowSettingRow.ItemArray = new object[] {
                        null,
                        parentSetParameterRowBySetParameter_Setting[0]};
                this.Rows.Add(rowSettingRow);
                return rowSettingRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SettingDataTable cln = ((SettingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SettingDataTable();
            }
            
            internal void InitVars() {
                this.columnSetting_Id = this.Columns["Setting_Id"];
                this.columnSetParameter_Id = this.Columns["SetParameter_Id"];
            }
            
            private void InitClass() {
                this.columnSetting_Id = new DataColumn("Setting_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnSetting_Id);
                this.columnSetParameter_Id = new DataColumn("SetParameter_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnSetParameter_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnSetting_Id}, true));
                this.columnSetting_Id.AutoIncrement = true;
                this.columnSetting_Id.AllowDBNull = false;
                this.columnSetting_Id.Unique = true;
            }
            
            public SettingRow NewSettingRow() {
                return ((SettingRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SettingRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SettingRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SettingRowChanged != null)) {
                    this.SettingRowChanged(this, new SettingRowChangeEvent(((SettingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SettingRowChanging != null)) {
                    this.SettingRowChanging(this, new SettingRowChangeEvent(((SettingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SettingRowDeleted != null)) {
                    this.SettingRowDeleted(this, new SettingRowChangeEvent(((SettingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SettingRowDeleting != null)) {
                    this.SettingRowDeleting(this, new SettingRowChangeEvent(((SettingRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSettingRow(SettingRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SettingRow : DataRow {
            
            private SettingDataTable tableSetting;
            
            internal SettingRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSetting = ((SettingDataTable)(this.Table));
            }
            
            public SetParameterRow SetParameterRow {
                get {
                    return ((SetParameterRow)(this.GetParentRow(this.Table.ParentRelations["SetParameter_Setting"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SetParameter_Setting"]);
                }
            }
            
            public ServerRow[] GetServerRows() {
                return ((ServerRow[])(this.GetChildRows(this.Table.ChildRelations["Setting_Server"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SettingRowChangeEvent : EventArgs {
            
            private SettingRow eventRow;
            
            private DataRowAction eventAction;
            
            public SettingRowChangeEvent(SettingRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SettingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnDescription;
            
            private DataColumn columnOrderStatusInterval;
            
            private DataColumn columnSetting_Id;
            
            internal ServerDataTable() : 
                    base("Server") {
                this.InitClass();
            }
            
            internal ServerDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn OrderStatusIntervalColumn {
                get {
                    return this.columnOrderStatusInterval;
                }
            }
            
            internal DataColumn Setting_IdColumn {
                get {
                    return this.columnSetting_Id;
                }
            }
            
            public ServerRow this[int index] {
                get {
                    return ((ServerRow)(this.Rows[index]));
                }
            }
            
            public event ServerRowChangeEventHandler ServerRowChanged;
            
            public event ServerRowChangeEventHandler ServerRowChanging;
            
            public event ServerRowChangeEventHandler ServerRowDeleted;
            
            public event ServerRowChangeEventHandler ServerRowDeleting;
            
            public void AddServerRow(ServerRow row) {
                this.Rows.Add(row);
            }
            
            public ServerRow AddServerRow(string Description, string OrderStatusInterval, SettingRow parentSettingRowBySetting_Server) {
                ServerRow rowServerRow = ((ServerRow)(this.NewRow()));
                rowServerRow.ItemArray = new object[] {
                        Description,
                        OrderStatusInterval,
                        parentSettingRowBySetting_Server[0]};
                this.Rows.Add(rowServerRow);
                return rowServerRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ServerDataTable cln = ((ServerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ServerDataTable();
            }
            
            internal void InitVars() {
                this.columnDescription = this.Columns["Description"];
                this.columnOrderStatusInterval = this.Columns["OrderStatusInterval"];
                this.columnSetting_Id = this.Columns["Setting_Id"];
            }
            
            private void InitClass() {
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDescription);
                this.columnOrderStatusInterval = new DataColumn("OrderStatusInterval", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOrderStatusInterval);
                this.columnSetting_Id = new DataColumn("Setting_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnSetting_Id);
                this.columnDescription.Namespace = "";
                this.columnOrderStatusInterval.Namespace = "";
            }
            
            public ServerRow NewServerRow() {
                return ((ServerRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ServerRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ServerRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerRowChanged != null)) {
                    this.ServerRowChanged(this, new ServerRowChangeEvent(((ServerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerRowChanging != null)) {
                    this.ServerRowChanging(this, new ServerRowChangeEvent(((ServerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerRowDeleted != null)) {
                    this.ServerRowDeleted(this, new ServerRowChangeEvent(((ServerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerRowDeleting != null)) {
                    this.ServerRowDeleting(this, new ServerRowChangeEvent(((ServerRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveServerRow(ServerRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerRow : DataRow {
            
            private ServerDataTable tableServer;
            
            internal ServerRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableServer = ((ServerDataTable)(this.Table));
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableServer.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServer.DescriptionColumn] = value;
                }
            }
            
            public string OrderStatusInterval {
                get {
                    try {
                        return ((string)(this[this.tableServer.OrderStatusIntervalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServer.OrderStatusIntervalColumn] = value;
                }
            }
            
            public SettingRow SettingRow {
                get {
                    return ((SettingRow)(this.GetParentRow(this.Table.ParentRelations["Setting_Server"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Setting_Server"]);
                }
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableServer.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableServer.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrderStatusIntervalNull() {
                return this.IsNull(this.tableServer.OrderStatusIntervalColumn);
            }
            
            public void SetOrderStatusIntervalNull() {
                this[this.tableServer.OrderStatusIntervalColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerRowChangeEvent : EventArgs {
            
            private ServerRow eventRow;
            
            private DataRowAction eventAction;
            
            public ServerRowChangeEvent(ServerRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ServerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PauseServerDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPauseServer_Id;
            
            internal PauseServerDataTable() : 
                    base("PauseServer") {
                this.InitClass();
            }
            
            internal PauseServerDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PauseServer_IdColumn {
                get {
                    return this.columnPauseServer_Id;
                }
            }
            
            public PauseServerRow this[int index] {
                get {
                    return ((PauseServerRow)(this.Rows[index]));
                }
            }
            
            public event PauseServerRowChangeEventHandler PauseServerRowChanged;
            
            public event PauseServerRowChangeEventHandler PauseServerRowChanging;
            
            public event PauseServerRowChangeEventHandler PauseServerRowDeleted;
            
            public event PauseServerRowChangeEventHandler PauseServerRowDeleting;
            
            public void AddPauseServerRow(PauseServerRow row) {
                this.Rows.Add(row);
            }
            
            public PauseServerRow AddPauseServerRow() {
                PauseServerRow rowPauseServerRow = ((PauseServerRow)(this.NewRow()));
                rowPauseServerRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowPauseServerRow);
                return rowPauseServerRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PauseServerDataTable cln = ((PauseServerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PauseServerDataTable();
            }
            
            internal void InitVars() {
                this.columnPauseServer_Id = this.Columns["PauseServer_Id"];
            }
            
            private void InitClass() {
                this.columnPauseServer_Id = new DataColumn("PauseServer_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnPauseServer_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnPauseServer_Id}, true));
                this.columnPauseServer_Id.AutoIncrement = true;
                this.columnPauseServer_Id.AllowDBNull = false;
                this.columnPauseServer_Id.Unique = true;
            }
            
            public PauseServerRow NewPauseServerRow() {
                return ((PauseServerRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PauseServerRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PauseServerRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PauseServerRowChanged != null)) {
                    this.PauseServerRowChanged(this, new PauseServerRowChangeEvent(((PauseServerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PauseServerRowChanging != null)) {
                    this.PauseServerRowChanging(this, new PauseServerRowChangeEvent(((PauseServerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PauseServerRowDeleted != null)) {
                    this.PauseServerRowDeleted(this, new PauseServerRowChangeEvent(((PauseServerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PauseServerRowDeleting != null)) {
                    this.PauseServerRowDeleting(this, new PauseServerRowChangeEvent(((PauseServerRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePauseServerRow(PauseServerRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PauseServerRow : DataRow {
            
            private PauseServerDataTable tablePauseServer;
            
            internal PauseServerRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePauseServer = ((PauseServerDataTable)(this.Table));
            }
            
            public ServerPassword4Row[] GetServerPassword4Rows() {
                return ((ServerPassword4Row[])(this.GetChildRows(this.Table.ChildRelations["PauseServer_ServerPassword4"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PauseServerRowChangeEvent : EventArgs {
            
            private PauseServerRow eventRow;
            
            private DataRowAction eventAction;
            
            public PauseServerRowChangeEvent(PauseServerRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PauseServerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerPassword4DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnEncodedPassword;
            
            private DataColumn columnEncodeNumber;
            
            private DataColumn columnPauseServer_Id;
            
            internal ServerPassword4DataTable() : 
                    base("ServerPassword4") {
                this.InitClass();
            }
            
            internal ServerPassword4DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn EncodedPasswordColumn {
                get {
                    return this.columnEncodedPassword;
                }
            }
            
            internal DataColumn EncodeNumberColumn {
                get {
                    return this.columnEncodeNumber;
                }
            }
            
            internal DataColumn PauseServer_IdColumn {
                get {
                    return this.columnPauseServer_Id;
                }
            }
            
            public ServerPassword4Row this[int index] {
                get {
                    return ((ServerPassword4Row)(this.Rows[index]));
                }
            }
            
            public event ServerPassword4RowChangeEventHandler ServerPassword4RowChanged;
            
            public event ServerPassword4RowChangeEventHandler ServerPassword4RowChanging;
            
            public event ServerPassword4RowChangeEventHandler ServerPassword4RowDeleted;
            
            public event ServerPassword4RowChangeEventHandler ServerPassword4RowDeleting;
            
            public void AddServerPassword4Row(ServerPassword4Row row) {
                this.Rows.Add(row);
            }
            
            public ServerPassword4Row AddServerPassword4Row(string EncodedPassword, string EncodeNumber, PauseServerRow parentPauseServerRowByPauseServer_ServerPassword4) {
                ServerPassword4Row rowServerPassword4Row = ((ServerPassword4Row)(this.NewRow()));
                rowServerPassword4Row.ItemArray = new object[] {
                        EncodedPassword,
                        EncodeNumber,
                        parentPauseServerRowByPauseServer_ServerPassword4[0]};
                this.Rows.Add(rowServerPassword4Row);
                return rowServerPassword4Row;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ServerPassword4DataTable cln = ((ServerPassword4DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ServerPassword4DataTable();
            }
            
            internal void InitVars() {
                this.columnEncodedPassword = this.Columns["EncodedPassword"];
                this.columnEncodeNumber = this.Columns["EncodeNumber"];
                this.columnPauseServer_Id = this.Columns["PauseServer_Id"];
            }
            
            private void InitClass() {
                this.columnEncodedPassword = new DataColumn("EncodedPassword", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnEncodedPassword);
                this.columnEncodeNumber = new DataColumn("EncodeNumber", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnEncodeNumber);
                this.columnPauseServer_Id = new DataColumn("PauseServer_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnPauseServer_Id);
                this.columnEncodedPassword.AllowDBNull = false;
                this.columnEncodedPassword.Namespace = "";
                this.columnEncodeNumber.Namespace = "";
                this.columnEncodeNumber.DefaultValue = "7";
            }
            
            public ServerPassword4Row NewServerPassword4Row() {
                return ((ServerPassword4Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ServerPassword4Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ServerPassword4Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerPassword4RowChanged != null)) {
                    this.ServerPassword4RowChanged(this, new ServerPassword4RowChangeEvent(((ServerPassword4Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerPassword4RowChanging != null)) {
                    this.ServerPassword4RowChanging(this, new ServerPassword4RowChangeEvent(((ServerPassword4Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerPassword4RowDeleted != null)) {
                    this.ServerPassword4RowDeleted(this, new ServerPassword4RowChangeEvent(((ServerPassword4Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerPassword4RowDeleting != null)) {
                    this.ServerPassword4RowDeleting(this, new ServerPassword4RowChangeEvent(((ServerPassword4Row)(e.Row)), e.Action));
                }
            }
            
            public void RemoveServerPassword4Row(ServerPassword4Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerPassword4Row : DataRow {
            
            private ServerPassword4DataTable tableServerPassword4;
            
            internal ServerPassword4Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerPassword4 = ((ServerPassword4DataTable)(this.Table));
            }
            
            public string EncodedPassword {
                get {
                    return ((string)(this[this.tableServerPassword4.EncodedPasswordColumn]));
                }
                set {
                    this[this.tableServerPassword4.EncodedPasswordColumn] = value;
                }
            }
            
            public string EncodeNumber {
                get {
                    try {
                        return ((string)(this[this.tableServerPassword4.EncodeNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerPassword4.EncodeNumberColumn] = value;
                }
            }
            
            public PauseServerRow PauseServerRow {
                get {
                    return ((PauseServerRow)(this.GetParentRow(this.Table.ParentRelations["PauseServer_ServerPassword4"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PauseServer_ServerPassword4"]);
                }
            }
            
            public bool IsEncodeNumberNull() {
                return this.IsNull(this.tableServerPassword4.EncodeNumberColumn);
            }
            
            public void SetEncodeNumberNull() {
                this[this.tableServerPassword4.EncodeNumberColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerPassword4RowChangeEvent : EventArgs {
            
            private ServerPassword4Row eventRow;
            
            private DataRowAction eventAction;
            
            public ServerPassword4RowChangeEvent(ServerPassword4Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ServerPassword4Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ResumeServerDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnResumeServer_Id;
            
            internal ResumeServerDataTable() : 
                    base("ResumeServer") {
                this.InitClass();
            }
            
            internal ResumeServerDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ResumeServer_IdColumn {
                get {
                    return this.columnResumeServer_Id;
                }
            }
            
            public ResumeServerRow this[int index] {
                get {
                    return ((ResumeServerRow)(this.Rows[index]));
                }
            }
            
            public event ResumeServerRowChangeEventHandler ResumeServerRowChanged;
            
            public event ResumeServerRowChangeEventHandler ResumeServerRowChanging;
            
            public event ResumeServerRowChangeEventHandler ResumeServerRowDeleted;
            
            public event ResumeServerRowChangeEventHandler ResumeServerRowDeleting;
            
            public void AddResumeServerRow(ResumeServerRow row) {
                this.Rows.Add(row);
            }
            
            public ResumeServerRow AddResumeServerRow() {
                ResumeServerRow rowResumeServerRow = ((ResumeServerRow)(this.NewRow()));
                rowResumeServerRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowResumeServerRow);
                return rowResumeServerRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ResumeServerDataTable cln = ((ResumeServerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ResumeServerDataTable();
            }
            
            internal void InitVars() {
                this.columnResumeServer_Id = this.Columns["ResumeServer_Id"];
            }
            
            private void InitClass() {
                this.columnResumeServer_Id = new DataColumn("ResumeServer_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnResumeServer_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnResumeServer_Id}, true));
                this.columnResumeServer_Id.AutoIncrement = true;
                this.columnResumeServer_Id.AllowDBNull = false;
                this.columnResumeServer_Id.Unique = true;
            }
            
            public ResumeServerRow NewResumeServerRow() {
                return ((ResumeServerRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ResumeServerRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ResumeServerRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ResumeServerRowChanged != null)) {
                    this.ResumeServerRowChanged(this, new ResumeServerRowChangeEvent(((ResumeServerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ResumeServerRowChanging != null)) {
                    this.ResumeServerRowChanging(this, new ResumeServerRowChangeEvent(((ResumeServerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ResumeServerRowDeleted != null)) {
                    this.ResumeServerRowDeleted(this, new ResumeServerRowChangeEvent(((ResumeServerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ResumeServerRowDeleting != null)) {
                    this.ResumeServerRowDeleting(this, new ResumeServerRowChangeEvent(((ResumeServerRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveResumeServerRow(ResumeServerRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ResumeServerRow : DataRow {
            
            private ResumeServerDataTable tableResumeServer;
            
            internal ResumeServerRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableResumeServer = ((ResumeServerDataTable)(this.Table));
            }
            
            public ServerPasswordRow[] GetServerPasswordRows() {
                return ((ServerPasswordRow[])(this.GetChildRows(this.Table.ChildRelations["ResumeServer_ServerPassword"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ResumeServerRowChangeEvent : EventArgs {
            
            private ResumeServerRow eventRow;
            
            private DataRowAction eventAction;
            
            public ResumeServerRowChangeEvent(ResumeServerRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ResumeServerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StopServerDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCancelOrdersInProcess;
            
            private DataColumn columnStopServer_Id;
            
            internal StopServerDataTable() : 
                    base("StopServer") {
                this.InitClass();
            }
            
            internal StopServerDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CancelOrdersInProcessColumn {
                get {
                    return this.columnCancelOrdersInProcess;
                }
            }
            
            internal DataColumn StopServer_IdColumn {
                get {
                    return this.columnStopServer_Id;
                }
            }
            
            public StopServerRow this[int index] {
                get {
                    return ((StopServerRow)(this.Rows[index]));
                }
            }
            
            public event StopServerRowChangeEventHandler StopServerRowChanged;
            
            public event StopServerRowChangeEventHandler StopServerRowChanging;
            
            public event StopServerRowChangeEventHandler StopServerRowDeleted;
            
            public event StopServerRowChangeEventHandler StopServerRowDeleting;
            
            public void AddStopServerRow(StopServerRow row) {
                this.Rows.Add(row);
            }
            
            public StopServerRow AddStopServerRow(string CancelOrdersInProcess) {
                StopServerRow rowStopServerRow = ((StopServerRow)(this.NewRow()));
                rowStopServerRow.ItemArray = new object[] {
                        CancelOrdersInProcess,
                        null};
                this.Rows.Add(rowStopServerRow);
                return rowStopServerRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                StopServerDataTable cln = ((StopServerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new StopServerDataTable();
            }
            
            internal void InitVars() {
                this.columnCancelOrdersInProcess = this.Columns["CancelOrdersInProcess"];
                this.columnStopServer_Id = this.Columns["StopServer_Id"];
            }
            
            private void InitClass() {
                this.columnCancelOrdersInProcess = new DataColumn("CancelOrdersInProcess", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCancelOrdersInProcess);
                this.columnStopServer_Id = new DataColumn("StopServer_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnStopServer_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnStopServer_Id}, true));
                this.columnCancelOrdersInProcess.Namespace = "";
                this.columnCancelOrdersInProcess.DefaultValue = "true";
                this.columnStopServer_Id.AutoIncrement = true;
                this.columnStopServer_Id.AllowDBNull = false;
                this.columnStopServer_Id.Unique = true;
            }
            
            public StopServerRow NewStopServerRow() {
                return ((StopServerRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new StopServerRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(StopServerRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StopServerRowChanged != null)) {
                    this.StopServerRowChanged(this, new StopServerRowChangeEvent(((StopServerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StopServerRowChanging != null)) {
                    this.StopServerRowChanging(this, new StopServerRowChangeEvent(((StopServerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StopServerRowDeleted != null)) {
                    this.StopServerRowDeleted(this, new StopServerRowChangeEvent(((StopServerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StopServerRowDeleting != null)) {
                    this.StopServerRowDeleting(this, new StopServerRowChangeEvent(((StopServerRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveStopServerRow(StopServerRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StopServerRow : DataRow {
            
            private StopServerDataTable tableStopServer;
            
            internal StopServerRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableStopServer = ((StopServerDataTable)(this.Table));
            }
            
            public string CancelOrdersInProcess {
                get {
                    try {
                        return ((string)(this[this.tableStopServer.CancelOrdersInProcessColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStopServer.CancelOrdersInProcessColumn] = value;
                }
            }
            
            public bool IsCancelOrdersInProcessNull() {
                return this.IsNull(this.tableStopServer.CancelOrdersInProcessColumn);
            }
            
            public void SetCancelOrdersInProcessNull() {
                this[this.tableStopServer.CancelOrdersInProcessColumn] = System.Convert.DBNull;
            }
            
            public ServerPassword5Row[] GetServerPassword5Rows() {
                return ((ServerPassword5Row[])(this.GetChildRows(this.Table.ChildRelations["StopServer_ServerPassword5"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StopServerRowChangeEvent : EventArgs {
            
            private StopServerRow eventRow;
            
            private DataRowAction eventAction;
            
            public StopServerRowChangeEvent(StopServerRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public StopServerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerPassword5DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnEncodedPassword;
            
            private DataColumn columnEncodeNumber;
            
            private DataColumn columnStopServer_Id;
            
            internal ServerPassword5DataTable() : 
                    base("ServerPassword5") {
                this.InitClass();
            }
            
            internal ServerPassword5DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn EncodedPasswordColumn {
                get {
                    return this.columnEncodedPassword;
                }
            }
            
            internal DataColumn EncodeNumberColumn {
                get {
                    return this.columnEncodeNumber;
                }
            }
            
            internal DataColumn StopServer_IdColumn {
                get {
                    return this.columnStopServer_Id;
                }
            }
            
            public ServerPassword5Row this[int index] {
                get {
                    return ((ServerPassword5Row)(this.Rows[index]));
                }
            }
            
            public event ServerPassword5RowChangeEventHandler ServerPassword5RowChanged;
            
            public event ServerPassword5RowChangeEventHandler ServerPassword5RowChanging;
            
            public event ServerPassword5RowChangeEventHandler ServerPassword5RowDeleted;
            
            public event ServerPassword5RowChangeEventHandler ServerPassword5RowDeleting;
            
            public void AddServerPassword5Row(ServerPassword5Row row) {
                this.Rows.Add(row);
            }
            
            public ServerPassword5Row AddServerPassword5Row(string EncodedPassword, string EncodeNumber, StopServerRow parentStopServerRowByStopServer_ServerPassword5) {
                ServerPassword5Row rowServerPassword5Row = ((ServerPassword5Row)(this.NewRow()));
                rowServerPassword5Row.ItemArray = new object[] {
                        EncodedPassword,
                        EncodeNumber,
                        parentStopServerRowByStopServer_ServerPassword5[1]};
                this.Rows.Add(rowServerPassword5Row);
                return rowServerPassword5Row;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ServerPassword5DataTable cln = ((ServerPassword5DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ServerPassword5DataTable();
            }
            
            internal void InitVars() {
                this.columnEncodedPassword = this.Columns["EncodedPassword"];
                this.columnEncodeNumber = this.Columns["EncodeNumber"];
                this.columnStopServer_Id = this.Columns["StopServer_Id"];
            }
            
            private void InitClass() {
                this.columnEncodedPassword = new DataColumn("EncodedPassword", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnEncodedPassword);
                this.columnEncodeNumber = new DataColumn("EncodeNumber", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnEncodeNumber);
                this.columnStopServer_Id = new DataColumn("StopServer_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnStopServer_Id);
                this.columnEncodedPassword.AllowDBNull = false;
                this.columnEncodedPassword.Namespace = "";
                this.columnEncodeNumber.Namespace = "";
                this.columnEncodeNumber.DefaultValue = "7";
            }
            
            public ServerPassword5Row NewServerPassword5Row() {
                return ((ServerPassword5Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ServerPassword5Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ServerPassword5Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerPassword5RowChanged != null)) {
                    this.ServerPassword5RowChanged(this, new ServerPassword5RowChangeEvent(((ServerPassword5Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerPassword5RowChanging != null)) {
                    this.ServerPassword5RowChanging(this, new ServerPassword5RowChangeEvent(((ServerPassword5Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerPassword5RowDeleted != null)) {
                    this.ServerPassword5RowDeleted(this, new ServerPassword5RowChangeEvent(((ServerPassword5Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerPassword5RowDeleting != null)) {
                    this.ServerPassword5RowDeleting(this, new ServerPassword5RowChangeEvent(((ServerPassword5Row)(e.Row)), e.Action));
                }
            }
            
            public void RemoveServerPassword5Row(ServerPassword5Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerPassword5Row : DataRow {
            
            private ServerPassword5DataTable tableServerPassword5;
            
            internal ServerPassword5Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerPassword5 = ((ServerPassword5DataTable)(this.Table));
            }
            
            public string EncodedPassword {
                get {
                    return ((string)(this[this.tableServerPassword5.EncodedPasswordColumn]));
                }
                set {
                    this[this.tableServerPassword5.EncodedPasswordColumn] = value;
                }
            }
            
            public string EncodeNumber {
                get {
                    try {
                        return ((string)(this[this.tableServerPassword5.EncodeNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerPassword5.EncodeNumberColumn] = value;
                }
            }
            
            public StopServerRow StopServerRow {
                get {
                    return ((StopServerRow)(this.GetParentRow(this.Table.ParentRelations["StopServer_ServerPassword5"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["StopServer_ServerPassword5"]);
                }
            }
            
            public bool IsEncodeNumberNull() {
                return this.IsNull(this.tableServerPassword5.EncodeNumberColumn);
            }
            
            public void SetEncodeNumberNull() {
                this[this.tableServerPassword5.EncodeNumberColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerPassword5RowChangeEvent : EventArgs {
            
            private ServerPassword5Row eventRow;
            
            private DataRowAction eventAction;
            
            public ServerPassword5RowChangeEvent(ServerPassword5Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ServerPassword5Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
