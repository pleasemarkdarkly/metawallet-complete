//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=1.1.4322.2032.
// 
namespace RImageSchemas.Serialization.Orders.Production {
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ProductionOrder {
        
        /// <remarks/>
        public Media Media;
        
        /// <remarks/>
        public Target Target;
        
        /// <remarks/>
        public InOut InOut;
        
        /// <remarks/>
        public Customize Customize;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Action")]
        public Action[] Action;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string OrderId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ClientId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Originator;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ProductionOrderPriority.Normal)]
        public ProductionOrderPriority Priority = ProductionOrderPriority.Normal;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("1")]
        public string Copies = "1";
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string EmailAddress;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ProductionOrderSimulateRecording.@false)]
        public ProductionOrderSimulateRecording SimulateRecording = ProductionOrderSimulateRecording.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ProductionOrderSimulatePrinting.@false)]
        public ProductionOrderSimulatePrinting SimulatePrinting = ProductionOrderSimulatePrinting.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CD_Text_Filename;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Media {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(MediaType.CDR)]
        public MediaType Type = MediaType.CDR;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(MediaSize.Item120mm)]
        public MediaSize Size = MediaSize.Item120mm;
    }
    
    /// <remarks/>
    public enum MediaType {
        
        /// <remarks/>
        CDR,
        
        /// <remarks/>
        DVDR,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DVDR-DL")]
        DVDRDL,
        
        /// <remarks/>
        SOQ_CDR,
        
        /// <remarks/>
        SOQ_DVDR,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SOQ_DVDR-DL")]
        SOQ_DVDRDL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DVDR-HD")]
        DVDRHD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DVDR-BD")]
        DVDRBD,
    }
    
    /// <remarks/>
    public enum MediaSize {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120mm")]
        Item120mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("80mm")]
        Item80mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("63mm")]
        Item63mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("61mm")]
        Item61mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("58mm")]
        Item58mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("59x85mm")]
        Item59x85mm,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Copy {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(CopyDisplayMap.@false)]
        public CopyDisplayMap DisplayMap = CopyDisplayMap.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(CopyForceDAO.@false)]
        public CopyForceDAO ForceDAO = CopyForceDAO.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(CopyRawMode.@false)]
        public CopyRawMode RawMode = CopyRawMode.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string VerifyChecksum;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(CopyReadSpeed.Maximum)]
        public CopyReadSpeed ReadSpeed = CopyReadSpeed.Maximum;
    }
    
    /// <remarks/>
    public enum CopyDisplayMap {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum CopyForceDAO {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum CopyRawMode {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum CopyReadSpeed {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8")]
        Item8,
        
        /// <remarks/>
        Maximum,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Collate {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class PDF {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class BTW_ODBC {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ODBC_Connect;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string SQLSelect;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(BTW_ODBCRenderLocalCopy.@false)]
        public BTW_ODBCRenderLocalCopy RenderLocalCopy = BTW_ODBCRenderLocalCopy.@false;
    }
    
    /// <remarks/>
    public enum BTW_ODBCRenderLocalCopy {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class BTW {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Merge_Filename;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(BTWSaveAfterRendering.@false)]
        public BTWSaveAfterRendering SaveAfterRendering = BTWSaveAfterRendering.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(BTWDeleteMergeFileOnCompletion.@false)]
        public BTWDeleteMergeFileOnCompletion DeleteMergeFileOnCompletion = BTWDeleteMergeFileOnCompletion.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(BTWRenderLocalCopy.@false)]
        public BTWRenderLocalCopy RenderLocalCopy = BTWRenderLocalCopy.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(BTWMergeFileHasFieldNames.@false)]
        public BTWMergeFileHasFieldNames MergeFileHasFieldNames = BTWMergeFileHasFieldNames.@false;
    }
    
    /// <remarks/>
    public enum BTWSaveAfterRendering {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
        
        /// <remarks/>
        @default,
    }
    
    /// <remarks/>
    public enum BTWDeleteMergeFileOnCompletion {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum BTWRenderLocalCopy {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum BTWMergeFileHasFieldNames {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class BMP {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class PCL {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Label {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("PDF", typeof(PDF))]
        [System.Xml.Serialization.XmlElementAttribute("PCL", typeof(PCL))]
        [System.Xml.Serialization.XmlElementAttribute("BMP", typeof(BMP))]
        [System.Xml.Serialization.XmlElementAttribute("BTW", typeof(BTW))]
        [System.Xml.Serialization.XmlElementAttribute("BTW_ODBC", typeof(BTW_ODBC))]
        public object Item;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Filename;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string PerfectPrintAngle;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(LabelDeleteOnCompletion.@false)]
        public LabelDeleteOnCompletion DeleteOnCompletion = LabelDeleteOnCompletion.@false;
    }
    
    /// <remarks/>
    public enum LabelDeleteOnCompletion {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class CallReadProc {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(CallReadProcPrintRejectLabelOnError.@false)]
        public CallReadProcPrintRejectLabelOnError PrintRejectLabelOnError = CallReadProcPrintRejectLabelOnError.@false;
    }
    
    /// <remarks/>
    public enum CallReadProcPrintRejectLabelOnError {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ReadDisc {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Filename;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ReadDiscBlockSize.@default)]
        public ReadDiscBlockSize BlockSize = ReadDiscBlockSize.@default;
    }
    
    /// <remarks/>
    public enum ReadDiscBlockSize {
        
        /// <remarks/>
        @default,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2352")]
        Item2352,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2368")]
        Item2368,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2448")]
        Item2448,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ReadDDP {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DirectoryName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string MasterId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Text;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class TerminateRead {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(TerminateReadEjectDisc.@true)]
        public TerminateReadEjectDisc EjectDisc = TerminateReadEjectDisc.@true;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(TerminateReadPrintRejectLabel.@false)]
        public TerminateReadPrintRejectLabel PrintRejectLabel = TerminateReadPrintRejectLabel.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(TerminateReadOutputToAcceptBin.@false)]
        public TerminateReadOutputToAcceptBin OutputToAcceptBin = TerminateReadOutputToAcceptBin.@false;
    }
    
    /// <remarks/>
    public enum TerminateReadEjectDisc {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum TerminateReadPrintRejectLabel {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum TerminateReadOutputToAcceptBin {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Destroy {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string VolumeId;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class CloseSession {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(CloseSessionAppendable.@true)]
        public CloseSessionAppendable Appendable = CloseSessionAppendable.@true;
    }
    
    /// <remarks/>
    public enum CloseSessionAppendable {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ReadPVD {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Filename;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string TrackNumber;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ReadTrack {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Filename;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string TrackNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ReadTrackPrefixHeader.@false)]
        public ReadTrackPrefixHeader PrefixHeader = ReadTrackPrefixHeader.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Description;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ReadTrackReadPregap.@false)]
        public ReadTrackReadPregap ReadPregap = ReadTrackReadPregap.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ReadTrackReadNextPregap.@false)]
        public ReadTrackReadNextPregap ReadNextPregap = ReadTrackReadNextPregap.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ReadTrackBlockSize.@default)]
        public ReadTrackBlockSize BlockSize = ReadTrackBlockSize.@default;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ReadTrackExtractISOFiles.@false)]
        public ReadTrackExtractISOFiles ExtractISOFiles = ReadTrackExtractISOFiles.@false;
    }
    
    /// <remarks/>
    public enum ReadTrackPrefixHeader {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum ReadTrackReadPregap {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum ReadTrackReadNextPregap {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum ReadTrackBlockSize {
        
        /// <remarks/>
        @default,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2352")]
        Item2352,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2368")]
        Item2368,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2448")]
        Item2448,
    }
    
    /// <remarks/>
    public enum ReadTrackExtractISOFiles {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Map {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Filename;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(MapGetBarcode.@false)]
        public MapGetBarcode GetBarcode = MapGetBarcode.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(MapFullDiscMap.@false)]
        public MapFullDiscMap FullDiscMap = MapFullDiscMap.@false;
    }
    
    /// <remarks/>
    public enum MapGetBarcode {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum MapFullDiscMap {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Read {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Destroy", typeof(Destroy))]
        [System.Xml.Serialization.XmlElementAttribute("CallReadProc", typeof(CallReadProc))]
        [System.Xml.Serialization.XmlElementAttribute("CloseSession", typeof(CloseSession))]
        [System.Xml.Serialization.XmlElementAttribute("TerminateRead", typeof(TerminateRead))]
        [System.Xml.Serialization.XmlElementAttribute("ReadTrack", typeof(ReadTrack))]
        [System.Xml.Serialization.XmlElementAttribute("ReadDDP", typeof(ReadDDP))]
        [System.Xml.Serialization.XmlElementAttribute("Map", typeof(Map))]
        [System.Xml.Serialization.XmlElementAttribute("ReadPVD", typeof(ReadPVD))]
        [System.Xml.Serialization.XmlElementAttribute("ReadDisc", typeof(ReadDisc))]
        public object Item;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ReadReadSpeed.Unspecified)]
        public ReadReadSpeed ReadSpeed = ReadReadSpeed.Unspecified;
    }
    
    /// <remarks/>
    public enum ReadReadSpeed {
        
        /// <remarks/>
        Unspecified,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8")]
        Item8,
        
        /// <remarks/>
        Maximum,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class WriteDisc {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Filename;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ReserveTrack {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string NumberOfBlocks;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Fixate {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(FixateType.TAO)]
        public FixateType Type = FixateType.TAO;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(FixateFinal.@false)]
        public FixateFinal Final = FixateFinal.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string UPC_EAN;
    }
    
    /// <remarks/>
    public enum FixateType {
        
        /// <remarks/>
        TAO,
        
        /// <remarks/>
        SAO,
        
        /// <remarks/>
        SAO_Segmented,
        
        /// <remarks/>
        TAO_Segmented,
        
        /// <remarks/>
        Raw,
        
        /// <remarks/>
        Skip,
    }
    
    /// <remarks/>
    public enum FixateFinal {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class WriteDDP {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DirectoryName;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(WriteDDPAppendable.@false)]
        public WriteDDPAppendable Appendable = WriteDDPAppendable.@false;
    }
    
    /// <remarks/>
    public enum WriteDDPAppendable {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class DvdFlags {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(DvdFlagsADP_TY.Item0)]
        public DvdFlagsADP_TY ADP_TY = DvdFlagsADP_TY.Item0;
    }
    
    /// <remarks/>
    public enum DvdFlagsADP_TY {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class DataControl {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(DataControlBit1.@false)]
        public DataControlBit1 Bit1 = DataControlBit1.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(DataControlAllowCopy.@false)]
        public DataControlAllowCopy AllowCopy = DataControlAllowCopy.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(DataControlBit4.@true)]
        public DataControlBit4 Bit4 = DataControlBit4.@true;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(DataControlBit8.@false)]
        public DataControlBit8 Bit8 = DataControlBit8.@false;
    }
    
    /// <remarks/>
    public enum DataControlBit1 {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum DataControlAllowCopy {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum DataControlBit4 {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum DataControlBit8 {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class VolumeId {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string volume_id;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(VolumeIdUsage.MustExistOnDisc)]
        public VolumeIdUsage Usage = VolumeIdUsage.MustExistOnDisc;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string PvdFilename;
    }
    
    /// <remarks/>
    public enum VolumeIdUsage {
        
        /// <remarks/>
        MustExistOnDisc,
        
        /// <remarks/>
        MustNotExistOnDisc,
        
        /// <remarks/>
        ChangeTo,
        
        /// <remarks/>
        ReadPVDFromFile,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Data {
        
        /// <remarks/>
        public VolumeId VolumeId;
        
        /// <remarks/>
        public DataControl DataControl;
        
        /// <remarks/>
        public DvdFlags DvdFlags;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(DataType.Mode1)]
        public DataType Type = DataType.Mode1;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(DataMergeSessions.@false)]
        public DataMergeSessions MergeSessions = DataMergeSessions.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(DataDisableExtentFixups.@false)]
        public DataDisableExtentFixups DisableExtentFixups = DataDisableExtentFixups.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string VerifyChecksum;
    }
    
    /// <remarks/>
    public enum DataType {
        
        /// <remarks/>
        Mode1,
        
        /// <remarks/>
        Mode2,
        
        /// <remarks/>
        XA_Form1,
        
        /// <remarks/>
        XA_Mixed,
        
        /// <remarks/>
        CD_I,
    }
    
    /// <remarks/>
    public enum DataMergeSessions {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum DataDisableExtentFixups {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class AudioControl {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(AudioControlAllowCopy.@false)]
        public AudioControlAllowCopy AllowCopy = AudioControlAllowCopy.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(AudioControlPreEmphasis.@false)]
        public AudioControlPreEmphasis PreEmphasis = AudioControlPreEmphasis.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(AudioControlFourChannel.@false)]
        public AudioControlFourChannel FourChannel = AudioControlFourChannel.@false;
    }
    
    /// <remarks/>
    public enum AudioControlAllowCopy {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum AudioControlPreEmphasis {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum AudioControlFourChannel {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class SubIndex {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string BlockNumber;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Audio {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("SubIndex")]
        public SubIndex[] SubIndex;
        
        /// <remarks/>
        public AudioControl AudioControl;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ISRC;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string AddPregapBlocks;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string EmbeddedPregapBlocks;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class WriteTrack {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Data", typeof(Data))]
        [System.Xml.Serialization.XmlElementAttribute("Audio", typeof(Audio))]
        public object Item;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Filename;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ReservedTrackNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(WriteTrackDeleteAfterRecording.@false)]
        public WriteTrackDeleteAfterRecording DeleteAfterRecording = WriteTrackDeleteAfterRecording.@false;
    }
    
    /// <remarks/>
    public enum WriteTrackDeleteAfterRecording {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Record {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("WriteDDP", typeof(WriteDDP))]
        [System.Xml.Serialization.XmlElementAttribute("WriteDisc", typeof(WriteDisc))]
        [System.Xml.Serialization.XmlElementAttribute("Fixate", typeof(Fixate))]
        [System.Xml.Serialization.XmlElementAttribute("ReserveTrack", typeof(ReserveTrack))]
        [System.Xml.Serialization.XmlElementAttribute("WriteTrack", typeof(WriteTrack))]
        public object Item;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Action {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Collate", typeof(Collate))]
        [System.Xml.Serialization.XmlElementAttribute("Record", typeof(Record))]
        [System.Xml.Serialization.XmlElementAttribute("Copy", typeof(Copy))]
        [System.Xml.Serialization.XmlElementAttribute("Read", typeof(Read))]
        [System.Xml.Serialization.XmlElementAttribute("Destroy", typeof(Destroy))]
        [System.Xml.Serialization.XmlElementAttribute("Label", typeof(Label))]
        public object Item;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Customize {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string UserType;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string UserData;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class InOut {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(InOutInputBin.ANY)]
        public InOutInputBin InputBin = InOutInputBin.ANY;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string OutputMailslot;
    }
    
    /// <remarks/>
    public enum InOutInputBin {
        
        /// <remarks/>
        ANY,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Target {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("DefaultProductionCluster")]
        public string Cluster = "DefaultProductionCluster";
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("ANY")]
        public string Server = "ANY";
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(TargetLine.ANY)]
        public TargetLine Line = TargetLine.ANY;
    }
    
    /// <remarks/>
    public enum TargetLine {
        
        /// <remarks/>
        ANY,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
    }
    
    /// <remarks/>
    public enum ProductionOrderPriority {
        
        /// <remarks/>
        Low,
        
        /// <remarks/>
        Normal,
        
        /// <remarks/>
        High,
    }
    
    /// <remarks/>
    public enum ProductionOrderSimulateRecording {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum ProductionOrderSimulatePrinting {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
}
