//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=1.1.4322.2032.
// 
namespace RImageSchemas.Serialization.Server.Replies {
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ServerReply {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("SessionLog", typeof(SessionLog))]
        [System.Xml.Serialization.XmlElementAttribute("ProductionParameterSettings", typeof(ProductionParameterSettings))]
        [System.Xml.Serialization.XmlElementAttribute("ImagingParameterSettings", typeof(ImagingParameterSettings))]
        [System.Xml.Serialization.XmlElementAttribute("OrderList", typeof(OrderList))]
        [System.Xml.Serialization.XmlElementAttribute("ServerStatus", typeof(ServerStatus))]
        [System.Xml.Serialization.XmlElementAttribute("AckOnly", typeof(AckOnly))]
        [System.Xml.Serialization.XmlElementAttribute("DialogAction", typeof(DialogAction))]
        public object Item;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ServerId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ClientId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ServerReplyCommandState CommandState;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CommandErrorCode;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ErrorMessage;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class SessionLog {
        
        /// <remarks/>
        public Entry Entry;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string NumberOfEntries;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Entry {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Text;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Timestamp;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Errorcode;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ImagingParameterSettings {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Messaging {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string OrderStatusUpdateInterval;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class KioskMode {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(KioskModeUseKiosk.@false)]
        public KioskModeUseKiosk UseKiosk = KioskModeUseKiosk.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(KioskModeAutoStart.@true)]
        public KioskModeAutoStart AutoStart = KioskModeAutoStart.@true;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(KioskModeRecoverOrders.@true)]
        public KioskModeRecoverOrders RecoverOrders = KioskModeRecoverOrders.@true;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(KioskModeRunNoPrinter.@false)]
        public KioskModeRunNoPrinter RunNoPrinter = KioskModeRunNoPrinter.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(KioskModeAutoloaderRecovery.Retry)]
        public KioskModeAutoloaderRecovery AutoloaderRecovery = KioskModeAutoloaderRecovery.Retry;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(KioskModePrinterRecover.Retry)]
        public KioskModePrinterRecover PrinterRecover = KioskModePrinterRecover.Retry;
    }
    
    /// <remarks/>
    public enum KioskModeUseKiosk {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum KioskModeAutoStart {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum KioskModeRecoverOrders {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum KioskModeRunNoPrinter {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum KioskModeAutoloaderRecovery {
        
        /// <remarks/>
        Retry,
        
        /// <remarks/>
        Exit,
        
        /// <remarks/>
        Disable,
    }
    
    /// <remarks/>
    public enum KioskModePrinterRecover {
        
        /// <remarks/>
        Retry,
        
        /// <remarks/>
        Exit,
        
        /// <remarks/>
        Disable,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AutoBulkRead")]
    [System.Xml.Serialization.XmlRootAttribute("AutoBulkRead", Namespace="", IsNullable=false)]
    public class AutoBulkRead1 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string BulkReadBaseFolder;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(AutoBulkReadUseVolumeIDAsFolderName.@false)]
        public AutoBulkReadUseVolumeIDAsFolderName UseVolumeIDAsFolderName = AutoBulkReadUseVolumeIDAsFolderName.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(AutoBulkReadUseBarcodeAsFolderName.@false)]
        public AutoBulkReadUseBarcodeAsFolderName UseBarcodeAsFolderName = AutoBulkReadUseBarcodeAsFolderName.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(AutoBulkReadExtractFoldersAndFiles.@false)]
        public AutoBulkReadExtractFoldersAndFiles ExtractFoldersAndFiles = AutoBulkReadExtractFoldersAndFiles.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(AutoBulkReadActionForNonFixatedDiscs.None)]
        public AutoBulkReadActionForNonFixatedDiscs ActionForNonFixatedDiscs = AutoBulkReadActionForNonFixatedDiscs.None;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(AutoBulkReadAudioImageType.PCM)]
        public AutoBulkReadAudioImageType AudioImageType = AutoBulkReadAudioImageType.PCM;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(AutoBulkReadUseISRCAsFilenameForAudioTracks.@false)]
        public AutoBulkReadUseISRCAsFilenameForAudioTracks UseISRCAsFilenameForAudioTracks = AutoBulkReadUseISRCAsFilenameForAudioTracks.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(AutoBulkReadRejectFailures.@false)]
        public AutoBulkReadRejectFailures RejectFailures = AutoBulkReadRejectFailures.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(AutoBulkReadFIFOUnloading.@false)]
        public AutoBulkReadFIFOUnloading FIFOUnloading = AutoBulkReadFIFOUnloading.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(AutoBulkReadBarcodePort.None)]
        public AutoBulkReadBarcodePort BarcodePort = AutoBulkReadBarcodePort.None;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string BarcodeAngle;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(AutoBulkReadUseBarcodeIndex.@false)]
        public AutoBulkReadUseBarcodeIndex UseBarcodeIndex = AutoBulkReadUseBarcodeIndex.@false;
    }
    
    /// <remarks/>
    public enum AutoBulkReadUseVolumeIDAsFolderName {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum AutoBulkReadUseBarcodeAsFolderName {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum AutoBulkReadExtractFoldersAndFiles {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum AutoBulkReadActionForNonFixatedDiscs {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Close,
        
        /// <remarks/>
        Finalize,
    }
    
    /// <remarks/>
    public enum AutoBulkReadAudioImageType {
        
        /// <remarks/>
        PCM,
        
        /// <remarks/>
        WAV,
        
        /// <remarks/>
        DDP,
    }
    
    /// <remarks/>
    public enum AutoBulkReadUseISRCAsFilenameForAudioTracks {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum AutoBulkReadRejectFailures {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum AutoBulkReadFIFOUnloading {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum AutoBulkReadBarcodePort {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        COM1,
        
        /// <remarks/>
        COM2,
        
        /// <remarks/>
        COM3,
        
        /// <remarks/>
        COM4,
        
        /// <remarks/>
        COM5,
        
        /// <remarks/>
        COM6,
        
        /// <remarks/>
        COM7,
        
        /// <remarks/>
        COM8,
    }
    
    /// <remarks/>
    public enum AutoBulkReadUseBarcodeIndex {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Reading))]
    public class AutoBulkRead {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("AutoBulkRead")]
        public AutoBulkRead1 AutoBulkRead1;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Reading : AutoBulkRead {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ReadingAudioReadSpeed.Max)]
        public ReadingAudioReadSpeed AudioReadSpeed = ReadingAudioReadSpeed.Max;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ReadingPreferredReader.Recorders)]
        public ReadingPreferredReader PreferredReader = ReadingPreferredReader.Recorders;
    }
    
    /// <remarks/>
    public enum ReadingAudioReadSpeed {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1x")]
        Item1x,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2x")]
        Item2x,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4x")]
        Item4x,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8x")]
        Item8x,
        
        /// <remarks/>
        Max,
    }
    
    /// <remarks/>
    public enum ReadingPreferredReader {
        
        /// <remarks/>
        ROM,
        
        /// <remarks/>
        Recorders,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Bin {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public BinBinNumber BinNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public BinBinUsage BinUsage;
    }
    
    /// <remarks/>
    public enum BinBinNumber {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
    }
    
    /// <remarks/>
    public enum BinBinUsage {
        
        /// <remarks/>
        Input,
        
        /// <remarks/>
        InputOutput,
        
        /// <remarks/>
        Output,
        
        /// <remarks/>
        OutputReject,
        
        /// <remarks/>
        Reject,
        
        /// <remarks/>
        NotPresent,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Autoloader {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Bin")]
        public Bin[] Bin;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string LoaderNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public AutoloaderMailboxUsage MailboxUsage;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(AutoloaderMediaSize.Item120mm)]
        public AutoloaderMediaSize MediaSize = AutoloaderMediaSize.Item120mm;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(AutoloaderMediaType.CDR)]
        public AutoloaderMediaType MediaType = AutoloaderMediaType.CDR;
    }
    
    /// <remarks/>
    public enum AutoloaderMailboxUsage {
        
        /// <remarks/>
        Output,
        
        /// <remarks/>
        OutputReject,
        
        /// <remarks/>
        NotInUse,
        
        /// <remarks/>
        NotPresent,
        
        /// <remarks/>
        Reject,
        
        /// <remarks/>
        ReservedOutput,
    }
    
    /// <remarks/>
    public enum AutoloaderMediaSize {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120mm")]
        Item120mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("80mm")]
        Item80mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("63mm")]
        Item63mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("61mm")]
        Item61mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("58mm")]
        Item58mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("59mm")]
        Item59mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("59mmX85mm")]
        Item59mmX85mm,
    }
    
    /// <remarks/>
    public enum AutoloaderMediaType {
        
        /// <remarks/>
        CDR,
        
        /// <remarks/>
        DVDR,
        
        /// <remarks/>
        Both,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Printing {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(PrintingRejectPattern.Disabled)]
        public PrintingRejectPattern RejectPattern = PrintingRejectPattern.Disabled;
    }
    
    /// <remarks/>
    public enum PrintingRejectPattern {
        
        /// <remarks/>
        Disabled,
        
        /// <remarks/>
        All,
        
        /// <remarks/>
        RecordingFailures,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Recording {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(RecordingNewMedia.@false)]
        public RecordingNewMedia NewMedia = RecordingNewMedia.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string MaxSpeed;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(RecordingRejectNonISO.@true)]
        public RecordingRejectNonISO RejectNonISO = RecordingRejectNonISO.@true;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(RecordingAddPostgap.Disabled)]
        public RecordingAddPostgap AddPostgap = RecordingAddPostgap.Disabled;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(RecordingDestroyRejects.@false)]
        public RecordingDestroyRejects DestroyRejects = RecordingDestroyRejects.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(RecordingOverburn.@false)]
        public RecordingOverburn Overburn = RecordingOverburn.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CacheDriveLetters;
    }
    
    /// <remarks/>
    public enum RecordingNewMedia {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum RecordingRejectNonISO {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum RecordingAddPostgap {
        
        /// <remarks/>
        Disabled,
        
        /// <remarks/>
        Images,
        
        /// <remarks/>
        Discs,
        
        /// <remarks/>
        Both,
    }
    
    /// <remarks/>
    public enum RecordingDestroyRejects {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum RecordingOverburn {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Verify {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(VerifyUseVerify.@false)]
        public VerifyUseVerify UseVerify = VerifyUseVerify.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Frequency;
    }
    
    /// <remarks/>
    public enum VerifyUseVerify {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Server {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Description;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ServerServerMode.Normal)]
        public ServerServerMode ServerMode = ServerServerMode.Normal;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ServerUseFIFO.@false)]
        public ServerUseFIFO UseFIFO = ServerUseFIFO.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Cluster;
    }
    
    /// <remarks/>
    public enum ServerServerMode {
        
        /// <remarks/>
        Normal,
        
        /// <remarks/>
        BulkRead,
        
        /// <remarks/>
        JobStreaming,
        
        /// <remarks/>
        AutoBulkRead,
    }
    
    /// <remarks/>
    public enum ServerUseFIFO {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ProductionParameterSettings {
        
        /// <remarks/>
        public Server Server;
        
        /// <remarks/>
        public Verify Verify;
        
        /// <remarks/>
        public Recording Recording;
        
        /// <remarks/>
        public Printing Printing;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Autoloader")]
        public Autoloader[] Autoloader;
        
        /// <remarks/>
        public Reading Reading;
        
        /// <remarks/>
        public KioskMode KioskMode;
        
        /// <remarks/>
        public Messaging Messaging;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class DialogAction {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DialogId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public DialogActionButton Button;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name;
    }
    
    /// <remarks/>
    public enum DialogActionButton {
        
        /// <remarks/>
        First,
        
        /// <remarks/>
        Second,
        
        /// <remarks/>
        Third,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ImagingOrder {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ProductionOrder {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string OrderId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ClientId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ProductionOrderOrderType.Write)]
        public ProductionOrderOrderType OrderType = ProductionOrderOrderType.Write;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ProductionOrderMediaType.CDR)]
        public ProductionOrderMediaType MediaType = ProductionOrderMediaType.CDR;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ProductionOrderMediaSize.Item120mm)]
        public ProductionOrderMediaSize MediaSize = ProductionOrderMediaSize.Item120mm;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ProductionOrderOrderState.Waiting)]
        public ProductionOrderOrderState OrderState = ProductionOrderOrderState.Waiting;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ProductionOrderOrderStage OrderStage;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CopiesRequested;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CopiesCompleted;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string PercentCompleted;
    }
    
    /// <remarks/>
    public enum ProductionOrderOrderType {
        
        /// <remarks/>
        Read,
        
        /// <remarks/>
        Write,
        
        /// <remarks/>
        Copy,
        
        /// <remarks/>
        Print,
        
        /// <remarks/>
        Collate,
        
        /// <remarks/>
        Destroy,
    }
    
    /// <remarks/>
    public enum ProductionOrderMediaType {
        
        /// <remarks/>
        CDR,
        
        /// <remarks/>
        DVDR,
    }
    
    /// <remarks/>
    public enum ProductionOrderMediaSize {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120mm")]
        Item120mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("80mm")]
        Item80mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("63mm")]
        Item63mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("61mm")]
        Item61mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("58mm")]
        Item58mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("59x85mm")]
        Item59x85mm,
    }
    
    /// <remarks/>
    public enum ProductionOrderOrderState {
        
        /// <remarks/>
        Waiting,
        
        /// <remarks/>
        Active,
        
        /// <remarks/>
        Suspending,
        
        /// <remarks/>
        Suspended,
        
        /// <remarks/>
        Cancelling,
        
        /// <remarks/>
        Abort,
        
        /// <remarks/>
        End,
        
        /// <remarks/>
        Segment,
    }
    
    /// <remarks/>
    public enum ProductionOrderOrderStage {
        
        /// <remarks/>
        WAITING,
        
        /// <remarks/>
        BUSY,
        
        /// <remarks/>
        DOWNLOADING,
        
        /// <remarks/>
        RECORDING,
        
        /// <remarks/>
        FIXATING,
        
        /// <remarks/>
        DESTROYING,
        
        /// <remarks/>
        PRINTING,
        
        /// <remarks/>
        MAPPING,
        
        /// <remarks/>
        READING,
        
        /// <remarks/>
        COMPLETED,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class OrderList {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ImagingOrder", typeof(ImagingOrder))]
        [System.Xml.Serialization.XmlElementAttribute("ProductionOrder", typeof(ProductionOrder))]
        public object[] Items;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public OrderListAutomation Automation;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Cluster;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string NumberOfOrders;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string StatusTime;
    }
    
    /// <remarks/>
    public enum OrderListAutomation {
        
        /// <remarks/>
        Running,
        
        /// <remarks/>
        Paused,
        
        /// <remarks/>
        PausePending,
        
        /// <remarks/>
        StopPending,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Switches {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesManufacturingTestMode.@false)]
        public SwitchesManufacturingTestMode ManufacturingTestMode = SwitchesManufacturingTestMode.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesVerifyOnlyMode.@false)]
        public SwitchesVerifyOnlyMode VerifyOnlyMode = SwitchesVerifyOnlyMode.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesNoLogLimit.@false)]
        public SwitchesNoLogLimit NoLogLimit = SwitchesNoLogLimit.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesSetupMode.@false)]
        public SwitchesSetupMode SetupMode = SwitchesSetupMode.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesDirectImaging.@false)]
        public SwitchesDirectImaging DirectImaging = SwitchesDirectImaging.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesSkipOrderUpdate.@false)]
        public SwitchesSkipOrderUpdate SkipOrderUpdate = SwitchesSkipOrderUpdate.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesAutoThroughPutMeasurement.@false)]
        public SwitchesAutoThroughPutMeasurement AutoThroughPutMeasurement = SwitchesAutoThroughPutMeasurement.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesTimingLogged.@false)]
        public SwitchesTimingLogged TimingLogged = SwitchesTimingLogged.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesPreLoadBartender.@false)]
        public SwitchesPreLoadBartender PreLoadBartender = SwitchesPreLoadBartender.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesSkipCaching.@false)]
        public SwitchesSkipCaching SkipCaching = SwitchesSkipCaching.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesSkipOrderStatusUpdates.@false)]
        public SwitchesSkipOrderStatusUpdates SkipOrderStatusUpdates = SwitchesSkipOrderStatusUpdates.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesPrintOnlyMode.@false)]
        public SwitchesPrintOnlyMode PrintOnlyMode = SwitchesPrintOnlyMode.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesSkipAutoloaderScanning.@false)]
        public SwitchesSkipAutoloaderScanning SkipAutoloaderScanning = SwitchesSkipAutoloaderScanning.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesPrintBeforeRecording.@false)]
        public SwitchesPrintBeforeRecording PrintBeforeRecording = SwitchesPrintBeforeRecording.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesUseDriveLettersForRecorders.@false)]
        public SwitchesUseDriveLettersForRecorders UseDriveLettersForRecorders = SwitchesUseDriveLettersForRecorders.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesTraceSCSICommands.@false)]
        public SwitchesTraceSCSICommands TraceSCSICommands = SwitchesTraceSCSICommands.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesTraceReadWriteCommands.@false)]
        public SwitchesTraceReadWriteCommands TraceReadWriteCommands = SwitchesTraceReadWriteCommands.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesTraceSerialCommands.@false)]
        public SwitchesTraceSerialCommands TraceSerialCommands = SwitchesTraceSerialCommands.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesTraceLabelAndPrinting.@false)]
        public SwitchesTraceLabelAndPrinting TraceLabelAndPrinting = SwitchesTraceLabelAndPrinting.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesTraceXMLMessages.@false)]
        public SwitchesTraceXMLMessages TraceXMLMessages = SwitchesTraceXMLMessages.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesLogSkippingOrder.@false)]
        public SwitchesLogSkippingOrder LogSkippingOrder = SwitchesLogSkippingOrder.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesRunWithoutDevices.@false)]
        public SwitchesRunWithoutDevices RunWithoutDevices = SwitchesRunWithoutDevices.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesDisablePreloadingRecorderAfterPrinterLoad.@false)]
        public SwitchesDisablePreloadingRecorderAfterPrinterLoad DisablePreloadingRecorderAfterPrinterLoad = SwitchesDisablePreloadingRecorderAfterPrinterLoad.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesDisableCacheLocking.@false)]
        public SwitchesDisableCacheLocking DisableCacheLocking = SwitchesDisableCacheLocking.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesEnableCacheLimiting.@false)]
        public SwitchesEnableCacheLimiting EnableCacheLimiting = SwitchesEnableCacheLimiting.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesSkipSerialPortForAutoloader.@false)]
        public SwitchesSkipSerialPortForAutoloader SkipSerialPortForAutoloader = SwitchesSkipSerialPortForAutoloader.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesSkipDriveForReaderRecorderCache.@false)]
        public SwitchesSkipDriveForReaderRecorderCache SkipDriveForReaderRecorderCache = SwitchesSkipDriveForReaderRecorderCache.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesUseDelayBeforeMainWindow.@false)]
        public SwitchesUseDelayBeforeMainWindow UseDelayBeforeMainWindow = SwitchesUseDelayBeforeMainWindow.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesUserParallelPortForPrism.@false)]
        public SwitchesUserParallelPortForPrism UserParallelPortForPrism = SwitchesUserParallelPortForPrism.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesDisableDriverNameInRendering.@false)]
        public SwitchesDisableDriverNameInRendering DisableDriverNameInRendering = SwitchesDisableDriverNameInRendering.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SwitchesDisableImageSizeChecking.@false)]
        public SwitchesDisableImageSizeChecking DisableImageSizeChecking = SwitchesDisableImageSizeChecking.@false;
    }
    
    /// <remarks/>
    public enum SwitchesManufacturingTestMode {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesVerifyOnlyMode {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesNoLogLimit {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesSetupMode {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesDirectImaging {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesSkipOrderUpdate {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesAutoThroughPutMeasurement {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesTimingLogged {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesPreLoadBartender {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesSkipCaching {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesSkipOrderStatusUpdates {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesPrintOnlyMode {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesSkipAutoloaderScanning {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesPrintBeforeRecording {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesUseDriveLettersForRecorders {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesTraceSCSICommands {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesTraceReadWriteCommands {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesTraceSerialCommands {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesTraceLabelAndPrinting {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesTraceXMLMessages {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesLogSkippingOrder {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesRunWithoutDevices {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesDisablePreloadingRecorderAfterPrinterLoad {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesDisableCacheLocking {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesEnableCacheLimiting {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesSkipSerialPortForAutoloader {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesSkipDriveForReaderRecorderCache {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesUseDelayBeforeMainWindow {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesUserParallelPortForPrism {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesDisableDriverNameInRendering {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum SwitchesDisableImageSizeChecking {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class TimeStamps {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Start;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Status;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ServerInfo {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string SoftwareVersion;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Description;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Hostname;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Cluster;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string MessagingPort;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DTDFolder;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ServerInfoIsService.@false)]
        public ServerInfoIsService IsService = ServerInfoIsService.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ServerInfoAutomation Automation;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CopiesProduced;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string CopiesRejected;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ImagesWritten;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ImagesRejected;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ServerInfoPasswordSet PasswordSet;
    }
    
    /// <remarks/>
    public enum ServerInfoIsService {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum ServerInfoAutomation {
        
        /// <remarks/>
        Running,
        
        /// <remarks/>
        Paused,
        
        /// <remarks/>
        PausePending,
        
        /// <remarks/>
        StopPending,
    }
    
    /// <remarks/>
    public enum ServerInfoPasswordSet {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ServerStatus {
        
        /// <remarks/>
        public ServerInfo ServerInfo;
        
        /// <remarks/>
        public TimeStamps TimeStamps;
        
        /// <remarks/>
        public Switches Switches;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class AckOnly {
    }
    
    /// <remarks/>
    public enum ServerReplyCommandState {
        
        /// <remarks/>
        IN_PROCESS,
        
        /// <remarks/>
        COMPLETED,
        
        /// <remarks/>
        FAILED,
    }
}
