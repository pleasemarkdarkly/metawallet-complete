//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=1.1.4322.2032.
// 
namespace RImageSchemas.Serialization.Server.Requests.Production {
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ProductionServerRequest {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("SetDialogAction", typeof(SetDialogAction))]
        [System.Xml.Serialization.XmlElementAttribute("GetServerStatus", typeof(GetServerStatus))]
        [System.Xml.Serialization.XmlElementAttribute("ChangeOrder", typeof(ChangeOrder))]
        [System.Xml.Serialization.XmlElementAttribute("ClearSessionLog", typeof(ClearSessionLog))]
        [System.Xml.Serialization.XmlElementAttribute("SetParameter", typeof(SetParameter))]
        [System.Xml.Serialization.XmlElementAttribute("VerifyServerPassword", typeof(VerifyServerPassword))]
        [System.Xml.Serialization.XmlElementAttribute("ResumeServer", typeof(ResumeServer))]
        [System.Xml.Serialization.XmlElementAttribute("FlashUpload", typeof(FlashUpload))]
        [System.Xml.Serialization.XmlElementAttribute("SetServerPassword", typeof(SetServerPassword))]
        [System.Xml.Serialization.XmlElementAttribute("GetOrderList", typeof(GetOrderList))]
        [System.Xml.Serialization.XmlElementAttribute("SetActivationCodes", typeof(SetActivationCodes))]
        [System.Xml.Serialization.XmlElementAttribute("GetParameterSettings", typeof(GetParameterSettings))]
        [System.Xml.Serialization.XmlElementAttribute("PauseServer", typeof(PauseServer))]
        [System.Xml.Serialization.XmlElementAttribute("GetUnlockingCodes", typeof(GetUnlockingCodes))]
        [System.Xml.Serialization.XmlElementAttribute("ResetInputBins", typeof(ResetInputBins))]
        [System.Xml.Serialization.XmlElementAttribute("CancelOrder", typeof(CancelOrder))]
        [System.Xml.Serialization.XmlElementAttribute("StopServer", typeof(StopServer))]
        [System.Xml.Serialization.XmlElementAttribute("GetSessionLog", typeof(GetSessionLog))]
        [System.Xml.Serialization.XmlElementAttribute("EnableDevice", typeof(EnableDevice))]
        public object Item;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ServerId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ClientId;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class SetDialogAction {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DialogId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public SetDialogActionButton Button;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SetDialogActionFlag.@false)]
        public SetDialogActionFlag Flag = SetDialogActionFlag.@false;
    }
    
    /// <remarks/>
    public enum SetDialogActionButton {
        
        /// <remarks/>
        First,
        
        /// <remarks/>
        Second,
        
        /// <remarks/>
        Third,
    }
    
    /// <remarks/>
    public enum SetDialogActionFlag {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class SetActivationCodes {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SetActivationCodesFeature.Base)]
        public SetActivationCodesFeature Feature = SetActivationCodesFeature.Base;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Code1;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Code2;
    }
    
    /// <remarks/>
    public enum SetActivationCodesFeature {
        
        /// <remarks/>
        Base,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Smarte-CD")]
        SmarteCD,
        
        /// <remarks/>
        RawMode,
        
        /// <remarks/>
        EciVCD,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class GetUnlockingCodes {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(GetUnlockingCodesFeature.Base)]
        public GetUnlockingCodesFeature Feature = GetUnlockingCodesFeature.Base;
    }
    
    /// <remarks/>
    public enum GetUnlockingCodesFeature {
        
        /// <remarks/>
        Base,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Smarte-CD")]
        SmarteCD,
        
        /// <remarks/>
        RawMode,
        
        /// <remarks/>
        EciVCD,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class FlashUpload {
        
        /// <remarks/>
        public ServerPassword ServerPassword;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public FlashUploadDevice Device;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Filepath;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ServerPassword {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string EncodedPassword;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("7")]
        public string EncodeNumber = "7";
    }
    
    /// <remarks/>
    public enum FlashUploadDevice {
        
        /// <remarks/>
        Autoloader,
        
        /// <remarks/>
        Recorder,
        
        /// <remarks/>
        Printer,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class StopServer {
        
        /// <remarks/>
        public ServerPassword ServerPassword;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(StopServerAbortRecordingsInProcess.@true)]
        public StopServerAbortRecordingsInProcess AbortRecordingsInProcess = StopServerAbortRecordingsInProcess.@true;
    }
    
    /// <remarks/>
    public enum StopServerAbortRecordingsInProcess {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ResumeServer {
        
        /// <remarks/>
        public ServerPassword ServerPassword;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class PauseServer {
        
        /// <remarks/>
        public ServerPassword ServerPassword;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class AutoRespondOnStartup {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(AutoRespondOnStartupValue.@false)]
        public AutoRespondOnStartupValue Value = AutoRespondOnStartupValue.@false;
    }
    
    /// <remarks/>
    public enum AutoRespondOnStartupValue {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class PrinterRecovery {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(PrinterRecoveryValue.Retry)]
        public PrinterRecoveryValue Value = PrinterRecoveryValue.Retry;
    }
    
    /// <remarks/>
    public enum PrinterRecoveryValue {
        
        /// <remarks/>
        Retry,
        
        /// <remarks/>
        Exit,
        
        /// <remarks/>
        Disable,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class AutoloaderRecovery {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(AutoloaderRecoveryValue.Retry)]
        public AutoloaderRecoveryValue Value = AutoloaderRecoveryValue.Retry;
    }
    
    /// <remarks/>
    public enum AutoloaderRecoveryValue {
        
        /// <remarks/>
        Retry,
        
        /// <remarks/>
        Exit,
        
        /// <remarks/>
        Disable,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class RunNoPrinter {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(RunNoPrinterValue.@false)]
        public RunNoPrinterValue Value = RunNoPrinterValue.@false;
    }
    
    /// <remarks/>
    public enum RunNoPrinterValue {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class RecoverOrders {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(RecoverOrdersValue.@true)]
        public RecoverOrdersValue Value = RecoverOrdersValue.@true;
    }
    
    /// <remarks/>
    public enum RecoverOrdersValue {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class KioskMode {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("RecoverOrders", typeof(RecoverOrders))]
        [System.Xml.Serialization.XmlElementAttribute("PrinterRecovery", typeof(PrinterRecovery))]
        [System.Xml.Serialization.XmlElementAttribute("AutoloaderRecovery", typeof(AutoloaderRecovery))]
        [System.Xml.Serialization.XmlElementAttribute("AutoRespondOnStartup", typeof(AutoRespondOnStartup))]
        [System.Xml.Serialization.XmlElementAttribute("RunNoPrinter", typeof(RunNoPrinter))]
        public object Item;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ClearAllCodes {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class MediaCode {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class UseMediaCodes {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(UseMediaCodesValue.@false)]
        public UseMediaCodesValue Value = UseMediaCodesValue.@false;
    }
    
    /// <remarks/>
    public enum UseMediaCodesValue {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class MediaCodes {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("MediaCode", typeof(MediaCode))]
        [System.Xml.Serialization.XmlElementAttribute("ClearAllCodes", typeof(ClearAllCodes))]
        [System.Xml.Serialization.XmlElementAttribute("UseMediaCodes", typeof(UseMediaCodes))]
        public object Item;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class PreferredReader {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(PreferredReaderValue.Recorders)]
        public PreferredReaderValue Value = PreferredReaderValue.Recorders;
    }
    
    /// <remarks/>
    public enum PreferredReaderValue {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("CDDVD-ROMDrive")]
        CDDVDROMDrive,
        
        /// <remarks/>
        Recorders,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class AudioReadSpeed {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(AudioReadSpeedValue.Max)]
        public AudioReadSpeedValue Value = AudioReadSpeedValue.Max;
    }
    
    /// <remarks/>
    public enum AudioReadSpeedValue {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1x")]
        Item1x,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2x")]
        Item2x,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4x")]
        Item4x,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8x")]
        Item8x,
        
        /// <remarks/>
        Max,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class PutFailuresToRejectBin {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(PutFailuresToRejectBinValue.@false)]
        public PutFailuresToRejectBinValue Value = PutFailuresToRejectBinValue.@false;
    }
    
    /// <remarks/>
    public enum PutFailuresToRejectBinValue {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class UseISRCAsFilenameForAudioTracks {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(UseISRCAsFilenameForAudioTracksValue.@false)]
        public UseISRCAsFilenameForAudioTracksValue Value = UseISRCAsFilenameForAudioTracksValue.@false;
    }
    
    /// <remarks/>
    public enum UseISRCAsFilenameForAudioTracksValue {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ImageTypeForAudioTracks {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ImageTypeForAudioTracksValue.PCM)]
        public ImageTypeForAudioTracksValue Value = ImageTypeForAudioTracksValue.PCM;
    }
    
    /// <remarks/>
    public enum ImageTypeForAudioTracksValue {
        
        /// <remarks/>
        PCM,
        
        /// <remarks/>
        WAV,
        
        /// <remarks/>
        DDP,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ExtractISOImagesToFoldersAndFiles {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ExtractISOImagesToFoldersAndFilesValue.@false)]
        public ExtractISOImagesToFoldersAndFilesValue Value = ExtractISOImagesToFoldersAndFilesValue.@false;
    }
    
    /// <remarks/>
    public enum ExtractISOImagesToFoldersAndFilesValue {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class UseBarcodeAsFolderName {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(UseBarcodeAsFolderNameValue.@false)]
        public UseBarcodeAsFolderNameValue Value = UseBarcodeAsFolderNameValue.@false;
    }
    
    /// <remarks/>
    public enum UseBarcodeAsFolderNameValue {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class UseVolumeIDAsFolderName {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(UseVolumeIDAsFolderNameValue.@false)]
        public UseVolumeIDAsFolderNameValue Value = UseVolumeIDAsFolderNameValue.@false;
    }
    
    /// <remarks/>
    public enum UseVolumeIDAsFolderNameValue {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class BaseFolderForImages {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class AutoBulkRead {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("UseVolumeIDAsFolderName", typeof(UseVolumeIDAsFolderName))]
        [System.Xml.Serialization.XmlElementAttribute("ImageTypeForAudioTracks", typeof(ImageTypeForAudioTracks))]
        [System.Xml.Serialization.XmlElementAttribute("UseBarcodeAsFolderName", typeof(UseBarcodeAsFolderName))]
        [System.Xml.Serialization.XmlElementAttribute("PutFailuresToRejectBin", typeof(PutFailuresToRejectBin))]
        [System.Xml.Serialization.XmlElementAttribute("ExtractISOImagesToFoldersAndFiles", typeof(ExtractISOImagesToFoldersAndFiles))]
        [System.Xml.Serialization.XmlElementAttribute("UseISRCAsFilenameForAudioTracks", typeof(UseISRCAsFilenameForAudioTracks))]
        [System.Xml.Serialization.XmlElementAttribute("BaseFolderForImages", typeof(BaseFolderForImages))]
        public object Item;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class UseBarcodeIndex {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(UseBarcodeIndexValue.@false)]
        public UseBarcodeIndexValue Value = UseBarcodeIndexValue.@false;
    }
    
    /// <remarks/>
    public enum UseBarcodeIndexValue {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class BarcodeAngle {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class BarcodePort {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(BarcodePortValue.None)]
        public BarcodePortValue Value = BarcodePortValue.None;
    }
    
    /// <remarks/>
    public enum BarcodePortValue {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        COM1,
        
        /// <remarks/>
        COM2,
        
        /// <remarks/>
        COM3,
        
        /// <remarks/>
        COM4,
        
        /// <remarks/>
        COM5,
        
        /// <remarks/>
        COM6,
        
        /// <remarks/>
        COM7,
        
        /// <remarks/>
        COM8,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Reading {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("AudioReadSpeed", typeof(AudioReadSpeed))]
        [System.Xml.Serialization.XmlElementAttribute("PreferredReader", typeof(PreferredReader))]
        [System.Xml.Serialization.XmlElementAttribute("BarcodePort", typeof(BarcodePort))]
        [System.Xml.Serialization.XmlElementAttribute("BarcodeAngle", typeof(BarcodeAngle))]
        [System.Xml.Serialization.XmlElementAttribute("UseBarcodeIndex", typeof(UseBarcodeIndex))]
        [System.Xml.Serialization.XmlElementAttribute("AutoBulkRead", typeof(AutoBulkRead))]
        public object Item;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class MediaType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(MediaTypeValue.CDR)]
        public MediaTypeValue Value = MediaTypeValue.CDR;
    }
    
    /// <remarks/>
    public enum MediaTypeValue {
        
        /// <remarks/>
        CDR,
        
        /// <remarks/>
        DVDR,
        
        /// <remarks/>
        BOTH,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DVDR-DL")]
        DVDRDL,
        
        /// <remarks/>
        COMBO,
        
        /// <remarks/>
        SOQ_CDR,
        
        /// <remarks/>
        SOQ_DVDR,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SOQ_DVDR-DL")]
        SOQ_DVDRDL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DVDR-HD")]
        DVDRHD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DVDR-BD")]
        DVDRBD,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class MediaSize {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(MediaSizeValue.Item120mm)]
        public MediaSizeValue Value = MediaSizeValue.Item120mm;
    }
    
    /// <remarks/>
    public enum MediaSizeValue {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("120mm")]
        Item120mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("80mm")]
        Item80mm,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class MailslotSetting {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public MailslotSettingValue Value;
    }
    
    /// <remarks/>
    public enum MailslotSettingValue {
        
        /// <remarks/>
        Output,
        
        /// <remarks/>
        OutputReject,
        
        /// <remarks/>
        Reject,
        
        /// <remarks/>
        ReservedOutput,
        
        /// <remarks/>
        DoNotUse,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class BinSetting {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public BinSettingBinNumber BinNumber;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public BinSettingValue Value;
    }
    
    /// <remarks/>
    public enum BinSettingBinNumber {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
    }
    
    /// <remarks/>
    public enum BinSettingValue {
        
        /// <remarks/>
        Input,
        
        /// <remarks/>
        InputOutput,
        
        /// <remarks/>
        CDRInputOnly,
        
        /// <remarks/>
        DVDRInputOnly,
        
        /// <remarks/>
        Output,
        
        /// <remarks/>
        OutputReject,
        
        /// <remarks/>
        Reject,
        
        /// <remarks/>
        Collate,
        
        /// <remarks/>
        ReservedInput,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DVDR-DLInputOnly")]
        DVDRDLInputOnly,
        
        /// <remarks/>
        SOQ_CDRInputOnly,
        
        /// <remarks/>
        SOQ_DVDRInputOnly,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SOQ_DVDR-DLInputOnly")]
        SOQ_DVDRDLInputOnly,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DVDR-HDInputOnly")]
        DVDRHDInputOnly,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DVDR-BDInputOnly")]
        DVDRBDInputOnly,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class AutoloaderSettings {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("MediaType", typeof(MediaType))]
        [System.Xml.Serialization.XmlElementAttribute("BinSetting", typeof(BinSetting))]
        [System.Xml.Serialization.XmlElementAttribute("MediaSize", typeof(MediaSize))]
        [System.Xml.Serialization.XmlElementAttribute("MailslotSetting", typeof(MailslotSetting))]
        public object[] Items;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string LoaderNumber;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class LowInkThresholdPercent {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ErrorOnLowInkLevel {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ErrorOnLowInkLevelValue.@false)]
        public ErrorOnLowInkLevelValue Value = ErrorOnLowInkLevelValue.@false;
    }
    
    /// <remarks/>
    public enum ErrorOnLowInkLevelValue {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class TakeOrdersWithLabelWithoutPrinter {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(TakeOrdersWithLabelWithoutPrinterValue.@false)]
        public TakeOrdersWithLabelWithoutPrinterValue Value = TakeOrdersWithLabelWithoutPrinterValue.@false;
    }
    
    /// <remarks/>
    public enum TakeOrdersWithLabelWithoutPrinterValue {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class RejectPattern {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(RejectPatternValue.Disabled)]
        public RejectPatternValue Value = RejectPatternValue.Disabled;
    }
    
    /// <remarks/>
    public enum RejectPatternValue {
        
        /// <remarks/>
        Disabled,
        
        /// <remarks/>
        AllRejectedDiscs,
        
        /// <remarks/>
        RecordingFailuresOnly,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class SimulatePrinting {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SimulatePrintingValue.@false)]
        public SimulatePrintingValue Value = SimulatePrintingValue.@false;
    }
    
    /// <remarks/>
    public enum SimulatePrintingValue {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Printing {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("TakeOrdersWithLabelWithoutPrinter", typeof(TakeOrdersWithLabelWithoutPrinter))]
        [System.Xml.Serialization.XmlElementAttribute("ErrorOnLowInkLevel", typeof(ErrorOnLowInkLevel))]
        [System.Xml.Serialization.XmlElementAttribute("LowInkThresholdPercent", typeof(LowInkThresholdPercent))]
        [System.Xml.Serialization.XmlElementAttribute("RejectPattern", typeof(RejectPattern))]
        [System.Xml.Serialization.XmlElementAttribute("SimulatePrinting", typeof(SimulatePrinting))]
        public object Item;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class UseChecksumDLL {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(UseChecksumDLLValue.@false)]
        public UseChecksumDLLValue Value = UseChecksumDLLValue.@false;
    }
    
    /// <remarks/>
    public enum UseChecksumDLLValue {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Frequency {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class UseVerify {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(UseVerifyValue.@false)]
        public UseVerifyValue Value = UseVerifyValue.@false;
    }
    
    /// <remarks/>
    public enum UseVerifyValue {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Verify {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("UseVerify", typeof(UseVerify))]
        [System.Xml.Serialization.XmlElementAttribute("UseChecksumDLL", typeof(UseChecksumDLL))]
        [System.Xml.Serialization.XmlElementAttribute("Frequency", typeof(Frequency))]
        public object Item;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class DestroyFailedRecordings {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(DestroyFailedRecordingsValue.@false)]
        public DestroyFailedRecordingsValue Value = DestroyFailedRecordingsValue.@false;
    }
    
    /// <remarks/>
    public enum DestroyFailedRecordingsValue {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class EnableUsing90_100MinuteCDRs {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(EnableUsing90_100MinuteCDRsValue.@false)]
        public EnableUsing90_100MinuteCDRsValue Value = EnableUsing90_100MinuteCDRsValue.@false;
    }
    
    /// <remarks/>
    public enum EnableUsing90_100MinuteCDRsValue {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class AddPostgapToISO {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(AddPostgapToISOValue.Disabled)]
        public AddPostgapToISOValue Value = AddPostgapToISOValue.Disabled;
    }
    
    /// <remarks/>
    public enum AddPostgapToISOValue {
        
        /// <remarks/>
        Disabled,
        
        /// <remarks/>
        Images,
        
        /// <remarks/>
        Discs,
        
        /// <remarks/>
        Both,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class RejectNonISO {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(RejectNonISOValue.@false)]
        public RejectNonISOValue Value = RejectNonISOValue.@false;
    }
    
    /// <remarks/>
    public enum RejectNonISOValue {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class DisableISOExtentFixups {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(DisableISOExtentFixupsValue.@false)]
        public DisableISOExtentFixupsValue Value = DisableISOExtentFixupsValue.@false;
    }
    
    /// <remarks/>
    public enum DisableISOExtentFixupsValue {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class MaxDVDRecordingSpeed {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class MaxRecordingSpeed {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class UseNewMediaOnly {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(UseNewMediaOnlyValue.@false)]
        public UseNewMediaOnlyValue Value = UseNewMediaOnlyValue.@false;
    }
    
    /// <remarks/>
    public enum UseNewMediaOnlyValue {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class SimulateRecording {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SimulateRecordingValue.@false)]
        public SimulateRecordingValue Value = SimulateRecordingValue.@false;
    }
    
    /// <remarks/>
    public enum SimulateRecordingValue {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Recording {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DisableISOExtentFixups", typeof(DisableISOExtentFixups))]
        [System.Xml.Serialization.XmlElementAttribute("AddPostgapToISO", typeof(AddPostgapToISO))]
        [System.Xml.Serialization.XmlElementAttribute("RejectNonISO", typeof(RejectNonISO))]
        [System.Xml.Serialization.XmlElementAttribute("MaxDVDRecordingSpeed", typeof(MaxDVDRecordingSpeed))]
        [System.Xml.Serialization.XmlElementAttribute("SimulateRecording", typeof(SimulateRecording))]
        [System.Xml.Serialization.XmlElementAttribute("DestroyFailedRecordings", typeof(DestroyFailedRecordings))]
        [System.Xml.Serialization.XmlElementAttribute("EnableUsing90_100MinuteCDRs", typeof(EnableUsing90_100MinuteCDRs))]
        [System.Xml.Serialization.XmlElementAttribute("UseNewMediaOnly", typeof(UseNewMediaOnly))]
        [System.Xml.Serialization.XmlElementAttribute("MaxRecordingSpeed", typeof(MaxRecordingSpeed))]
        public object Item;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class CacheDriveLetters {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Value;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class UseStaticCaching {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(UseStaticCachingValue.@false)]
        public UseStaticCachingValue Value = UseStaticCachingValue.@false;
    }
    
    /// <remarks/>
    public enum UseStaticCachingValue {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Caching {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("UseStaticCaching", typeof(UseStaticCaching))]
        [System.Xml.Serialization.XmlElementAttribute("CacheDriveLetters", typeof(CacheDriveLetters))]
        public object Item;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class UseFIFOMode {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(UseFIFOModeValue.@false)]
        public UseFIFOModeValue Value = UseFIFOModeValue.@false;
    }
    
    /// <remarks/>
    public enum UseFIFOModeValue {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class OperatingMode {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(OperatingModeValue.Normal)]
        public OperatingModeValue Value = OperatingModeValue.Normal;
    }
    
    /// <remarks/>
    public enum OperatingModeValue {
        
        /// <remarks/>
        Normal,
        
        /// <remarks/>
        BulkRead,
        
        /// <remarks/>
        JobStreaming,
        
        /// <remarks/>
        AutoBulkRead,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ServerMode {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ServerModeValue.Attended)]
        public ServerModeValue Value = ServerModeValue.Attended;
    }
    
    /// <remarks/>
    public enum ServerModeValue {
        
        /// <remarks/>
        Attended,
        
        /// <remarks/>
        UnAttended,
        
        /// <remarks/>
        Kiosk,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ModeSettings {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("UseFIFOMode", typeof(UseFIFOMode))]
        [System.Xml.Serialization.XmlElementAttribute("ServerMode", typeof(ServerMode))]
        [System.Xml.Serialization.XmlElementAttribute("OperatingMode", typeof(OperatingMode))]
        public object Item;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Server {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Description;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string OrderStatusInterval;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Setting {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("KioskMode", typeof(KioskMode))]
        [System.Xml.Serialization.XmlElementAttribute("MediaCodes", typeof(MediaCodes))]
        [System.Xml.Serialization.XmlElementAttribute("Verify", typeof(Verify))]
        [System.Xml.Serialization.XmlElementAttribute("AutoloaderSettings", typeof(AutoloaderSettings))]
        [System.Xml.Serialization.XmlElementAttribute("Recording", typeof(Recording))]
        [System.Xml.Serialization.XmlElementAttribute("ModeSettings", typeof(ModeSettings))]
        [System.Xml.Serialization.XmlElementAttribute("Server", typeof(Server))]
        [System.Xml.Serialization.XmlElementAttribute("Reading", typeof(Reading))]
        [System.Xml.Serialization.XmlElementAttribute("Caching", typeof(Caching))]
        [System.Xml.Serialization.XmlElementAttribute("Printing", typeof(Printing))]
        public object Item;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class SetParameter {
        
        /// <remarks/>
        public ServerPassword ServerPassword;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Setting")]
        public Setting[] Setting;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(SetParameterIgnoreReadOnly.@false)]
        public SetParameterIgnoreReadOnly IgnoreReadOnly = SetParameterIgnoreReadOnly.@false;
    }
    
    /// <remarks/>
    public enum SetParameterIgnoreReadOnly {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ClearSessionLog {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class GetSessionLog {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string NumberEvents;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ResetInputBins {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string LoaderNumber;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Printer {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Number;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Recorder {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Number;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Autoloader {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class EnableDevice {
        
        /// <remarks/>
        public ServerPassword ServerPassword;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Autoloader", typeof(Autoloader))]
        [System.Xml.Serialization.XmlElementAttribute("Printer", typeof(Printer))]
        [System.Xml.Serialization.XmlElementAttribute("Recorder", typeof(Recorder))]
        public object Item;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string LoaderNumber;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Quantity {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string NumberOfDiscs;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ResumeOrder {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class SuspendOrder {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ChangeOrder {
        
        /// <remarks/>
        public ServerPassword ServerPassword;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("SuspendOrder", typeof(SuspendOrder))]
        [System.Xml.Serialization.XmlElementAttribute("ResumeOrder", typeof(ResumeOrder))]
        [System.Xml.Serialization.XmlElementAttribute("Quantity", typeof(Quantity))]
        public object Item;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string OrderId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ClientId;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class CancelOrder {
        
        /// <remarks/>
        public ServerPassword ServerPassword;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string OrderId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ClientId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(CancelOrderAbortRecordingsInProcess.@true)]
        public CancelOrderAbortRecordingsInProcess AbortRecordingsInProcess = CancelOrderAbortRecordingsInProcess.@true;
    }
    
    /// <remarks/>
    public enum CancelOrderAbortRecordingsInProcess {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class VerifyServerPassword {
        
        /// <remarks/>
        public ServerPassword ServerPassword;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class NewPassword {
        
        /// <remarks/>
        public ServerPassword ServerPassword;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class OldPassword {
        
        /// <remarks/>
        public ServerPassword ServerPassword;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class SetServerPassword {
        
        /// <remarks/>
        public OldPassword OldPassword;
        
        /// <remarks/>
        public NewPassword NewPassword;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class GetOrderList {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class GetParameterSettings {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class GetServerStatus {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(GetServerStatusGetCommandLineSwitches.@false)]
        public GetServerStatusGetCommandLineSwitches GetCommandLineSwitches = GetServerStatusGetCommandLineSwitches.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(GetServerStatusGetAutoloaderStatus.@false)]
        public GetServerStatusGetAutoloaderStatus GetAutoloaderStatus = GetServerStatusGetAutoloaderStatus.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(GetServerStatusGetActivationInfo.@false)]
        public GetServerStatusGetActivationInfo GetActivationInfo = GetServerStatusGetActivationInfo.@false;
    }
    
    /// <remarks/>
    public enum GetServerStatusGetCommandLineSwitches {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum GetServerStatusGetAutoloaderStatus {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum GetServerStatusGetActivationInfo {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
}
