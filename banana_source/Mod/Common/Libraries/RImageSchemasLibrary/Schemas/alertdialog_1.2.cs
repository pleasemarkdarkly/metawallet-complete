//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace RImageSchemas.Schemas {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class AlertDialog : DataSet {
        
        private TypeDataTable tableType;
        
        private OneButtonDataTable tableOneButton;
        
        private TwoButtonDataTable tableTwoButton;
        
        private LeftDataTable tableLeft;
        
        private RightDataTable tableRight;
        
        private DataRelation relationTwoButton_Left;
        
        private DataRelation relationTwoButton_Right;
        
        private DataRelation relationType_OneButton;
        
        private DataRelation relationType_TwoButton;
        
        public AlertDialog() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected AlertDialog(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Type"] != null)) {
                    this.Tables.Add(new TypeDataTable(ds.Tables["Type"]));
                }
                if ((ds.Tables["OneButton"] != null)) {
                    this.Tables.Add(new OneButtonDataTable(ds.Tables["OneButton"]));
                }
                if ((ds.Tables["TwoButton"] != null)) {
                    this.Tables.Add(new TwoButtonDataTable(ds.Tables["TwoButton"]));
                }
                if ((ds.Tables["Left"] != null)) {
                    this.Tables.Add(new LeftDataTable(ds.Tables["Left"]));
                }
                if ((ds.Tables["Right"] != null)) {
                    this.Tables.Add(new RightDataTable(ds.Tables["Right"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TypeDataTable Type {
            get {
                return this.tableType;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OneButtonDataTable OneButton {
            get {
                return this.tableOneButton;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TwoButtonDataTable TwoButton {
            get {
                return this.tableTwoButton;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LeftDataTable Left {
            get {
                return this.tableLeft;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RightDataTable Right {
            get {
                return this.tableRight;
            }
        }
        
        public override DataSet Clone() {
            AlertDialog cln = ((AlertDialog)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Type"] != null)) {
                this.Tables.Add(new TypeDataTable(ds.Tables["Type"]));
            }
            if ((ds.Tables["OneButton"] != null)) {
                this.Tables.Add(new OneButtonDataTable(ds.Tables["OneButton"]));
            }
            if ((ds.Tables["TwoButton"] != null)) {
                this.Tables.Add(new TwoButtonDataTable(ds.Tables["TwoButton"]));
            }
            if ((ds.Tables["Left"] != null)) {
                this.Tables.Add(new LeftDataTable(ds.Tables["Left"]));
            }
            if ((ds.Tables["Right"] != null)) {
                this.Tables.Add(new RightDataTable(ds.Tables["Right"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableType = ((TypeDataTable)(this.Tables["Type"]));
            if ((this.tableType != null)) {
                this.tableType.InitVars();
            }
            this.tableOneButton = ((OneButtonDataTable)(this.Tables["OneButton"]));
            if ((this.tableOneButton != null)) {
                this.tableOneButton.InitVars();
            }
            this.tableTwoButton = ((TwoButtonDataTable)(this.Tables["TwoButton"]));
            if ((this.tableTwoButton != null)) {
                this.tableTwoButton.InitVars();
            }
            this.tableLeft = ((LeftDataTable)(this.Tables["Left"]));
            if ((this.tableLeft != null)) {
                this.tableLeft.InitVars();
            }
            this.tableRight = ((RightDataTable)(this.Tables["Right"]));
            if ((this.tableRight != null)) {
                this.tableRight.InitVars();
            }
            this.relationTwoButton_Left = this.Relations["TwoButton_Left"];
            this.relationTwoButton_Right = this.Relations["TwoButton_Right"];
            this.relationType_OneButton = this.Relations["Type_OneButton"];
            this.relationType_TwoButton = this.Relations["Type_TwoButton"];
        }
        
        private void InitClass() {
            this.DataSetName = "AlertDialog";
            this.Prefix = "";
            this.Namespace = "urn:ConvertedDTDs";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableType = new TypeDataTable();
            this.Tables.Add(this.tableType);
            this.tableOneButton = new OneButtonDataTable();
            this.Tables.Add(this.tableOneButton);
            this.tableTwoButton = new TwoButtonDataTable();
            this.Tables.Add(this.tableTwoButton);
            this.tableLeft = new LeftDataTable();
            this.Tables.Add(this.tableLeft);
            this.tableRight = new RightDataTable();
            this.Tables.Add(this.tableRight);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("Type_OneButton", new DataColumn[] {
                        this.tableType.Type_IdColumn}, new DataColumn[] {
                        this.tableOneButton.Type_IdColumn});
            this.tableOneButton.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Type_TwoButton", new DataColumn[] {
                        this.tableType.Type_IdColumn}, new DataColumn[] {
                        this.tableTwoButton.Type_IdColumn});
            this.tableTwoButton.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("TwoButton_Left", new DataColumn[] {
                        this.tableTwoButton.TwoButton_IdColumn}, new DataColumn[] {
                        this.tableLeft.TwoButton_IdColumn});
            this.tableLeft.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("TwoButton_Right", new DataColumn[] {
                        this.tableTwoButton.TwoButton_IdColumn}, new DataColumn[] {
                        this.tableRight.TwoButton_IdColumn});
            this.tableRight.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationTwoButton_Left = new DataRelation("TwoButton_Left", new DataColumn[] {
                        this.tableTwoButton.TwoButton_IdColumn}, new DataColumn[] {
                        this.tableLeft.TwoButton_IdColumn}, false);
            this.relationTwoButton_Left.Nested = true;
            this.Relations.Add(this.relationTwoButton_Left);
            this.relationTwoButton_Right = new DataRelation("TwoButton_Right", new DataColumn[] {
                        this.tableTwoButton.TwoButton_IdColumn}, new DataColumn[] {
                        this.tableRight.TwoButton_IdColumn}, false);
            this.relationTwoButton_Right.Nested = true;
            this.Relations.Add(this.relationTwoButton_Right);
            this.relationType_OneButton = new DataRelation("Type_OneButton", new DataColumn[] {
                        this.tableType.Type_IdColumn}, new DataColumn[] {
                        this.tableOneButton.Type_IdColumn}, false);
            this.relationType_OneButton.Nested = true;
            this.Relations.Add(this.relationType_OneButton);
            this.relationType_TwoButton = new DataRelation("Type_TwoButton", new DataColumn[] {
                        this.tableType.Type_IdColumn}, new DataColumn[] {
                        this.tableTwoButton.Type_IdColumn}, false);
            this.relationType_TwoButton.Nested = true;
            this.Relations.Add(this.relationType_TwoButton);
        }
        
        private bool ShouldSerializeType() {
            return false;
        }
        
        private bool ShouldSerializeOneButton() {
            return false;
        }
        
        private bool ShouldSerializeTwoButton() {
            return false;
        }
        
        private bool ShouldSerializeLeft() {
            return false;
        }
        
        private bool ShouldSerializeRight() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void TypeRowChangeEventHandler(object sender, TypeRowChangeEvent e);
        
        public delegate void OneButtonRowChangeEventHandler(object sender, OneButtonRowChangeEvent e);
        
        public delegate void TwoButtonRowChangeEventHandler(object sender, TwoButtonRowChangeEvent e);
        
        public delegate void LeftRowChangeEventHandler(object sender, LeftRowChangeEvent e);
        
        public delegate void RightRowChangeEventHandler(object sender, RightRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TypeDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnType_Id;
            
            internal TypeDataTable() : 
                    base("Type") {
                this.InitClass();
            }
            
            internal TypeDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn Type_IdColumn {
                get {
                    return this.columnType_Id;
                }
            }
            
            public TypeRow this[int index] {
                get {
                    return ((TypeRow)(this.Rows[index]));
                }
            }
            
            public event TypeRowChangeEventHandler TypeRowChanged;
            
            public event TypeRowChangeEventHandler TypeRowChanging;
            
            public event TypeRowChangeEventHandler TypeRowDeleted;
            
            public event TypeRowChangeEventHandler TypeRowDeleting;
            
            public void AddTypeRow(TypeRow row) {
                this.Rows.Add(row);
            }
            
            public TypeRow AddTypeRow() {
                TypeRow rowTypeRow = ((TypeRow)(this.NewRow()));
                rowTypeRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowTypeRow);
                return rowTypeRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TypeDataTable cln = ((TypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TypeDataTable();
            }
            
            internal void InitVars() {
                this.columnType_Id = this.Columns["Type_Id"];
            }
            
            private void InitClass() {
                this.columnType_Id = new DataColumn("Type_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnType_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnType_Id}, true));
                this.columnType_Id.AutoIncrement = true;
                this.columnType_Id.AllowDBNull = false;
                this.columnType_Id.Unique = true;
            }
            
            public TypeRow NewTypeRow() {
                return ((TypeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TypeRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TypeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TypeRowChanged != null)) {
                    this.TypeRowChanged(this, new TypeRowChangeEvent(((TypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TypeRowChanging != null)) {
                    this.TypeRowChanging(this, new TypeRowChangeEvent(((TypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TypeRowDeleted != null)) {
                    this.TypeRowDeleted(this, new TypeRowChangeEvent(((TypeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TypeRowDeleting != null)) {
                    this.TypeRowDeleting(this, new TypeRowChangeEvent(((TypeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTypeRow(TypeRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TypeRow : DataRow {
            
            private TypeDataTable tableType;
            
            internal TypeRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableType = ((TypeDataTable)(this.Table));
            }
            
            public OneButtonRow[] GetOneButtonRows() {
                return ((OneButtonRow[])(this.GetChildRows(this.Table.ChildRelations["Type_OneButton"])));
            }
            
            public TwoButtonRow[] GetTwoButtonRows() {
                return ((TwoButtonRow[])(this.GetChildRows(this.Table.ChildRelations["Type_TwoButton"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TypeRowChangeEvent : EventArgs {
            
            private TypeRow eventRow;
            
            private DataRowAction eventAction;
            
            public TypeRowChangeEvent(TypeRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OneButtonDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnText;
            
            private DataColumn columnType_Id;
            
            internal OneButtonDataTable() : 
                    base("OneButton") {
                this.InitClass();
            }
            
            internal OneButtonDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TextColumn {
                get {
                    return this.columnText;
                }
            }
            
            internal DataColumn Type_IdColumn {
                get {
                    return this.columnType_Id;
                }
            }
            
            public OneButtonRow this[int index] {
                get {
                    return ((OneButtonRow)(this.Rows[index]));
                }
            }
            
            public event OneButtonRowChangeEventHandler OneButtonRowChanged;
            
            public event OneButtonRowChangeEventHandler OneButtonRowChanging;
            
            public event OneButtonRowChangeEventHandler OneButtonRowDeleted;
            
            public event OneButtonRowChangeEventHandler OneButtonRowDeleting;
            
            public void AddOneButtonRow(OneButtonRow row) {
                this.Rows.Add(row);
            }
            
            public OneButtonRow AddOneButtonRow(string Text, TypeRow parentTypeRowByType_OneButton) {
                OneButtonRow rowOneButtonRow = ((OneButtonRow)(this.NewRow()));
                rowOneButtonRow.ItemArray = new object[] {
                        Text,
                        parentTypeRowByType_OneButton[0]};
                this.Rows.Add(rowOneButtonRow);
                return rowOneButtonRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                OneButtonDataTable cln = ((OneButtonDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new OneButtonDataTable();
            }
            
            internal void InitVars() {
                this.columnText = this.Columns["Text"];
                this.columnType_Id = this.Columns["Type_Id"];
            }
            
            private void InitClass() {
                this.columnText = new DataColumn("Text", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnText);
                this.columnType_Id = new DataColumn("Type_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnType_Id);
                this.columnText.AllowDBNull = false;
                this.columnText.Namespace = "";
            }
            
            public OneButtonRow NewOneButtonRow() {
                return ((OneButtonRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new OneButtonRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(OneButtonRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OneButtonRowChanged != null)) {
                    this.OneButtonRowChanged(this, new OneButtonRowChangeEvent(((OneButtonRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OneButtonRowChanging != null)) {
                    this.OneButtonRowChanging(this, new OneButtonRowChangeEvent(((OneButtonRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OneButtonRowDeleted != null)) {
                    this.OneButtonRowDeleted(this, new OneButtonRowChangeEvent(((OneButtonRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OneButtonRowDeleting != null)) {
                    this.OneButtonRowDeleting(this, new OneButtonRowChangeEvent(((OneButtonRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveOneButtonRow(OneButtonRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OneButtonRow : DataRow {
            
            private OneButtonDataTable tableOneButton;
            
            internal OneButtonRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableOneButton = ((OneButtonDataTable)(this.Table));
            }
            
            public string Text {
                get {
                    return ((string)(this[this.tableOneButton.TextColumn]));
                }
                set {
                    this[this.tableOneButton.TextColumn] = value;
                }
            }
            
            public TypeRow TypeRow {
                get {
                    return ((TypeRow)(this.GetParentRow(this.Table.ParentRelations["Type_OneButton"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Type_OneButton"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OneButtonRowChangeEvent : EventArgs {
            
            private OneButtonRow eventRow;
            
            private DataRowAction eventAction;
            
            public OneButtonRowChangeEvent(OneButtonRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public OneButtonRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TwoButtonDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTwoButton_Id;
            
            private DataColumn columnType_Id;
            
            internal TwoButtonDataTable() : 
                    base("TwoButton") {
                this.InitClass();
            }
            
            internal TwoButtonDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TwoButton_IdColumn {
                get {
                    return this.columnTwoButton_Id;
                }
            }
            
            internal DataColumn Type_IdColumn {
                get {
                    return this.columnType_Id;
                }
            }
            
            public TwoButtonRow this[int index] {
                get {
                    return ((TwoButtonRow)(this.Rows[index]));
                }
            }
            
            public event TwoButtonRowChangeEventHandler TwoButtonRowChanged;
            
            public event TwoButtonRowChangeEventHandler TwoButtonRowChanging;
            
            public event TwoButtonRowChangeEventHandler TwoButtonRowDeleted;
            
            public event TwoButtonRowChangeEventHandler TwoButtonRowDeleting;
            
            public void AddTwoButtonRow(TwoButtonRow row) {
                this.Rows.Add(row);
            }
            
            public TwoButtonRow AddTwoButtonRow(TypeRow parentTypeRowByType_TwoButton) {
                TwoButtonRow rowTwoButtonRow = ((TwoButtonRow)(this.NewRow()));
                rowTwoButtonRow.ItemArray = new object[] {
                        null,
                        parentTypeRowByType_TwoButton[0]};
                this.Rows.Add(rowTwoButtonRow);
                return rowTwoButtonRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TwoButtonDataTable cln = ((TwoButtonDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TwoButtonDataTable();
            }
            
            internal void InitVars() {
                this.columnTwoButton_Id = this.Columns["TwoButton_Id"];
                this.columnType_Id = this.Columns["Type_Id"];
            }
            
            private void InitClass() {
                this.columnTwoButton_Id = new DataColumn("TwoButton_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTwoButton_Id);
                this.columnType_Id = new DataColumn("Type_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnType_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnTwoButton_Id}, true));
                this.columnTwoButton_Id.AutoIncrement = true;
                this.columnTwoButton_Id.AllowDBNull = false;
                this.columnTwoButton_Id.Unique = true;
            }
            
            public TwoButtonRow NewTwoButtonRow() {
                return ((TwoButtonRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TwoButtonRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TwoButtonRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TwoButtonRowChanged != null)) {
                    this.TwoButtonRowChanged(this, new TwoButtonRowChangeEvent(((TwoButtonRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TwoButtonRowChanging != null)) {
                    this.TwoButtonRowChanging(this, new TwoButtonRowChangeEvent(((TwoButtonRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TwoButtonRowDeleted != null)) {
                    this.TwoButtonRowDeleted(this, new TwoButtonRowChangeEvent(((TwoButtonRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TwoButtonRowDeleting != null)) {
                    this.TwoButtonRowDeleting(this, new TwoButtonRowChangeEvent(((TwoButtonRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTwoButtonRow(TwoButtonRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TwoButtonRow : DataRow {
            
            private TwoButtonDataTable tableTwoButton;
            
            internal TwoButtonRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTwoButton = ((TwoButtonDataTable)(this.Table));
            }
            
            public TypeRow TypeRow {
                get {
                    return ((TypeRow)(this.GetParentRow(this.Table.ParentRelations["Type_TwoButton"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Type_TwoButton"]);
                }
            }
            
            public LeftRow[] GetLeftRows() {
                return ((LeftRow[])(this.GetChildRows(this.Table.ChildRelations["TwoButton_Left"])));
            }
            
            public RightRow[] GetRightRows() {
                return ((RightRow[])(this.GetChildRows(this.Table.ChildRelations["TwoButton_Right"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TwoButtonRowChangeEvent : EventArgs {
            
            private TwoButtonRow eventRow;
            
            private DataRowAction eventAction;
            
            public TwoButtonRowChangeEvent(TwoButtonRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TwoButtonRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LeftDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnText;
            
            private DataColumn columnTwoButton_Id;
            
            internal LeftDataTable() : 
                    base("Left") {
                this.InitClass();
            }
            
            internal LeftDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TextColumn {
                get {
                    return this.columnText;
                }
            }
            
            internal DataColumn TwoButton_IdColumn {
                get {
                    return this.columnTwoButton_Id;
                }
            }
            
            public LeftRow this[int index] {
                get {
                    return ((LeftRow)(this.Rows[index]));
                }
            }
            
            public event LeftRowChangeEventHandler LeftRowChanged;
            
            public event LeftRowChangeEventHandler LeftRowChanging;
            
            public event LeftRowChangeEventHandler LeftRowDeleted;
            
            public event LeftRowChangeEventHandler LeftRowDeleting;
            
            public void AddLeftRow(LeftRow row) {
                this.Rows.Add(row);
            }
            
            public LeftRow AddLeftRow(string Text, TwoButtonRow parentTwoButtonRowByTwoButton_Left) {
                LeftRow rowLeftRow = ((LeftRow)(this.NewRow()));
                rowLeftRow.ItemArray = new object[] {
                        Text,
                        parentTwoButtonRowByTwoButton_Left[0]};
                this.Rows.Add(rowLeftRow);
                return rowLeftRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                LeftDataTable cln = ((LeftDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new LeftDataTable();
            }
            
            internal void InitVars() {
                this.columnText = this.Columns["Text"];
                this.columnTwoButton_Id = this.Columns["TwoButton_Id"];
            }
            
            private void InitClass() {
                this.columnText = new DataColumn("Text", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnText);
                this.columnTwoButton_Id = new DataColumn("TwoButton_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTwoButton_Id);
                this.columnText.AllowDBNull = false;
                this.columnText.Namespace = "";
            }
            
            public LeftRow NewLeftRow() {
                return ((LeftRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new LeftRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(LeftRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LeftRowChanged != null)) {
                    this.LeftRowChanged(this, new LeftRowChangeEvent(((LeftRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LeftRowChanging != null)) {
                    this.LeftRowChanging(this, new LeftRowChangeEvent(((LeftRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LeftRowDeleted != null)) {
                    this.LeftRowDeleted(this, new LeftRowChangeEvent(((LeftRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LeftRowDeleting != null)) {
                    this.LeftRowDeleting(this, new LeftRowChangeEvent(((LeftRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveLeftRow(LeftRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LeftRow : DataRow {
            
            private LeftDataTable tableLeft;
            
            internal LeftRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableLeft = ((LeftDataTable)(this.Table));
            }
            
            public string Text {
                get {
                    return ((string)(this[this.tableLeft.TextColumn]));
                }
                set {
                    this[this.tableLeft.TextColumn] = value;
                }
            }
            
            public TwoButtonRow TwoButtonRow {
                get {
                    return ((TwoButtonRow)(this.GetParentRow(this.Table.ParentRelations["TwoButton_Left"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TwoButton_Left"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LeftRowChangeEvent : EventArgs {
            
            private LeftRow eventRow;
            
            private DataRowAction eventAction;
            
            public LeftRowChangeEvent(LeftRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public LeftRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RightDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnText;
            
            private DataColumn columnTwoButton_Id;
            
            internal RightDataTable() : 
                    base("Right") {
                this.InitClass();
            }
            
            internal RightDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TextColumn {
                get {
                    return this.columnText;
                }
            }
            
            internal DataColumn TwoButton_IdColumn {
                get {
                    return this.columnTwoButton_Id;
                }
            }
            
            public RightRow this[int index] {
                get {
                    return ((RightRow)(this.Rows[index]));
                }
            }
            
            public event RightRowChangeEventHandler RightRowChanged;
            
            public event RightRowChangeEventHandler RightRowChanging;
            
            public event RightRowChangeEventHandler RightRowDeleted;
            
            public event RightRowChangeEventHandler RightRowDeleting;
            
            public void AddRightRow(RightRow row) {
                this.Rows.Add(row);
            }
            
            public RightRow AddRightRow(string Text, TwoButtonRow parentTwoButtonRowByTwoButton_Right) {
                RightRow rowRightRow = ((RightRow)(this.NewRow()));
                rowRightRow.ItemArray = new object[] {
                        Text,
                        parentTwoButtonRowByTwoButton_Right[0]};
                this.Rows.Add(rowRightRow);
                return rowRightRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                RightDataTable cln = ((RightDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new RightDataTable();
            }
            
            internal void InitVars() {
                this.columnText = this.Columns["Text"];
                this.columnTwoButton_Id = this.Columns["TwoButton_Id"];
            }
            
            private void InitClass() {
                this.columnText = new DataColumn("Text", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnText);
                this.columnTwoButton_Id = new DataColumn("TwoButton_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTwoButton_Id);
                this.columnText.AllowDBNull = false;
                this.columnText.Namespace = "";
            }
            
            public RightRow NewRightRow() {
                return ((RightRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new RightRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(RightRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RightRowChanged != null)) {
                    this.RightRowChanged(this, new RightRowChangeEvent(((RightRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RightRowChanging != null)) {
                    this.RightRowChanging(this, new RightRowChangeEvent(((RightRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RightRowDeleted != null)) {
                    this.RightRowDeleted(this, new RightRowChangeEvent(((RightRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RightRowDeleting != null)) {
                    this.RightRowDeleting(this, new RightRowChangeEvent(((RightRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveRightRow(RightRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RightRow : DataRow {
            
            private RightDataTable tableRight;
            
            internal RightRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableRight = ((RightDataTable)(this.Table));
            }
            
            public string Text {
                get {
                    return ((string)(this[this.tableRight.TextColumn]));
                }
                set {
                    this[this.tableRight.TextColumn] = value;
                }
            }
            
            public TwoButtonRow TwoButtonRow {
                get {
                    return ((TwoButtonRow)(this.GetParentRow(this.Table.ParentRelations["TwoButton_Right"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TwoButton_Right"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class RightRowChangeEvent : EventArgs {
            
            private RightRow eventRow;
            
            private DataRowAction eventAction;
            
            public RightRowChangeEvent(RightRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public RightRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
