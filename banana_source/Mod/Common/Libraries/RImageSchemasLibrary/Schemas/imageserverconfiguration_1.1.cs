//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace RImageSchemas.Schemas {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ImageServerConfiguration : DataSet {
        
        private ServerInfoDataTable tableServerInfo;
        
        private OptionsDataTable tableOptions;
        
        public ImageServerConfiguration() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ImageServerConfiguration(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ServerInfo"] != null)) {
                    this.Tables.Add(new ServerInfoDataTable(ds.Tables["ServerInfo"]));
                }
                if ((ds.Tables["Options"] != null)) {
                    this.Tables.Add(new OptionsDataTable(ds.Tables["Options"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServerInfoDataTable ServerInfo {
            get {
                return this.tableServerInfo;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OptionsDataTable Options {
            get {
                return this.tableOptions;
            }
        }
        
        public override DataSet Clone() {
            ImageServerConfiguration cln = ((ImageServerConfiguration)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["ServerInfo"] != null)) {
                this.Tables.Add(new ServerInfoDataTable(ds.Tables["ServerInfo"]));
            }
            if ((ds.Tables["Options"] != null)) {
                this.Tables.Add(new OptionsDataTable(ds.Tables["Options"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableServerInfo = ((ServerInfoDataTable)(this.Tables["ServerInfo"]));
            if ((this.tableServerInfo != null)) {
                this.tableServerInfo.InitVars();
            }
            this.tableOptions = ((OptionsDataTable)(this.Tables["Options"]));
            if ((this.tableOptions != null)) {
                this.tableOptions.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "ImageServerConfiguration";
            this.Prefix = "";
            this.Namespace = "";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableServerInfo = new ServerInfoDataTable();
            this.Tables.Add(this.tableServerInfo);
            this.tableOptions = new OptionsDataTable();
            this.Tables.Add(this.tableOptions);
        }
        
        private bool ShouldSerializeServerInfo() {
            return false;
        }
        
        private bool ShouldSerializeOptions() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ServerInfoRowChangeEventHandler(object sender, ServerInfoRowChangeEvent e);
        
        public delegate void OptionsRowChangeEventHandler(object sender, OptionsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerInfoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnSoftwareVersion;
            
            private DataColumn columnDescription;
            
            private DataColumn columnHostname;
            
            private DataColumn columnCluster;
            
            private DataColumn columnIsService;
            
            private DataColumn columnIsPasswordSet;
            
            private DataColumn columnSystemFolder;
            
            private DataColumn columnOSVersion;
            
            private DataColumn columnSupportsSCP;
            
            internal ServerInfoDataTable() : 
                    base("ServerInfo") {
                this.InitClass();
            }
            
            internal ServerInfoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn SoftwareVersionColumn {
                get {
                    return this.columnSoftwareVersion;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn HostnameColumn {
                get {
                    return this.columnHostname;
                }
            }
            
            internal DataColumn ClusterColumn {
                get {
                    return this.columnCluster;
                }
            }
            
            internal DataColumn IsServiceColumn {
                get {
                    return this.columnIsService;
                }
            }
            
            internal DataColumn IsPasswordSetColumn {
                get {
                    return this.columnIsPasswordSet;
                }
            }
            
            internal DataColumn SystemFolderColumn {
                get {
                    return this.columnSystemFolder;
                }
            }
            
            internal DataColumn OSVersionColumn {
                get {
                    return this.columnOSVersion;
                }
            }
            
            internal DataColumn SupportsSCPColumn {
                get {
                    return this.columnSupportsSCP;
                }
            }
            
            public ServerInfoRow this[int index] {
                get {
                    return ((ServerInfoRow)(this.Rows[index]));
                }
            }
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowChanged;
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowChanging;
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowDeleted;
            
            public event ServerInfoRowChangeEventHandler ServerInfoRowDeleting;
            
            public void AddServerInfoRow(ServerInfoRow row) {
                this.Rows.Add(row);
            }
            
            public ServerInfoRow AddServerInfoRow(string ID, string SoftwareVersion, string Description, string Hostname, string Cluster, string IsService, string IsPasswordSet, string SystemFolder, string OSVersion, string SupportsSCP) {
                ServerInfoRow rowServerInfoRow = ((ServerInfoRow)(this.NewRow()));
                rowServerInfoRow.ItemArray = new object[] {
                        ID,
                        SoftwareVersion,
                        Description,
                        Hostname,
                        Cluster,
                        IsService,
                        IsPasswordSet,
                        SystemFolder,
                        OSVersion,
                        SupportsSCP};
                this.Rows.Add(rowServerInfoRow);
                return rowServerInfoRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ServerInfoDataTable cln = ((ServerInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ServerInfoDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnSoftwareVersion = this.Columns["SoftwareVersion"];
                this.columnDescription = this.Columns["Description"];
                this.columnHostname = this.Columns["Hostname"];
                this.columnCluster = this.Columns["Cluster"];
                this.columnIsService = this.Columns["IsService"];
                this.columnIsPasswordSet = this.Columns["IsPasswordSet"];
                this.columnSystemFolder = this.Columns["SystemFolder"];
                this.columnOSVersion = this.Columns["OSVersion"];
                this.columnSupportsSCP = this.Columns["SupportsSCP"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnID);
                this.columnSoftwareVersion = new DataColumn("SoftwareVersion", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSoftwareVersion);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDescription);
                this.columnHostname = new DataColumn("Hostname", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnHostname);
                this.columnCluster = new DataColumn("Cluster", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCluster);
                this.columnIsService = new DataColumn("IsService", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnIsService);
                this.columnIsPasswordSet = new DataColumn("IsPasswordSet", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnIsPasswordSet);
                this.columnSystemFolder = new DataColumn("SystemFolder", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSystemFolder);
                this.columnOSVersion = new DataColumn("OSVersion", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOSVersion);
                this.columnSupportsSCP = new DataColumn("SupportsSCP", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSupportsSCP);
                this.columnID.AllowDBNull = false;
                this.columnID.Namespace = "";
                this.columnSoftwareVersion.AllowDBNull = false;
                this.columnSoftwareVersion.Namespace = "";
                this.columnDescription.Namespace = "";
                this.columnHostname.AllowDBNull = false;
                this.columnHostname.Namespace = "";
                this.columnCluster.AllowDBNull = false;
                this.columnCluster.Namespace = "";
                this.columnIsService.Namespace = "";
                this.columnIsService.DefaultValue = "false";
                this.columnIsPasswordSet.Namespace = "";
                this.columnIsPasswordSet.DefaultValue = "false";
                this.columnSystemFolder.AllowDBNull = false;
                this.columnSystemFolder.Namespace = "";
                this.columnOSVersion.AllowDBNull = false;
                this.columnOSVersion.Namespace = "";
                this.columnSupportsSCP.Namespace = "";
                this.columnSupportsSCP.DefaultValue = "false";
            }
            
            public ServerInfoRow NewServerInfoRow() {
                return ((ServerInfoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ServerInfoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ServerInfoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerInfoRowChanged != null)) {
                    this.ServerInfoRowChanged(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerInfoRowChanging != null)) {
                    this.ServerInfoRowChanging(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerInfoRowDeleted != null)) {
                    this.ServerInfoRowDeleted(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerInfoRowDeleting != null)) {
                    this.ServerInfoRowDeleting(this, new ServerInfoRowChangeEvent(((ServerInfoRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveServerInfoRow(ServerInfoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerInfoRow : DataRow {
            
            private ServerInfoDataTable tableServerInfo;
            
            internal ServerInfoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerInfo = ((ServerInfoDataTable)(this.Table));
            }
            
            public string ID {
                get {
                    return ((string)(this[this.tableServerInfo.IDColumn]));
                }
                set {
                    this[this.tableServerInfo.IDColumn] = value;
                }
            }
            
            public string SoftwareVersion {
                get {
                    return ((string)(this[this.tableServerInfo.SoftwareVersionColumn]));
                }
                set {
                    this[this.tableServerInfo.SoftwareVersionColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableServerInfo.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.DescriptionColumn] = value;
                }
            }
            
            public string Hostname {
                get {
                    return ((string)(this[this.tableServerInfo.HostnameColumn]));
                }
                set {
                    this[this.tableServerInfo.HostnameColumn] = value;
                }
            }
            
            public string Cluster {
                get {
                    return ((string)(this[this.tableServerInfo.ClusterColumn]));
                }
                set {
                    this[this.tableServerInfo.ClusterColumn] = value;
                }
            }
            
            public string IsService {
                get {
                    try {
                        return ((string)(this[this.tableServerInfo.IsServiceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.IsServiceColumn] = value;
                }
            }
            
            public string IsPasswordSet {
                get {
                    try {
                        return ((string)(this[this.tableServerInfo.IsPasswordSetColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.IsPasswordSetColumn] = value;
                }
            }
            
            public string SystemFolder {
                get {
                    return ((string)(this[this.tableServerInfo.SystemFolderColumn]));
                }
                set {
                    this[this.tableServerInfo.SystemFolderColumn] = value;
                }
            }
            
            public string OSVersion {
                get {
                    return ((string)(this[this.tableServerInfo.OSVersionColumn]));
                }
                set {
                    this[this.tableServerInfo.OSVersionColumn] = value;
                }
            }
            
            public string SupportsSCP {
                get {
                    try {
                        return ((string)(this[this.tableServerInfo.SupportsSCPColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerInfo.SupportsSCPColumn] = value;
                }
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableServerInfo.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableServerInfo.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsServiceNull() {
                return this.IsNull(this.tableServerInfo.IsServiceColumn);
            }
            
            public void SetIsServiceNull() {
                this[this.tableServerInfo.IsServiceColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsPasswordSetNull() {
                return this.IsNull(this.tableServerInfo.IsPasswordSetColumn);
            }
            
            public void SetIsPasswordSetNull() {
                this[this.tableServerInfo.IsPasswordSetColumn] = System.Convert.DBNull;
            }
            
            public bool IsSupportsSCPNull() {
                return this.IsNull(this.tableServerInfo.SupportsSCPColumn);
            }
            
            public void SetSupportsSCPNull() {
                this[this.tableServerInfo.SupportsSCPColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ServerInfoRowChangeEvent : EventArgs {
            
            private ServerInfoRow eventRow;
            
            private DataRowAction eventAction;
            
            public ServerInfoRowChangeEvent(ServerInfoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ServerInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OptionsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnOverwrite;
            
            private DataColumn columnWaitForSpace;
            
            internal OptionsDataTable() : 
                    base("Options") {
                this.InitClass();
            }
            
            internal OptionsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn OverwriteColumn {
                get {
                    return this.columnOverwrite;
                }
            }
            
            internal DataColumn WaitForSpaceColumn {
                get {
                    return this.columnWaitForSpace;
                }
            }
            
            public OptionsRow this[int index] {
                get {
                    return ((OptionsRow)(this.Rows[index]));
                }
            }
            
            public event OptionsRowChangeEventHandler OptionsRowChanged;
            
            public event OptionsRowChangeEventHandler OptionsRowChanging;
            
            public event OptionsRowChangeEventHandler OptionsRowDeleted;
            
            public event OptionsRowChangeEventHandler OptionsRowDeleting;
            
            public void AddOptionsRow(OptionsRow row) {
                this.Rows.Add(row);
            }
            
            public OptionsRow AddOptionsRow(string Overwrite, string WaitForSpace) {
                OptionsRow rowOptionsRow = ((OptionsRow)(this.NewRow()));
                rowOptionsRow.ItemArray = new object[] {
                        Overwrite,
                        WaitForSpace};
                this.Rows.Add(rowOptionsRow);
                return rowOptionsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                OptionsDataTable cln = ((OptionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new OptionsDataTable();
            }
            
            internal void InitVars() {
                this.columnOverwrite = this.Columns["Overwrite"];
                this.columnWaitForSpace = this.Columns["WaitForSpace"];
            }
            
            private void InitClass() {
                this.columnOverwrite = new DataColumn("Overwrite", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnOverwrite);
                this.columnWaitForSpace = new DataColumn("WaitForSpace", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnWaitForSpace);
                this.columnOverwrite.Namespace = "";
                this.columnOverwrite.DefaultValue = "true";
                this.columnWaitForSpace.Namespace = "";
            }
            
            public OptionsRow NewOptionsRow() {
                return ((OptionsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new OptionsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(OptionsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OptionsRowChanged != null)) {
                    this.OptionsRowChanged(this, new OptionsRowChangeEvent(((OptionsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OptionsRowChanging != null)) {
                    this.OptionsRowChanging(this, new OptionsRowChangeEvent(((OptionsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OptionsRowDeleted != null)) {
                    this.OptionsRowDeleted(this, new OptionsRowChangeEvent(((OptionsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OptionsRowDeleting != null)) {
                    this.OptionsRowDeleting(this, new OptionsRowChangeEvent(((OptionsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveOptionsRow(OptionsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OptionsRow : DataRow {
            
            private OptionsDataTable tableOptions;
            
            internal OptionsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableOptions = ((OptionsDataTable)(this.Table));
            }
            
            public string Overwrite {
                get {
                    try {
                        return ((string)(this[this.tableOptions.OverwriteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOptions.OverwriteColumn] = value;
                }
            }
            
            public string WaitForSpace {
                get {
                    try {
                        return ((string)(this[this.tableOptions.WaitForSpaceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOptions.WaitForSpaceColumn] = value;
                }
            }
            
            public bool IsOverwriteNull() {
                return this.IsNull(this.tableOptions.OverwriteColumn);
            }
            
            public void SetOverwriteNull() {
                this[this.tableOptions.OverwriteColumn] = System.Convert.DBNull;
            }
            
            public bool IsWaitForSpaceNull() {
                return this.IsNull(this.tableOptions.WaitForSpaceColumn);
            }
            
            public void SetWaitForSpaceNull() {
                this[this.tableOptions.WaitForSpaceColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class OptionsRowChangeEvent : EventArgs {
            
            private OptionsRow eventRow;
            
            private DataRowAction eventAction;
            
            public OptionsRowChangeEvent(OptionsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public OptionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
