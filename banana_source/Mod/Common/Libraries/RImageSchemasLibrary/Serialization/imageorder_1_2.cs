//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=1.1.4322.2032.
// 
namespace RImageSchemas.Serialization.Orders.Image {
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ImageOrder {
        
        /// <remarks/>
        public Target Target;
        
        /// <remarks/>
        public Format Format;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(typeof(EditList), IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute(typeof(ParentFolder), IsNullable=false)]
        public object[] Source;
        
        /// <remarks/>
        public Output Output;
        
        /// <remarks/>
        public Rules Rules;
        
        /// <remarks/>
        public VolumeName VolumeName;
        
        /// <remarks/>
        public PVDInfo PVDInfo;
        
        /// <remarks/>
        public Controls Controls;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string OrderId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ClientId;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Originator;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ImageOrderPriority.Normal)]
        public ImageOrderPriority Priority = ImageOrderPriority.Normal;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Target {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("DefaultImageCluster")]
        public string Cluster = "DefaultImageCluster";
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("ANY")]
        public string Server = "ANY";
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Controls {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ControlsOverwrite.@true)]
        public ControlsOverwrite Overwrite = ControlsOverwrite.@true;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string WaitForSpace;
    }
    
    /// <remarks/>
    public enum ControlsOverwrite {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class PVDInfo {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string PVDSystem;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string PVDVolumeSet;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string PVDCopyright;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string PVDPublisher;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string PVDPreparer;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string PVDApplication;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string PVDAbstract;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string PVDBibliography;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string PVDExpirationDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string PVDEffectiveDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string GMTOffset;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class VolumeName {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("No Label")]
        public string VolName = "No Label";
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("")]
        public string MacVolName = "";
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Rules {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(RulesCheckNames.@true)]
        public RulesCheckNames CheckNames = RulesCheckNames.@true;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(RulesAllowDirExt.@false)]
        public RulesAllowDirExt AllowDirExt = RulesAllowDirExt.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(RulesCheckLevels.@false)]
        public RulesCheckLevels CheckLevels = RulesCheckLevels.@false;
    }
    
    /// <remarks/>
    public enum RulesCheckNames {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum RulesAllowDirExt {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum RulesCheckLevels {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Output {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ImageFile;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(OutputType.Normal)]
        public OutputType Type = OutputType.Normal;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(OutputCDXA.@false)]
        public OutputCDXA CDXA = OutputCDXA.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(OutputPostgap.@true)]
        public OutputPostgap Postgap = OutputPostgap.@true;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(OutputSize.Item74)]
        public OutputSize Size = OutputSize.Item74;
    }
    
    /// <remarks/>
    public enum OutputType {
        
        /// <remarks/>
        Normal,
        
        /// <remarks/>
        PowerImage,
        
        /// <remarks/>
        RimageHeader,
    }
    
    /// <remarks/>
    public enum OutputCDXA {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum OutputPostgap {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum OutputSize {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("63")]
        Item63,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("74")]
        Item74,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("80")]
        Item80,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("500")]
        Item500,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class EditList {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string EditListPath;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(EditListDestination.both)]
        public EditListDestination Destination = EditListDestination.both;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DirTimeStamp;
    }
    
    /// <remarks/>
    public enum EditListDestination {
        
        /// <remarks/>
        PC,
        
        /// <remarks/>
        Mac,
        
        /// <remarks/>
        both,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class ParentFolder {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ParentFolderPath;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(ParentFolderDestination.both)]
        public ParentFolderDestination Destination = ParentFolderDestination.both;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string DirTimeStamp;
    }
    
    /// <remarks/>
    public enum ParentFolderDestination {
        
        /// <remarks/>
        PC,
        
        /// <remarks/>
        Mac,
        
        /// <remarks/>
        both,
        
        /// <remarks/>
        @default,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class FormatOptions {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(FormatOptionsForceUpperCase.@false)]
        public FormatOptionsForceUpperCase ForceUpperCase = FormatOptionsForceUpperCase.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(FormatOptionsAllowMultipleFilePaths.@true)]
        public FormatOptionsAllowMultipleFilePaths AllowMultipleFilePaths = FormatOptionsAllowMultipleFilePaths.@true;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(FormatOptionsForceDot.@true)]
        public FormatOptionsForceDot ForceDot = FormatOptionsForceDot.@true;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(FormatOptionsForceShort.@false)]
        public FormatOptionsForceShort ForceShort = FormatOptionsForceShort.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(FormatOptionsVersions.@true)]
        public FormatOptionsVersions Versions = FormatOptionsVersions.@true;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(FormatOptionsIgnoreBadFiles.@false)]
        public FormatOptionsIgnoreBadFiles IgnoreBadFiles = FormatOptionsIgnoreBadFiles.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(FormatOptionsCaseSensitive.@false)]
        public FormatOptionsCaseSensitive CaseSensitive = FormatOptionsCaseSensitive.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(FormatOptionsZip.@false)]
        public FormatOptionsZip Zip = FormatOptionsZip.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(FormatOptionsAllowBootableCD.@true)]
        public FormatOptionsAllowBootableCD AllowBootableCD = FormatOptionsAllowBootableCD.@true;
    }
    
    /// <remarks/>
    public enum FormatOptionsForceUpperCase {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum FormatOptionsAllowMultipleFilePaths {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum FormatOptionsForceDot {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum FormatOptionsForceShort {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum FormatOptionsVersions {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum FormatOptionsIgnoreBadFiles {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum FormatOptionsCaseSensitive {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum FormatOptionsZip {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum FormatOptionsAllowBootableCD {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class PCMACFormat {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(PCMACFormatISO.Item2)]
        public PCMACFormatISO ISO = PCMACFormatISO.Item2;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(PCMACFormatVCDSlides.@false)]
        public PCMACFormatVCDSlides VCDSlides = PCMACFormatVCDSlides.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(PCMACFormatApple.none)]
        public PCMACFormatApple Apple = PCMACFormatApple.none;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(PCMACFormatJoliet.@false)]
        public PCMACFormatJoliet Joliet = PCMACFormatJoliet.@false;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(PCMACFormatRockridge.@false)]
        public PCMACFormatRockridge Rockridge = PCMACFormatRockridge.@false;
    }
    
    /// <remarks/>
    public enum PCMACFormatISO {
        
        /// <remarks/>
        none,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
    }
    
    /// <remarks/>
    public enum PCMACFormatVCDSlides {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum PCMACFormatApple {
        
        /// <remarks/>
        none,
        
        /// <remarks/>
        HFS,
        
        /// <remarks/>
        ISOExt,
    }
    
    /// <remarks/>
    public enum PCMACFormatJoliet {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    public enum PCMACFormatRockridge {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class UDFFormat {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(UDFFormatUDF.Item102ISO)]
        public UDFFormatUDF UDF = UDFFormatUDF.Item102ISO;
    }
    
    /// <remarks/>
    public enum UDFFormatUDF {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("102ISO")]
        Item102ISO,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("150")]
        Item150,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("150_Unicode")]
        Item150_Unicode,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Format {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("UDFFormat", typeof(UDFFormat))]
        [System.Xml.Serialization.XmlElementAttribute("PCMACFormat", typeof(PCMACFormat))]
        public object Item;
        
        /// <remarks/>
        public FormatOptions FormatOptions;
    }
    
    /// <remarks/>
    public enum ImageOrderPriority {
        
        /// <remarks/>
        Low,
        
        /// <remarks/>
        Normal,
        
        /// <remarks/>
        High,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public class Source {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("EditList", typeof(EditList))]
        [System.Xml.Serialization.XmlElementAttribute("ParentFolder", typeof(ParentFolder))]
        public object[] Items;
    }
}
